syntax = "proto3";

package jumpServer.v1;

option go_package = "github.com/StartOpsz/jumpServer/api/jumpServer/v1;v1";

import "validate/validate.proto";

service jumpServer {
  //
  rpc AddUserPublicKey (AddUserPublicKeyReq) returns (AddUserPublicKeyReply) {};
  rpc UpdateUserPublicKey (UpdateUserPublicKeyReq) returns (UpdateUserPublicKeyReply) {};
  rpc GetUserPublicKey (GetUserPublicKeyReq) returns (GetUserPublicKeyReply) {};
  rpc DelUserPublicKey (DelUserPublicKeyReq) returns (DelUserPublicKeyReply) {};
  //
  rpc GeneratePrivateKey (GeneratePrivateKeyReq) returns (GeneratePrivateKeyReply) {};
  rpc ListPrivateKey (ListPrivateKeyReq) returns (ListPrivateKeyReply) {};
  rpc GetPrivateKey (GetPrivateKeyReq) returns (GetPrivateKeyReply) {};
  rpc DelPrivateKey (DelPrivateKeyReq) returns (DelPrivateKeyReply) {};
  //
  rpc AddDomain (AddDomainReq) returns (AddDomainReply) {};
  rpc ListDomain (ListDomainReq) returns (ListDomainReply) {}
  //
  rpc AddHost (AddHostReq) returns (AddHostReply) {};
  rpc ListHost (ListHostReq) returns (ListHostReply) {};
  rpc DelHost (DelHostReq) returns (DelHostReply) {};
}
//
message AddUserPublicKeyReq {
  string userUuid = 1 [(validate.rules).string.min_len = 1];
  string username = 2 [(validate.rules).string.min_len = 1];
  string publicKey = 3 [(validate.rules).string.min_len = 1];
}
message AddUserPublicKeyReply {
  bool result = 1;
}
//
message UpdateUserPublicKeyReq {
  string userUuid = 1 [(validate.rules).string.min_len = 1];
  string publicKey = 3 [(validate.rules).string.min_len = 1];
}
message UpdateUserPublicKeyReply {
  bool result = 1;
}
//
message GetUserPublicKeyReq {
  string userUuid = 1;
}
message GetUserPublicKeyReply {
  string publicKey = 2;
  int64 createTime = 3;
}
//
message DelUserPublicKeyReq {
  string userUuid = 1 [(validate.rules).string.min_len = 1];
}
message DelUserPublicKeyReply {
  bool result = 1;
}
//
message GeneratePrivateKeyReq {
  string name = 1 [(validate.rules).string.min_len = 1];
  string passphrase = 2;
}
message GeneratePrivateKeyReply {
  bool result = 1;
}
//
message ListPrivateKeyReq {
}
message ListPrivateKeyReply {
  repeated PrivateKey privateKey = 1;
  message PrivateKey {
    string uuid = 1;
    string name = 2;
    string privateKey = 3;
    string publicKey = 4;
    bool hasPassphrase = 5;
    int64 createTime = 6;
  }
}
//
message GetPrivateKeyReq {
  string uuid = 1 [(validate.rules).string.min_len = 1];
}
message GetPrivateKeyReply {
  string uuid = 1;
  string name = 2;
  string privateKey = 3;
  string publicKey = 4;
  bool hasPassphrase = 5;
  int64 createTime = 6;
}
//
message DelPrivateKeyReq {
  string uuid = 1 [(validate.rules).string.min_len = 1];
}
message DelPrivateKeyReply {
  bool result = 1;
}
//
message AddDomainReq {
  string name = 1 [(validate.rules).string.min_len = 1];
  string privateKeyUuid = 2 [(validate.rules).string.min_len = 1];
}
message AddDomainReply {
  bool result = 1;
}
message ListDomainReq {

}
message ListDomainReply {
  repeated Domain domains = 1;
  message Domain {
    string uuid =1;
    string name = 2;
    string privateKeyUuid = 3;
  }
}
//
message AddHostReq {
  string name = 1 [(validate.rules).string.min_len = 1];
  string ipAddr = 3 [(validate.rules).string.min_len = 1];
  int32 port = 4;
  string domainUuid = 2 [(validate.rules).string.min_len = 1];
}
message AddHostReply {
  bool result = 1;
}
message ListHostReq {
  string domainUuid = 1;
}
message ListHostReply {
  repeated Host hosts  = 1;
  message Host {
    string uuid = 1;
    string domainUuid = 2;
    string hostname = 3;
    string ipAddr = 4;
    int32 sshPort = 5;
    int64 createTime = 6;
  }
}
message DelHostReq {
  string uuid = 1;
}
message DelHostReply {
  bool result = 1;
}