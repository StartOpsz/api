// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.14.0
// source: jumpServer/v1/jumpServer.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	JumpServer_AddUserPublicKey_FullMethodName    = "/jumpServer.v1.jumpServer/AddUserPublicKey"
	JumpServer_UpdateUserPublicKey_FullMethodName = "/jumpServer.v1.jumpServer/UpdateUserPublicKey"
	JumpServer_DelUserPublicKey_FullMethodName    = "/jumpServer.v1.jumpServer/DelUserPublicKey"
	JumpServer_GeneratePrivateKey_FullMethodName  = "/jumpServer.v1.jumpServer/GeneratePrivateKey"
	JumpServer_ListPrivateKey_FullMethodName      = "/jumpServer.v1.jumpServer/ListPrivateKey"
	JumpServer_GetPrivateKey_FullMethodName       = "/jumpServer.v1.jumpServer/GetPrivateKey"
	JumpServer_DelPrivateKey_FullMethodName       = "/jumpServer.v1.jumpServer/DelPrivateKey"
	JumpServer_AddDomain_FullMethodName           = "/jumpServer.v1.jumpServer/AddDomain"
	JumpServer_ListDomain_FullMethodName          = "/jumpServer.v1.jumpServer/ListDomain"
	JumpServer_AddHost_FullMethodName             = "/jumpServer.v1.jumpServer/AddHost"
	JumpServer_ListHost_FullMethodName            = "/jumpServer.v1.jumpServer/ListHost"
	JumpServer_DelHost_FullMethodName             = "/jumpServer.v1.jumpServer/DelHost"
)

// JumpServerClient is the client API for JumpServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JumpServerClient interface {
	//
	AddUserPublicKey(ctx context.Context, in *AddUserPublicKeyReq, opts ...grpc.CallOption) (*AddUserPublicKeyReply, error)
	UpdateUserPublicKey(ctx context.Context, in *UpdateUserPublicKeyReq, opts ...grpc.CallOption) (*UpdateUserPublicKeyReply, error)
	DelUserPublicKey(ctx context.Context, in *DelUserPublicKeyReq, opts ...grpc.CallOption) (*DelUserPublicKeyReply, error)
	//
	GeneratePrivateKey(ctx context.Context, in *GeneratePrivateKeyReq, opts ...grpc.CallOption) (*GeneratePrivateKeyReply, error)
	ListPrivateKey(ctx context.Context, in *ListPrivateKeyReq, opts ...grpc.CallOption) (*ListPrivateKeyReply, error)
	GetPrivateKey(ctx context.Context, in *GetPrivateKeyReq, opts ...grpc.CallOption) (*GetPrivateKeyReply, error)
	DelPrivateKey(ctx context.Context, in *DelPrivateKeyReq, opts ...grpc.CallOption) (*DelPrivateKeyReply, error)
	//
	AddDomain(ctx context.Context, in *AddDomainReq, opts ...grpc.CallOption) (*AddDomainReply, error)
	ListDomain(ctx context.Context, in *ListDomainReq, opts ...grpc.CallOption) (*ListDomainReply, error)
	//
	AddHost(ctx context.Context, in *AddHostReq, opts ...grpc.CallOption) (*AddHostReply, error)
	ListHost(ctx context.Context, in *ListHostReq, opts ...grpc.CallOption) (*ListHostReply, error)
	DelHost(ctx context.Context, in *DelHostReq, opts ...grpc.CallOption) (*DelHostReply, error)
}

type jumpServerClient struct {
	cc grpc.ClientConnInterface
}

func NewJumpServerClient(cc grpc.ClientConnInterface) JumpServerClient {
	return &jumpServerClient{cc}
}

func (c *jumpServerClient) AddUserPublicKey(ctx context.Context, in *AddUserPublicKeyReq, opts ...grpc.CallOption) (*AddUserPublicKeyReply, error) {
	out := new(AddUserPublicKeyReply)
	err := c.cc.Invoke(ctx, JumpServer_AddUserPublicKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jumpServerClient) UpdateUserPublicKey(ctx context.Context, in *UpdateUserPublicKeyReq, opts ...grpc.CallOption) (*UpdateUserPublicKeyReply, error) {
	out := new(UpdateUserPublicKeyReply)
	err := c.cc.Invoke(ctx, JumpServer_UpdateUserPublicKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jumpServerClient) DelUserPublicKey(ctx context.Context, in *DelUserPublicKeyReq, opts ...grpc.CallOption) (*DelUserPublicKeyReply, error) {
	out := new(DelUserPublicKeyReply)
	err := c.cc.Invoke(ctx, JumpServer_DelUserPublicKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jumpServerClient) GeneratePrivateKey(ctx context.Context, in *GeneratePrivateKeyReq, opts ...grpc.CallOption) (*GeneratePrivateKeyReply, error) {
	out := new(GeneratePrivateKeyReply)
	err := c.cc.Invoke(ctx, JumpServer_GeneratePrivateKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jumpServerClient) ListPrivateKey(ctx context.Context, in *ListPrivateKeyReq, opts ...grpc.CallOption) (*ListPrivateKeyReply, error) {
	out := new(ListPrivateKeyReply)
	err := c.cc.Invoke(ctx, JumpServer_ListPrivateKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jumpServerClient) GetPrivateKey(ctx context.Context, in *GetPrivateKeyReq, opts ...grpc.CallOption) (*GetPrivateKeyReply, error) {
	out := new(GetPrivateKeyReply)
	err := c.cc.Invoke(ctx, JumpServer_GetPrivateKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jumpServerClient) DelPrivateKey(ctx context.Context, in *DelPrivateKeyReq, opts ...grpc.CallOption) (*DelPrivateKeyReply, error) {
	out := new(DelPrivateKeyReply)
	err := c.cc.Invoke(ctx, JumpServer_DelPrivateKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jumpServerClient) AddDomain(ctx context.Context, in *AddDomainReq, opts ...grpc.CallOption) (*AddDomainReply, error) {
	out := new(AddDomainReply)
	err := c.cc.Invoke(ctx, JumpServer_AddDomain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jumpServerClient) ListDomain(ctx context.Context, in *ListDomainReq, opts ...grpc.CallOption) (*ListDomainReply, error) {
	out := new(ListDomainReply)
	err := c.cc.Invoke(ctx, JumpServer_ListDomain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jumpServerClient) AddHost(ctx context.Context, in *AddHostReq, opts ...grpc.CallOption) (*AddHostReply, error) {
	out := new(AddHostReply)
	err := c.cc.Invoke(ctx, JumpServer_AddHost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jumpServerClient) ListHost(ctx context.Context, in *ListHostReq, opts ...grpc.CallOption) (*ListHostReply, error) {
	out := new(ListHostReply)
	err := c.cc.Invoke(ctx, JumpServer_ListHost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jumpServerClient) DelHost(ctx context.Context, in *DelHostReq, opts ...grpc.CallOption) (*DelHostReply, error) {
	out := new(DelHostReply)
	err := c.cc.Invoke(ctx, JumpServer_DelHost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JumpServerServer is the server API for JumpServer service.
// All implementations must embed UnimplementedJumpServerServer
// for forward compatibility
type JumpServerServer interface {
	//
	AddUserPublicKey(context.Context, *AddUserPublicKeyReq) (*AddUserPublicKeyReply, error)
	UpdateUserPublicKey(context.Context, *UpdateUserPublicKeyReq) (*UpdateUserPublicKeyReply, error)
	DelUserPublicKey(context.Context, *DelUserPublicKeyReq) (*DelUserPublicKeyReply, error)
	//
	GeneratePrivateKey(context.Context, *GeneratePrivateKeyReq) (*GeneratePrivateKeyReply, error)
	ListPrivateKey(context.Context, *ListPrivateKeyReq) (*ListPrivateKeyReply, error)
	GetPrivateKey(context.Context, *GetPrivateKeyReq) (*GetPrivateKeyReply, error)
	DelPrivateKey(context.Context, *DelPrivateKeyReq) (*DelPrivateKeyReply, error)
	//
	AddDomain(context.Context, *AddDomainReq) (*AddDomainReply, error)
	ListDomain(context.Context, *ListDomainReq) (*ListDomainReply, error)
	//
	AddHost(context.Context, *AddHostReq) (*AddHostReply, error)
	ListHost(context.Context, *ListHostReq) (*ListHostReply, error)
	DelHost(context.Context, *DelHostReq) (*DelHostReply, error)
	mustEmbedUnimplementedJumpServerServer()
}

// UnimplementedJumpServerServer must be embedded to have forward compatible implementations.
type UnimplementedJumpServerServer struct {
}

func (UnimplementedJumpServerServer) AddUserPublicKey(context.Context, *AddUserPublicKeyReq) (*AddUserPublicKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserPublicKey not implemented")
}
func (UnimplementedJumpServerServer) UpdateUserPublicKey(context.Context, *UpdateUserPublicKeyReq) (*UpdateUserPublicKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPublicKey not implemented")
}
func (UnimplementedJumpServerServer) DelUserPublicKey(context.Context, *DelUserPublicKeyReq) (*DelUserPublicKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUserPublicKey not implemented")
}
func (UnimplementedJumpServerServer) GeneratePrivateKey(context.Context, *GeneratePrivateKeyReq) (*GeneratePrivateKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeneratePrivateKey not implemented")
}
func (UnimplementedJumpServerServer) ListPrivateKey(context.Context, *ListPrivateKeyReq) (*ListPrivateKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPrivateKey not implemented")
}
func (UnimplementedJumpServerServer) GetPrivateKey(context.Context, *GetPrivateKeyReq) (*GetPrivateKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrivateKey not implemented")
}
func (UnimplementedJumpServerServer) DelPrivateKey(context.Context, *DelPrivateKeyReq) (*DelPrivateKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelPrivateKey not implemented")
}
func (UnimplementedJumpServerServer) AddDomain(context.Context, *AddDomainReq) (*AddDomainReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDomain not implemented")
}
func (UnimplementedJumpServerServer) ListDomain(context.Context, *ListDomainReq) (*ListDomainReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDomain not implemented")
}
func (UnimplementedJumpServerServer) AddHost(context.Context, *AddHostReq) (*AddHostReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHost not implemented")
}
func (UnimplementedJumpServerServer) ListHost(context.Context, *ListHostReq) (*ListHostReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHost not implemented")
}
func (UnimplementedJumpServerServer) DelHost(context.Context, *DelHostReq) (*DelHostReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelHost not implemented")
}
func (UnimplementedJumpServerServer) mustEmbedUnimplementedJumpServerServer() {}

// UnsafeJumpServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JumpServerServer will
// result in compilation errors.
type UnsafeJumpServerServer interface {
	mustEmbedUnimplementedJumpServerServer()
}

func RegisterJumpServerServer(s grpc.ServiceRegistrar, srv JumpServerServer) {
	s.RegisterService(&JumpServer_ServiceDesc, srv)
}

func _JumpServer_AddUserPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserPublicKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JumpServerServer).AddUserPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JumpServer_AddUserPublicKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JumpServerServer).AddUserPublicKey(ctx, req.(*AddUserPublicKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JumpServer_UpdateUserPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPublicKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JumpServerServer).UpdateUserPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JumpServer_UpdateUserPublicKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JumpServerServer).UpdateUserPublicKey(ctx, req.(*UpdateUserPublicKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JumpServer_DelUserPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelUserPublicKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JumpServerServer).DelUserPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JumpServer_DelUserPublicKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JumpServerServer).DelUserPublicKey(ctx, req.(*DelUserPublicKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JumpServer_GeneratePrivateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeneratePrivateKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JumpServerServer).GeneratePrivateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JumpServer_GeneratePrivateKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JumpServerServer).GeneratePrivateKey(ctx, req.(*GeneratePrivateKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JumpServer_ListPrivateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPrivateKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JumpServerServer).ListPrivateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JumpServer_ListPrivateKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JumpServerServer).ListPrivateKey(ctx, req.(*ListPrivateKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JumpServer_GetPrivateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPrivateKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JumpServerServer).GetPrivateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JumpServer_GetPrivateKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JumpServerServer).GetPrivateKey(ctx, req.(*GetPrivateKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JumpServer_DelPrivateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelPrivateKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JumpServerServer).DelPrivateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JumpServer_DelPrivateKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JumpServerServer).DelPrivateKey(ctx, req.(*DelPrivateKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JumpServer_AddDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDomainReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JumpServerServer).AddDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JumpServer_AddDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JumpServerServer).AddDomain(ctx, req.(*AddDomainReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JumpServer_ListDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDomainReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JumpServerServer).ListDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JumpServer_ListDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JumpServerServer).ListDomain(ctx, req.(*ListDomainReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JumpServer_AddHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JumpServerServer).AddHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JumpServer_AddHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JumpServerServer).AddHost(ctx, req.(*AddHostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JumpServer_ListHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JumpServerServer).ListHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JumpServer_ListHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JumpServerServer).ListHost(ctx, req.(*ListHostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JumpServer_DelHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelHostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JumpServerServer).DelHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JumpServer_DelHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JumpServerServer).DelHost(ctx, req.(*DelHostReq))
	}
	return interceptor(ctx, in, info, handler)
}

// JumpServer_ServiceDesc is the grpc.ServiceDesc for JumpServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JumpServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jumpServer.v1.jumpServer",
	HandlerType: (*JumpServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUserPublicKey",
			Handler:    _JumpServer_AddUserPublicKey_Handler,
		},
		{
			MethodName: "UpdateUserPublicKey",
			Handler:    _JumpServer_UpdateUserPublicKey_Handler,
		},
		{
			MethodName: "DelUserPublicKey",
			Handler:    _JumpServer_DelUserPublicKey_Handler,
		},
		{
			MethodName: "GeneratePrivateKey",
			Handler:    _JumpServer_GeneratePrivateKey_Handler,
		},
		{
			MethodName: "ListPrivateKey",
			Handler:    _JumpServer_ListPrivateKey_Handler,
		},
		{
			MethodName: "GetPrivateKey",
			Handler:    _JumpServer_GetPrivateKey_Handler,
		},
		{
			MethodName: "DelPrivateKey",
			Handler:    _JumpServer_DelPrivateKey_Handler,
		},
		{
			MethodName: "AddDomain",
			Handler:    _JumpServer_AddDomain_Handler,
		},
		{
			MethodName: "ListDomain",
			Handler:    _JumpServer_ListDomain_Handler,
		},
		{
			MethodName: "AddHost",
			Handler:    _JumpServer_AddHost_Handler,
		},
		{
			MethodName: "ListHost",
			Handler:    _JumpServer_ListHost_Handler,
		},
		{
			MethodName: "DelHost",
			Handler:    _JumpServer_DelHost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "jumpServer/v1/jumpServer.proto",
}
