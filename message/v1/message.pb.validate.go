// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/message/v1/message.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SendLoginVerifyCodeMessageReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendLoginVerifyCodeMessageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendLoginVerifyCodeMessageReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendLoginVerifyCodeMessageReqMultiError, or nil if none found.
func (m *SendLoginVerifyCodeMessageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendLoginVerifyCodeMessageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PhoneNumber

	if len(errors) > 0 {
		return SendLoginVerifyCodeMessageReqMultiError(errors)
	}

	return nil
}

// SendLoginVerifyCodeMessageReqMultiError is an error wrapping multiple
// validation errors returned by SendLoginVerifyCodeMessageReq.ValidateAll()
// if the designated constraints aren't met.
type SendLoginVerifyCodeMessageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendLoginVerifyCodeMessageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendLoginVerifyCodeMessageReqMultiError) AllErrors() []error { return m }

// SendLoginVerifyCodeMessageReqValidationError is the validation error
// returned by SendLoginVerifyCodeMessageReq.Validate if the designated
// constraints aren't met.
type SendLoginVerifyCodeMessageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendLoginVerifyCodeMessageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendLoginVerifyCodeMessageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendLoginVerifyCodeMessageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendLoginVerifyCodeMessageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendLoginVerifyCodeMessageReqValidationError) ErrorName() string {
	return "SendLoginVerifyCodeMessageReqValidationError"
}

// Error satisfies the builtin error interface
func (e SendLoginVerifyCodeMessageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendLoginVerifyCodeMessageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendLoginVerifyCodeMessageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendLoginVerifyCodeMessageReqValidationError{}

// Validate checks the field values on SendLoginVerifyCodeMessageReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendLoginVerifyCodeMessageReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendLoginVerifyCodeMessageReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendLoginVerifyCodeMessageReplyMultiError, or nil if none found.
func (m *SendLoginVerifyCodeMessageReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SendLoginVerifyCodeMessageReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return SendLoginVerifyCodeMessageReplyMultiError(errors)
	}

	return nil
}

// SendLoginVerifyCodeMessageReplyMultiError is an error wrapping multiple
// validation errors returned by SendLoginVerifyCodeMessageReply.ValidateAll()
// if the designated constraints aren't met.
type SendLoginVerifyCodeMessageReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendLoginVerifyCodeMessageReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendLoginVerifyCodeMessageReplyMultiError) AllErrors() []error { return m }

// SendLoginVerifyCodeMessageReplyValidationError is the validation error
// returned by SendLoginVerifyCodeMessageReply.Validate if the designated
// constraints aren't met.
type SendLoginVerifyCodeMessageReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendLoginVerifyCodeMessageReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendLoginVerifyCodeMessageReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendLoginVerifyCodeMessageReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendLoginVerifyCodeMessageReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendLoginVerifyCodeMessageReplyValidationError) ErrorName() string {
	return "SendLoginVerifyCodeMessageReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SendLoginVerifyCodeMessageReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendLoginVerifyCodeMessageReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendLoginVerifyCodeMessageReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendLoginVerifyCodeMessageReplyValidationError{}

// Validate checks the field values on GetLoginVerifyCodeMessageReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLoginVerifyCodeMessageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLoginVerifyCodeMessageReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLoginVerifyCodeMessageReqMultiError, or nil if none found.
func (m *GetLoginVerifyCodeMessageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLoginVerifyCodeMessageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PhoneNumber

	// no validation rules for VerifyCode

	if len(errors) > 0 {
		return GetLoginVerifyCodeMessageReqMultiError(errors)
	}

	return nil
}

// GetLoginVerifyCodeMessageReqMultiError is an error wrapping multiple
// validation errors returned by GetLoginVerifyCodeMessageReq.ValidateAll() if
// the designated constraints aren't met.
type GetLoginVerifyCodeMessageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLoginVerifyCodeMessageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLoginVerifyCodeMessageReqMultiError) AllErrors() []error { return m }

// GetLoginVerifyCodeMessageReqValidationError is the validation error returned
// by GetLoginVerifyCodeMessageReq.Validate if the designated constraints
// aren't met.
type GetLoginVerifyCodeMessageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLoginVerifyCodeMessageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLoginVerifyCodeMessageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLoginVerifyCodeMessageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLoginVerifyCodeMessageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLoginVerifyCodeMessageReqValidationError) ErrorName() string {
	return "GetLoginVerifyCodeMessageReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetLoginVerifyCodeMessageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLoginVerifyCodeMessageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLoginVerifyCodeMessageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLoginVerifyCodeMessageReqValidationError{}

// Validate checks the field values on GetLoginVerifyCodeMessageReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLoginVerifyCodeMessageReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLoginVerifyCodeMessageReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetLoginVerifyCodeMessageReplyMultiError, or nil if none found.
func (m *GetLoginVerifyCodeMessageReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLoginVerifyCodeMessageReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return GetLoginVerifyCodeMessageReplyMultiError(errors)
	}

	return nil
}

// GetLoginVerifyCodeMessageReplyMultiError is an error wrapping multiple
// validation errors returned by GetLoginVerifyCodeMessageReply.ValidateAll()
// if the designated constraints aren't met.
type GetLoginVerifyCodeMessageReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLoginVerifyCodeMessageReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLoginVerifyCodeMessageReplyMultiError) AllErrors() []error { return m }

// GetLoginVerifyCodeMessageReplyValidationError is the validation error
// returned by GetLoginVerifyCodeMessageReply.Validate if the designated
// constraints aren't met.
type GetLoginVerifyCodeMessageReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLoginVerifyCodeMessageReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLoginVerifyCodeMessageReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLoginVerifyCodeMessageReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLoginVerifyCodeMessageReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLoginVerifyCodeMessageReplyValidationError) ErrorName() string {
	return "GetLoginVerifyCodeMessageReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetLoginVerifyCodeMessageReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLoginVerifyCodeMessageReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLoginVerifyCodeMessageReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLoginVerifyCodeMessageReplyValidationError{}

// Validate checks the field values on SendRegisterVerifyCodeMessageReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SendRegisterVerifyCodeMessageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendRegisterVerifyCodeMessageReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendRegisterVerifyCodeMessageReqMultiError, or nil if none found.
func (m *SendRegisterVerifyCodeMessageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendRegisterVerifyCodeMessageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PhoneNumber

	if len(errors) > 0 {
		return SendRegisterVerifyCodeMessageReqMultiError(errors)
	}

	return nil
}

// SendRegisterVerifyCodeMessageReqMultiError is an error wrapping multiple
// validation errors returned by
// SendRegisterVerifyCodeMessageReq.ValidateAll() if the designated
// constraints aren't met.
type SendRegisterVerifyCodeMessageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendRegisterVerifyCodeMessageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendRegisterVerifyCodeMessageReqMultiError) AllErrors() []error { return m }

// SendRegisterVerifyCodeMessageReqValidationError is the validation error
// returned by SendRegisterVerifyCodeMessageReq.Validate if the designated
// constraints aren't met.
type SendRegisterVerifyCodeMessageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendRegisterVerifyCodeMessageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendRegisterVerifyCodeMessageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendRegisterVerifyCodeMessageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendRegisterVerifyCodeMessageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendRegisterVerifyCodeMessageReqValidationError) ErrorName() string {
	return "SendRegisterVerifyCodeMessageReqValidationError"
}

// Error satisfies the builtin error interface
func (e SendRegisterVerifyCodeMessageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendRegisterVerifyCodeMessageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendRegisterVerifyCodeMessageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendRegisterVerifyCodeMessageReqValidationError{}

// Validate checks the field values on SendRegisterVerifyCodeMessageReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SendRegisterVerifyCodeMessageReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendRegisterVerifyCodeMessageReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SendRegisterVerifyCodeMessageReplyMultiError, or nil if none found.
func (m *SendRegisterVerifyCodeMessageReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SendRegisterVerifyCodeMessageReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return SendRegisterVerifyCodeMessageReplyMultiError(errors)
	}

	return nil
}

// SendRegisterVerifyCodeMessageReplyMultiError is an error wrapping multiple
// validation errors returned by
// SendRegisterVerifyCodeMessageReply.ValidateAll() if the designated
// constraints aren't met.
type SendRegisterVerifyCodeMessageReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendRegisterVerifyCodeMessageReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendRegisterVerifyCodeMessageReplyMultiError) AllErrors() []error { return m }

// SendRegisterVerifyCodeMessageReplyValidationError is the validation error
// returned by SendRegisterVerifyCodeMessageReply.Validate if the designated
// constraints aren't met.
type SendRegisterVerifyCodeMessageReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendRegisterVerifyCodeMessageReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendRegisterVerifyCodeMessageReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendRegisterVerifyCodeMessageReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendRegisterVerifyCodeMessageReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendRegisterVerifyCodeMessageReplyValidationError) ErrorName() string {
	return "SendRegisterVerifyCodeMessageReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SendRegisterVerifyCodeMessageReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendRegisterVerifyCodeMessageReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendRegisterVerifyCodeMessageReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendRegisterVerifyCodeMessageReplyValidationError{}

// Validate checks the field values on GetRegisterVerifyCodeMessageReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRegisterVerifyCodeMessageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRegisterVerifyCodeMessageReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetRegisterVerifyCodeMessageReqMultiError, or nil if none found.
func (m *GetRegisterVerifyCodeMessageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRegisterVerifyCodeMessageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PhoneNumber

	// no validation rules for VerifyCode

	if len(errors) > 0 {
		return GetRegisterVerifyCodeMessageReqMultiError(errors)
	}

	return nil
}

// GetRegisterVerifyCodeMessageReqMultiError is an error wrapping multiple
// validation errors returned by GetRegisterVerifyCodeMessageReq.ValidateAll()
// if the designated constraints aren't met.
type GetRegisterVerifyCodeMessageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRegisterVerifyCodeMessageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRegisterVerifyCodeMessageReqMultiError) AllErrors() []error { return m }

// GetRegisterVerifyCodeMessageReqValidationError is the validation error
// returned by GetRegisterVerifyCodeMessageReq.Validate if the designated
// constraints aren't met.
type GetRegisterVerifyCodeMessageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRegisterVerifyCodeMessageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRegisterVerifyCodeMessageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRegisterVerifyCodeMessageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRegisterVerifyCodeMessageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRegisterVerifyCodeMessageReqValidationError) ErrorName() string {
	return "GetRegisterVerifyCodeMessageReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetRegisterVerifyCodeMessageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRegisterVerifyCodeMessageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRegisterVerifyCodeMessageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRegisterVerifyCodeMessageReqValidationError{}

// Validate checks the field values on GetRegisterVerifyCodeMessageReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetRegisterVerifyCodeMessageReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRegisterVerifyCodeMessageReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetRegisterVerifyCodeMessageReplyMultiError, or nil if none found.
func (m *GetRegisterVerifyCodeMessageReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRegisterVerifyCodeMessageReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return GetRegisterVerifyCodeMessageReplyMultiError(errors)
	}

	return nil
}

// GetRegisterVerifyCodeMessageReplyMultiError is an error wrapping multiple
// validation errors returned by
// GetRegisterVerifyCodeMessageReply.ValidateAll() if the designated
// constraints aren't met.
type GetRegisterVerifyCodeMessageReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRegisterVerifyCodeMessageReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRegisterVerifyCodeMessageReplyMultiError) AllErrors() []error { return m }

// GetRegisterVerifyCodeMessageReplyValidationError is the validation error
// returned by GetRegisterVerifyCodeMessageReply.Validate if the designated
// constraints aren't met.
type GetRegisterVerifyCodeMessageReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRegisterVerifyCodeMessageReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRegisterVerifyCodeMessageReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRegisterVerifyCodeMessageReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRegisterVerifyCodeMessageReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRegisterVerifyCodeMessageReplyValidationError) ErrorName() string {
	return "GetRegisterVerifyCodeMessageReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetRegisterVerifyCodeMessageReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRegisterVerifyCodeMessageReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRegisterVerifyCodeMessageReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRegisterVerifyCodeMessageReplyValidationError{}

// Validate checks the field values on SendModifyPasswdVerifyCodeMessageReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SendModifyPasswdVerifyCodeMessageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendModifyPasswdVerifyCodeMessageReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SendModifyPasswdVerifyCodeMessageReqMultiError, or nil if none found.
func (m *SendModifyPasswdVerifyCodeMessageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendModifyPasswdVerifyCodeMessageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PhoneNumber

	if len(errors) > 0 {
		return SendModifyPasswdVerifyCodeMessageReqMultiError(errors)
	}

	return nil
}

// SendModifyPasswdVerifyCodeMessageReqMultiError is an error wrapping multiple
// validation errors returned by
// SendModifyPasswdVerifyCodeMessageReq.ValidateAll() if the designated
// constraints aren't met.
type SendModifyPasswdVerifyCodeMessageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendModifyPasswdVerifyCodeMessageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendModifyPasswdVerifyCodeMessageReqMultiError) AllErrors() []error { return m }

// SendModifyPasswdVerifyCodeMessageReqValidationError is the validation error
// returned by SendModifyPasswdVerifyCodeMessageReq.Validate if the designated
// constraints aren't met.
type SendModifyPasswdVerifyCodeMessageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendModifyPasswdVerifyCodeMessageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendModifyPasswdVerifyCodeMessageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendModifyPasswdVerifyCodeMessageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendModifyPasswdVerifyCodeMessageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendModifyPasswdVerifyCodeMessageReqValidationError) ErrorName() string {
	return "SendModifyPasswdVerifyCodeMessageReqValidationError"
}

// Error satisfies the builtin error interface
func (e SendModifyPasswdVerifyCodeMessageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendModifyPasswdVerifyCodeMessageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendModifyPasswdVerifyCodeMessageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendModifyPasswdVerifyCodeMessageReqValidationError{}

// Validate checks the field values on SendModifyPasswdVerifyCodeMessageReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SendModifyPasswdVerifyCodeMessageReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SendModifyPasswdVerifyCodeMessageReply with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// SendModifyPasswdVerifyCodeMessageReplyMultiError, or nil if none found.
func (m *SendModifyPasswdVerifyCodeMessageReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SendModifyPasswdVerifyCodeMessageReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return SendModifyPasswdVerifyCodeMessageReplyMultiError(errors)
	}

	return nil
}

// SendModifyPasswdVerifyCodeMessageReplyMultiError is an error wrapping
// multiple validation errors returned by
// SendModifyPasswdVerifyCodeMessageReply.ValidateAll() if the designated
// constraints aren't met.
type SendModifyPasswdVerifyCodeMessageReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendModifyPasswdVerifyCodeMessageReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendModifyPasswdVerifyCodeMessageReplyMultiError) AllErrors() []error { return m }

// SendModifyPasswdVerifyCodeMessageReplyValidationError is the validation
// error returned by SendModifyPasswdVerifyCodeMessageReply.Validate if the
// designated constraints aren't met.
type SendModifyPasswdVerifyCodeMessageReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendModifyPasswdVerifyCodeMessageReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendModifyPasswdVerifyCodeMessageReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendModifyPasswdVerifyCodeMessageReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendModifyPasswdVerifyCodeMessageReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendModifyPasswdVerifyCodeMessageReplyValidationError) ErrorName() string {
	return "SendModifyPasswdVerifyCodeMessageReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SendModifyPasswdVerifyCodeMessageReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendModifyPasswdVerifyCodeMessageReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendModifyPasswdVerifyCodeMessageReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendModifyPasswdVerifyCodeMessageReplyValidationError{}

// Validate checks the field values on GetModifyPasswdVerifyCodeMessageReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetModifyPasswdVerifyCodeMessageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetModifyPasswdVerifyCodeMessageReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetModifyPasswdVerifyCodeMessageReqMultiError, or nil if none found.
func (m *GetModifyPasswdVerifyCodeMessageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetModifyPasswdVerifyCodeMessageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PhoneNumber

	// no validation rules for VerifyCode

	if len(errors) > 0 {
		return GetModifyPasswdVerifyCodeMessageReqMultiError(errors)
	}

	return nil
}

// GetModifyPasswdVerifyCodeMessageReqMultiError is an error wrapping multiple
// validation errors returned by
// GetModifyPasswdVerifyCodeMessageReq.ValidateAll() if the designated
// constraints aren't met.
type GetModifyPasswdVerifyCodeMessageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetModifyPasswdVerifyCodeMessageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetModifyPasswdVerifyCodeMessageReqMultiError) AllErrors() []error { return m }

// GetModifyPasswdVerifyCodeMessageReqValidationError is the validation error
// returned by GetModifyPasswdVerifyCodeMessageReq.Validate if the designated
// constraints aren't met.
type GetModifyPasswdVerifyCodeMessageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetModifyPasswdVerifyCodeMessageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetModifyPasswdVerifyCodeMessageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetModifyPasswdVerifyCodeMessageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetModifyPasswdVerifyCodeMessageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetModifyPasswdVerifyCodeMessageReqValidationError) ErrorName() string {
	return "GetModifyPasswdVerifyCodeMessageReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetModifyPasswdVerifyCodeMessageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetModifyPasswdVerifyCodeMessageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetModifyPasswdVerifyCodeMessageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetModifyPasswdVerifyCodeMessageReqValidationError{}

// Validate checks the field values on GetModifyPasswdVerifyCodeMessageReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetModifyPasswdVerifyCodeMessageReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetModifyPasswdVerifyCodeMessageReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetModifyPasswdVerifyCodeMessageReplyMultiError, or nil if none found.
func (m *GetModifyPasswdVerifyCodeMessageReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetModifyPasswdVerifyCodeMessageReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return GetModifyPasswdVerifyCodeMessageReplyMultiError(errors)
	}

	return nil
}

// GetModifyPasswdVerifyCodeMessageReplyMultiError is an error wrapping
// multiple validation errors returned by
// GetModifyPasswdVerifyCodeMessageReply.ValidateAll() if the designated
// constraints aren't met.
type GetModifyPasswdVerifyCodeMessageReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetModifyPasswdVerifyCodeMessageReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetModifyPasswdVerifyCodeMessageReplyMultiError) AllErrors() []error { return m }

// GetModifyPasswdVerifyCodeMessageReplyValidationError is the validation error
// returned by GetModifyPasswdVerifyCodeMessageReply.Validate if the
// designated constraints aren't met.
type GetModifyPasswdVerifyCodeMessageReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetModifyPasswdVerifyCodeMessageReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetModifyPasswdVerifyCodeMessageReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetModifyPasswdVerifyCodeMessageReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetModifyPasswdVerifyCodeMessageReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetModifyPasswdVerifyCodeMessageReplyValidationError) ErrorName() string {
	return "GetModifyPasswdVerifyCodeMessageReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetModifyPasswdVerifyCodeMessageReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetModifyPasswdVerifyCodeMessageReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetModifyPasswdVerifyCodeMessageReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetModifyPasswdVerifyCodeMessageReplyValidationError{}

// Validate checks the field values on SendAlertNotifyMessageReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendAlertNotifyMessageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendAlertNotifyMessageReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendAlertNotifyMessageReqMultiError, or nil if none found.
func (m *SendAlertNotifyMessageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendAlertNotifyMessageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgName

	// no validation rules for OrgProduct

	// no validation rules for OrgProductEnv

	// no validation rules for Status

	// no validation rules for MessageContent

	// no validation rules for PhoneNumbers

	if len(errors) > 0 {
		return SendAlertNotifyMessageReqMultiError(errors)
	}

	return nil
}

// SendAlertNotifyMessageReqMultiError is an error wrapping multiple validation
// errors returned by SendAlertNotifyMessageReq.ValidateAll() if the
// designated constraints aren't met.
type SendAlertNotifyMessageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendAlertNotifyMessageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendAlertNotifyMessageReqMultiError) AllErrors() []error { return m }

// SendAlertNotifyMessageReqValidationError is the validation error returned by
// SendAlertNotifyMessageReq.Validate if the designated constraints aren't met.
type SendAlertNotifyMessageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendAlertNotifyMessageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendAlertNotifyMessageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendAlertNotifyMessageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendAlertNotifyMessageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendAlertNotifyMessageReqValidationError) ErrorName() string {
	return "SendAlertNotifyMessageReqValidationError"
}

// Error satisfies the builtin error interface
func (e SendAlertNotifyMessageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendAlertNotifyMessageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendAlertNotifyMessageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendAlertNotifyMessageReqValidationError{}

// Validate checks the field values on SendAlertNotifyMessageReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendAlertNotifyMessageReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendAlertNotifyMessageReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendAlertNotifyMessageReplyMultiError, or nil if none found.
func (m *SendAlertNotifyMessageReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SendAlertNotifyMessageReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return SendAlertNotifyMessageReplyMultiError(errors)
	}

	return nil
}

// SendAlertNotifyMessageReplyMultiError is an error wrapping multiple
// validation errors returned by SendAlertNotifyMessageReply.ValidateAll() if
// the designated constraints aren't met.
type SendAlertNotifyMessageReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendAlertNotifyMessageReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendAlertNotifyMessageReplyMultiError) AllErrors() []error { return m }

// SendAlertNotifyMessageReplyValidationError is the validation error returned
// by SendAlertNotifyMessageReply.Validate if the designated constraints
// aren't met.
type SendAlertNotifyMessageReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendAlertNotifyMessageReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendAlertNotifyMessageReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendAlertNotifyMessageReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendAlertNotifyMessageReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendAlertNotifyMessageReplyValidationError) ErrorName() string {
	return "SendAlertNotifyMessageReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SendAlertNotifyMessageReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendAlertNotifyMessageReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendAlertNotifyMessageReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendAlertNotifyMessageReplyValidationError{}

// Validate checks the field values on SendKubernetesEventNotifyMessageReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SendKubernetesEventNotifyMessageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendKubernetesEventNotifyMessageReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SendKubernetesEventNotifyMessageReqMultiError, or nil if none found.
func (m *SendKubernetesEventNotifyMessageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendKubernetesEventNotifyMessageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgName

	// no validation rules for OrgProduct

	// no validation rules for OrgProductEnv

	// no validation rules for ClusterName

	// no validation rules for Event

	// no validation rules for PhoneNumbers

	if len(errors) > 0 {
		return SendKubernetesEventNotifyMessageReqMultiError(errors)
	}

	return nil
}

// SendKubernetesEventNotifyMessageReqMultiError is an error wrapping multiple
// validation errors returned by
// SendKubernetesEventNotifyMessageReq.ValidateAll() if the designated
// constraints aren't met.
type SendKubernetesEventNotifyMessageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendKubernetesEventNotifyMessageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendKubernetesEventNotifyMessageReqMultiError) AllErrors() []error { return m }

// SendKubernetesEventNotifyMessageReqValidationError is the validation error
// returned by SendKubernetesEventNotifyMessageReq.Validate if the designated
// constraints aren't met.
type SendKubernetesEventNotifyMessageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendKubernetesEventNotifyMessageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendKubernetesEventNotifyMessageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendKubernetesEventNotifyMessageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendKubernetesEventNotifyMessageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendKubernetesEventNotifyMessageReqValidationError) ErrorName() string {
	return "SendKubernetesEventNotifyMessageReqValidationError"
}

// Error satisfies the builtin error interface
func (e SendKubernetesEventNotifyMessageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendKubernetesEventNotifyMessageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendKubernetesEventNotifyMessageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendKubernetesEventNotifyMessageReqValidationError{}

// Validate checks the field values on SendKubernetesEventNotifyMessageReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SendKubernetesEventNotifyMessageReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendKubernetesEventNotifyMessageReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SendKubernetesEventNotifyMessageReplyMultiError, or nil if none found.
func (m *SendKubernetesEventNotifyMessageReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SendKubernetesEventNotifyMessageReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return SendKubernetesEventNotifyMessageReplyMultiError(errors)
	}

	return nil
}

// SendKubernetesEventNotifyMessageReplyMultiError is an error wrapping
// multiple validation errors returned by
// SendKubernetesEventNotifyMessageReply.ValidateAll() if the designated
// constraints aren't met.
type SendKubernetesEventNotifyMessageReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendKubernetesEventNotifyMessageReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendKubernetesEventNotifyMessageReplyMultiError) AllErrors() []error { return m }

// SendKubernetesEventNotifyMessageReplyValidationError is the validation error
// returned by SendKubernetesEventNotifyMessageReply.Validate if the
// designated constraints aren't met.
type SendKubernetesEventNotifyMessageReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendKubernetesEventNotifyMessageReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendKubernetesEventNotifyMessageReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendKubernetesEventNotifyMessageReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendKubernetesEventNotifyMessageReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendKubernetesEventNotifyMessageReplyValidationError) ErrorName() string {
	return "SendKubernetesEventNotifyMessageReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SendKubernetesEventNotifyMessageReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendKubernetesEventNotifyMessageReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendKubernetesEventNotifyMessageReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendKubernetesEventNotifyMessageReplyValidationError{}

// Validate checks the field values on SendMailMsgReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SendMailMsgReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendMailMsgReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SendMailMsgReqMultiError,
// or nil if none found.
func (m *SendMailMsgReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendMailMsgReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSubject()) < 1 {
		err := SendMailMsgReqValidationError{
			field:  "Subject",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetTo() {
		_, _ = idx, item

		if err := m._validateEmail(item); err != nil {
			err = SendMailMsgReqValidationError{
				field:  fmt.Sprintf("To[%v]", idx),
				reason: "value must be a valid email address",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	for idx, item := range m.GetCc() {
		_, _ = idx, item

		if err := m._validateEmail(item); err != nil {
			err = SendMailMsgReqValidationError{
				field:  fmt.Sprintf("Cc[%v]", idx),
				reason: "value must be a valid email address",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	for idx, item := range m.GetBcc() {
		_, _ = idx, item

		if err := m._validateEmail(item); err != nil {
			err = SendMailMsgReqValidationError{
				field:  fmt.Sprintf("Bcc[%v]", idx),
				reason: "value must be a valid email address",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if utf8.RuneCountInString(m.GetContent()) < 1 {
		err := SendMailMsgReqValidationError{
			field:  "Content",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SendMailMsgReqMultiError(errors)
	}

	return nil
}

func (m *SendMailMsgReq) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *SendMailMsgReq) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// SendMailMsgReqMultiError is an error wrapping multiple validation errors
// returned by SendMailMsgReq.ValidateAll() if the designated constraints
// aren't met.
type SendMailMsgReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendMailMsgReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendMailMsgReqMultiError) AllErrors() []error { return m }

// SendMailMsgReqValidationError is the validation error returned by
// SendMailMsgReq.Validate if the designated constraints aren't met.
type SendMailMsgReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendMailMsgReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendMailMsgReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendMailMsgReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendMailMsgReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendMailMsgReqValidationError) ErrorName() string { return "SendMailMsgReqValidationError" }

// Error satisfies the builtin error interface
func (e SendMailMsgReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendMailMsgReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendMailMsgReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendMailMsgReqValidationError{}

// Validate checks the field values on SendMailMsgReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SendMailMsgReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendMailMsgReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendMailMsgReplyMultiError, or nil if none found.
func (m *SendMailMsgReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SendMailMsgReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestId

	if len(errors) > 0 {
		return SendMailMsgReplyMultiError(errors)
	}

	return nil
}

// SendMailMsgReplyMultiError is an error wrapping multiple validation errors
// returned by SendMailMsgReply.ValidateAll() if the designated constraints
// aren't met.
type SendMailMsgReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendMailMsgReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendMailMsgReplyMultiError) AllErrors() []error { return m }

// SendMailMsgReplyValidationError is the validation error returned by
// SendMailMsgReply.Validate if the designated constraints aren't met.
type SendMailMsgReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendMailMsgReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendMailMsgReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendMailMsgReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendMailMsgReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendMailMsgReplyValidationError) ErrorName() string { return "SendMailMsgReplyValidationError" }

// Error satisfies the builtin error interface
func (e SendMailMsgReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendMailMsgReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendMailMsgReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendMailMsgReplyValidationError{}

// Validate checks the field values on CreateMessageGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMessageGroupReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMessageGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMessageGroupReqMultiError, or nil if none found.
func (m *CreateMessageGroupReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMessageGroupReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := CreateMessageGroupReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := CreateMessageGroupReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := CreateMessageGroupReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetGroupName()) < 1 {
		err := CreateMessageGroupReqValidationError{
			field:  "GroupName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateMessageGroupReqMultiError(errors)
	}

	return nil
}

// CreateMessageGroupReqMultiError is an error wrapping multiple validation
// errors returned by CreateMessageGroupReq.ValidateAll() if the designated
// constraints aren't met.
type CreateMessageGroupReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMessageGroupReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMessageGroupReqMultiError) AllErrors() []error { return m }

// CreateMessageGroupReqValidationError is the validation error returned by
// CreateMessageGroupReq.Validate if the designated constraints aren't met.
type CreateMessageGroupReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMessageGroupReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMessageGroupReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMessageGroupReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMessageGroupReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMessageGroupReqValidationError) ErrorName() string {
	return "CreateMessageGroupReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMessageGroupReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMessageGroupReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMessageGroupReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMessageGroupReqValidationError{}

// Validate checks the field values on CreateMessageGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMessageGroupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMessageGroupReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMessageGroupReplyMultiError, or nil if none found.
func (m *CreateMessageGroupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMessageGroupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return CreateMessageGroupReplyMultiError(errors)
	}

	return nil
}

// CreateMessageGroupReplyMultiError is an error wrapping multiple validation
// errors returned by CreateMessageGroupReply.ValidateAll() if the designated
// constraints aren't met.
type CreateMessageGroupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMessageGroupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMessageGroupReplyMultiError) AllErrors() []error { return m }

// CreateMessageGroupReplyValidationError is the validation error returned by
// CreateMessageGroupReply.Validate if the designated constraints aren't met.
type CreateMessageGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMessageGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMessageGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMessageGroupReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMessageGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMessageGroupReplyValidationError) ErrorName() string {
	return "CreateMessageGroupReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMessageGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMessageGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMessageGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMessageGroupReplyValidationError{}

// Validate checks the field values on ListMessageGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMessageGroupReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMessageGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMessageGroupReqMultiError, or nil if none found.
func (m *ListMessageGroupReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMessageGroupReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ListMessageGroupReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ListMessageGroupReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ListMessageGroupReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListMessageGroupReqMultiError(errors)
	}

	return nil
}

// ListMessageGroupReqMultiError is an error wrapping multiple validation
// errors returned by ListMessageGroupReq.ValidateAll() if the designated
// constraints aren't met.
type ListMessageGroupReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMessageGroupReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMessageGroupReqMultiError) AllErrors() []error { return m }

// ListMessageGroupReqValidationError is the validation error returned by
// ListMessageGroupReq.Validate if the designated constraints aren't met.
type ListMessageGroupReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMessageGroupReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMessageGroupReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMessageGroupReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMessageGroupReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMessageGroupReqValidationError) ErrorName() string {
	return "ListMessageGroupReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListMessageGroupReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMessageGroupReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMessageGroupReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMessageGroupReqValidationError{}

// Validate checks the field values on ListMessageGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMessageGroupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMessageGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMessageGroupReplyMultiError, or nil if none found.
func (m *ListMessageGroupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMessageGroupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMessageGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMessageGroupReplyValidationError{
						field:  fmt.Sprintf("MessageGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMessageGroupReplyValidationError{
						field:  fmt.Sprintf("MessageGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMessageGroupReplyValidationError{
					field:  fmt.Sprintf("MessageGroups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListMessageGroupReplyMultiError(errors)
	}

	return nil
}

// ListMessageGroupReplyMultiError is an error wrapping multiple validation
// errors returned by ListMessageGroupReply.ValidateAll() if the designated
// constraints aren't met.
type ListMessageGroupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMessageGroupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMessageGroupReplyMultiError) AllErrors() []error { return m }

// ListMessageGroupReplyValidationError is the validation error returned by
// ListMessageGroupReply.Validate if the designated constraints aren't met.
type ListMessageGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMessageGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMessageGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMessageGroupReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMessageGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMessageGroupReplyValidationError) ErrorName() string {
	return "ListMessageGroupReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListMessageGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMessageGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMessageGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMessageGroupReplyValidationError{}

// Validate checks the field values on DelMessageGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelMessageGroupReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelMessageGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelMessageGroupReqMultiError, or nil if none found.
func (m *DelMessageGroupReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelMessageGroupReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := DelMessageGroupReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := DelMessageGroupReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := DelMessageGroupReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetGroupUuid()) < 1 {
		err := DelMessageGroupReqValidationError{
			field:  "GroupUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelMessageGroupReqMultiError(errors)
	}

	return nil
}

// DelMessageGroupReqMultiError is an error wrapping multiple validation errors
// returned by DelMessageGroupReq.ValidateAll() if the designated constraints
// aren't met.
type DelMessageGroupReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelMessageGroupReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelMessageGroupReqMultiError) AllErrors() []error { return m }

// DelMessageGroupReqValidationError is the validation error returned by
// DelMessageGroupReq.Validate if the designated constraints aren't met.
type DelMessageGroupReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelMessageGroupReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelMessageGroupReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelMessageGroupReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelMessageGroupReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelMessageGroupReqValidationError) ErrorName() string {
	return "DelMessageGroupReqValidationError"
}

// Error satisfies the builtin error interface
func (e DelMessageGroupReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelMessageGroupReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelMessageGroupReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelMessageGroupReqValidationError{}

// Validate checks the field values on DelMessageGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelMessageGroupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelMessageGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelMessageGroupReplyMultiError, or nil if none found.
func (m *DelMessageGroupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DelMessageGroupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return DelMessageGroupReplyMultiError(errors)
	}

	return nil
}

// DelMessageGroupReplyMultiError is an error wrapping multiple validation
// errors returned by DelMessageGroupReply.ValidateAll() if the designated
// constraints aren't met.
type DelMessageGroupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelMessageGroupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelMessageGroupReplyMultiError) AllErrors() []error { return m }

// DelMessageGroupReplyValidationError is the validation error returned by
// DelMessageGroupReply.Validate if the designated constraints aren't met.
type DelMessageGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelMessageGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelMessageGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelMessageGroupReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelMessageGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelMessageGroupReplyValidationError) ErrorName() string {
	return "DelMessageGroupReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DelMessageGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelMessageGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelMessageGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelMessageGroupReplyValidationError{}

// Validate checks the field values on AddMessageGroupMemberReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddMessageGroupMemberReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddMessageGroupMemberReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddMessageGroupMemberReqMultiError, or nil if none found.
func (m *AddMessageGroupMemberReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddMessageGroupMemberReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := AddMessageGroupMemberReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := AddMessageGroupMemberReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := AddMessageGroupMemberReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetGroupUuid()) < 1 {
		err := AddMessageGroupMemberReqValidationError{
			field:  "GroupUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Channel

	if utf8.RuneCountInString(m.GetUrl()) < 1 {
		err := AddMessageGroupMemberReqValidationError{
			field:  "Url",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Keyword

	if len(errors) > 0 {
		return AddMessageGroupMemberReqMultiError(errors)
	}

	return nil
}

// AddMessageGroupMemberReqMultiError is an error wrapping multiple validation
// errors returned by AddMessageGroupMemberReq.ValidateAll() if the designated
// constraints aren't met.
type AddMessageGroupMemberReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddMessageGroupMemberReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddMessageGroupMemberReqMultiError) AllErrors() []error { return m }

// AddMessageGroupMemberReqValidationError is the validation error returned by
// AddMessageGroupMemberReq.Validate if the designated constraints aren't met.
type AddMessageGroupMemberReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddMessageGroupMemberReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddMessageGroupMemberReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddMessageGroupMemberReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddMessageGroupMemberReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddMessageGroupMemberReqValidationError) ErrorName() string {
	return "AddMessageGroupMemberReqValidationError"
}

// Error satisfies the builtin error interface
func (e AddMessageGroupMemberReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddMessageGroupMemberReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddMessageGroupMemberReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddMessageGroupMemberReqValidationError{}

// Validate checks the field values on AddMessageGroupMemberReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddMessageGroupMemberReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddMessageGroupMemberReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddMessageGroupMemberReplyMultiError, or nil if none found.
func (m *AddMessageGroupMemberReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddMessageGroupMemberReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return AddMessageGroupMemberReplyMultiError(errors)
	}

	return nil
}

// AddMessageGroupMemberReplyMultiError is an error wrapping multiple
// validation errors returned by AddMessageGroupMemberReply.ValidateAll() if
// the designated constraints aren't met.
type AddMessageGroupMemberReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddMessageGroupMemberReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddMessageGroupMemberReplyMultiError) AllErrors() []error { return m }

// AddMessageGroupMemberReplyValidationError is the validation error returned
// by AddMessageGroupMemberReply.Validate if the designated constraints aren't met.
type AddMessageGroupMemberReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddMessageGroupMemberReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddMessageGroupMemberReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddMessageGroupMemberReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddMessageGroupMemberReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddMessageGroupMemberReplyValidationError) ErrorName() string {
	return "AddMessageGroupMemberReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AddMessageGroupMemberReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddMessageGroupMemberReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddMessageGroupMemberReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddMessageGroupMemberReplyValidationError{}

// Validate checks the field values on GetMessageGroupMemberReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMessageGroupMemberReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMessageGroupMemberReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMessageGroupMemberReqMultiError, or nil if none found.
func (m *GetMessageGroupMemberReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMessageGroupMemberReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := GetMessageGroupMemberReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := GetMessageGroupMemberReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := GetMessageGroupMemberReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetGroupUuid()) < 1 {
		err := GetMessageGroupMemberReqValidationError{
			field:  "GroupUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetMessageGroupMemberReqMultiError(errors)
	}

	return nil
}

// GetMessageGroupMemberReqMultiError is an error wrapping multiple validation
// errors returned by GetMessageGroupMemberReq.ValidateAll() if the designated
// constraints aren't met.
type GetMessageGroupMemberReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMessageGroupMemberReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMessageGroupMemberReqMultiError) AllErrors() []error { return m }

// GetMessageGroupMemberReqValidationError is the validation error returned by
// GetMessageGroupMemberReq.Validate if the designated constraints aren't met.
type GetMessageGroupMemberReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMessageGroupMemberReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMessageGroupMemberReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMessageGroupMemberReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMessageGroupMemberReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMessageGroupMemberReqValidationError) ErrorName() string {
	return "GetMessageGroupMemberReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetMessageGroupMemberReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMessageGroupMemberReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMessageGroupMemberReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMessageGroupMemberReqValidationError{}

// Validate checks the field values on GetMessageGroupMemberReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMessageGroupMemberReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMessageGroupMemberReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMessageGroupMemberReplyMultiError, or nil if none found.
func (m *GetMessageGroupMemberReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMessageGroupMemberReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMessageGroupMemberReplyValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMessageGroupMemberReplyValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMessageGroupMemberReplyValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetMessageGroupMemberReplyMultiError(errors)
	}

	return nil
}

// GetMessageGroupMemberReplyMultiError is an error wrapping multiple
// validation errors returned by GetMessageGroupMemberReply.ValidateAll() if
// the designated constraints aren't met.
type GetMessageGroupMemberReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMessageGroupMemberReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMessageGroupMemberReplyMultiError) AllErrors() []error { return m }

// GetMessageGroupMemberReplyValidationError is the validation error returned
// by GetMessageGroupMemberReply.Validate if the designated constraints aren't met.
type GetMessageGroupMemberReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMessageGroupMemberReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMessageGroupMemberReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMessageGroupMemberReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMessageGroupMemberReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMessageGroupMemberReplyValidationError) ErrorName() string {
	return "GetMessageGroupMemberReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetMessageGroupMemberReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMessageGroupMemberReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMessageGroupMemberReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMessageGroupMemberReplyValidationError{}

// Validate checks the field values on DelMessageGroupMemberReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelMessageGroupMemberReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelMessageGroupMemberReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelMessageGroupMemberReqMultiError, or nil if none found.
func (m *DelMessageGroupMemberReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelMessageGroupMemberReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := DelMessageGroupMemberReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := DelMessageGroupMemberReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := DelMessageGroupMemberReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetGroupUuid()) < 1 {
		err := DelMessageGroupMemberReqValidationError{
			field:  "GroupUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMemberUuid()) < 1 {
		err := DelMessageGroupMemberReqValidationError{
			field:  "MemberUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelMessageGroupMemberReqMultiError(errors)
	}

	return nil
}

// DelMessageGroupMemberReqMultiError is an error wrapping multiple validation
// errors returned by DelMessageGroupMemberReq.ValidateAll() if the designated
// constraints aren't met.
type DelMessageGroupMemberReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelMessageGroupMemberReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelMessageGroupMemberReqMultiError) AllErrors() []error { return m }

// DelMessageGroupMemberReqValidationError is the validation error returned by
// DelMessageGroupMemberReq.Validate if the designated constraints aren't met.
type DelMessageGroupMemberReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelMessageGroupMemberReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelMessageGroupMemberReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelMessageGroupMemberReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelMessageGroupMemberReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelMessageGroupMemberReqValidationError) ErrorName() string {
	return "DelMessageGroupMemberReqValidationError"
}

// Error satisfies the builtin error interface
func (e DelMessageGroupMemberReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelMessageGroupMemberReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelMessageGroupMemberReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelMessageGroupMemberReqValidationError{}

// Validate checks the field values on DelMessageGroupMemberReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelMessageGroupMemberReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelMessageGroupMemberReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelMessageGroupMemberReplyMultiError, or nil if none found.
func (m *DelMessageGroupMemberReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DelMessageGroupMemberReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return DelMessageGroupMemberReplyMultiError(errors)
	}

	return nil
}

// DelMessageGroupMemberReplyMultiError is an error wrapping multiple
// validation errors returned by DelMessageGroupMemberReply.ValidateAll() if
// the designated constraints aren't met.
type DelMessageGroupMemberReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelMessageGroupMemberReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelMessageGroupMemberReplyMultiError) AllErrors() []error { return m }

// DelMessageGroupMemberReplyValidationError is the validation error returned
// by DelMessageGroupMemberReply.Validate if the designated constraints aren't met.
type DelMessageGroupMemberReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelMessageGroupMemberReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelMessageGroupMemberReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelMessageGroupMemberReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelMessageGroupMemberReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelMessageGroupMemberReplyValidationError) ErrorName() string {
	return "DelMessageGroupMemberReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DelMessageGroupMemberReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelMessageGroupMemberReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelMessageGroupMemberReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelMessageGroupMemberReplyValidationError{}

// Validate checks the field values on SendMessageGroupContentReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendMessageGroupContentReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendMessageGroupContentReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendMessageGroupContentReqMultiError, or nil if none found.
func (m *SendMessageGroupContentReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendMessageGroupContentReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := SendMessageGroupContentReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := SendMessageGroupContentReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetGroupUuid()) < 1 {
		err := SendMessageGroupContentReqValidationError{
			field:  "GroupUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetContent()) < 1 {
		err := SendMessageGroupContentReqValidationError{
			field:  "Content",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SendMessageGroupContentReqMultiError(errors)
	}

	return nil
}

// SendMessageGroupContentReqMultiError is an error wrapping multiple
// validation errors returned by SendMessageGroupContentReq.ValidateAll() if
// the designated constraints aren't met.
type SendMessageGroupContentReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendMessageGroupContentReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendMessageGroupContentReqMultiError) AllErrors() []error { return m }

// SendMessageGroupContentReqValidationError is the validation error returned
// by SendMessageGroupContentReq.Validate if the designated constraints aren't met.
type SendMessageGroupContentReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendMessageGroupContentReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendMessageGroupContentReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendMessageGroupContentReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendMessageGroupContentReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendMessageGroupContentReqValidationError) ErrorName() string {
	return "SendMessageGroupContentReqValidationError"
}

// Error satisfies the builtin error interface
func (e SendMessageGroupContentReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendMessageGroupContentReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendMessageGroupContentReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendMessageGroupContentReqValidationError{}

// Validate checks the field values on SendMessageGroupContentReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendMessageGroupContentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendMessageGroupContentReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendMessageGroupContentReplyMultiError, or nil if none found.
func (m *SendMessageGroupContentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SendMessageGroupContentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return SendMessageGroupContentReplyMultiError(errors)
	}

	return nil
}

// SendMessageGroupContentReplyMultiError is an error wrapping multiple
// validation errors returned by SendMessageGroupContentReply.ValidateAll() if
// the designated constraints aren't met.
type SendMessageGroupContentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendMessageGroupContentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendMessageGroupContentReplyMultiError) AllErrors() []error { return m }

// SendMessageGroupContentReplyValidationError is the validation error returned
// by SendMessageGroupContentReply.Validate if the designated constraints
// aren't met.
type SendMessageGroupContentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendMessageGroupContentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendMessageGroupContentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendMessageGroupContentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendMessageGroupContentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendMessageGroupContentReplyValidationError) ErrorName() string {
	return "SendMessageGroupContentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SendMessageGroupContentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendMessageGroupContentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendMessageGroupContentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendMessageGroupContentReplyValidationError{}

// Validate checks the field values on SendOrgDingTalkWorkMsgReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendOrgDingTalkWorkMsgReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendOrgDingTalkWorkMsgReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendOrgDingTalkWorkMsgReqMultiError, or nil if none found.
func (m *SendOrgDingTalkWorkMsgReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendOrgDingTalkWorkMsgReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := SendOrgDingTalkWorkMsgReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := SendOrgDingTalkWorkMsgReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMsg()) < 1 {
		err := SendOrgDingTalkWorkMsgReqValidationError{
			field:  "Msg",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SendOrgDingTalkWorkMsgReqMultiError(errors)
	}

	return nil
}

// SendOrgDingTalkWorkMsgReqMultiError is an error wrapping multiple validation
// errors returned by SendOrgDingTalkWorkMsgReq.ValidateAll() if the
// designated constraints aren't met.
type SendOrgDingTalkWorkMsgReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendOrgDingTalkWorkMsgReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendOrgDingTalkWorkMsgReqMultiError) AllErrors() []error { return m }

// SendOrgDingTalkWorkMsgReqValidationError is the validation error returned by
// SendOrgDingTalkWorkMsgReq.Validate if the designated constraints aren't met.
type SendOrgDingTalkWorkMsgReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendOrgDingTalkWorkMsgReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendOrgDingTalkWorkMsgReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendOrgDingTalkWorkMsgReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendOrgDingTalkWorkMsgReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendOrgDingTalkWorkMsgReqValidationError) ErrorName() string {
	return "SendOrgDingTalkWorkMsgReqValidationError"
}

// Error satisfies the builtin error interface
func (e SendOrgDingTalkWorkMsgReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendOrgDingTalkWorkMsgReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendOrgDingTalkWorkMsgReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendOrgDingTalkWorkMsgReqValidationError{}

// Validate checks the field values on SendOrgDingTalkWorkMsgReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendOrgDingTalkWorkMsgReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendOrgDingTalkWorkMsgReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendOrgDingTalkWorkMsgReplyMultiError, or nil if none found.
func (m *SendOrgDingTalkWorkMsgReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SendOrgDingTalkWorkMsgReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	if len(errors) > 0 {
		return SendOrgDingTalkWorkMsgReplyMultiError(errors)
	}

	return nil
}

// SendOrgDingTalkWorkMsgReplyMultiError is an error wrapping multiple
// validation errors returned by SendOrgDingTalkWorkMsgReply.ValidateAll() if
// the designated constraints aren't met.
type SendOrgDingTalkWorkMsgReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendOrgDingTalkWorkMsgReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendOrgDingTalkWorkMsgReplyMultiError) AllErrors() []error { return m }

// SendOrgDingTalkWorkMsgReplyValidationError is the validation error returned
// by SendOrgDingTalkWorkMsgReply.Validate if the designated constraints
// aren't met.
type SendOrgDingTalkWorkMsgReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendOrgDingTalkWorkMsgReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendOrgDingTalkWorkMsgReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendOrgDingTalkWorkMsgReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendOrgDingTalkWorkMsgReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendOrgDingTalkWorkMsgReplyValidationError) ErrorName() string {
	return "SendOrgDingTalkWorkMsgReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SendOrgDingTalkWorkMsgReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendOrgDingTalkWorkMsgReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendOrgDingTalkWorkMsgReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendOrgDingTalkWorkMsgReplyValidationError{}

// Validate checks the field values on AddDingTalkHookOrgGroupReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddDingTalkHookOrgGroupReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDingTalkHookOrgGroupReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddDingTalkHookOrgGroupReqMultiError, or nil if none found.
func (m *AddDingTalkHookOrgGroupReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDingTalkHookOrgGroupReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := AddDingTalkHookOrgGroupReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := AddDingTalkHookOrgGroupReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetGroupName()) < 1 {
		err := AddDingTalkHookOrgGroupReqValidationError{
			field:  "GroupName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddDingTalkHookOrgGroupReqMultiError(errors)
	}

	return nil
}

// AddDingTalkHookOrgGroupReqMultiError is an error wrapping multiple
// validation errors returned by AddDingTalkHookOrgGroupReq.ValidateAll() if
// the designated constraints aren't met.
type AddDingTalkHookOrgGroupReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDingTalkHookOrgGroupReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDingTalkHookOrgGroupReqMultiError) AllErrors() []error { return m }

// AddDingTalkHookOrgGroupReqValidationError is the validation error returned
// by AddDingTalkHookOrgGroupReq.Validate if the designated constraints aren't met.
type AddDingTalkHookOrgGroupReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDingTalkHookOrgGroupReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDingTalkHookOrgGroupReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDingTalkHookOrgGroupReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDingTalkHookOrgGroupReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDingTalkHookOrgGroupReqValidationError) ErrorName() string {
	return "AddDingTalkHookOrgGroupReqValidationError"
}

// Error satisfies the builtin error interface
func (e AddDingTalkHookOrgGroupReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDingTalkHookOrgGroupReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDingTalkHookOrgGroupReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDingTalkHookOrgGroupReqValidationError{}

// Validate checks the field values on AddDingTalkHookOrgGroupReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddDingTalkHookOrgGroupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDingTalkHookOrgGroupReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddDingTalkHookOrgGroupReplyMultiError, or nil if none found.
func (m *AddDingTalkHookOrgGroupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDingTalkHookOrgGroupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return AddDingTalkHookOrgGroupReplyMultiError(errors)
	}

	return nil
}

// AddDingTalkHookOrgGroupReplyMultiError is an error wrapping multiple
// validation errors returned by AddDingTalkHookOrgGroupReply.ValidateAll() if
// the designated constraints aren't met.
type AddDingTalkHookOrgGroupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDingTalkHookOrgGroupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDingTalkHookOrgGroupReplyMultiError) AllErrors() []error { return m }

// AddDingTalkHookOrgGroupReplyValidationError is the validation error returned
// by AddDingTalkHookOrgGroupReply.Validate if the designated constraints
// aren't met.
type AddDingTalkHookOrgGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDingTalkHookOrgGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDingTalkHookOrgGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDingTalkHookOrgGroupReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDingTalkHookOrgGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDingTalkHookOrgGroupReplyValidationError) ErrorName() string {
	return "AddDingTalkHookOrgGroupReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AddDingTalkHookOrgGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDingTalkHookOrgGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDingTalkHookOrgGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDingTalkHookOrgGroupReplyValidationError{}

// Validate checks the field values on ListDingTalkHookOrgGroupReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDingTalkHookOrgGroupReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDingTalkHookOrgGroupReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDingTalkHookOrgGroupReqMultiError, or nil if none found.
func (m *ListDingTalkHookOrgGroupReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDingTalkHookOrgGroupReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ListDingTalkHookOrgGroupReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ListDingTalkHookOrgGroupReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListDingTalkHookOrgGroupReqMultiError(errors)
	}

	return nil
}

// ListDingTalkHookOrgGroupReqMultiError is an error wrapping multiple
// validation errors returned by ListDingTalkHookOrgGroupReq.ValidateAll() if
// the designated constraints aren't met.
type ListDingTalkHookOrgGroupReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDingTalkHookOrgGroupReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDingTalkHookOrgGroupReqMultiError) AllErrors() []error { return m }

// ListDingTalkHookOrgGroupReqValidationError is the validation error returned
// by ListDingTalkHookOrgGroupReq.Validate if the designated constraints
// aren't met.
type ListDingTalkHookOrgGroupReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDingTalkHookOrgGroupReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDingTalkHookOrgGroupReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDingTalkHookOrgGroupReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDingTalkHookOrgGroupReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDingTalkHookOrgGroupReqValidationError) ErrorName() string {
	return "ListDingTalkHookOrgGroupReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListDingTalkHookOrgGroupReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDingTalkHookOrgGroupReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDingTalkHookOrgGroupReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDingTalkHookOrgGroupReqValidationError{}

// Validate checks the field values on ListDingTalkHookOrgGroupReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDingTalkHookOrgGroupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDingTalkHookOrgGroupReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListDingTalkHookOrgGroupReplyMultiError, or nil if none found.
func (m *ListDingTalkHookOrgGroupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDingTalkHookOrgGroupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDingTalkHookOrgGroup() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDingTalkHookOrgGroupReplyValidationError{
						field:  fmt.Sprintf("DingTalkHookOrgGroup[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDingTalkHookOrgGroupReplyValidationError{
						field:  fmt.Sprintf("DingTalkHookOrgGroup[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDingTalkHookOrgGroupReplyValidationError{
					field:  fmt.Sprintf("DingTalkHookOrgGroup[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDingTalkHookOrgGroupReplyMultiError(errors)
	}

	return nil
}

// ListDingTalkHookOrgGroupReplyMultiError is an error wrapping multiple
// validation errors returned by ListDingTalkHookOrgGroupReply.ValidateAll()
// if the designated constraints aren't met.
type ListDingTalkHookOrgGroupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDingTalkHookOrgGroupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDingTalkHookOrgGroupReplyMultiError) AllErrors() []error { return m }

// ListDingTalkHookOrgGroupReplyValidationError is the validation error
// returned by ListDingTalkHookOrgGroupReply.Validate if the designated
// constraints aren't met.
type ListDingTalkHookOrgGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDingTalkHookOrgGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDingTalkHookOrgGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDingTalkHookOrgGroupReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDingTalkHookOrgGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDingTalkHookOrgGroupReplyValidationError) ErrorName() string {
	return "ListDingTalkHookOrgGroupReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListDingTalkHookOrgGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDingTalkHookOrgGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDingTalkHookOrgGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDingTalkHookOrgGroupReplyValidationError{}

// Validate checks the field values on DelDingTalkHookOrgGroupReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelDingTalkHookOrgGroupReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelDingTalkHookOrgGroupReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelDingTalkHookOrgGroupReqMultiError, or nil if none found.
func (m *DelDingTalkHookOrgGroupReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelDingTalkHookOrgGroupReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := DelDingTalkHookOrgGroupReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := DelDingTalkHookOrgGroupReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetGroupUuid()) < 1 {
		err := DelDingTalkHookOrgGroupReqValidationError{
			field:  "GroupUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelDingTalkHookOrgGroupReqMultiError(errors)
	}

	return nil
}

// DelDingTalkHookOrgGroupReqMultiError is an error wrapping multiple
// validation errors returned by DelDingTalkHookOrgGroupReq.ValidateAll() if
// the designated constraints aren't met.
type DelDingTalkHookOrgGroupReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelDingTalkHookOrgGroupReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelDingTalkHookOrgGroupReqMultiError) AllErrors() []error { return m }

// DelDingTalkHookOrgGroupReqValidationError is the validation error returned
// by DelDingTalkHookOrgGroupReq.Validate if the designated constraints aren't met.
type DelDingTalkHookOrgGroupReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelDingTalkHookOrgGroupReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelDingTalkHookOrgGroupReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelDingTalkHookOrgGroupReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelDingTalkHookOrgGroupReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelDingTalkHookOrgGroupReqValidationError) ErrorName() string {
	return "DelDingTalkHookOrgGroupReqValidationError"
}

// Error satisfies the builtin error interface
func (e DelDingTalkHookOrgGroupReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelDingTalkHookOrgGroupReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelDingTalkHookOrgGroupReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelDingTalkHookOrgGroupReqValidationError{}

// Validate checks the field values on DelDingTalkHookOrgGroupReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelDingTalkHookOrgGroupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelDingTalkHookOrgGroupReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelDingTalkHookOrgGroupReplyMultiError, or nil if none found.
func (m *DelDingTalkHookOrgGroupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DelDingTalkHookOrgGroupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return DelDingTalkHookOrgGroupReplyMultiError(errors)
	}

	return nil
}

// DelDingTalkHookOrgGroupReplyMultiError is an error wrapping multiple
// validation errors returned by DelDingTalkHookOrgGroupReply.ValidateAll() if
// the designated constraints aren't met.
type DelDingTalkHookOrgGroupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelDingTalkHookOrgGroupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelDingTalkHookOrgGroupReplyMultiError) AllErrors() []error { return m }

// DelDingTalkHookOrgGroupReplyValidationError is the validation error returned
// by DelDingTalkHookOrgGroupReply.Validate if the designated constraints
// aren't met.
type DelDingTalkHookOrgGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelDingTalkHookOrgGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelDingTalkHookOrgGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelDingTalkHookOrgGroupReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelDingTalkHookOrgGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelDingTalkHookOrgGroupReplyValidationError) ErrorName() string {
	return "DelDingTalkHookOrgGroupReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DelDingTalkHookOrgGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelDingTalkHookOrgGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelDingTalkHookOrgGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelDingTalkHookOrgGroupReplyValidationError{}

// Validate checks the field values on AddDingTalkHookOrgGroupMemberReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AddDingTalkHookOrgGroupMemberReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDingTalkHookOrgGroupMemberReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AddDingTalkHookOrgGroupMemberReqMultiError, or nil if none found.
func (m *AddDingTalkHookOrgGroupMemberReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDingTalkHookOrgGroupMemberReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := AddDingTalkHookOrgGroupMemberReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := AddDingTalkHookOrgGroupMemberReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetGroupUuid()) < 1 {
		err := AddDingTalkHookOrgGroupMemberReqValidationError{
			field:  "GroupUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetDingTalkHookMember() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddDingTalkHookOrgGroupMemberReqValidationError{
						field:  fmt.Sprintf("DingTalkHookMember[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddDingTalkHookOrgGroupMemberReqValidationError{
						field:  fmt.Sprintf("DingTalkHookMember[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddDingTalkHookOrgGroupMemberReqValidationError{
					field:  fmt.Sprintf("DingTalkHookMember[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AddDingTalkHookOrgGroupMemberReqMultiError(errors)
	}

	return nil
}

// AddDingTalkHookOrgGroupMemberReqMultiError is an error wrapping multiple
// validation errors returned by
// AddDingTalkHookOrgGroupMemberReq.ValidateAll() if the designated
// constraints aren't met.
type AddDingTalkHookOrgGroupMemberReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDingTalkHookOrgGroupMemberReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDingTalkHookOrgGroupMemberReqMultiError) AllErrors() []error { return m }

// AddDingTalkHookOrgGroupMemberReqValidationError is the validation error
// returned by AddDingTalkHookOrgGroupMemberReq.Validate if the designated
// constraints aren't met.
type AddDingTalkHookOrgGroupMemberReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDingTalkHookOrgGroupMemberReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDingTalkHookOrgGroupMemberReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDingTalkHookOrgGroupMemberReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDingTalkHookOrgGroupMemberReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDingTalkHookOrgGroupMemberReqValidationError) ErrorName() string {
	return "AddDingTalkHookOrgGroupMemberReqValidationError"
}

// Error satisfies the builtin error interface
func (e AddDingTalkHookOrgGroupMemberReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDingTalkHookOrgGroupMemberReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDingTalkHookOrgGroupMemberReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDingTalkHookOrgGroupMemberReqValidationError{}

// Validate checks the field values on AddDingTalkHookOrgGroupMemberReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AddDingTalkHookOrgGroupMemberReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDingTalkHookOrgGroupMemberReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AddDingTalkHookOrgGroupMemberReplyMultiError, or nil if none found.
func (m *AddDingTalkHookOrgGroupMemberReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDingTalkHookOrgGroupMemberReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return AddDingTalkHookOrgGroupMemberReplyMultiError(errors)
	}

	return nil
}

// AddDingTalkHookOrgGroupMemberReplyMultiError is an error wrapping multiple
// validation errors returned by
// AddDingTalkHookOrgGroupMemberReply.ValidateAll() if the designated
// constraints aren't met.
type AddDingTalkHookOrgGroupMemberReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDingTalkHookOrgGroupMemberReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDingTalkHookOrgGroupMemberReplyMultiError) AllErrors() []error { return m }

// AddDingTalkHookOrgGroupMemberReplyValidationError is the validation error
// returned by AddDingTalkHookOrgGroupMemberReply.Validate if the designated
// constraints aren't met.
type AddDingTalkHookOrgGroupMemberReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDingTalkHookOrgGroupMemberReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDingTalkHookOrgGroupMemberReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDingTalkHookOrgGroupMemberReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDingTalkHookOrgGroupMemberReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDingTalkHookOrgGroupMemberReplyValidationError) ErrorName() string {
	return "AddDingTalkHookOrgGroupMemberReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AddDingTalkHookOrgGroupMemberReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDingTalkHookOrgGroupMemberReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDingTalkHookOrgGroupMemberReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDingTalkHookOrgGroupMemberReplyValidationError{}

// Validate checks the field values on GetDingTalkHookOrgGroupMemberReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetDingTalkHookOrgGroupMemberReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDingTalkHookOrgGroupMemberReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetDingTalkHookOrgGroupMemberReqMultiError, or nil if none found.
func (m *GetDingTalkHookOrgGroupMemberReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDingTalkHookOrgGroupMemberReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := GetDingTalkHookOrgGroupMemberReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := GetDingTalkHookOrgGroupMemberReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetGroupUuid()) < 1 {
		err := GetDingTalkHookOrgGroupMemberReqValidationError{
			field:  "GroupUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetDingTalkHookOrgGroupMemberReqMultiError(errors)
	}

	return nil
}

// GetDingTalkHookOrgGroupMemberReqMultiError is an error wrapping multiple
// validation errors returned by
// GetDingTalkHookOrgGroupMemberReq.ValidateAll() if the designated
// constraints aren't met.
type GetDingTalkHookOrgGroupMemberReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDingTalkHookOrgGroupMemberReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDingTalkHookOrgGroupMemberReqMultiError) AllErrors() []error { return m }

// GetDingTalkHookOrgGroupMemberReqValidationError is the validation error
// returned by GetDingTalkHookOrgGroupMemberReq.Validate if the designated
// constraints aren't met.
type GetDingTalkHookOrgGroupMemberReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDingTalkHookOrgGroupMemberReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDingTalkHookOrgGroupMemberReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDingTalkHookOrgGroupMemberReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDingTalkHookOrgGroupMemberReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDingTalkHookOrgGroupMemberReqValidationError) ErrorName() string {
	return "GetDingTalkHookOrgGroupMemberReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetDingTalkHookOrgGroupMemberReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDingTalkHookOrgGroupMemberReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDingTalkHookOrgGroupMemberReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDingTalkHookOrgGroupMemberReqValidationError{}

// Validate checks the field values on GetDingTalkHookOrgGroupMemberReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetDingTalkHookOrgGroupMemberReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDingTalkHookOrgGroupMemberReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetDingTalkHookOrgGroupMemberReplyMultiError, or nil if none found.
func (m *GetDingTalkHookOrgGroupMemberReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDingTalkHookOrgGroupMemberReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetGroupUuid()) < 1 {
		err := GetDingTalkHookOrgGroupMemberReplyValidationError{
			field:  "GroupUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetDingTalkHookMember() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDingTalkHookOrgGroupMemberReplyValidationError{
						field:  fmt.Sprintf("DingTalkHookMember[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDingTalkHookOrgGroupMemberReplyValidationError{
						field:  fmt.Sprintf("DingTalkHookMember[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDingTalkHookOrgGroupMemberReplyValidationError{
					field:  fmt.Sprintf("DingTalkHookMember[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetDingTalkHookOrgGroupMemberReplyMultiError(errors)
	}

	return nil
}

// GetDingTalkHookOrgGroupMemberReplyMultiError is an error wrapping multiple
// validation errors returned by
// GetDingTalkHookOrgGroupMemberReply.ValidateAll() if the designated
// constraints aren't met.
type GetDingTalkHookOrgGroupMemberReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDingTalkHookOrgGroupMemberReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDingTalkHookOrgGroupMemberReplyMultiError) AllErrors() []error { return m }

// GetDingTalkHookOrgGroupMemberReplyValidationError is the validation error
// returned by GetDingTalkHookOrgGroupMemberReply.Validate if the designated
// constraints aren't met.
type GetDingTalkHookOrgGroupMemberReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDingTalkHookOrgGroupMemberReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDingTalkHookOrgGroupMemberReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDingTalkHookOrgGroupMemberReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDingTalkHookOrgGroupMemberReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDingTalkHookOrgGroupMemberReplyValidationError) ErrorName() string {
	return "GetDingTalkHookOrgGroupMemberReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetDingTalkHookOrgGroupMemberReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDingTalkHookOrgGroupMemberReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDingTalkHookOrgGroupMemberReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDingTalkHookOrgGroupMemberReplyValidationError{}

// Validate checks the field values on DelDingTalkHookOrgGroupMemberReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DelDingTalkHookOrgGroupMemberReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelDingTalkHookOrgGroupMemberReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DelDingTalkHookOrgGroupMemberReqMultiError, or nil if none found.
func (m *DelDingTalkHookOrgGroupMemberReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelDingTalkHookOrgGroupMemberReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := DelDingTalkHookOrgGroupMemberReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := DelDingTalkHookOrgGroupMemberReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetGroupUuid()) < 1 {
		err := DelDingTalkHookOrgGroupMemberReqValidationError{
			field:  "GroupUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMemberUuid()) < 1 {
		err := DelDingTalkHookOrgGroupMemberReqValidationError{
			field:  "MemberUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelDingTalkHookOrgGroupMemberReqMultiError(errors)
	}

	return nil
}

// DelDingTalkHookOrgGroupMemberReqMultiError is an error wrapping multiple
// validation errors returned by
// DelDingTalkHookOrgGroupMemberReq.ValidateAll() if the designated
// constraints aren't met.
type DelDingTalkHookOrgGroupMemberReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelDingTalkHookOrgGroupMemberReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelDingTalkHookOrgGroupMemberReqMultiError) AllErrors() []error { return m }

// DelDingTalkHookOrgGroupMemberReqValidationError is the validation error
// returned by DelDingTalkHookOrgGroupMemberReq.Validate if the designated
// constraints aren't met.
type DelDingTalkHookOrgGroupMemberReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelDingTalkHookOrgGroupMemberReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelDingTalkHookOrgGroupMemberReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelDingTalkHookOrgGroupMemberReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelDingTalkHookOrgGroupMemberReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelDingTalkHookOrgGroupMemberReqValidationError) ErrorName() string {
	return "DelDingTalkHookOrgGroupMemberReqValidationError"
}

// Error satisfies the builtin error interface
func (e DelDingTalkHookOrgGroupMemberReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelDingTalkHookOrgGroupMemberReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelDingTalkHookOrgGroupMemberReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelDingTalkHookOrgGroupMemberReqValidationError{}

// Validate checks the field values on DelDingTalkHookOrgGroupMemberReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DelDingTalkHookOrgGroupMemberReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelDingTalkHookOrgGroupMemberReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DelDingTalkHookOrgGroupMemberReplyMultiError, or nil if none found.
func (m *DelDingTalkHookOrgGroupMemberReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DelDingTalkHookOrgGroupMemberReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return DelDingTalkHookOrgGroupMemberReplyMultiError(errors)
	}

	return nil
}

// DelDingTalkHookOrgGroupMemberReplyMultiError is an error wrapping multiple
// validation errors returned by
// DelDingTalkHookOrgGroupMemberReply.ValidateAll() if the designated
// constraints aren't met.
type DelDingTalkHookOrgGroupMemberReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelDingTalkHookOrgGroupMemberReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelDingTalkHookOrgGroupMemberReplyMultiError) AllErrors() []error { return m }

// DelDingTalkHookOrgGroupMemberReplyValidationError is the validation error
// returned by DelDingTalkHookOrgGroupMemberReply.Validate if the designated
// constraints aren't met.
type DelDingTalkHookOrgGroupMemberReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelDingTalkHookOrgGroupMemberReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelDingTalkHookOrgGroupMemberReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelDingTalkHookOrgGroupMemberReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelDingTalkHookOrgGroupMemberReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelDingTalkHookOrgGroupMemberReplyValidationError) ErrorName() string {
	return "DelDingTalkHookOrgGroupMemberReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DelDingTalkHookOrgGroupMemberReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelDingTalkHookOrgGroupMemberReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelDingTalkHookOrgGroupMemberReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelDingTalkHookOrgGroupMemberReplyValidationError{}

// Validate checks the field values on SendDingTalkHookOrgGroupMsgReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendDingTalkHookOrgGroupMsgReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendDingTalkHookOrgGroupMsgReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendDingTalkHookOrgGroupMsgReqMultiError, or nil if none found.
func (m *SendDingTalkHookOrgGroupMsgReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendDingTalkHookOrgGroupMsgReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := SendDingTalkHookOrgGroupMsgReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := SendDingTalkHookOrgGroupMsgReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetGroupUuid()) < 1 {
		err := SendDingTalkHookOrgGroupMsgReqValidationError{
			field:  "GroupUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetContent()) < 1 {
		err := SendDingTalkHookOrgGroupMsgReqValidationError{
			field:  "Content",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AtAll

	if len(errors) > 0 {
		return SendDingTalkHookOrgGroupMsgReqMultiError(errors)
	}

	return nil
}

// SendDingTalkHookOrgGroupMsgReqMultiError is an error wrapping multiple
// validation errors returned by SendDingTalkHookOrgGroupMsgReq.ValidateAll()
// if the designated constraints aren't met.
type SendDingTalkHookOrgGroupMsgReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendDingTalkHookOrgGroupMsgReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendDingTalkHookOrgGroupMsgReqMultiError) AllErrors() []error { return m }

// SendDingTalkHookOrgGroupMsgReqValidationError is the validation error
// returned by SendDingTalkHookOrgGroupMsgReq.Validate if the designated
// constraints aren't met.
type SendDingTalkHookOrgGroupMsgReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendDingTalkHookOrgGroupMsgReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendDingTalkHookOrgGroupMsgReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendDingTalkHookOrgGroupMsgReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendDingTalkHookOrgGroupMsgReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendDingTalkHookOrgGroupMsgReqValidationError) ErrorName() string {
	return "SendDingTalkHookOrgGroupMsgReqValidationError"
}

// Error satisfies the builtin error interface
func (e SendDingTalkHookOrgGroupMsgReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendDingTalkHookOrgGroupMsgReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendDingTalkHookOrgGroupMsgReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendDingTalkHookOrgGroupMsgReqValidationError{}

// Validate checks the field values on SendDingTalkHookOrgGroupMsgReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SendDingTalkHookOrgGroupMsgReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendDingTalkHookOrgGroupMsgReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SendDingTalkHookOrgGroupMsgReplyMultiError, or nil if none found.
func (m *SendDingTalkHookOrgGroupMsgReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SendDingTalkHookOrgGroupMsgReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return SendDingTalkHookOrgGroupMsgReplyMultiError(errors)
	}

	return nil
}

// SendDingTalkHookOrgGroupMsgReplyMultiError is an error wrapping multiple
// validation errors returned by
// SendDingTalkHookOrgGroupMsgReply.ValidateAll() if the designated
// constraints aren't met.
type SendDingTalkHookOrgGroupMsgReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendDingTalkHookOrgGroupMsgReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendDingTalkHookOrgGroupMsgReplyMultiError) AllErrors() []error { return m }

// SendDingTalkHookOrgGroupMsgReplyValidationError is the validation error
// returned by SendDingTalkHookOrgGroupMsgReply.Validate if the designated
// constraints aren't met.
type SendDingTalkHookOrgGroupMsgReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendDingTalkHookOrgGroupMsgReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendDingTalkHookOrgGroupMsgReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendDingTalkHookOrgGroupMsgReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendDingTalkHookOrgGroupMsgReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendDingTalkHookOrgGroupMsgReplyValidationError) ErrorName() string {
	return "SendDingTalkHookOrgGroupMsgReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SendDingTalkHookOrgGroupMsgReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendDingTalkHookOrgGroupMsgReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendDingTalkHookOrgGroupMsgReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendDingTalkHookOrgGroupMsgReplyValidationError{}

// Validate checks the field values on TranslateReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TranslateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TranslateReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TranslateReqMultiError, or
// nil if none found.
func (m *TranslateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *TranslateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := TranslateReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := TranslateReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetQuery()) < 1 {
		err := TranslateReqValidationError{
			field:  "Query",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSourceLanguage()) < 1 {
		err := TranslateReqValidationError{
			field:  "SourceLanguage",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTargetLanguage()) < 1 {
		err := TranslateReqValidationError{
			field:  "TargetLanguage",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TranslateReqMultiError(errors)
	}

	return nil
}

// TranslateReqMultiError is an error wrapping multiple validation errors
// returned by TranslateReq.ValidateAll() if the designated constraints aren't met.
type TranslateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TranslateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TranslateReqMultiError) AllErrors() []error { return m }

// TranslateReqValidationError is the validation error returned by
// TranslateReq.Validate if the designated constraints aren't met.
type TranslateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TranslateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TranslateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TranslateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TranslateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TranslateReqValidationError) ErrorName() string { return "TranslateReqValidationError" }

// Error satisfies the builtin error interface
func (e TranslateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTranslateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TranslateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TranslateReqValidationError{}

// Validate checks the field values on TranslateReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TranslateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TranslateReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TranslateReplyMultiError,
// or nil if none found.
func (m *TranslateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *TranslateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return TranslateReplyMultiError(errors)
	}

	return nil
}

// TranslateReplyMultiError is an error wrapping multiple validation errors
// returned by TranslateReply.ValidateAll() if the designated constraints
// aren't met.
type TranslateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TranslateReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TranslateReplyMultiError) AllErrors() []error { return m }

// TranslateReplyValidationError is the validation error returned by
// TranslateReply.Validate if the designated constraints aren't met.
type TranslateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TranslateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TranslateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TranslateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TranslateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TranslateReplyValidationError) ErrorName() string { return "TranslateReplyValidationError" }

// Error satisfies the builtin error interface
func (e TranslateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTranslateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TranslateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TranslateReplyValidationError{}

// Validate checks the field values on ListMessageGroupReply_MessageGroup with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListMessageGroupReply_MessageGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMessageGroupReply_MessageGroup
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListMessageGroupReply_MessageGroupMultiError, or nil if none found.
func (m *ListMessageGroupReply_MessageGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMessageGroupReply_MessageGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for OrgUuid

	// no validation rules for ProductUuid

	// no validation rules for GroupName

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return ListMessageGroupReply_MessageGroupMultiError(errors)
	}

	return nil
}

// ListMessageGroupReply_MessageGroupMultiError is an error wrapping multiple
// validation errors returned by
// ListMessageGroupReply_MessageGroup.ValidateAll() if the designated
// constraints aren't met.
type ListMessageGroupReply_MessageGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMessageGroupReply_MessageGroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMessageGroupReply_MessageGroupMultiError) AllErrors() []error { return m }

// ListMessageGroupReply_MessageGroupValidationError is the validation error
// returned by ListMessageGroupReply_MessageGroup.Validate if the designated
// constraints aren't met.
type ListMessageGroupReply_MessageGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMessageGroupReply_MessageGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMessageGroupReply_MessageGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMessageGroupReply_MessageGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMessageGroupReply_MessageGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMessageGroupReply_MessageGroupValidationError) ErrorName() string {
	return "ListMessageGroupReply_MessageGroupValidationError"
}

// Error satisfies the builtin error interface
func (e ListMessageGroupReply_MessageGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMessageGroupReply_MessageGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMessageGroupReply_MessageGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMessageGroupReply_MessageGroupValidationError{}

// Validate checks the field values on GetMessageGroupMemberReply_Member with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetMessageGroupMemberReply_Member) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMessageGroupMemberReply_Member
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetMessageGroupMemberReply_MemberMultiError, or nil if none found.
func (m *GetMessageGroupMemberReply_Member) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMessageGroupMemberReply_Member) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for GroupUuid

	// no validation rules for Channel

	// no validation rules for Url

	// no validation rules for Keyword

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return GetMessageGroupMemberReply_MemberMultiError(errors)
	}

	return nil
}

// GetMessageGroupMemberReply_MemberMultiError is an error wrapping multiple
// validation errors returned by
// GetMessageGroupMemberReply_Member.ValidateAll() if the designated
// constraints aren't met.
type GetMessageGroupMemberReply_MemberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMessageGroupMemberReply_MemberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMessageGroupMemberReply_MemberMultiError) AllErrors() []error { return m }

// GetMessageGroupMemberReply_MemberValidationError is the validation error
// returned by GetMessageGroupMemberReply_Member.Validate if the designated
// constraints aren't met.
type GetMessageGroupMemberReply_MemberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMessageGroupMemberReply_MemberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMessageGroupMemberReply_MemberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMessageGroupMemberReply_MemberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMessageGroupMemberReply_MemberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMessageGroupMemberReply_MemberValidationError) ErrorName() string {
	return "GetMessageGroupMemberReply_MemberValidationError"
}

// Error satisfies the builtin error interface
func (e GetMessageGroupMemberReply_MemberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMessageGroupMemberReply_Member.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMessageGroupMemberReply_MemberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMessageGroupMemberReply_MemberValidationError{}

// Validate checks the field values on
// ListDingTalkHookOrgGroupReplyDingTalkHookOrgGroup with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListDingTalkHookOrgGroupReplyDingTalkHookOrgGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListDingTalkHookOrgGroupReplyDingTalkHookOrgGroup with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// ListDingTalkHookOrgGroupReplyDingTalkHookOrgGroupMultiError, or nil if none found.
func (m *ListDingTalkHookOrgGroupReplyDingTalkHookOrgGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDingTalkHookOrgGroupReplyDingTalkHookOrgGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupUuid

	// no validation rules for OrgUuid

	// no validation rules for GroupName

	// no validation rules for OwnerUserUuid

	// no validation rules for OwnerUserName

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return ListDingTalkHookOrgGroupReplyDingTalkHookOrgGroupMultiError(errors)
	}

	return nil
}

// ListDingTalkHookOrgGroupReplyDingTalkHookOrgGroupMultiError is an error
// wrapping multiple validation errors returned by
// ListDingTalkHookOrgGroupReplyDingTalkHookOrgGroup.ValidateAll() if the
// designated constraints aren't met.
type ListDingTalkHookOrgGroupReplyDingTalkHookOrgGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDingTalkHookOrgGroupReplyDingTalkHookOrgGroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDingTalkHookOrgGroupReplyDingTalkHookOrgGroupMultiError) AllErrors() []error { return m }

// ListDingTalkHookOrgGroupReplyDingTalkHookOrgGroupValidationError is the
// validation error returned by
// ListDingTalkHookOrgGroupReplyDingTalkHookOrgGroup.Validate if the
// designated constraints aren't met.
type ListDingTalkHookOrgGroupReplyDingTalkHookOrgGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDingTalkHookOrgGroupReplyDingTalkHookOrgGroupValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ListDingTalkHookOrgGroupReplyDingTalkHookOrgGroupValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListDingTalkHookOrgGroupReplyDingTalkHookOrgGroupValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ListDingTalkHookOrgGroupReplyDingTalkHookOrgGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDingTalkHookOrgGroupReplyDingTalkHookOrgGroupValidationError) ErrorName() string {
	return "ListDingTalkHookOrgGroupReplyDingTalkHookOrgGroupValidationError"
}

// Error satisfies the builtin error interface
func (e ListDingTalkHookOrgGroupReplyDingTalkHookOrgGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDingTalkHookOrgGroupReplyDingTalkHookOrgGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDingTalkHookOrgGroupReplyDingTalkHookOrgGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDingTalkHookOrgGroupReplyDingTalkHookOrgGroupValidationError{}

// Validate checks the field values on
// AddDingTalkHookOrgGroupMemberReq_DingTalkHookMember with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddDingTalkHookOrgGroupMemberReq_DingTalkHookMember) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AddDingTalkHookOrgGroupMemberReq_DingTalkHookMember with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// AddDingTalkHookOrgGroupMemberReq_DingTalkHookMemberMultiError, or nil if
// none found.
func (m *AddDingTalkHookOrgGroupMemberReq_DingTalkHookMember) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDingTalkHookOrgGroupMemberReq_DingTalkHookMember) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if uri, err := url.Parse(m.GetUrl()); err != nil {
		err = AddDingTalkHookOrgGroupMemberReq_DingTalkHookMemberValidationError{
			field:  "Url",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := AddDingTalkHookOrgGroupMemberReq_DingTalkHookMemberValidationError{
			field:  "Url",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Keyword

	// no validation rules for AccessToken

	// no validation rules for Signature

	if len(errors) > 0 {
		return AddDingTalkHookOrgGroupMemberReq_DingTalkHookMemberMultiError(errors)
	}

	return nil
}

// AddDingTalkHookOrgGroupMemberReq_DingTalkHookMemberMultiError is an error
// wrapping multiple validation errors returned by
// AddDingTalkHookOrgGroupMemberReq_DingTalkHookMember.ValidateAll() if the
// designated constraints aren't met.
type AddDingTalkHookOrgGroupMemberReq_DingTalkHookMemberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDingTalkHookOrgGroupMemberReq_DingTalkHookMemberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDingTalkHookOrgGroupMemberReq_DingTalkHookMemberMultiError) AllErrors() []error { return m }

// AddDingTalkHookOrgGroupMemberReq_DingTalkHookMemberValidationError is the
// validation error returned by
// AddDingTalkHookOrgGroupMemberReq_DingTalkHookMember.Validate if the
// designated constraints aren't met.
type AddDingTalkHookOrgGroupMemberReq_DingTalkHookMemberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDingTalkHookOrgGroupMemberReq_DingTalkHookMemberValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e AddDingTalkHookOrgGroupMemberReq_DingTalkHookMemberValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e AddDingTalkHookOrgGroupMemberReq_DingTalkHookMemberValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e AddDingTalkHookOrgGroupMemberReq_DingTalkHookMemberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDingTalkHookOrgGroupMemberReq_DingTalkHookMemberValidationError) ErrorName() string {
	return "AddDingTalkHookOrgGroupMemberReq_DingTalkHookMemberValidationError"
}

// Error satisfies the builtin error interface
func (e AddDingTalkHookOrgGroupMemberReq_DingTalkHookMemberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDingTalkHookOrgGroupMemberReq_DingTalkHookMember.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDingTalkHookOrgGroupMemberReq_DingTalkHookMemberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDingTalkHookOrgGroupMemberReq_DingTalkHookMemberValidationError{}

// Validate checks the field values on
// GetDingTalkHookOrgGroupMemberReply_DingTalkHookMember with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDingTalkHookOrgGroupMemberReply_DingTalkHookMember) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetDingTalkHookOrgGroupMemberReply_DingTalkHookMember with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDingTalkHookOrgGroupMemberReply_DingTalkHookMemberMultiError, or nil if
// none found.
func (m *GetDingTalkHookOrgGroupMemberReply_DingTalkHookMember) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDingTalkHookOrgGroupMemberReply_DingTalkHookMember) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for Url

	// no validation rules for Keyword

	// no validation rules for AccessToken

	// no validation rules for Signature

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return GetDingTalkHookOrgGroupMemberReply_DingTalkHookMemberMultiError(errors)
	}

	return nil
}

// GetDingTalkHookOrgGroupMemberReply_DingTalkHookMemberMultiError is an error
// wrapping multiple validation errors returned by
// GetDingTalkHookOrgGroupMemberReply_DingTalkHookMember.ValidateAll() if the
// designated constraints aren't met.
type GetDingTalkHookOrgGroupMemberReply_DingTalkHookMemberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDingTalkHookOrgGroupMemberReply_DingTalkHookMemberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDingTalkHookOrgGroupMemberReply_DingTalkHookMemberMultiError) AllErrors() []error {
	return m
}

// GetDingTalkHookOrgGroupMemberReply_DingTalkHookMemberValidationError is the
// validation error returned by
// GetDingTalkHookOrgGroupMemberReply_DingTalkHookMember.Validate if the
// designated constraints aren't met.
type GetDingTalkHookOrgGroupMemberReply_DingTalkHookMemberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDingTalkHookOrgGroupMemberReply_DingTalkHookMemberValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetDingTalkHookOrgGroupMemberReply_DingTalkHookMemberValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetDingTalkHookOrgGroupMemberReply_DingTalkHookMemberValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetDingTalkHookOrgGroupMemberReply_DingTalkHookMemberValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e GetDingTalkHookOrgGroupMemberReply_DingTalkHookMemberValidationError) ErrorName() string {
	return "GetDingTalkHookOrgGroupMemberReply_DingTalkHookMemberValidationError"
}

// Error satisfies the builtin error interface
func (e GetDingTalkHookOrgGroupMemberReply_DingTalkHookMemberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDingTalkHookOrgGroupMemberReply_DingTalkHookMember.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDingTalkHookOrgGroupMemberReply_DingTalkHookMemberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDingTalkHookOrgGroupMemberReply_DingTalkHookMemberValidationError{}
