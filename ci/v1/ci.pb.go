// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.14.0
// source: ci/v1/ci.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Container
// 认证容器镜像仓库登录 - tool
type VerifyContainerRegistryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server   string `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *VerifyContainerRegistryReq) Reset() {
	*x = VerifyContainerRegistryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyContainerRegistryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyContainerRegistryReq) ProtoMessage() {}

func (x *VerifyContainerRegistryReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyContainerRegistryReq.ProtoReflect.Descriptor instead.
func (*VerifyContainerRegistryReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{0}
}

func (x *VerifyContainerRegistryReq) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

func (x *VerifyContainerRegistryReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *VerifyContainerRegistryReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type VerifyContainerRegistryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *VerifyContainerRegistryReply) Reset() {
	*x = VerifyContainerRegistryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyContainerRegistryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyContainerRegistryReply) ProtoMessage() {}

func (x *VerifyContainerRegistryReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyContainerRegistryReply.ProtoReflect.Descriptor instead.
func (*VerifyContainerRegistryReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{1}
}

func (x *VerifyContainerRegistryReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// 同步容器镜像仓库间的镜像
type CopyContainerRegistryImageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid             string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid              string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid          string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	SrcImageRegistryUuid string `protobuf:"bytes,4,opt,name=srcImageRegistryUuid,proto3" json:"srcImageRegistryUuid,omitempty"`
	//string srcImageRegistryUuid = 4 [(validate.rules).string.min_len = 1];
	//string srcUsername = 4 [(validate.rules).string.min_len = 1];
	//string srcPassword = 5 [(validate.rules).string.min_len = 1];
	SrcImage              string `protobuf:"bytes,6,opt,name=srcImage,proto3" json:"srcImage,omitempty"`
	DestImageRegistryUuid string `protobuf:"bytes,7,opt,name=destImageRegistryUuid,proto3" json:"destImageRegistryUuid,omitempty"`
	//string destUsername = 7 [(validate.rules).string.min_len = 1];
	//string destPassword = 8 [(validate.rules).string.min_len = 1];
	DestImage string `protobuf:"bytes,9,opt,name=destImage,proto3" json:"destImage,omitempty"`
	Timeout   int32  `protobuf:"varint,10,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *CopyContainerRegistryImageReq) Reset() {
	*x = CopyContainerRegistryImageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyContainerRegistryImageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyContainerRegistryImageReq) ProtoMessage() {}

func (x *CopyContainerRegistryImageReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyContainerRegistryImageReq.ProtoReflect.Descriptor instead.
func (*CopyContainerRegistryImageReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{2}
}

func (x *CopyContainerRegistryImageReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *CopyContainerRegistryImageReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *CopyContainerRegistryImageReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *CopyContainerRegistryImageReq) GetSrcImageRegistryUuid() string {
	if x != nil {
		return x.SrcImageRegistryUuid
	}
	return ""
}

func (x *CopyContainerRegistryImageReq) GetSrcImage() string {
	if x != nil {
		return x.SrcImage
	}
	return ""
}

func (x *CopyContainerRegistryImageReq) GetDestImageRegistryUuid() string {
	if x != nil {
		return x.DestImageRegistryUuid
	}
	return ""
}

func (x *CopyContainerRegistryImageReq) GetDestImage() string {
	if x != nil {
		return x.DestImage
	}
	return ""
}

func (x *CopyContainerRegistryImageReq) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type CopyContainerRegistryImageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *CopyContainerRegistryImageReply) Reset() {
	*x = CopyContainerRegistryImageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyContainerRegistryImageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyContainerRegistryImageReply) ProtoMessage() {}

func (x *CopyContainerRegistryImageReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyContainerRegistryImageReply.ProtoReflect.Descriptor instead.
func (*CopyContainerRegistryImageReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{3}
}

func (x *CopyContainerRegistryImageReply) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

// 列出容器镜像仓库镜像同步任务
type ListCopyContainerRegistryImageTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
}

func (x *ListCopyContainerRegistryImageTaskReq) Reset() {
	*x = ListCopyContainerRegistryImageTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCopyContainerRegistryImageTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCopyContainerRegistryImageTaskReq) ProtoMessage() {}

func (x *ListCopyContainerRegistryImageTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCopyContainerRegistryImageTaskReq.ProtoReflect.Descriptor instead.
func (*ListCopyContainerRegistryImageTaskReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{4}
}

func (x *ListCopyContainerRegistryImageTaskReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListCopyContainerRegistryImageTaskReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListCopyContainerRegistryImageTaskReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

type ListCopyContainerRegistryImageTaskReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks []*ListCopyContainerRegistryImageTaskReply_Task `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
}

func (x *ListCopyContainerRegistryImageTaskReply) Reset() {
	*x = ListCopyContainerRegistryImageTaskReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCopyContainerRegistryImageTaskReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCopyContainerRegistryImageTaskReply) ProtoMessage() {}

func (x *ListCopyContainerRegistryImageTaskReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCopyContainerRegistryImageTaskReply.ProtoReflect.Descriptor instead.
func (*ListCopyContainerRegistryImageTaskReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{5}
}

func (x *ListCopyContainerRegistryImageTaskReply) GetTasks() []*ListCopyContainerRegistryImageTaskReply_Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

// 获取容器镜像仓库镜像同步任务
type GetCopyContainerRegistryImageTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	TaskId      string `protobuf:"bytes,4,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *GetCopyContainerRegistryImageTaskReq) Reset() {
	*x = GetCopyContainerRegistryImageTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCopyContainerRegistryImageTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCopyContainerRegistryImageTaskReq) ProtoMessage() {}

func (x *GetCopyContainerRegistryImageTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCopyContainerRegistryImageTaskReq.ProtoReflect.Descriptor instead.
func (*GetCopyContainerRegistryImageTaskReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{6}
}

func (x *GetCopyContainerRegistryImageTaskReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *GetCopyContainerRegistryImageTaskReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *GetCopyContainerRegistryImageTaskReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *GetCopyContainerRegistryImageTaskReq) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type GetCopyContainerRegistryImageTaskReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId        string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	UserUuid      string `protobuf:"bytes,2,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid       string `protobuf:"bytes,3,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid   string `protobuf:"bytes,4,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	RunId         string `protobuf:"bytes,5,opt,name=runId,proto3" json:"runId,omitempty"`
	SrcImage      string `protobuf:"bytes,6,opt,name=srcImage,proto3" json:"srcImage,omitempty"`
	DestImage     string `protobuf:"bytes,7,opt,name=destImage,proto3" json:"destImage,omitempty"`
	Result        int32  `protobuf:"varint,8,opt,name=result,proto3" json:"result,omitempty"`
	Describe      string `protobuf:"bytes,9,opt,name=describe,proto3" json:"describe,omitempty"`
	StartExecTime int64  `protobuf:"varint,10,opt,name=startExecTime,proto3" json:"startExecTime,omitempty"`
	EndExecTime   int64  `protobuf:"varint,11,opt,name=endExecTime,proto3" json:"endExecTime,omitempty"`
	CreateTime    int64  `protobuf:"varint,12,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *GetCopyContainerRegistryImageTaskReply) Reset() {
	*x = GetCopyContainerRegistryImageTaskReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCopyContainerRegistryImageTaskReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCopyContainerRegistryImageTaskReply) ProtoMessage() {}

func (x *GetCopyContainerRegistryImageTaskReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCopyContainerRegistryImageTaskReply.ProtoReflect.Descriptor instead.
func (*GetCopyContainerRegistryImageTaskReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{7}
}

func (x *GetCopyContainerRegistryImageTaskReply) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *GetCopyContainerRegistryImageTaskReply) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *GetCopyContainerRegistryImageTaskReply) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *GetCopyContainerRegistryImageTaskReply) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *GetCopyContainerRegistryImageTaskReply) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *GetCopyContainerRegistryImageTaskReply) GetSrcImage() string {
	if x != nil {
		return x.SrcImage
	}
	return ""
}

func (x *GetCopyContainerRegistryImageTaskReply) GetDestImage() string {
	if x != nil {
		return x.DestImage
	}
	return ""
}

func (x *GetCopyContainerRegistryImageTaskReply) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *GetCopyContainerRegistryImageTaskReply) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *GetCopyContainerRegistryImageTaskReply) GetStartExecTime() int64 {
	if x != nil {
		return x.StartExecTime
	}
	return 0
}

func (x *GetCopyContainerRegistryImageTaskReply) GetEndExecTime() int64 {
	if x != nil {
		return x.EndExecTime
	}
	return 0
}

func (x *GetCopyContainerRegistryImageTaskReply) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

// 查看容器镜像信息 - tool
type InspectContainerImageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Image    string `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *InspectContainerImageReq) Reset() {
	*x = InspectContainerImageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectContainerImageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectContainerImageReq) ProtoMessage() {}

func (x *InspectContainerImageReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectContainerImageReq.ProtoReflect.Descriptor instead.
func (*InspectContainerImageReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{8}
}

func (x *InspectContainerImageReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *InspectContainerImageReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *InspectContainerImageReq) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

type InspectContainerImageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *InspectContainerImageReply) Reset() {
	*x = InspectContainerImageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectContainerImageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectContainerImageReply) ProtoMessage() {}

func (x *InspectContainerImageReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectContainerImageReply.ProtoReflect.Descriptor instead.
func (*InspectContainerImageReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{9}
}

func (x *InspectContainerImageReply) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// 列出容器仓库镜像 Tags
type ListContainerImageTagsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username   string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password   string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Repository string `protobuf:"bytes,3,opt,name=repository,proto3" json:"repository,omitempty"`
}

func (x *ListContainerImageTagsReq) Reset() {
	*x = ListContainerImageTagsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContainerImageTagsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContainerImageTagsReq) ProtoMessage() {}

func (x *ListContainerImageTagsReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContainerImageTagsReq.ProtoReflect.Descriptor instead.
func (*ListContainerImageTagsReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{10}
}

func (x *ListContainerImageTagsReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ListContainerImageTagsReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ListContainerImageTagsReq) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

type ListContainerImageTagsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository string   `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	Tags       []string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *ListContainerImageTagsReply) Reset() {
	*x = ListContainerImageTagsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContainerImageTagsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContainerImageTagsReply) ProtoMessage() {}

func (x *ListContainerImageTagsReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContainerImageTagsReply.ProtoReflect.Descriptor instead.
func (*ListContainerImageTagsReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{11}
}

func (x *ListContainerImageTagsReply) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *ListContainerImageTagsReply) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// 1. *************** 代码扫描 ******************
// 创建代码扫描私有模版
type CreateCodeScanPrivateTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	Command     string `protobuf:"bytes,4,opt,name=command,proto3" json:"command,omitempty"`
	Describe    string `protobuf:"bytes,5,opt,name=describe,proto3" json:"describe,omitempty"`
}

func (x *CreateCodeScanPrivateTemplateReq) Reset() {
	*x = CreateCodeScanPrivateTemplateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCodeScanPrivateTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCodeScanPrivateTemplateReq) ProtoMessage() {}

func (x *CreateCodeScanPrivateTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCodeScanPrivateTemplateReq.ProtoReflect.Descriptor instead.
func (*CreateCodeScanPrivateTemplateReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{12}
}

func (x *CreateCodeScanPrivateTemplateReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *CreateCodeScanPrivateTemplateReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *CreateCodeScanPrivateTemplateReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *CreateCodeScanPrivateTemplateReq) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *CreateCodeScanPrivateTemplateReq) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

type CreateCodeScanPrivateTemplateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CreateCodeScanPrivateTemplateReply) Reset() {
	*x = CreateCodeScanPrivateTemplateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCodeScanPrivateTemplateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCodeScanPrivateTemplateReply) ProtoMessage() {}

func (x *CreateCodeScanPrivateTemplateReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCodeScanPrivateTemplateReply.ProtoReflect.Descriptor instead.
func (*CreateCodeScanPrivateTemplateReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{13}
}

func (x *CreateCodeScanPrivateTemplateReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// 列出代码扫描模版
type ListCodeScanTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid     string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid      string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid  string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	TemplateType int32  `protobuf:"varint,4,opt,name=templateType,proto3" json:"templateType,omitempty"` // 模版类型
}

func (x *ListCodeScanTemplateReq) Reset() {
	*x = ListCodeScanTemplateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCodeScanTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCodeScanTemplateReq) ProtoMessage() {}

func (x *ListCodeScanTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCodeScanTemplateReq.ProtoReflect.Descriptor instead.
func (*ListCodeScanTemplateReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{14}
}

func (x *ListCodeScanTemplateReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListCodeScanTemplateReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListCodeScanTemplateReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ListCodeScanTemplateReq) GetTemplateType() int32 {
	if x != nil {
		return x.TemplateType
	}
	return 0
}

type ListCodeScanTemplateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Templates []*ListCodeScanTemplateReply_Template `protobuf:"bytes,1,rep,name=templates,proto3" json:"templates,omitempty"`
}

func (x *ListCodeScanTemplateReply) Reset() {
	*x = ListCodeScanTemplateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCodeScanTemplateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCodeScanTemplateReply) ProtoMessage() {}

func (x *ListCodeScanTemplateReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCodeScanTemplateReply.ProtoReflect.Descriptor instead.
func (*ListCodeScanTemplateReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{15}
}

func (x *ListCodeScanTemplateReply) GetTemplates() []*ListCodeScanTemplateReply_Template {
	if x != nil {
		return x.Templates
	}
	return nil
}

// 获取代码扫描模版
type GetCodeScanTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid     string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid      string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid  string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	TemplateUuid string `protobuf:"bytes,4,opt,name=templateUuid,proto3" json:"templateUuid,omitempty"`
	IsPublic     bool   `protobuf:"varint,5,opt,name=isPublic,proto3" json:"isPublic,omitempty"`
}

func (x *GetCodeScanTemplateReq) Reset() {
	*x = GetCodeScanTemplateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCodeScanTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCodeScanTemplateReq) ProtoMessage() {}

func (x *GetCodeScanTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCodeScanTemplateReq.ProtoReflect.Descriptor instead.
func (*GetCodeScanTemplateReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{16}
}

func (x *GetCodeScanTemplateReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *GetCodeScanTemplateReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *GetCodeScanTemplateReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *GetCodeScanTemplateReq) GetTemplateUuid() string {
	if x != nil {
		return x.TemplateUuid
	}
	return ""
}

func (x *GetCodeScanTemplateReq) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

type GetCodeScanTemplateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Public     bool   `protobuf:"varint,1,opt,name=public,proto3" json:"public,omitempty"`
	Uuid       string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Describe   string `protobuf:"bytes,3,opt,name=describe,proto3" json:"describe,omitempty"`
	Command    string `protobuf:"bytes,4,opt,name=command,proto3" json:"command,omitempty"`
	CreateTime int64  `protobuf:"varint,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *GetCodeScanTemplateReply) Reset() {
	*x = GetCodeScanTemplateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCodeScanTemplateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCodeScanTemplateReply) ProtoMessage() {}

func (x *GetCodeScanTemplateReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCodeScanTemplateReply.ProtoReflect.Descriptor instead.
func (*GetCodeScanTemplateReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{17}
}

func (x *GetCodeScanTemplateReply) GetPublic() bool {
	if x != nil {
		return x.Public
	}
	return false
}

func (x *GetCodeScanTemplateReply) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *GetCodeScanTemplateReply) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *GetCodeScanTemplateReply) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *GetCodeScanTemplateReply) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

// 删除代码扫描模版
type DelCodeScanTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid     string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid      string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid  string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	TemplateUuid string `protobuf:"bytes,4,opt,name=templateUuid,proto3" json:"templateUuid,omitempty"`
}

func (x *DelCodeScanTemplateReq) Reset() {
	*x = DelCodeScanTemplateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelCodeScanTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelCodeScanTemplateReq) ProtoMessage() {}

func (x *DelCodeScanTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelCodeScanTemplateReq.ProtoReflect.Descriptor instead.
func (*DelCodeScanTemplateReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{18}
}

func (x *DelCodeScanTemplateReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *DelCodeScanTemplateReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *DelCodeScanTemplateReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *DelCodeScanTemplateReq) GetTemplateUuid() string {
	if x != nil {
		return x.TemplateUuid
	}
	return ""
}

type DelCodeScanTemplateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *DelCodeScanTemplateReply) Reset() {
	*x = DelCodeScanTemplateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelCodeScanTemplateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelCodeScanTemplateReply) ProtoMessage() {}

func (x *DelCodeScanTemplateReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelCodeScanTemplateReply.ProtoReflect.Descriptor instead.
func (*DelCodeScanTemplateReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{19}
}

func (x *DelCodeScanTemplateReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// 执行代码扫描任务
type ExecCodeScanTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	TemplateUuid   string `protobuf:"bytes,4,opt,name=templateUuid,proto3" json:"templateUuid,omitempty"`
	PublicTemplate bool   `protobuf:"varint,5,opt,name=publicTemplate,proto3" json:"publicTemplate,omitempty"`
	RepoUuid       string `protobuf:"bytes,6,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	RepoUrl        string `protobuf:"bytes,7,opt,name=repoUrl,proto3" json:"repoUrl,omitempty"`
	Token          string `protobuf:"bytes,8,opt,name=token,proto3" json:"token,omitempty"`
	Branch         string `protobuf:"bytes,9,opt,name=branch,proto3" json:"branch,omitempty"`
}

func (x *ExecCodeScanTaskReq) Reset() {
	*x = ExecCodeScanTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecCodeScanTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecCodeScanTaskReq) ProtoMessage() {}

func (x *ExecCodeScanTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecCodeScanTaskReq.ProtoReflect.Descriptor instead.
func (*ExecCodeScanTaskReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{20}
}

func (x *ExecCodeScanTaskReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ExecCodeScanTaskReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ExecCodeScanTaskReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ExecCodeScanTaskReq) GetTemplateUuid() string {
	if x != nil {
		return x.TemplateUuid
	}
	return ""
}

func (x *ExecCodeScanTaskReq) GetPublicTemplate() bool {
	if x != nil {
		return x.PublicTemplate
	}
	return false
}

func (x *ExecCodeScanTaskReq) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *ExecCodeScanTaskReq) GetRepoUrl() string {
	if x != nil {
		return x.RepoUrl
	}
	return ""
}

func (x *ExecCodeScanTaskReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ExecCodeScanTaskReq) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

type ExecCodeScanTaskReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *ExecCodeScanTaskReply) Reset() {
	*x = ExecCodeScanTaskReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecCodeScanTaskReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecCodeScanTaskReply) ProtoMessage() {}

func (x *ExecCodeScanTaskReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecCodeScanTaskReply.ProtoReflect.Descriptor instead.
func (*ExecCodeScanTaskReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{21}
}

func (x *ExecCodeScanTaskReply) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

// 获取代码扫描任务
type GetCodeScanTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	RepoUuid    string `protobuf:"bytes,4,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	TaskId      string `protobuf:"bytes,5,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *GetCodeScanTaskReq) Reset() {
	*x = GetCodeScanTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCodeScanTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCodeScanTaskReq) ProtoMessage() {}

func (x *GetCodeScanTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCodeScanTaskReq.ProtoReflect.Descriptor instead.
func (*GetCodeScanTaskReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{22}
}

func (x *GetCodeScanTaskReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *GetCodeScanTaskReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *GetCodeScanTaskReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *GetCodeScanTaskReq) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *GetCodeScanTaskReq) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type GetCodeScanTaskReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId           string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	RunId            string `protobuf:"bytes,2,opt,name=runId,proto3" json:"runId,omitempty"`
	UserUuid         string `protobuf:"bytes,3,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid          string `protobuf:"bytes,4,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid      string `protobuf:"bytes,5,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	RepoUuid         string `protobuf:"bytes,6,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	RepoUrl          string `protobuf:"bytes,7,opt,name=repoUrl,proto3" json:"repoUrl,omitempty"`
	RepoBranch       string `protobuf:"bytes,8,opt,name=repoBranch,proto3" json:"repoBranch,omitempty"`
	RepoCommitId     string `protobuf:"bytes,9,opt,name=repoCommitId,proto3" json:"repoCommitId,omitempty"`
	RepoCommitMsg    string `protobuf:"bytes,10,opt,name=repoCommitMsg,proto3" json:"repoCommitMsg,omitempty"`
	Result           int32  `protobuf:"varint,11,opt,name=result,proto3" json:"result,omitempty"`    // 0: 执行中， 1: 成功，-1: 失败
	Describe         string `protobuf:"bytes,12,opt,name=describe,proto3" json:"describe,omitempty"` // 执行过程内容
	TemplateUuid     string `protobuf:"bytes,13,opt,name=templateUuid,proto3" json:"templateUuid,omitempty"`
	IsPublicTemplate bool   `protobuf:"varint,14,opt,name=isPublicTemplate,proto3" json:"isPublicTemplate,omitempty"`
	Command          string `protobuf:"bytes,15,opt,name=command,proto3" json:"command,omitempty"`
	CreateTime       int64  `protobuf:"varint,16,opt,name=createTime,proto3" json:"createTime,omitempty"`
	StartExecTime    int64  `protobuf:"varint,17,opt,name=startExecTime,proto3" json:"startExecTime,omitempty"`
	EndExecTime      int64  `protobuf:"varint,18,opt,name=endExecTime,proto3" json:"endExecTime,omitempty"`
}

func (x *GetCodeScanTaskReply) Reset() {
	*x = GetCodeScanTaskReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCodeScanTaskReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCodeScanTaskReply) ProtoMessage() {}

func (x *GetCodeScanTaskReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCodeScanTaskReply.ProtoReflect.Descriptor instead.
func (*GetCodeScanTaskReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{23}
}

func (x *GetCodeScanTaskReply) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *GetCodeScanTaskReply) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *GetCodeScanTaskReply) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *GetCodeScanTaskReply) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *GetCodeScanTaskReply) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *GetCodeScanTaskReply) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *GetCodeScanTaskReply) GetRepoUrl() string {
	if x != nil {
		return x.RepoUrl
	}
	return ""
}

func (x *GetCodeScanTaskReply) GetRepoBranch() string {
	if x != nil {
		return x.RepoBranch
	}
	return ""
}

func (x *GetCodeScanTaskReply) GetRepoCommitId() string {
	if x != nil {
		return x.RepoCommitId
	}
	return ""
}

func (x *GetCodeScanTaskReply) GetRepoCommitMsg() string {
	if x != nil {
		return x.RepoCommitMsg
	}
	return ""
}

func (x *GetCodeScanTaskReply) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *GetCodeScanTaskReply) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *GetCodeScanTaskReply) GetTemplateUuid() string {
	if x != nil {
		return x.TemplateUuid
	}
	return ""
}

func (x *GetCodeScanTaskReply) GetIsPublicTemplate() bool {
	if x != nil {
		return x.IsPublicTemplate
	}
	return false
}

func (x *GetCodeScanTaskReply) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *GetCodeScanTaskReply) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *GetCodeScanTaskReply) GetStartExecTime() int64 {
	if x != nil {
		return x.StartExecTime
	}
	return 0
}

func (x *GetCodeScanTaskReply) GetEndExecTime() int64 {
	if x != nil {
		return x.EndExecTime
	}
	return 0
}

// 列出代码扫描任务
type ListCodeScanTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgUuid     string `protobuf:"bytes,1,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,2,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	UserUuid    string `protobuf:"bytes,3,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	RepoUuid    string `protobuf:"bytes,4,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
}

func (x *ListCodeScanTaskReq) Reset() {
	*x = ListCodeScanTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCodeScanTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCodeScanTaskReq) ProtoMessage() {}

func (x *ListCodeScanTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCodeScanTaskReq.ProtoReflect.Descriptor instead.
func (*ListCodeScanTaskReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{24}
}

func (x *ListCodeScanTaskReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListCodeScanTaskReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ListCodeScanTaskReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListCodeScanTaskReq) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

type ListCodeScanTaskReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeScans []*ListCodeScanTaskReply_CodeScan `protobuf:"bytes,1,rep,name=CodeScans,proto3" json:"CodeScans,omitempty"`
}

func (x *ListCodeScanTaskReply) Reset() {
	*x = ListCodeScanTaskReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCodeScanTaskReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCodeScanTaskReply) ProtoMessage() {}

func (x *ListCodeScanTaskReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCodeScanTaskReply.ProtoReflect.Descriptor instead.
func (*ListCodeScanTaskReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{25}
}

func (x *ListCodeScanTaskReply) GetCodeScans() []*ListCodeScanTaskReply_CodeScan {
	if x != nil {
		return x.CodeScans
	}
	return nil
}

// 2. ******************* 单元测试 *******************
// 创建单元测试模版
type CreateUnitTestPrivateTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	Command     string `protobuf:"bytes,4,opt,name=command,proto3" json:"command,omitempty"`
	Describe    string `protobuf:"bytes,5,opt,name=describe,proto3" json:"describe,omitempty"`
}

func (x *CreateUnitTestPrivateTemplateReq) Reset() {
	*x = CreateUnitTestPrivateTemplateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUnitTestPrivateTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUnitTestPrivateTemplateReq) ProtoMessage() {}

func (x *CreateUnitTestPrivateTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUnitTestPrivateTemplateReq.ProtoReflect.Descriptor instead.
func (*CreateUnitTestPrivateTemplateReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{26}
}

func (x *CreateUnitTestPrivateTemplateReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *CreateUnitTestPrivateTemplateReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *CreateUnitTestPrivateTemplateReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *CreateUnitTestPrivateTemplateReq) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *CreateUnitTestPrivateTemplateReq) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

type CreateUnitTestPrivateTemplateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CreateUnitTestPrivateTemplateReply) Reset() {
	*x = CreateUnitTestPrivateTemplateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUnitTestPrivateTemplateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUnitTestPrivateTemplateReply) ProtoMessage() {}

func (x *CreateUnitTestPrivateTemplateReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUnitTestPrivateTemplateReply.ProtoReflect.Descriptor instead.
func (*CreateUnitTestPrivateTemplateReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{27}
}

func (x *CreateUnitTestPrivateTemplateReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// 列出单元测试模版
type ListUnitTestTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid     string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid      string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid  string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	TemplateType int32  `protobuf:"varint,4,opt,name=templateType,proto3" json:"templateType,omitempty"` // 模版类型
}

func (x *ListUnitTestTemplateReq) Reset() {
	*x = ListUnitTestTemplateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUnitTestTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUnitTestTemplateReq) ProtoMessage() {}

func (x *ListUnitTestTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUnitTestTemplateReq.ProtoReflect.Descriptor instead.
func (*ListUnitTestTemplateReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{28}
}

func (x *ListUnitTestTemplateReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListUnitTestTemplateReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListUnitTestTemplateReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ListUnitTestTemplateReq) GetTemplateType() int32 {
	if x != nil {
		return x.TemplateType
	}
	return 0
}

type ListUnitTestTemplateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Templates []*ListUnitTestTemplateReply_Template `protobuf:"bytes,1,rep,name=templates,proto3" json:"templates,omitempty"`
}

func (x *ListUnitTestTemplateReply) Reset() {
	*x = ListUnitTestTemplateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUnitTestTemplateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUnitTestTemplateReply) ProtoMessage() {}

func (x *ListUnitTestTemplateReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUnitTestTemplateReply.ProtoReflect.Descriptor instead.
func (*ListUnitTestTemplateReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{29}
}

func (x *ListUnitTestTemplateReply) GetTemplates() []*ListUnitTestTemplateReply_Template {
	if x != nil {
		return x.Templates
	}
	return nil
}

// 获取单元测试模版
type GetUnitTestTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid     string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid      string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid  string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	TemplateUuid string `protobuf:"bytes,4,opt,name=templateUuid,proto3" json:"templateUuid,omitempty"`
	IsPublic     bool   `protobuf:"varint,5,opt,name=isPublic,proto3" json:"isPublic,omitempty"`
}

func (x *GetUnitTestTemplateReq) Reset() {
	*x = GetUnitTestTemplateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUnitTestTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUnitTestTemplateReq) ProtoMessage() {}

func (x *GetUnitTestTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUnitTestTemplateReq.ProtoReflect.Descriptor instead.
func (*GetUnitTestTemplateReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{30}
}

func (x *GetUnitTestTemplateReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *GetUnitTestTemplateReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *GetUnitTestTemplateReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *GetUnitTestTemplateReq) GetTemplateUuid() string {
	if x != nil {
		return x.TemplateUuid
	}
	return ""
}

func (x *GetUnitTestTemplateReq) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

type GetUnitTestTemplateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Public     bool   `protobuf:"varint,1,opt,name=public,proto3" json:"public,omitempty"`
	Uuid       string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Describe   string `protobuf:"bytes,3,opt,name=describe,proto3" json:"describe,omitempty"`
	Command    string `protobuf:"bytes,4,opt,name=command,proto3" json:"command,omitempty"`
	CreateTime int64  `protobuf:"varint,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *GetUnitTestTemplateReply) Reset() {
	*x = GetUnitTestTemplateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUnitTestTemplateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUnitTestTemplateReply) ProtoMessage() {}

func (x *GetUnitTestTemplateReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUnitTestTemplateReply.ProtoReflect.Descriptor instead.
func (*GetUnitTestTemplateReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{31}
}

func (x *GetUnitTestTemplateReply) GetPublic() bool {
	if x != nil {
		return x.Public
	}
	return false
}

func (x *GetUnitTestTemplateReply) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *GetUnitTestTemplateReply) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *GetUnitTestTemplateReply) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *GetUnitTestTemplateReply) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

// 删除单元测试模版
type DelUnitTestTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid     string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid      string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid  string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	TemplateUuid string `protobuf:"bytes,4,opt,name=templateUuid,proto3" json:"templateUuid,omitempty"`
}

func (x *DelUnitTestTemplateReq) Reset() {
	*x = DelUnitTestTemplateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelUnitTestTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelUnitTestTemplateReq) ProtoMessage() {}

func (x *DelUnitTestTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelUnitTestTemplateReq.ProtoReflect.Descriptor instead.
func (*DelUnitTestTemplateReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{32}
}

func (x *DelUnitTestTemplateReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *DelUnitTestTemplateReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *DelUnitTestTemplateReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *DelUnitTestTemplateReq) GetTemplateUuid() string {
	if x != nil {
		return x.TemplateUuid
	}
	return ""
}

type DelUnitTestTemplateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *DelUnitTestTemplateReply) Reset() {
	*x = DelUnitTestTemplateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelUnitTestTemplateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelUnitTestTemplateReply) ProtoMessage() {}

func (x *DelUnitTestTemplateReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelUnitTestTemplateReply.ProtoReflect.Descriptor instead.
func (*DelUnitTestTemplateReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{33}
}

func (x *DelUnitTestTemplateReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// 执行单元测试任务
type ExecUnitTestTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	TemplateUuid   string `protobuf:"bytes,4,opt,name=templateUuid,proto3" json:"templateUuid,omitempty"`
	PublicTemplate bool   `protobuf:"varint,5,opt,name=publicTemplate,proto3" json:"publicTemplate,omitempty"`
	RepoUuid       string `protobuf:"bytes,6,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	RepoUrl        string `protobuf:"bytes,7,opt,name=repoUrl,proto3" json:"repoUrl,omitempty"`
	Token          string `protobuf:"bytes,8,opt,name=token,proto3" json:"token,omitempty"`
	Branch         string `protobuf:"bytes,9,opt,name=branch,proto3" json:"branch,omitempty"`
}

func (x *ExecUnitTestTaskReq) Reset() {
	*x = ExecUnitTestTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecUnitTestTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecUnitTestTaskReq) ProtoMessage() {}

func (x *ExecUnitTestTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecUnitTestTaskReq.ProtoReflect.Descriptor instead.
func (*ExecUnitTestTaskReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{34}
}

func (x *ExecUnitTestTaskReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ExecUnitTestTaskReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ExecUnitTestTaskReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ExecUnitTestTaskReq) GetTemplateUuid() string {
	if x != nil {
		return x.TemplateUuid
	}
	return ""
}

func (x *ExecUnitTestTaskReq) GetPublicTemplate() bool {
	if x != nil {
		return x.PublicTemplate
	}
	return false
}

func (x *ExecUnitTestTaskReq) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *ExecUnitTestTaskReq) GetRepoUrl() string {
	if x != nil {
		return x.RepoUrl
	}
	return ""
}

func (x *ExecUnitTestTaskReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ExecUnitTestTaskReq) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

type ExecUnitTestTaskReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *ExecUnitTestTaskReply) Reset() {
	*x = ExecUnitTestTaskReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecUnitTestTaskReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecUnitTestTaskReply) ProtoMessage() {}

func (x *ExecUnitTestTaskReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecUnitTestTaskReply.ProtoReflect.Descriptor instead.
func (*ExecUnitTestTaskReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{35}
}

func (x *ExecUnitTestTaskReply) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

// 获取单元测试任务
type GetUnitTestTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	RepoUuid    string `protobuf:"bytes,4,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	TaskId      string `protobuf:"bytes,5,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *GetUnitTestTaskReq) Reset() {
	*x = GetUnitTestTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUnitTestTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUnitTestTaskReq) ProtoMessage() {}

func (x *GetUnitTestTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUnitTestTaskReq.ProtoReflect.Descriptor instead.
func (*GetUnitTestTaskReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{36}
}

func (x *GetUnitTestTaskReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *GetUnitTestTaskReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *GetUnitTestTaskReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *GetUnitTestTaskReq) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *GetUnitTestTaskReq) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type GetUnitTestTaskReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId           string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	RunId            string `protobuf:"bytes,2,opt,name=runId,proto3" json:"runId,omitempty"`
	UserUuid         string `protobuf:"bytes,3,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid          string `protobuf:"bytes,4,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid      string `protobuf:"bytes,5,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	RepoUuid         string `protobuf:"bytes,6,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	RepoUrl          string `protobuf:"bytes,7,opt,name=repoUrl,proto3" json:"repoUrl,omitempty"`
	RepoBranch       string `protobuf:"bytes,8,opt,name=repoBranch,proto3" json:"repoBranch,omitempty"`
	RepoCommitId     string `protobuf:"bytes,9,opt,name=repoCommitId,proto3" json:"repoCommitId,omitempty"`
	RepoCommitMsg    string `protobuf:"bytes,10,opt,name=repoCommitMsg,proto3" json:"repoCommitMsg,omitempty"`
	Result           int32  `protobuf:"varint,11,opt,name=result,proto3" json:"result,omitempty"`    // 0: 执行中， 1: 成功，-1: 失败
	Describe         string `protobuf:"bytes,12,opt,name=describe,proto3" json:"describe,omitempty"` // 执行过程内容
	TemplateUuid     string `protobuf:"bytes,13,opt,name=templateUuid,proto3" json:"templateUuid,omitempty"`
	IsPublicTemplate bool   `protobuf:"varint,14,opt,name=isPublicTemplate,proto3" json:"isPublicTemplate,omitempty"`
	Command          string `protobuf:"bytes,15,opt,name=command,proto3" json:"command,omitempty"`
	CreateTime       int64  `protobuf:"varint,16,opt,name=createTime,proto3" json:"createTime,omitempty"`
	StartExecTime    int64  `protobuf:"varint,17,opt,name=startExecTime,proto3" json:"startExecTime,omitempty"`
	EndExecTime      int64  `protobuf:"varint,18,opt,name=endExecTime,proto3" json:"endExecTime,omitempty"`
}

func (x *GetUnitTestTaskReply) Reset() {
	*x = GetUnitTestTaskReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUnitTestTaskReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUnitTestTaskReply) ProtoMessage() {}

func (x *GetUnitTestTaskReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUnitTestTaskReply.ProtoReflect.Descriptor instead.
func (*GetUnitTestTaskReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{37}
}

func (x *GetUnitTestTaskReply) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *GetUnitTestTaskReply) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *GetUnitTestTaskReply) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *GetUnitTestTaskReply) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *GetUnitTestTaskReply) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *GetUnitTestTaskReply) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *GetUnitTestTaskReply) GetRepoUrl() string {
	if x != nil {
		return x.RepoUrl
	}
	return ""
}

func (x *GetUnitTestTaskReply) GetRepoBranch() string {
	if x != nil {
		return x.RepoBranch
	}
	return ""
}

func (x *GetUnitTestTaskReply) GetRepoCommitId() string {
	if x != nil {
		return x.RepoCommitId
	}
	return ""
}

func (x *GetUnitTestTaskReply) GetRepoCommitMsg() string {
	if x != nil {
		return x.RepoCommitMsg
	}
	return ""
}

func (x *GetUnitTestTaskReply) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *GetUnitTestTaskReply) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *GetUnitTestTaskReply) GetTemplateUuid() string {
	if x != nil {
		return x.TemplateUuid
	}
	return ""
}

func (x *GetUnitTestTaskReply) GetIsPublicTemplate() bool {
	if x != nil {
		return x.IsPublicTemplate
	}
	return false
}

func (x *GetUnitTestTaskReply) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *GetUnitTestTaskReply) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *GetUnitTestTaskReply) GetStartExecTime() int64 {
	if x != nil {
		return x.StartExecTime
	}
	return 0
}

func (x *GetUnitTestTaskReply) GetEndExecTime() int64 {
	if x != nil {
		return x.EndExecTime
	}
	return 0
}

// 列出单元测试任务
type ListUnitTestTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	RepoUuid    string `protobuf:"bytes,4,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
}

func (x *ListUnitTestTaskReq) Reset() {
	*x = ListUnitTestTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUnitTestTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUnitTestTaskReq) ProtoMessage() {}

func (x *ListUnitTestTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUnitTestTaskReq.ProtoReflect.Descriptor instead.
func (*ListUnitTestTaskReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{38}
}

func (x *ListUnitTestTaskReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListUnitTestTaskReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListUnitTestTaskReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ListUnitTestTaskReq) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

type ListUnitTestTaskReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnitTests []*ListUnitTestTaskReply_UnitTest `protobuf:"bytes,1,rep,name=unitTests,proto3" json:"unitTests,omitempty"`
}

func (x *ListUnitTestTaskReply) Reset() {
	*x = ListUnitTestTaskReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUnitTestTaskReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUnitTestTaskReply) ProtoMessage() {}

func (x *ListUnitTestTaskReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUnitTestTaskReply.ProtoReflect.Descriptor instead.
func (*ListUnitTestTaskReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{39}
}

func (x *ListUnitTestTaskReply) GetUnitTests() []*ListUnitTestTaskReply_UnitTest {
	if x != nil {
		return x.UnitTests
	}
	return nil
}

// 3. *********************** 构建程序 **************************
// 创建构建程序模版
type CreateBuildProgramPrivateTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	Command     string `protobuf:"bytes,4,opt,name=command,proto3" json:"command,omitempty"`
	Describe    string `protobuf:"bytes,5,opt,name=describe,proto3" json:"describe,omitempty"`
}

func (x *CreateBuildProgramPrivateTemplateReq) Reset() {
	*x = CreateBuildProgramPrivateTemplateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBuildProgramPrivateTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBuildProgramPrivateTemplateReq) ProtoMessage() {}

func (x *CreateBuildProgramPrivateTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBuildProgramPrivateTemplateReq.ProtoReflect.Descriptor instead.
func (*CreateBuildProgramPrivateTemplateReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{40}
}

func (x *CreateBuildProgramPrivateTemplateReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *CreateBuildProgramPrivateTemplateReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *CreateBuildProgramPrivateTemplateReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *CreateBuildProgramPrivateTemplateReq) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *CreateBuildProgramPrivateTemplateReq) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

type CreateBuildProgramPrivateTemplateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CreateBuildProgramPrivateTemplateReply) Reset() {
	*x = CreateBuildProgramPrivateTemplateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBuildProgramPrivateTemplateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBuildProgramPrivateTemplateReply) ProtoMessage() {}

func (x *CreateBuildProgramPrivateTemplateReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBuildProgramPrivateTemplateReply.ProtoReflect.Descriptor instead.
func (*CreateBuildProgramPrivateTemplateReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{41}
}

func (x *CreateBuildProgramPrivateTemplateReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// 列出构建程序模版
type ListBuildProgramTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid     string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid      string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid  string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	TemplateType int32  `protobuf:"varint,4,opt,name=templateType,proto3" json:"templateType,omitempty"` // 模版类型
}

func (x *ListBuildProgramTemplateReq) Reset() {
	*x = ListBuildProgramTemplateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBuildProgramTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBuildProgramTemplateReq) ProtoMessage() {}

func (x *ListBuildProgramTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBuildProgramTemplateReq.ProtoReflect.Descriptor instead.
func (*ListBuildProgramTemplateReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{42}
}

func (x *ListBuildProgramTemplateReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListBuildProgramTemplateReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListBuildProgramTemplateReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ListBuildProgramTemplateReq) GetTemplateType() int32 {
	if x != nil {
		return x.TemplateType
	}
	return 0
}

type ListBuildProgramTemplateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Templates []*ListBuildProgramTemplateReply_Template `protobuf:"bytes,1,rep,name=templates,proto3" json:"templates,omitempty"`
}

func (x *ListBuildProgramTemplateReply) Reset() {
	*x = ListBuildProgramTemplateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBuildProgramTemplateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBuildProgramTemplateReply) ProtoMessage() {}

func (x *ListBuildProgramTemplateReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBuildProgramTemplateReply.ProtoReflect.Descriptor instead.
func (*ListBuildProgramTemplateReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{43}
}

func (x *ListBuildProgramTemplateReply) GetTemplates() []*ListBuildProgramTemplateReply_Template {
	if x != nil {
		return x.Templates
	}
	return nil
}

// 获取构建程序模版
type GetBuildProgramTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid     string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid      string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid  string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	TemplateUuid string `protobuf:"bytes,4,opt,name=templateUuid,proto3" json:"templateUuid,omitempty"`
	IsPublic     bool   `protobuf:"varint,5,opt,name=isPublic,proto3" json:"isPublic,omitempty"`
}

func (x *GetBuildProgramTemplateReq) Reset() {
	*x = GetBuildProgramTemplateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBuildProgramTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBuildProgramTemplateReq) ProtoMessage() {}

func (x *GetBuildProgramTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBuildProgramTemplateReq.ProtoReflect.Descriptor instead.
func (*GetBuildProgramTemplateReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{44}
}

func (x *GetBuildProgramTemplateReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *GetBuildProgramTemplateReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *GetBuildProgramTemplateReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *GetBuildProgramTemplateReq) GetTemplateUuid() string {
	if x != nil {
		return x.TemplateUuid
	}
	return ""
}

func (x *GetBuildProgramTemplateReq) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

type GetBuildProgramTemplateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Public     bool   `protobuf:"varint,1,opt,name=public,proto3" json:"public,omitempty"`
	Uuid       string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Describe   string `protobuf:"bytes,3,opt,name=describe,proto3" json:"describe,omitempty"`
	Command    string `protobuf:"bytes,4,opt,name=command,proto3" json:"command,omitempty"`
	CreateTime int64  `protobuf:"varint,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *GetBuildProgramTemplateReply) Reset() {
	*x = GetBuildProgramTemplateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBuildProgramTemplateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBuildProgramTemplateReply) ProtoMessage() {}

func (x *GetBuildProgramTemplateReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBuildProgramTemplateReply.ProtoReflect.Descriptor instead.
func (*GetBuildProgramTemplateReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{45}
}

func (x *GetBuildProgramTemplateReply) GetPublic() bool {
	if x != nil {
		return x.Public
	}
	return false
}

func (x *GetBuildProgramTemplateReply) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *GetBuildProgramTemplateReply) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *GetBuildProgramTemplateReply) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *GetBuildProgramTemplateReply) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

// 删除构建程序模版
type DelBuildProgramTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid     string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid      string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid  string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	TemplateUuid string `protobuf:"bytes,4,opt,name=templateUuid,proto3" json:"templateUuid,omitempty"`
}

func (x *DelBuildProgramTemplateReq) Reset() {
	*x = DelBuildProgramTemplateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelBuildProgramTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelBuildProgramTemplateReq) ProtoMessage() {}

func (x *DelBuildProgramTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelBuildProgramTemplateReq.ProtoReflect.Descriptor instead.
func (*DelBuildProgramTemplateReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{46}
}

func (x *DelBuildProgramTemplateReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *DelBuildProgramTemplateReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *DelBuildProgramTemplateReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *DelBuildProgramTemplateReq) GetTemplateUuid() string {
	if x != nil {
		return x.TemplateUuid
	}
	return ""
}

type DelBuildProgramTemplateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *DelBuildProgramTemplateReply) Reset() {
	*x = DelBuildProgramTemplateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelBuildProgramTemplateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelBuildProgramTemplateReply) ProtoMessage() {}

func (x *DelBuildProgramTemplateReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelBuildProgramTemplateReply.ProtoReflect.Descriptor instead.
func (*DelBuildProgramTemplateReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{47}
}

func (x *DelBuildProgramTemplateReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// 执行构建程序任务
type ExecBuildProgramTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	TemplateUuid   string `protobuf:"bytes,4,opt,name=templateUuid,proto3" json:"templateUuid,omitempty"`
	PublicTemplate bool   `protobuf:"varint,5,opt,name=publicTemplate,proto3" json:"publicTemplate,omitempty"`
	RepoUuid       string `protobuf:"bytes,6,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	RepoUrl        string `protobuf:"bytes,7,opt,name=repoUrl,proto3" json:"repoUrl,omitempty"`
	Token          string `protobuf:"bytes,8,opt,name=token,proto3" json:"token,omitempty"`
	Branch         string `protobuf:"bytes,9,opt,name=branch,proto3" json:"branch,omitempty"`
}

func (x *ExecBuildProgramTaskReq) Reset() {
	*x = ExecBuildProgramTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecBuildProgramTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecBuildProgramTaskReq) ProtoMessage() {}

func (x *ExecBuildProgramTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecBuildProgramTaskReq.ProtoReflect.Descriptor instead.
func (*ExecBuildProgramTaskReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{48}
}

func (x *ExecBuildProgramTaskReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ExecBuildProgramTaskReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ExecBuildProgramTaskReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ExecBuildProgramTaskReq) GetTemplateUuid() string {
	if x != nil {
		return x.TemplateUuid
	}
	return ""
}

func (x *ExecBuildProgramTaskReq) GetPublicTemplate() bool {
	if x != nil {
		return x.PublicTemplate
	}
	return false
}

func (x *ExecBuildProgramTaskReq) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *ExecBuildProgramTaskReq) GetRepoUrl() string {
	if x != nil {
		return x.RepoUrl
	}
	return ""
}

func (x *ExecBuildProgramTaskReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ExecBuildProgramTaskReq) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

type ExecBuildProgramTaskReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *ExecBuildProgramTaskReply) Reset() {
	*x = ExecBuildProgramTaskReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecBuildProgramTaskReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecBuildProgramTaskReply) ProtoMessage() {}

func (x *ExecBuildProgramTaskReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecBuildProgramTaskReply.ProtoReflect.Descriptor instead.
func (*ExecBuildProgramTaskReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{49}
}

func (x *ExecBuildProgramTaskReply) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

// 获取构建程序任务
type GetBuildProgramTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	RepoUuid    string `protobuf:"bytes,4,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	TaskId      string `protobuf:"bytes,5,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *GetBuildProgramTaskReq) Reset() {
	*x = GetBuildProgramTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBuildProgramTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBuildProgramTaskReq) ProtoMessage() {}

func (x *GetBuildProgramTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBuildProgramTaskReq.ProtoReflect.Descriptor instead.
func (*GetBuildProgramTaskReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{50}
}

func (x *GetBuildProgramTaskReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *GetBuildProgramTaskReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *GetBuildProgramTaskReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *GetBuildProgramTaskReq) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *GetBuildProgramTaskReq) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type GetBuildProgramTaskReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId           string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	RunId            string `protobuf:"bytes,2,opt,name=runId,proto3" json:"runId,omitempty"`
	UserUuid         string `protobuf:"bytes,3,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid          string `protobuf:"bytes,4,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid      string `protobuf:"bytes,5,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	RepoUuid         string `protobuf:"bytes,6,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	RepoUrl          string `protobuf:"bytes,7,opt,name=repoUrl,proto3" json:"repoUrl,omitempty"`
	RepoBranch       string `protobuf:"bytes,8,opt,name=repoBranch,proto3" json:"repoBranch,omitempty"`
	RepoCommitId     string `protobuf:"bytes,9,opt,name=repoCommitId,proto3" json:"repoCommitId,omitempty"`
	RepoCommitMsg    string `protobuf:"bytes,10,opt,name=repoCommitMsg,proto3" json:"repoCommitMsg,omitempty"`
	Result           int32  `protobuf:"varint,11,opt,name=result,proto3" json:"result,omitempty"`    // 0: 执行中， 1: 成功，-1: 失败
	Describe         string `protobuf:"bytes,12,opt,name=describe,proto3" json:"describe,omitempty"` // 执行过程内容
	TemplateUuid     string `protobuf:"bytes,13,opt,name=templateUuid,proto3" json:"templateUuid,omitempty"`
	IsPublicTemplate bool   `protobuf:"varint,14,opt,name=isPublicTemplate,proto3" json:"isPublicTemplate,omitempty"`
	Command          string `protobuf:"bytes,15,opt,name=command,proto3" json:"command,omitempty"`
	CreateTime       int64  `protobuf:"varint,16,opt,name=createTime,proto3" json:"createTime,omitempty"`
	StartExecTime    int64  `protobuf:"varint,17,opt,name=startExecTime,proto3" json:"startExecTime,omitempty"`
	EndExecTime      int64  `protobuf:"varint,18,opt,name=endExecTime,proto3" json:"endExecTime,omitempty"`
}

func (x *GetBuildProgramTaskReply) Reset() {
	*x = GetBuildProgramTaskReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBuildProgramTaskReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBuildProgramTaskReply) ProtoMessage() {}

func (x *GetBuildProgramTaskReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBuildProgramTaskReply.ProtoReflect.Descriptor instead.
func (*GetBuildProgramTaskReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{51}
}

func (x *GetBuildProgramTaskReply) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *GetBuildProgramTaskReply) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *GetBuildProgramTaskReply) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *GetBuildProgramTaskReply) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *GetBuildProgramTaskReply) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *GetBuildProgramTaskReply) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *GetBuildProgramTaskReply) GetRepoUrl() string {
	if x != nil {
		return x.RepoUrl
	}
	return ""
}

func (x *GetBuildProgramTaskReply) GetRepoBranch() string {
	if x != nil {
		return x.RepoBranch
	}
	return ""
}

func (x *GetBuildProgramTaskReply) GetRepoCommitId() string {
	if x != nil {
		return x.RepoCommitId
	}
	return ""
}

func (x *GetBuildProgramTaskReply) GetRepoCommitMsg() string {
	if x != nil {
		return x.RepoCommitMsg
	}
	return ""
}

func (x *GetBuildProgramTaskReply) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *GetBuildProgramTaskReply) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *GetBuildProgramTaskReply) GetTemplateUuid() string {
	if x != nil {
		return x.TemplateUuid
	}
	return ""
}

func (x *GetBuildProgramTaskReply) GetIsPublicTemplate() bool {
	if x != nil {
		return x.IsPublicTemplate
	}
	return false
}

func (x *GetBuildProgramTaskReply) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *GetBuildProgramTaskReply) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *GetBuildProgramTaskReply) GetStartExecTime() int64 {
	if x != nil {
		return x.StartExecTime
	}
	return 0
}

func (x *GetBuildProgramTaskReply) GetEndExecTime() int64 {
	if x != nil {
		return x.EndExecTime
	}
	return 0
}

// 列出构建程序任务
type ListBuildProgramTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgUuid     string `protobuf:"bytes,1,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,2,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	UserUuid    string `protobuf:"bytes,3,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	RepoUuid    string `protobuf:"bytes,4,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
}

func (x *ListBuildProgramTaskReq) Reset() {
	*x = ListBuildProgramTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBuildProgramTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBuildProgramTaskReq) ProtoMessage() {}

func (x *ListBuildProgramTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBuildProgramTaskReq.ProtoReflect.Descriptor instead.
func (*ListBuildProgramTaskReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{52}
}

func (x *ListBuildProgramTaskReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListBuildProgramTaskReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ListBuildProgramTaskReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListBuildProgramTaskReq) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

type ListBuildProgramTaskReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuildPrograms []*ListBuildProgramTaskReply_BuildProgram `protobuf:"bytes,1,rep,name=buildPrograms,proto3" json:"buildPrograms,omitempty"`
}

func (x *ListBuildProgramTaskReply) Reset() {
	*x = ListBuildProgramTaskReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBuildProgramTaskReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBuildProgramTaskReply) ProtoMessage() {}

func (x *ListBuildProgramTaskReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBuildProgramTaskReply.ProtoReflect.Descriptor instead.
func (*ListBuildProgramTaskReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{53}
}

func (x *ListBuildProgramTaskReply) GetBuildPrograms() []*ListBuildProgramTaskReply_BuildProgram {
	if x != nil {
		return x.BuildPrograms
	}
	return nil
}

// 4. ************************** 构建容器镜像 ******************************
//
type CreateBuildContainerImageTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid                   string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid                    string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid                string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ContainerImageRegisterUuid string `protobuf:"bytes,4,opt,name=containerImageRegisterUuid,proto3" json:"containerImageRegisterUuid,omitempty"`
	Namespace                  string `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
	DockerFilePath             string `protobuf:"bytes,6,opt,name=dockerFilePath,proto3" json:"dockerFilePath,omitempty"`
	Describe                   string `protobuf:"bytes,7,opt,name=describe,proto3" json:"describe,omitempty"`
}

func (x *CreateBuildContainerImageTemplateReq) Reset() {
	*x = CreateBuildContainerImageTemplateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBuildContainerImageTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBuildContainerImageTemplateReq) ProtoMessage() {}

func (x *CreateBuildContainerImageTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBuildContainerImageTemplateReq.ProtoReflect.Descriptor instead.
func (*CreateBuildContainerImageTemplateReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{54}
}

func (x *CreateBuildContainerImageTemplateReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *CreateBuildContainerImageTemplateReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *CreateBuildContainerImageTemplateReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *CreateBuildContainerImageTemplateReq) GetContainerImageRegisterUuid() string {
	if x != nil {
		return x.ContainerImageRegisterUuid
	}
	return ""
}

func (x *CreateBuildContainerImageTemplateReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CreateBuildContainerImageTemplateReq) GetDockerFilePath() string {
	if x != nil {
		return x.DockerFilePath
	}
	return ""
}

func (x *CreateBuildContainerImageTemplateReq) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

type CreateBuildContainerImageTemplateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CreateBuildContainerImageTemplateReply) Reset() {
	*x = CreateBuildContainerImageTemplateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBuildContainerImageTemplateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBuildContainerImageTemplateReply) ProtoMessage() {}

func (x *CreateBuildContainerImageTemplateReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBuildContainerImageTemplateReply.ProtoReflect.Descriptor instead.
func (*CreateBuildContainerImageTemplateReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{55}
}

func (x *CreateBuildContainerImageTemplateReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// 列出构建容器镜像模版 - 无公共模版
type ListBuildContainerImageTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
}

func (x *ListBuildContainerImageTemplateReq) Reset() {
	*x = ListBuildContainerImageTemplateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBuildContainerImageTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBuildContainerImageTemplateReq) ProtoMessage() {}

func (x *ListBuildContainerImageTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBuildContainerImageTemplateReq.ProtoReflect.Descriptor instead.
func (*ListBuildContainerImageTemplateReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{56}
}

func (x *ListBuildContainerImageTemplateReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListBuildContainerImageTemplateReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListBuildContainerImageTemplateReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

type ListBuildContainerImageTemplateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Templates []*ListBuildContainerImageTemplateReply_Template `protobuf:"bytes,1,rep,name=templates,proto3" json:"templates,omitempty"`
}

func (x *ListBuildContainerImageTemplateReply) Reset() {
	*x = ListBuildContainerImageTemplateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBuildContainerImageTemplateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBuildContainerImageTemplateReply) ProtoMessage() {}

func (x *ListBuildContainerImageTemplateReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBuildContainerImageTemplateReply.ProtoReflect.Descriptor instead.
func (*ListBuildContainerImageTemplateReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{57}
}

func (x *ListBuildContainerImageTemplateReply) GetTemplates() []*ListBuildContainerImageTemplateReply_Template {
	if x != nil {
		return x.Templates
	}
	return nil
}

// 获取构建容器镜像模版
type GetBuildContainerImageTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid     string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid      string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid  string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	TemplateUuid string `protobuf:"bytes,4,opt,name=templateUuid,proto3" json:"templateUuid,omitempty"`
}

func (x *GetBuildContainerImageTemplateReq) Reset() {
	*x = GetBuildContainerImageTemplateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBuildContainerImageTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBuildContainerImageTemplateReq) ProtoMessage() {}

func (x *GetBuildContainerImageTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBuildContainerImageTemplateReq.ProtoReflect.Descriptor instead.
func (*GetBuildContainerImageTemplateReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{58}
}

func (x *GetBuildContainerImageTemplateReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *GetBuildContainerImageTemplateReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *GetBuildContainerImageTemplateReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *GetBuildContainerImageTemplateReq) GetTemplateUuid() string {
	if x != nil {
		return x.TemplateUuid
	}
	return ""
}

type GetBuildContainerImageTemplateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid                       string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	OrgUuid                    string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid                string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ContainerImageRegisterUuid string `protobuf:"bytes,4,opt,name=containerImageRegisterUuid,proto3" json:"containerImageRegisterUuid,omitempty"`
	Namespace                  string `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
	DockerFilePath             string `protobuf:"bytes,6,opt,name=dockerFilePath,proto3" json:"dockerFilePath,omitempty"`
	Describe                   string `protobuf:"bytes,7,opt,name=describe,proto3" json:"describe,omitempty"`
	CreateTime                 int64  `protobuf:"varint,8,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *GetBuildContainerImageTemplateReply) Reset() {
	*x = GetBuildContainerImageTemplateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBuildContainerImageTemplateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBuildContainerImageTemplateReply) ProtoMessage() {}

func (x *GetBuildContainerImageTemplateReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBuildContainerImageTemplateReply.ProtoReflect.Descriptor instead.
func (*GetBuildContainerImageTemplateReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{59}
}

func (x *GetBuildContainerImageTemplateReply) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *GetBuildContainerImageTemplateReply) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *GetBuildContainerImageTemplateReply) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *GetBuildContainerImageTemplateReply) GetContainerImageRegisterUuid() string {
	if x != nil {
		return x.ContainerImageRegisterUuid
	}
	return ""
}

func (x *GetBuildContainerImageTemplateReply) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetBuildContainerImageTemplateReply) GetDockerFilePath() string {
	if x != nil {
		return x.DockerFilePath
	}
	return ""
}

func (x *GetBuildContainerImageTemplateReply) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *GetBuildContainerImageTemplateReply) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

// 删除构建容器镜像模版
type DelBuildContainerImageTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid     string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid      string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid  string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	TemplateUuid string `protobuf:"bytes,4,opt,name=templateUuid,proto3" json:"templateUuid,omitempty"`
}

func (x *DelBuildContainerImageTemplateReq) Reset() {
	*x = DelBuildContainerImageTemplateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelBuildContainerImageTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelBuildContainerImageTemplateReq) ProtoMessage() {}

func (x *DelBuildContainerImageTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelBuildContainerImageTemplateReq.ProtoReflect.Descriptor instead.
func (*DelBuildContainerImageTemplateReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{60}
}

func (x *DelBuildContainerImageTemplateReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *DelBuildContainerImageTemplateReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *DelBuildContainerImageTemplateReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *DelBuildContainerImageTemplateReq) GetTemplateUuid() string {
	if x != nil {
		return x.TemplateUuid
	}
	return ""
}

type DelBuildContainerImageTemplateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *DelBuildContainerImageTemplateReply) Reset() {
	*x = DelBuildContainerImageTemplateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelBuildContainerImageTemplateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelBuildContainerImageTemplateReply) ProtoMessage() {}

func (x *DelBuildContainerImageTemplateReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelBuildContainerImageTemplateReply.ProtoReflect.Descriptor instead.
func (*DelBuildContainerImageTemplateReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{61}
}

func (x *DelBuildContainerImageTemplateReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// 执行构建容器镜像任务
type ExecBuildContainerImageTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid     string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid      string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid  string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	TemplateUuid string `protobuf:"bytes,4,opt,name=templateUuid,proto3" json:"templateUuid,omitempty"`
	RepoUuid     string `protobuf:"bytes,6,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	RepoUrl      string `protobuf:"bytes,7,opt,name=repoUrl,proto3" json:"repoUrl,omitempty"`
	Token        string `protobuf:"bytes,8,opt,name=token,proto3" json:"token,omitempty"`
	Branch       string `protobuf:"bytes,9,opt,name=branch,proto3" json:"branch,omitempty"`
}

func (x *ExecBuildContainerImageTaskReq) Reset() {
	*x = ExecBuildContainerImageTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecBuildContainerImageTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecBuildContainerImageTaskReq) ProtoMessage() {}

func (x *ExecBuildContainerImageTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecBuildContainerImageTaskReq.ProtoReflect.Descriptor instead.
func (*ExecBuildContainerImageTaskReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{62}
}

func (x *ExecBuildContainerImageTaskReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ExecBuildContainerImageTaskReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ExecBuildContainerImageTaskReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ExecBuildContainerImageTaskReq) GetTemplateUuid() string {
	if x != nil {
		return x.TemplateUuid
	}
	return ""
}

func (x *ExecBuildContainerImageTaskReq) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *ExecBuildContainerImageTaskReq) GetRepoUrl() string {
	if x != nil {
		return x.RepoUrl
	}
	return ""
}

func (x *ExecBuildContainerImageTaskReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ExecBuildContainerImageTaskReq) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

type ExecBuildContainerImageTaskReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *ExecBuildContainerImageTaskReply) Reset() {
	*x = ExecBuildContainerImageTaskReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecBuildContainerImageTaskReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecBuildContainerImageTaskReply) ProtoMessage() {}

func (x *ExecBuildContainerImageTaskReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecBuildContainerImageTaskReply.ProtoReflect.Descriptor instead.
func (*ExecBuildContainerImageTaskReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{63}
}

func (x *ExecBuildContainerImageTaskReply) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

// 获取构建容器镜像任务
type GetBuildContainerImageTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	RepoUuid    string `protobuf:"bytes,4,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	TaskId      string `protobuf:"bytes,5,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *GetBuildContainerImageTaskReq) Reset() {
	*x = GetBuildContainerImageTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBuildContainerImageTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBuildContainerImageTaskReq) ProtoMessage() {}

func (x *GetBuildContainerImageTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBuildContainerImageTaskReq.ProtoReflect.Descriptor instead.
func (*GetBuildContainerImageTaskReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{64}
}

func (x *GetBuildContainerImageTaskReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *GetBuildContainerImageTaskReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *GetBuildContainerImageTaskReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *GetBuildContainerImageTaskReq) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *GetBuildContainerImageTaskReq) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type GetBuildContainerImageTaskReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId        string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	RunId         string `protobuf:"bytes,2,opt,name=runId,proto3" json:"runId,omitempty"`
	UserUuid      string `protobuf:"bytes,3,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid       string `protobuf:"bytes,4,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid   string `protobuf:"bytes,5,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	TemplateUuid  string `protobuf:"bytes,6,opt,name=templateUuid,proto3" json:"templateUuid,omitempty"`
	RepoUuid      string `protobuf:"bytes,7,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	RepoUrl       string `protobuf:"bytes,8,opt,name=repoUrl,proto3" json:"repoUrl,omitempty"`
	RepoBranch    string `protobuf:"bytes,9,opt,name=repoBranch,proto3" json:"repoBranch,omitempty"`
	RepoCommitId  string `protobuf:"bytes,10,opt,name=repoCommitId,proto3" json:"repoCommitId,omitempty"`
	RepoCommitMsg string `protobuf:"bytes,11,opt,name=repoCommitMsg,proto3" json:"repoCommitMsg,omitempty"`
	Result        int32  `protobuf:"varint,12,opt,name=result,proto3" json:"result,omitempty"`
	Describe      string `protobuf:"bytes,13,opt,name=describe,proto3" json:"describe,omitempty"`
	StartExecTime int64  `protobuf:"varint,14,opt,name=startExecTime,proto3" json:"startExecTime,omitempty"`
	EndExecTime   int64  `protobuf:"varint,15,opt,name=endExecTime,proto3" json:"endExecTime,omitempty"`
	CreateTime    int64  `protobuf:"varint,16,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *GetBuildContainerImageTaskReply) Reset() {
	*x = GetBuildContainerImageTaskReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBuildContainerImageTaskReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBuildContainerImageTaskReply) ProtoMessage() {}

func (x *GetBuildContainerImageTaskReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBuildContainerImageTaskReply.ProtoReflect.Descriptor instead.
func (*GetBuildContainerImageTaskReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{65}
}

func (x *GetBuildContainerImageTaskReply) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *GetBuildContainerImageTaskReply) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *GetBuildContainerImageTaskReply) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *GetBuildContainerImageTaskReply) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *GetBuildContainerImageTaskReply) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *GetBuildContainerImageTaskReply) GetTemplateUuid() string {
	if x != nil {
		return x.TemplateUuid
	}
	return ""
}

func (x *GetBuildContainerImageTaskReply) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *GetBuildContainerImageTaskReply) GetRepoUrl() string {
	if x != nil {
		return x.RepoUrl
	}
	return ""
}

func (x *GetBuildContainerImageTaskReply) GetRepoBranch() string {
	if x != nil {
		return x.RepoBranch
	}
	return ""
}

func (x *GetBuildContainerImageTaskReply) GetRepoCommitId() string {
	if x != nil {
		return x.RepoCommitId
	}
	return ""
}

func (x *GetBuildContainerImageTaskReply) GetRepoCommitMsg() string {
	if x != nil {
		return x.RepoCommitMsg
	}
	return ""
}

func (x *GetBuildContainerImageTaskReply) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *GetBuildContainerImageTaskReply) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *GetBuildContainerImageTaskReply) GetStartExecTime() int64 {
	if x != nil {
		return x.StartExecTime
	}
	return 0
}

func (x *GetBuildContainerImageTaskReply) GetEndExecTime() int64 {
	if x != nil {
		return x.EndExecTime
	}
	return 0
}

func (x *GetBuildContainerImageTaskReply) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

// 列出构建容器镜像任务
type ListBuildContainerImageTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgUuid     string `protobuf:"bytes,1,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,2,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	UserUuid    string `protobuf:"bytes,3,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	RepoUuid    string `protobuf:"bytes,4,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
}

func (x *ListBuildContainerImageTaskReq) Reset() {
	*x = ListBuildContainerImageTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBuildContainerImageTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBuildContainerImageTaskReq) ProtoMessage() {}

func (x *ListBuildContainerImageTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBuildContainerImageTaskReq.ProtoReflect.Descriptor instead.
func (*ListBuildContainerImageTaskReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{66}
}

func (x *ListBuildContainerImageTaskReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListBuildContainerImageTaskReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ListBuildContainerImageTaskReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListBuildContainerImageTaskReq) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

type ListBuildContainerImageTaskReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks []*ListBuildContainerImageTaskReply_Task `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
}

func (x *ListBuildContainerImageTaskReply) Reset() {
	*x = ListBuildContainerImageTaskReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBuildContainerImageTaskReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBuildContainerImageTaskReply) ProtoMessage() {}

func (x *ListBuildContainerImageTaskReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBuildContainerImageTaskReply.ProtoReflect.Descriptor instead.
func (*ListBuildContainerImageTaskReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{67}
}

func (x *ListBuildContainerImageTaskReply) GetTasks() []*ListBuildContainerImageTaskReply_Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

// ************************************************************************************************
// 构建容器镜像 - 不支持匿名上传
type BuildContainerImageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid          string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid           string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid       string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	RepoUuid          string `protobuf:"bytes,4,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	RepoName          string `protobuf:"bytes,5,opt,name=repoName,proto3" json:"repoName,omitempty"`
	RepoUrl           string `protobuf:"bytes,6,opt,name=repoUrl,proto3" json:"repoUrl,omitempty"`
	Token             string `protobuf:"bytes,7,opt,name=token,proto3" json:"token,omitempty"`
	Branch            string `protobuf:"bytes,8,opt,name=branch,proto3" json:"branch,omitempty"`
	RegistryUrl       string `protobuf:"bytes,9,opt,name=registryUrl,proto3" json:"registryUrl,omitempty"`
	RegistryUsername  string `protobuf:"bytes,10,opt,name=registryUsername,proto3" json:"registryUsername,omitempty"`
	RegistryPassword  string `protobuf:"bytes,11,opt,name=registryPassword,proto3" json:"registryPassword,omitempty"`
	RegistryNameSpace string `protobuf:"bytes,12,opt,name=registryNameSpace,proto3" json:"registryNameSpace,omitempty"`
	DockerfilePath    string `protobuf:"bytes,13,opt,name=dockerfilePath,proto3" json:"dockerfilePath,omitempty"`
}

func (x *BuildContainerImageReq) Reset() {
	*x = BuildContainerImageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildContainerImageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildContainerImageReq) ProtoMessage() {}

func (x *BuildContainerImageReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildContainerImageReq.ProtoReflect.Descriptor instead.
func (*BuildContainerImageReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{68}
}

func (x *BuildContainerImageReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *BuildContainerImageReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *BuildContainerImageReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *BuildContainerImageReq) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *BuildContainerImageReq) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *BuildContainerImageReq) GetRepoUrl() string {
	if x != nil {
		return x.RepoUrl
	}
	return ""
}

func (x *BuildContainerImageReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *BuildContainerImageReq) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *BuildContainerImageReq) GetRegistryUrl() string {
	if x != nil {
		return x.RegistryUrl
	}
	return ""
}

func (x *BuildContainerImageReq) GetRegistryUsername() string {
	if x != nil {
		return x.RegistryUsername
	}
	return ""
}

func (x *BuildContainerImageReq) GetRegistryPassword() string {
	if x != nil {
		return x.RegistryPassword
	}
	return ""
}

func (x *BuildContainerImageReq) GetRegistryNameSpace() string {
	if x != nil {
		return x.RegistryNameSpace
	}
	return ""
}

func (x *BuildContainerImageReq) GetDockerfilePath() string {
	if x != nil {
		return x.DockerfilePath
	}
	return ""
}

type BuildContainerImageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *BuildContainerImageReply) Reset() {
	*x = BuildContainerImageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildContainerImageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildContainerImageReply) ProtoMessage() {}

func (x *BuildContainerImageReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildContainerImageReply.ProtoReflect.Descriptor instead.
func (*BuildContainerImageReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{69}
}

func (x *BuildContainerImageReply) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type GetBuildContainerImageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	RepoUuid    string `protobuf:"bytes,4,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	TaskId      string `protobuf:"bytes,5,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *GetBuildContainerImageReq) Reset() {
	*x = GetBuildContainerImageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBuildContainerImageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBuildContainerImageReq) ProtoMessage() {}

func (x *GetBuildContainerImageReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBuildContainerImageReq.ProtoReflect.Descriptor instead.
func (*GetBuildContainerImageReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{70}
}

func (x *GetBuildContainerImageReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *GetBuildContainerImageReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *GetBuildContainerImageReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *GetBuildContainerImageReq) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *GetBuildContainerImageReq) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type GetBuildContainerImageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId         string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	RunId          string `protobuf:"bytes,2,opt,name=runId,proto3" json:"runId,omitempty"`
	UserUuid       string `protobuf:"bytes,3,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	UserName       string `protobuf:"bytes,4,opt,name=userName,proto3" json:"userName,omitempty"`
	RepoUuid       string `protobuf:"bytes,5,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	RepoUrl        string `protobuf:"bytes,6,opt,name=repoUrl,proto3" json:"repoUrl,omitempty"`
	Branch         string `protobuf:"bytes,7,opt,name=branch,proto3" json:"branch,omitempty"`
	CommitId       string `protobuf:"bytes,8,opt,name=commitId,proto3" json:"commitId,omitempty"`
	DockerfilePath string `protobuf:"bytes,9,opt,name=dockerfilePath,proto3" json:"dockerfilePath,omitempty"`
	ImageUrl       string `protobuf:"bytes,10,opt,name=imageUrl,proto3" json:"imageUrl,omitempty"`
	ImageId        string `protobuf:"bytes,11,opt,name=imageId,proto3" json:"imageId,omitempty"`
	Result         int32  `protobuf:"varint,12,opt,name=result,proto3" json:"result,omitempty"`
	Describe       string `protobuf:"bytes,13,opt,name=describe,proto3" json:"describe,omitempty"`
	Dockerfile     string `protobuf:"bytes,14,opt,name=dockerfile,proto3" json:"dockerfile,omitempty"`
	StartExecTime  int64  `protobuf:"varint,15,opt,name=startExecTime,proto3" json:"startExecTime,omitempty"`
	EndExecTime    int64  `protobuf:"varint,16,opt,name=endExecTime,proto3" json:"endExecTime,omitempty"`
	CreateTime     int64  `protobuf:"varint,17,opt,name=createTime,proto3" json:"createTime,omitempty"`
	CostTime       int64  `protobuf:"varint,18,opt,name=costTime,proto3" json:"costTime,omitempty"`
}

func (x *GetBuildContainerImageReply) Reset() {
	*x = GetBuildContainerImageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBuildContainerImageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBuildContainerImageReply) ProtoMessage() {}

func (x *GetBuildContainerImageReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBuildContainerImageReply.ProtoReflect.Descriptor instead.
func (*GetBuildContainerImageReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{71}
}

func (x *GetBuildContainerImageReply) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *GetBuildContainerImageReply) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *GetBuildContainerImageReply) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *GetBuildContainerImageReply) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *GetBuildContainerImageReply) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *GetBuildContainerImageReply) GetRepoUrl() string {
	if x != nil {
		return x.RepoUrl
	}
	return ""
}

func (x *GetBuildContainerImageReply) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *GetBuildContainerImageReply) GetCommitId() string {
	if x != nil {
		return x.CommitId
	}
	return ""
}

func (x *GetBuildContainerImageReply) GetDockerfilePath() string {
	if x != nil {
		return x.DockerfilePath
	}
	return ""
}

func (x *GetBuildContainerImageReply) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *GetBuildContainerImageReply) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *GetBuildContainerImageReply) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *GetBuildContainerImageReply) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *GetBuildContainerImageReply) GetDockerfile() string {
	if x != nil {
		return x.Dockerfile
	}
	return ""
}

func (x *GetBuildContainerImageReply) GetStartExecTime() int64 {
	if x != nil {
		return x.StartExecTime
	}
	return 0
}

func (x *GetBuildContainerImageReply) GetEndExecTime() int64 {
	if x != nil {
		return x.EndExecTime
	}
	return 0
}

func (x *GetBuildContainerImageReply) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *GetBuildContainerImageReply) GetCostTime() int64 {
	if x != nil {
		return x.CostTime
	}
	return 0
}

type ListBuildContainerImageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	RepoUuid    string `protobuf:"bytes,4,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
}

func (x *ListBuildContainerImageReq) Reset() {
	*x = ListBuildContainerImageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBuildContainerImageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBuildContainerImageReq) ProtoMessage() {}

func (x *ListBuildContainerImageReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBuildContainerImageReq.ProtoReflect.Descriptor instead.
func (*ListBuildContainerImageReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{72}
}

func (x *ListBuildContainerImageReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListBuildContainerImageReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListBuildContainerImageReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ListBuildContainerImageReq) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

type ListBuildContainerImageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuildContainerImages []*ListBuildContainerImageReply_BuildContainerImage `protobuf:"bytes,1,rep,name=buildContainerImages,proto3" json:"buildContainerImages,omitempty"`
}

func (x *ListBuildContainerImageReply) Reset() {
	*x = ListBuildContainerImageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBuildContainerImageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBuildContainerImageReply) ProtoMessage() {}

func (x *ListBuildContainerImageReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBuildContainerImageReply.ProtoReflect.Descriptor instead.
func (*ListBuildContainerImageReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{73}
}

func (x *ListBuildContainerImageReply) GetBuildContainerImages() []*ListBuildContainerImageReply_BuildContainerImage {
	if x != nil {
		return x.BuildContainerImages
	}
	return nil
}

//
type UploadLocalFileToCloudObjectStorageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint        string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	AccessKeyId     string `protobuf:"bytes,2,opt,name=accessKeyId,proto3" json:"accessKeyId,omitempty"`
	AccessKeySecret string `protobuf:"bytes,3,opt,name=accessKeySecret,proto3" json:"accessKeySecret,omitempty"`
	SecurityToken   string `protobuf:"bytes,4,opt,name=securityToken,proto3" json:"securityToken,omitempty"`
	BucketName      string `protobuf:"bytes,5,opt,name=bucketName,proto3" json:"bucketName,omitempty"`
	ObjectPath      string `protobuf:"bytes,6,opt,name=objectPath,proto3" json:"objectPath,omitempty"`
	LocalFilePath   string `protobuf:"bytes,7,opt,name=localFilePath,proto3" json:"localFilePath,omitempty"`
	PlatformId      int32  `protobuf:"varint,8,opt,name=platformId,proto3" json:"platformId,omitempty"`
}

func (x *UploadLocalFileToCloudObjectStorageReq) Reset() {
	*x = UploadLocalFileToCloudObjectStorageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadLocalFileToCloudObjectStorageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadLocalFileToCloudObjectStorageReq) ProtoMessage() {}

func (x *UploadLocalFileToCloudObjectStorageReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadLocalFileToCloudObjectStorageReq.ProtoReflect.Descriptor instead.
func (*UploadLocalFileToCloudObjectStorageReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{74}
}

func (x *UploadLocalFileToCloudObjectStorageReq) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *UploadLocalFileToCloudObjectStorageReq) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *UploadLocalFileToCloudObjectStorageReq) GetAccessKeySecret() string {
	if x != nil {
		return x.AccessKeySecret
	}
	return ""
}

func (x *UploadLocalFileToCloudObjectStorageReq) GetSecurityToken() string {
	if x != nil {
		return x.SecurityToken
	}
	return ""
}

func (x *UploadLocalFileToCloudObjectStorageReq) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *UploadLocalFileToCloudObjectStorageReq) GetObjectPath() string {
	if x != nil {
		return x.ObjectPath
	}
	return ""
}

func (x *UploadLocalFileToCloudObjectStorageReq) GetLocalFilePath() string {
	if x != nil {
		return x.LocalFilePath
	}
	return ""
}

func (x *UploadLocalFileToCloudObjectStorageReq) GetPlatformId() int32 {
	if x != nil {
		return x.PlatformId
	}
	return 0
}

type UploadLocalFileToCloudObjectStorageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *UploadLocalFileToCloudObjectStorageReply) Reset() {
	*x = UploadLocalFileToCloudObjectStorageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadLocalFileToCloudObjectStorageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadLocalFileToCloudObjectStorageReply) ProtoMessage() {}

func (x *UploadLocalFileToCloudObjectStorageReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadLocalFileToCloudObjectStorageReply.ProtoReflect.Descriptor instead.
func (*UploadLocalFileToCloudObjectStorageReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{75}
}

func (x *UploadLocalFileToCloudObjectStorageReply) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

//
type DownloadCloudObjectStorageObjectToLocalReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint        string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	AccessKeyId     string `protobuf:"bytes,2,opt,name=accessKeyId,proto3" json:"accessKeyId,omitempty"`
	AccessKeySecret string `protobuf:"bytes,3,opt,name=accessKeySecret,proto3" json:"accessKeySecret,omitempty"`
	SecurityToken   string `protobuf:"bytes,4,opt,name=securityToken,proto3" json:"securityToken,omitempty"`
	BucketName      string `protobuf:"bytes,5,opt,name=bucketName,proto3" json:"bucketName,omitempty"`
	ObjectPath      string `protobuf:"bytes,6,opt,name=objectPath,proto3" json:"objectPath,omitempty"`
	LocalFilePath   string `protobuf:"bytes,7,opt,name=localFilePath,proto3" json:"localFilePath,omitempty"`
	PlatformId      int32  `protobuf:"varint,8,opt,name=platformId,proto3" json:"platformId,omitempty"`
}

func (x *DownloadCloudObjectStorageObjectToLocalReq) Reset() {
	*x = DownloadCloudObjectStorageObjectToLocalReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadCloudObjectStorageObjectToLocalReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadCloudObjectStorageObjectToLocalReq) ProtoMessage() {}

func (x *DownloadCloudObjectStorageObjectToLocalReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadCloudObjectStorageObjectToLocalReq.ProtoReflect.Descriptor instead.
func (*DownloadCloudObjectStorageObjectToLocalReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{76}
}

func (x *DownloadCloudObjectStorageObjectToLocalReq) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *DownloadCloudObjectStorageObjectToLocalReq) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *DownloadCloudObjectStorageObjectToLocalReq) GetAccessKeySecret() string {
	if x != nil {
		return x.AccessKeySecret
	}
	return ""
}

func (x *DownloadCloudObjectStorageObjectToLocalReq) GetSecurityToken() string {
	if x != nil {
		return x.SecurityToken
	}
	return ""
}

func (x *DownloadCloudObjectStorageObjectToLocalReq) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *DownloadCloudObjectStorageObjectToLocalReq) GetObjectPath() string {
	if x != nil {
		return x.ObjectPath
	}
	return ""
}

func (x *DownloadCloudObjectStorageObjectToLocalReq) GetLocalFilePath() string {
	if x != nil {
		return x.LocalFilePath
	}
	return ""
}

func (x *DownloadCloudObjectStorageObjectToLocalReq) GetPlatformId() int32 {
	if x != nil {
		return x.PlatformId
	}
	return 0
}

type DownloadCloudObjectStorageObjectToLocalReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *DownloadCloudObjectStorageObjectToLocalReply) Reset() {
	*x = DownloadCloudObjectStorageObjectToLocalReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadCloudObjectStorageObjectToLocalReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadCloudObjectStorageObjectToLocalReply) ProtoMessage() {}

func (x *DownloadCloudObjectStorageObjectToLocalReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadCloudObjectStorageObjectToLocalReply.ProtoReflect.Descriptor instead.
func (*DownloadCloudObjectStorageObjectToLocalReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{77}
}

func (x *DownloadCloudObjectStorageObjectToLocalReply) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

//
type UploadLocalFileToSFTPReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteHost     string `protobuf:"bytes,1,opt,name=remoteHost,proto3" json:"remoteHost,omitempty"`
	RemotePort     int32  `protobuf:"varint,2,opt,name=remotePort,proto3" json:"remotePort,omitempty"`
	RemoteUser     string `protobuf:"bytes,3,opt,name=remoteUser,proto3" json:"remoteUser,omitempty"`
	PrivateKey     string `protobuf:"bytes,4,opt,name=privateKey,proto3" json:"privateKey,omitempty"`
	Password       string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	LocalFilePath  string `protobuf:"bytes,6,opt,name=localFilePath,proto3" json:"localFilePath,omitempty"`
	RemoteFilePath string `protobuf:"bytes,7,opt,name=remoteFilePath,proto3" json:"remoteFilePath,omitempty"`
}

func (x *UploadLocalFileToSFTPReq) Reset() {
	*x = UploadLocalFileToSFTPReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadLocalFileToSFTPReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadLocalFileToSFTPReq) ProtoMessage() {}

func (x *UploadLocalFileToSFTPReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadLocalFileToSFTPReq.ProtoReflect.Descriptor instead.
func (*UploadLocalFileToSFTPReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{78}
}

func (x *UploadLocalFileToSFTPReq) GetRemoteHost() string {
	if x != nil {
		return x.RemoteHost
	}
	return ""
}

func (x *UploadLocalFileToSFTPReq) GetRemotePort() int32 {
	if x != nil {
		return x.RemotePort
	}
	return 0
}

func (x *UploadLocalFileToSFTPReq) GetRemoteUser() string {
	if x != nil {
		return x.RemoteUser
	}
	return ""
}

func (x *UploadLocalFileToSFTPReq) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *UploadLocalFileToSFTPReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UploadLocalFileToSFTPReq) GetLocalFilePath() string {
	if x != nil {
		return x.LocalFilePath
	}
	return ""
}

func (x *UploadLocalFileToSFTPReq) GetRemoteFilePath() string {
	if x != nil {
		return x.RemoteFilePath
	}
	return ""
}

type UploadLocalFileToSFTPReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *UploadLocalFileToSFTPReply) Reset() {
	*x = UploadLocalFileToSFTPReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadLocalFileToSFTPReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadLocalFileToSFTPReply) ProtoMessage() {}

func (x *UploadLocalFileToSFTPReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadLocalFileToSFTPReply.ProtoReflect.Descriptor instead.
func (*UploadLocalFileToSFTPReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{79}
}

func (x *UploadLocalFileToSFTPReply) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

//
type DownloadSFTPFileToLocalReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteHost     string `protobuf:"bytes,1,opt,name=remoteHost,proto3" json:"remoteHost,omitempty"`
	RemotePort     int32  `protobuf:"varint,2,opt,name=remotePort,proto3" json:"remotePort,omitempty"`
	RemoteUser     string `protobuf:"bytes,3,opt,name=remoteUser,proto3" json:"remoteUser,omitempty"`
	PrivateKey     string `protobuf:"bytes,4,opt,name=privateKey,proto3" json:"privateKey,omitempty"`
	Password       string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	LocalFilePath  string `protobuf:"bytes,6,opt,name=localFilePath,proto3" json:"localFilePath,omitempty"`
	RemoteFilePath string `protobuf:"bytes,7,opt,name=remoteFilePath,proto3" json:"remoteFilePath,omitempty"`
}

func (x *DownloadSFTPFileToLocalReq) Reset() {
	*x = DownloadSFTPFileToLocalReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadSFTPFileToLocalReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadSFTPFileToLocalReq) ProtoMessage() {}

func (x *DownloadSFTPFileToLocalReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadSFTPFileToLocalReq.ProtoReflect.Descriptor instead.
func (*DownloadSFTPFileToLocalReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{80}
}

func (x *DownloadSFTPFileToLocalReq) GetRemoteHost() string {
	if x != nil {
		return x.RemoteHost
	}
	return ""
}

func (x *DownloadSFTPFileToLocalReq) GetRemotePort() int32 {
	if x != nil {
		return x.RemotePort
	}
	return 0
}

func (x *DownloadSFTPFileToLocalReq) GetRemoteUser() string {
	if x != nil {
		return x.RemoteUser
	}
	return ""
}

func (x *DownloadSFTPFileToLocalReq) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *DownloadSFTPFileToLocalReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *DownloadSFTPFileToLocalReq) GetLocalFilePath() string {
	if x != nil {
		return x.LocalFilePath
	}
	return ""
}

func (x *DownloadSFTPFileToLocalReq) GetRemoteFilePath() string {
	if x != nil {
		return x.RemoteFilePath
	}
	return ""
}

type DownloadSFTPFileToLocalReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *DownloadSFTPFileToLocalReply) Reset() {
	*x = DownloadSFTPFileToLocalReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadSFTPFileToLocalReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadSFTPFileToLocalReply) ProtoMessage() {}

func (x *DownloadSFTPFileToLocalReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadSFTPFileToLocalReply.ProtoReflect.Descriptor instead.
func (*DownloadSFTPFileToLocalReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{81}
}

func (x *DownloadSFTPFileToLocalReply) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

//
type GetCopySFTPFileHisReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *GetCopySFTPFileHisReq) Reset() {
	*x = GetCopySFTPFileHisReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCopySFTPFileHisReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCopySFTPFileHisReq) ProtoMessage() {}

func (x *GetCopySFTPFileHisReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCopySFTPFileHisReq.ProtoReflect.Descriptor instead.
func (*GetCopySFTPFileHisReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{82}
}

func (x *GetCopySFTPFileHisReq) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type GetCopySFTPFileHisReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId        string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	RunId         string `protobuf:"bytes,2,opt,name=runId,proto3" json:"runId,omitempty"`
	CopyType      int32  `protobuf:"varint,3,opt,name=copyType,proto3" json:"copyType,omitempty"`
	SftpAddr      string `protobuf:"bytes,4,opt,name=sftpAddr,proto3" json:"sftpAddr,omitempty"`
	SftpUser      string `protobuf:"bytes,5,opt,name=sftpUser,proto3" json:"sftpUser,omitempty"`
	LocalFilePath string `protobuf:"bytes,6,opt,name=localFilePath,proto3" json:"localFilePath,omitempty"`
	SftpFilePath  string `protobuf:"bytes,7,opt,name=sftpFilePath,proto3" json:"sftpFilePath,omitempty"`
	Result        int32  `protobuf:"varint,8,opt,name=result,proto3" json:"result,omitempty"`
	Describe      string `protobuf:"bytes,9,opt,name=describe,proto3" json:"describe,omitempty"`
	StartExecTime int64  `protobuf:"varint,10,opt,name=startExecTime,proto3" json:"startExecTime,omitempty"`
	EndExecTime   int64  `protobuf:"varint,11,opt,name=endExecTime,proto3" json:"endExecTime,omitempty"`
	CreateTime    int64  `protobuf:"varint,12,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *GetCopySFTPFileHisReply) Reset() {
	*x = GetCopySFTPFileHisReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCopySFTPFileHisReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCopySFTPFileHisReply) ProtoMessage() {}

func (x *GetCopySFTPFileHisReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCopySFTPFileHisReply.ProtoReflect.Descriptor instead.
func (*GetCopySFTPFileHisReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{83}
}

func (x *GetCopySFTPFileHisReply) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *GetCopySFTPFileHisReply) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *GetCopySFTPFileHisReply) GetCopyType() int32 {
	if x != nil {
		return x.CopyType
	}
	return 0
}

func (x *GetCopySFTPFileHisReply) GetSftpAddr() string {
	if x != nil {
		return x.SftpAddr
	}
	return ""
}

func (x *GetCopySFTPFileHisReply) GetSftpUser() string {
	if x != nil {
		return x.SftpUser
	}
	return ""
}

func (x *GetCopySFTPFileHisReply) GetLocalFilePath() string {
	if x != nil {
		return x.LocalFilePath
	}
	return ""
}

func (x *GetCopySFTPFileHisReply) GetSftpFilePath() string {
	if x != nil {
		return x.SftpFilePath
	}
	return ""
}

func (x *GetCopySFTPFileHisReply) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *GetCopySFTPFileHisReply) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *GetCopySFTPFileHisReply) GetStartExecTime() int64 {
	if x != nil {
		return x.StartExecTime
	}
	return 0
}

func (x *GetCopySFTPFileHisReply) GetEndExecTime() int64 {
	if x != nil {
		return x.EndExecTime
	}
	return 0
}

func (x *GetCopySFTPFileHisReply) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

//
type GetCopyCloudObjectStorageHisReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *GetCopyCloudObjectStorageHisReq) Reset() {
	*x = GetCopyCloudObjectStorageHisReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCopyCloudObjectStorageHisReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCopyCloudObjectStorageHisReq) ProtoMessage() {}

func (x *GetCopyCloudObjectStorageHisReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCopyCloudObjectStorageHisReq.ProtoReflect.Descriptor instead.
func (*GetCopyCloudObjectStorageHisReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{84}
}

func (x *GetCopyCloudObjectStorageHisReq) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type GetCopyCloudObjectStorageHisReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId            string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	RunId             string `protobuf:"bytes,2,opt,name=runId,proto3" json:"runId,omitempty"`
	PlatformId        int32  `protobuf:"varint,3,opt,name=platformId,proto3" json:"platformId,omitempty"`
	CopyType          int32  `protobuf:"varint,4,opt,name=copyType,proto3" json:"copyType,omitempty"`
	Endpoint          string `protobuf:"bytes,5,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Bucket            string `protobuf:"bytes,6,opt,name=bucket,proto3" json:"bucket,omitempty"`
	LocalFilePath     string `protobuf:"bytes,7,opt,name=localFilePath,proto3" json:"localFilePath,omitempty"`
	ObjectStoragePath string `protobuf:"bytes,8,opt,name=objectStoragePath,proto3" json:"objectStoragePath,omitempty"`
	Result            int32  `protobuf:"varint,9,opt,name=result,proto3" json:"result,omitempty"`
	Describe          string `protobuf:"bytes,10,opt,name=describe,proto3" json:"describe,omitempty"`
	StartExecTime     int64  `protobuf:"varint,11,opt,name=startExecTime,proto3" json:"startExecTime,omitempty"`
	EndExecTime       int64  `protobuf:"varint,12,opt,name=endExecTime,proto3" json:"endExecTime,omitempty"`
	CreateTime        int64  `protobuf:"varint,13,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *GetCopyCloudObjectStorageHisReply) Reset() {
	*x = GetCopyCloudObjectStorageHisReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCopyCloudObjectStorageHisReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCopyCloudObjectStorageHisReply) ProtoMessage() {}

func (x *GetCopyCloudObjectStorageHisReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCopyCloudObjectStorageHisReply.ProtoReflect.Descriptor instead.
func (*GetCopyCloudObjectStorageHisReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{85}
}

func (x *GetCopyCloudObjectStorageHisReply) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *GetCopyCloudObjectStorageHisReply) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *GetCopyCloudObjectStorageHisReply) GetPlatformId() int32 {
	if x != nil {
		return x.PlatformId
	}
	return 0
}

func (x *GetCopyCloudObjectStorageHisReply) GetCopyType() int32 {
	if x != nil {
		return x.CopyType
	}
	return 0
}

func (x *GetCopyCloudObjectStorageHisReply) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *GetCopyCloudObjectStorageHisReply) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *GetCopyCloudObjectStorageHisReply) GetLocalFilePath() string {
	if x != nil {
		return x.LocalFilePath
	}
	return ""
}

func (x *GetCopyCloudObjectStorageHisReply) GetObjectStoragePath() string {
	if x != nil {
		return x.ObjectStoragePath
	}
	return ""
}

func (x *GetCopyCloudObjectStorageHisReply) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *GetCopyCloudObjectStorageHisReply) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *GetCopyCloudObjectStorageHisReply) GetStartExecTime() int64 {
	if x != nil {
		return x.StartExecTime
	}
	return 0
}

func (x *GetCopyCloudObjectStorageHisReply) GetEndExecTime() int64 {
	if x != nil {
		return x.EndExecTime
	}
	return 0
}

func (x *GetCopyCloudObjectStorageHisReply) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

// 执行CI任务
type RunCiReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GitHttpUrl string `protobuf:"bytes,1,opt,name=gitHttpUrl,proto3" json:"gitHttpUrl,omitempty"`
	GitToken   string `protobuf:"bytes,2,opt,name=gitToken,proto3" json:"gitToken,omitempty"`
	Branch     string `protobuf:"bytes,3,opt,name=branch,proto3" json:"branch,omitempty"`
}

func (x *RunCiReq) Reset() {
	*x = RunCiReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCiReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCiReq) ProtoMessage() {}

func (x *RunCiReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCiReq.ProtoReflect.Descriptor instead.
func (*RunCiReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{86}
}

func (x *RunCiReq) GetGitHttpUrl() string {
	if x != nil {
		return x.GitHttpUrl
	}
	return ""
}

func (x *RunCiReq) GetGitToken() string {
	if x != nil {
		return x.GitToken
	}
	return ""
}

func (x *RunCiReq) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

type RunCiReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *RunCiReply) Reset() {
	*x = RunCiReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCiReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCiReply) ProtoMessage() {}

func (x *RunCiReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCiReply.ProtoReflect.Descriptor instead.
func (*RunCiReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{87}
}

func (x *RunCiReply) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

// 批量查询Ci任务信息
type GetCiTasksReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskIds []string `protobuf:"bytes,1,rep,name=taskIds,proto3" json:"taskIds,omitempty"`
}

func (x *GetCiTasksReq) Reset() {
	*x = GetCiTasksReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCiTasksReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCiTasksReq) ProtoMessage() {}

func (x *GetCiTasksReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCiTasksReq.ProtoReflect.Descriptor instead.
func (*GetCiTasksReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{88}
}

func (x *GetCiTasksReq) GetTaskIds() []string {
	if x != nil {
		return x.TaskIds
	}
	return nil
}

type GetCiTasksReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks map[string]*GetCiTasksReply_CiTask `protobuf:"bytes,4,rep,name=tasks,proto3" json:"tasks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetCiTasksReply) Reset() {
	*x = GetCiTasksReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCiTasksReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCiTasksReply) ProtoMessage() {}

func (x *GetCiTasksReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCiTasksReply.ProtoReflect.Descriptor instead.
func (*GetCiTasksReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{89}
}

func (x *GetCiTasksReply) GetTasks() map[string]*GetCiTasksReply_CiTask {
	if x != nil {
		return x.Tasks
	}
	return nil
}

// 获取Ci任务执行详情
type GetCiTaskDetailsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *GetCiTaskDetailsReq) Reset() {
	*x = GetCiTaskDetailsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCiTaskDetailsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCiTaskDetailsReq) ProtoMessage() {}

func (x *GetCiTaskDetailsReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCiTaskDetailsReq.ProtoReflect.Descriptor instead.
func (*GetCiTaskDetailsReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{90}
}

func (x *GetCiTaskDetailsReq) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type GetCiTaskDetailsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details []*GetCiTaskDetailsReply_CiDetail `protobuf:"bytes,4,rep,name=details,proto3" json:"details,omitempty"`
}

func (x *GetCiTaskDetailsReply) Reset() {
	*x = GetCiTaskDetailsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCiTaskDetailsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCiTaskDetailsReply) ProtoMessage() {}

func (x *GetCiTaskDetailsReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCiTaskDetailsReply.ProtoReflect.Descriptor instead.
func (*GetCiTaskDetailsReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{91}
}

func (x *GetCiTaskDetailsReply) GetDetails() []*GetCiTaskDetailsReply_CiDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

// CI 模版
// 添加 CI 模版
type CreateCiTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	Name        string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CreateCiTemplateReq) Reset() {
	*x = CreateCiTemplateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCiTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCiTemplateReq) ProtoMessage() {}

func (x *CreateCiTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCiTemplateReq.ProtoReflect.Descriptor instead.
func (*CreateCiTemplateReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{92}
}

func (x *CreateCiTemplateReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *CreateCiTemplateReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *CreateCiTemplateReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *CreateCiTemplateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateCiTemplateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CreateCiTemplateReply) Reset() {
	*x = CreateCiTemplateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCiTemplateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCiTemplateReply) ProtoMessage() {}

func (x *CreateCiTemplateReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCiTemplateReply.ProtoReflect.Descriptor instead.
func (*CreateCiTemplateReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{93}
}

func (x *CreateCiTemplateReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// 列出 CI 模版
type ListCiTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
}

func (x *ListCiTemplateReq) Reset() {
	*x = ListCiTemplateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCiTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCiTemplateReq) ProtoMessage() {}

func (x *ListCiTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCiTemplateReq.ProtoReflect.Descriptor instead.
func (*ListCiTemplateReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{94}
}

func (x *ListCiTemplateReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListCiTemplateReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListCiTemplateReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

type ListCiTemplateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CiTemplate []*ListCiTemplateReply_CiTemplate `protobuf:"bytes,1,rep,name=ciTemplate,proto3" json:"ciTemplate,omitempty"`
}

func (x *ListCiTemplateReply) Reset() {
	*x = ListCiTemplateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCiTemplateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCiTemplateReply) ProtoMessage() {}

func (x *ListCiTemplateReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCiTemplateReply.ProtoReflect.Descriptor instead.
func (*ListCiTemplateReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{95}
}

func (x *ListCiTemplateReply) GetCiTemplate() []*ListCiTemplateReply_CiTemplate {
	if x != nil {
		return x.CiTemplate
	}
	return nil
}

// 删除 CI 模版
type DelCiTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	Uuid        string `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *DelCiTemplateReq) Reset() {
	*x = DelCiTemplateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelCiTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelCiTemplateReq) ProtoMessage() {}

func (x *DelCiTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelCiTemplateReq.ProtoReflect.Descriptor instead.
func (*DelCiTemplateReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{96}
}

func (x *DelCiTemplateReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *DelCiTemplateReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *DelCiTemplateReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *DelCiTemplateReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type DelCiTemplateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *DelCiTemplateReply) Reset() {
	*x = DelCiTemplateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelCiTemplateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelCiTemplateReply) ProtoMessage() {}

func (x *DelCiTemplateReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelCiTemplateReply.ProtoReflect.Descriptor instead.
func (*DelCiTemplateReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{97}
}

func (x *DelCiTemplateReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// 添加 CI 模版步骤
type AddCiTemplateStepReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid                 string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid                  string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid              string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	TemplateUuid             string `protobuf:"bytes,4,opt,name=templateUuid,proto3" json:"templateUuid,omitempty"`
	StepType                 int32  `protobuf:"varint,5,opt,name=stepType,proto3" json:"stepType,omitempty"`
	StepTypeTemplateIsPublic bool   `protobuf:"varint,6,opt,name=stepTypeTemplateIsPublic,proto3" json:"stepTypeTemplateIsPublic,omitempty"`
	StepTypeTemplateUuid     string `protobuf:"bytes,7,opt,name=stepTypeTemplateUuid,proto3" json:"stepTypeTemplateUuid,omitempty"`
	Priority                 int32  `protobuf:"varint,8,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *AddCiTemplateStepReq) Reset() {
	*x = AddCiTemplateStepReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCiTemplateStepReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCiTemplateStepReq) ProtoMessage() {}

func (x *AddCiTemplateStepReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCiTemplateStepReq.ProtoReflect.Descriptor instead.
func (*AddCiTemplateStepReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{98}
}

func (x *AddCiTemplateStepReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *AddCiTemplateStepReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *AddCiTemplateStepReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *AddCiTemplateStepReq) GetTemplateUuid() string {
	if x != nil {
		return x.TemplateUuid
	}
	return ""
}

func (x *AddCiTemplateStepReq) GetStepType() int32 {
	if x != nil {
		return x.StepType
	}
	return 0
}

func (x *AddCiTemplateStepReq) GetStepTypeTemplateIsPublic() bool {
	if x != nil {
		return x.StepTypeTemplateIsPublic
	}
	return false
}

func (x *AddCiTemplateStepReq) GetStepTypeTemplateUuid() string {
	if x != nil {
		return x.StepTypeTemplateUuid
	}
	return ""
}

func (x *AddCiTemplateStepReq) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type AddCiTemplateStepReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *AddCiTemplateStepReply) Reset() {
	*x = AddCiTemplateStepReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCiTemplateStepReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCiTemplateStepReply) ProtoMessage() {}

func (x *AddCiTemplateStepReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCiTemplateStepReply.ProtoReflect.Descriptor instead.
func (*AddCiTemplateStepReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{99}
}

func (x *AddCiTemplateStepReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// 列出 CI 模版步骤
type ListCiTemplateStepReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid     string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid      string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid  string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	TemplateUuid string `protobuf:"bytes,4,opt,name=templateUuid,proto3" json:"templateUuid,omitempty"`
}

func (x *ListCiTemplateStepReq) Reset() {
	*x = ListCiTemplateStepReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCiTemplateStepReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCiTemplateStepReq) ProtoMessage() {}

func (x *ListCiTemplateStepReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCiTemplateStepReq.ProtoReflect.Descriptor instead.
func (*ListCiTemplateStepReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{100}
}

func (x *ListCiTemplateStepReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListCiTemplateStepReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListCiTemplateStepReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ListCiTemplateStepReq) GetTemplateUuid() string {
	if x != nil {
		return x.TemplateUuid
	}
	return ""
}

type ListCiTemplateStepReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steps []*ListCiTemplateStepReply_Step `protobuf:"bytes,1,rep,name=steps,proto3" json:"steps,omitempty"`
}

func (x *ListCiTemplateStepReply) Reset() {
	*x = ListCiTemplateStepReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCiTemplateStepReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCiTemplateStepReply) ProtoMessage() {}

func (x *ListCiTemplateStepReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCiTemplateStepReply.ProtoReflect.Descriptor instead.
func (*ListCiTemplateStepReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{101}
}

func (x *ListCiTemplateStepReply) GetSteps() []*ListCiTemplateStepReply_Step {
	if x != nil {
		return x.Steps
	}
	return nil
}

// 删除 CI 模版步骤
type DelCiTemplateStepReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid         string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid          string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid      string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	TemplateUuid     string `protobuf:"bytes,4,opt,name=templateUuid,proto3" json:"templateUuid,omitempty"`
	TemplateStepUuid string `protobuf:"bytes,5,opt,name=templateStepUuid,proto3" json:"templateStepUuid,omitempty"`
}

func (x *DelCiTemplateStepReq) Reset() {
	*x = DelCiTemplateStepReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelCiTemplateStepReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelCiTemplateStepReq) ProtoMessage() {}

func (x *DelCiTemplateStepReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelCiTemplateStepReq.ProtoReflect.Descriptor instead.
func (*DelCiTemplateStepReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{102}
}

func (x *DelCiTemplateStepReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *DelCiTemplateStepReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *DelCiTemplateStepReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *DelCiTemplateStepReq) GetTemplateUuid() string {
	if x != nil {
		return x.TemplateUuid
	}
	return ""
}

func (x *DelCiTemplateStepReq) GetTemplateStepUuid() string {
	if x != nil {
		return x.TemplateStepUuid
	}
	return ""
}

type DelCiTemplateStepReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *DelCiTemplateStepReply) Reset() {
	*x = DelCiTemplateStepReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelCiTemplateStepReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelCiTemplateStepReply) ProtoMessage() {}

func (x *DelCiTemplateStepReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelCiTemplateStepReply.ProtoReflect.Descriptor instead.
func (*DelCiTemplateStepReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{103}
}

func (x *DelCiTemplateStepReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type ListCopyContainerRegistryImageTaskReply_Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId        string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	UserUuid      string `protobuf:"bytes,2,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid       string `protobuf:"bytes,3,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid   string `protobuf:"bytes,4,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	RunId         string `protobuf:"bytes,5,opt,name=runId,proto3" json:"runId,omitempty"`
	SrcImage      string `protobuf:"bytes,6,opt,name=srcImage,proto3" json:"srcImage,omitempty"`
	DestImage     string `protobuf:"bytes,7,opt,name=destImage,proto3" json:"destImage,omitempty"`
	Result        int32  `protobuf:"varint,8,opt,name=result,proto3" json:"result,omitempty"`
	Describe      string `protobuf:"bytes,9,opt,name=describe,proto3" json:"describe,omitempty"`
	StartExecTime int64  `protobuf:"varint,10,opt,name=startExecTime,proto3" json:"startExecTime,omitempty"`
	EndExecTime   int64  `protobuf:"varint,11,opt,name=endExecTime,proto3" json:"endExecTime,omitempty"`
	CreateTime    int64  `protobuf:"varint,12,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *ListCopyContainerRegistryImageTaskReply_Task) Reset() {
	*x = ListCopyContainerRegistryImageTaskReply_Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCopyContainerRegistryImageTaskReply_Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCopyContainerRegistryImageTaskReply_Task) ProtoMessage() {}

func (x *ListCopyContainerRegistryImageTaskReply_Task) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCopyContainerRegistryImageTaskReply_Task.ProtoReflect.Descriptor instead.
func (*ListCopyContainerRegistryImageTaskReply_Task) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{5, 0}
}

func (x *ListCopyContainerRegistryImageTaskReply_Task) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ListCopyContainerRegistryImageTaskReply_Task) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListCopyContainerRegistryImageTaskReply_Task) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListCopyContainerRegistryImageTaskReply_Task) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ListCopyContainerRegistryImageTaskReply_Task) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *ListCopyContainerRegistryImageTaskReply_Task) GetSrcImage() string {
	if x != nil {
		return x.SrcImage
	}
	return ""
}

func (x *ListCopyContainerRegistryImageTaskReply_Task) GetDestImage() string {
	if x != nil {
		return x.DestImage
	}
	return ""
}

func (x *ListCopyContainerRegistryImageTaskReply_Task) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *ListCopyContainerRegistryImageTaskReply_Task) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *ListCopyContainerRegistryImageTaskReply_Task) GetStartExecTime() int64 {
	if x != nil {
		return x.StartExecTime
	}
	return 0
}

func (x *ListCopyContainerRegistryImageTaskReply_Task) GetEndExecTime() int64 {
	if x != nil {
		return x.EndExecTime
	}
	return 0
}

func (x *ListCopyContainerRegistryImageTaskReply_Task) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type ListCodeScanTemplateReply_Template struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Public     bool   `protobuf:"varint,1,opt,name=public,proto3" json:"public,omitempty"`
	Uuid       string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Describe   string `protobuf:"bytes,3,opt,name=describe,proto3" json:"describe,omitempty"`
	Command    string `protobuf:"bytes,4,opt,name=command,proto3" json:"command,omitempty"`
	CreateTime int64  `protobuf:"varint,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *ListCodeScanTemplateReply_Template) Reset() {
	*x = ListCodeScanTemplateReply_Template{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCodeScanTemplateReply_Template) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCodeScanTemplateReply_Template) ProtoMessage() {}

func (x *ListCodeScanTemplateReply_Template) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCodeScanTemplateReply_Template.ProtoReflect.Descriptor instead.
func (*ListCodeScanTemplateReply_Template) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{15, 0}
}

func (x *ListCodeScanTemplateReply_Template) GetPublic() bool {
	if x != nil {
		return x.Public
	}
	return false
}

func (x *ListCodeScanTemplateReply_Template) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ListCodeScanTemplateReply_Template) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *ListCodeScanTemplateReply_Template) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *ListCodeScanTemplateReply_Template) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type ListCodeScanTaskReply_CodeScan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId           string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	RunId            string `protobuf:"bytes,2,opt,name=runId,proto3" json:"runId,omitempty"`
	UserUuid         string `protobuf:"bytes,3,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid          string `protobuf:"bytes,4,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid      string `protobuf:"bytes,5,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	RepoUuid         string `protobuf:"bytes,6,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	RepoUrl          string `protobuf:"bytes,7,opt,name=repoUrl,proto3" json:"repoUrl,omitempty"`
	RepoBranch       string `protobuf:"bytes,8,opt,name=repoBranch,proto3" json:"repoBranch,omitempty"`
	RepoCommitId     string `protobuf:"bytes,9,opt,name=repoCommitId,proto3" json:"repoCommitId,omitempty"`
	RepoCommitMsg    string `protobuf:"bytes,10,opt,name=repoCommitMsg,proto3" json:"repoCommitMsg,omitempty"`
	Result           int32  `protobuf:"varint,11,opt,name=result,proto3" json:"result,omitempty"`    // 0: 执行中， 1: 成功，-1: 失败
	Describe         string `protobuf:"bytes,12,opt,name=describe,proto3" json:"describe,omitempty"` // 执行过程内容
	TemplateUuid     string `protobuf:"bytes,13,opt,name=templateUuid,proto3" json:"templateUuid,omitempty"`
	IsPublicTemplate bool   `protobuf:"varint,14,opt,name=isPublicTemplate,proto3" json:"isPublicTemplate,omitempty"`
	Command          string `protobuf:"bytes,15,opt,name=command,proto3" json:"command,omitempty"`
	CreateTime       int64  `protobuf:"varint,16,opt,name=createTime,proto3" json:"createTime,omitempty"`
	StartExecTime    int64  `protobuf:"varint,17,opt,name=startExecTime,proto3" json:"startExecTime,omitempty"`
	EndExecTime      int64  `protobuf:"varint,18,opt,name=endExecTime,proto3" json:"endExecTime,omitempty"`
}

func (x *ListCodeScanTaskReply_CodeScan) Reset() {
	*x = ListCodeScanTaskReply_CodeScan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCodeScanTaskReply_CodeScan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCodeScanTaskReply_CodeScan) ProtoMessage() {}

func (x *ListCodeScanTaskReply_CodeScan) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCodeScanTaskReply_CodeScan.ProtoReflect.Descriptor instead.
func (*ListCodeScanTaskReply_CodeScan) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{25, 0}
}

func (x *ListCodeScanTaskReply_CodeScan) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ListCodeScanTaskReply_CodeScan) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *ListCodeScanTaskReply_CodeScan) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListCodeScanTaskReply_CodeScan) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListCodeScanTaskReply_CodeScan) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ListCodeScanTaskReply_CodeScan) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *ListCodeScanTaskReply_CodeScan) GetRepoUrl() string {
	if x != nil {
		return x.RepoUrl
	}
	return ""
}

func (x *ListCodeScanTaskReply_CodeScan) GetRepoBranch() string {
	if x != nil {
		return x.RepoBranch
	}
	return ""
}

func (x *ListCodeScanTaskReply_CodeScan) GetRepoCommitId() string {
	if x != nil {
		return x.RepoCommitId
	}
	return ""
}

func (x *ListCodeScanTaskReply_CodeScan) GetRepoCommitMsg() string {
	if x != nil {
		return x.RepoCommitMsg
	}
	return ""
}

func (x *ListCodeScanTaskReply_CodeScan) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *ListCodeScanTaskReply_CodeScan) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *ListCodeScanTaskReply_CodeScan) GetTemplateUuid() string {
	if x != nil {
		return x.TemplateUuid
	}
	return ""
}

func (x *ListCodeScanTaskReply_CodeScan) GetIsPublicTemplate() bool {
	if x != nil {
		return x.IsPublicTemplate
	}
	return false
}

func (x *ListCodeScanTaskReply_CodeScan) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *ListCodeScanTaskReply_CodeScan) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *ListCodeScanTaskReply_CodeScan) GetStartExecTime() int64 {
	if x != nil {
		return x.StartExecTime
	}
	return 0
}

func (x *ListCodeScanTaskReply_CodeScan) GetEndExecTime() int64 {
	if x != nil {
		return x.EndExecTime
	}
	return 0
}

type ListUnitTestTemplateReply_Template struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Public     bool   `protobuf:"varint,1,opt,name=public,proto3" json:"public,omitempty"`
	Uuid       string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Describe   string `protobuf:"bytes,3,opt,name=describe,proto3" json:"describe,omitempty"`
	Command    string `protobuf:"bytes,4,opt,name=command,proto3" json:"command,omitempty"`
	CreateTime int64  `protobuf:"varint,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *ListUnitTestTemplateReply_Template) Reset() {
	*x = ListUnitTestTemplateReply_Template{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUnitTestTemplateReply_Template) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUnitTestTemplateReply_Template) ProtoMessage() {}

func (x *ListUnitTestTemplateReply_Template) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUnitTestTemplateReply_Template.ProtoReflect.Descriptor instead.
func (*ListUnitTestTemplateReply_Template) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{29, 0}
}

func (x *ListUnitTestTemplateReply_Template) GetPublic() bool {
	if x != nil {
		return x.Public
	}
	return false
}

func (x *ListUnitTestTemplateReply_Template) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ListUnitTestTemplateReply_Template) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *ListUnitTestTemplateReply_Template) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *ListUnitTestTemplateReply_Template) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type ListUnitTestTaskReply_UnitTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId           string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	RunId            string `protobuf:"bytes,2,opt,name=runId,proto3" json:"runId,omitempty"`
	UserUuid         string `protobuf:"bytes,3,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid          string `protobuf:"bytes,4,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid      string `protobuf:"bytes,5,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	RepoUuid         string `protobuf:"bytes,6,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	RepoUrl          string `protobuf:"bytes,7,opt,name=repoUrl,proto3" json:"repoUrl,omitempty"`
	RepoBranch       string `protobuf:"bytes,8,opt,name=repoBranch,proto3" json:"repoBranch,omitempty"`
	RepoCommitId     string `protobuf:"bytes,9,opt,name=repoCommitId,proto3" json:"repoCommitId,omitempty"`
	RepoCommitMsg    string `protobuf:"bytes,10,opt,name=repoCommitMsg,proto3" json:"repoCommitMsg,omitempty"`
	Result           int32  `protobuf:"varint,11,opt,name=result,proto3" json:"result,omitempty"`    // 0: 执行中， 1: 成功，-1: 失败
	Describe         string `protobuf:"bytes,12,opt,name=describe,proto3" json:"describe,omitempty"` // 执行过程内容
	TemplateUuid     string `protobuf:"bytes,13,opt,name=templateUuid,proto3" json:"templateUuid,omitempty"`
	IsPublicTemplate bool   `protobuf:"varint,14,opt,name=isPublicTemplate,proto3" json:"isPublicTemplate,omitempty"`
	Command          string `protobuf:"bytes,15,opt,name=command,proto3" json:"command,omitempty"`
	CreateTime       int64  `protobuf:"varint,16,opt,name=createTime,proto3" json:"createTime,omitempty"`
	StartExecTime    int64  `protobuf:"varint,17,opt,name=startExecTime,proto3" json:"startExecTime,omitempty"`
	EndExecTime      int64  `protobuf:"varint,18,opt,name=endExecTime,proto3" json:"endExecTime,omitempty"`
}

func (x *ListUnitTestTaskReply_UnitTest) Reset() {
	*x = ListUnitTestTaskReply_UnitTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUnitTestTaskReply_UnitTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUnitTestTaskReply_UnitTest) ProtoMessage() {}

func (x *ListUnitTestTaskReply_UnitTest) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUnitTestTaskReply_UnitTest.ProtoReflect.Descriptor instead.
func (*ListUnitTestTaskReply_UnitTest) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{39, 0}
}

func (x *ListUnitTestTaskReply_UnitTest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ListUnitTestTaskReply_UnitTest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *ListUnitTestTaskReply_UnitTest) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListUnitTestTaskReply_UnitTest) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListUnitTestTaskReply_UnitTest) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ListUnitTestTaskReply_UnitTest) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *ListUnitTestTaskReply_UnitTest) GetRepoUrl() string {
	if x != nil {
		return x.RepoUrl
	}
	return ""
}

func (x *ListUnitTestTaskReply_UnitTest) GetRepoBranch() string {
	if x != nil {
		return x.RepoBranch
	}
	return ""
}

func (x *ListUnitTestTaskReply_UnitTest) GetRepoCommitId() string {
	if x != nil {
		return x.RepoCommitId
	}
	return ""
}

func (x *ListUnitTestTaskReply_UnitTest) GetRepoCommitMsg() string {
	if x != nil {
		return x.RepoCommitMsg
	}
	return ""
}

func (x *ListUnitTestTaskReply_UnitTest) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *ListUnitTestTaskReply_UnitTest) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *ListUnitTestTaskReply_UnitTest) GetTemplateUuid() string {
	if x != nil {
		return x.TemplateUuid
	}
	return ""
}

func (x *ListUnitTestTaskReply_UnitTest) GetIsPublicTemplate() bool {
	if x != nil {
		return x.IsPublicTemplate
	}
	return false
}

func (x *ListUnitTestTaskReply_UnitTest) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *ListUnitTestTaskReply_UnitTest) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *ListUnitTestTaskReply_UnitTest) GetStartExecTime() int64 {
	if x != nil {
		return x.StartExecTime
	}
	return 0
}

func (x *ListUnitTestTaskReply_UnitTest) GetEndExecTime() int64 {
	if x != nil {
		return x.EndExecTime
	}
	return 0
}

type ListBuildProgramTemplateReply_Template struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Public     bool   `protobuf:"varint,1,opt,name=public,proto3" json:"public,omitempty"`
	Uuid       string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Describe   string `protobuf:"bytes,3,opt,name=describe,proto3" json:"describe,omitempty"`
	Command    string `protobuf:"bytes,4,opt,name=command,proto3" json:"command,omitempty"`
	CreateTime int64  `protobuf:"varint,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *ListBuildProgramTemplateReply_Template) Reset() {
	*x = ListBuildProgramTemplateReply_Template{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBuildProgramTemplateReply_Template) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBuildProgramTemplateReply_Template) ProtoMessage() {}

func (x *ListBuildProgramTemplateReply_Template) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBuildProgramTemplateReply_Template.ProtoReflect.Descriptor instead.
func (*ListBuildProgramTemplateReply_Template) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{43, 0}
}

func (x *ListBuildProgramTemplateReply_Template) GetPublic() bool {
	if x != nil {
		return x.Public
	}
	return false
}

func (x *ListBuildProgramTemplateReply_Template) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ListBuildProgramTemplateReply_Template) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *ListBuildProgramTemplateReply_Template) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *ListBuildProgramTemplateReply_Template) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type ListBuildProgramTaskReply_BuildProgram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId           string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	RunId            string `protobuf:"bytes,2,opt,name=runId,proto3" json:"runId,omitempty"`
	UserUuid         string `protobuf:"bytes,3,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid          string `protobuf:"bytes,4,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid      string `protobuf:"bytes,5,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	RepoUuid         string `protobuf:"bytes,6,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	RepoUrl          string `protobuf:"bytes,7,opt,name=repoUrl,proto3" json:"repoUrl,omitempty"`
	RepoBranch       string `protobuf:"bytes,8,opt,name=repoBranch,proto3" json:"repoBranch,omitempty"`
	RepoCommitId     string `protobuf:"bytes,9,opt,name=repoCommitId,proto3" json:"repoCommitId,omitempty"`
	RepoCommitMsg    string `protobuf:"bytes,10,opt,name=repoCommitMsg,proto3" json:"repoCommitMsg,omitempty"`
	Result           int32  `protobuf:"varint,11,opt,name=result,proto3" json:"result,omitempty"`    // 0: 执行中， 1: 成功，-1: 失败
	Describe         string `protobuf:"bytes,12,opt,name=describe,proto3" json:"describe,omitempty"` // 执行过程内容
	TemplateUuid     string `protobuf:"bytes,13,opt,name=templateUuid,proto3" json:"templateUuid,omitempty"`
	IsPublicTemplate bool   `protobuf:"varint,14,opt,name=isPublicTemplate,proto3" json:"isPublicTemplate,omitempty"`
	Command          string `protobuf:"bytes,15,opt,name=command,proto3" json:"command,omitempty"`
	CreateTime       int64  `protobuf:"varint,16,opt,name=createTime,proto3" json:"createTime,omitempty"`
	StartExecTime    int64  `protobuf:"varint,17,opt,name=startExecTime,proto3" json:"startExecTime,omitempty"`
	EndExecTime      int64  `protobuf:"varint,18,opt,name=endExecTime,proto3" json:"endExecTime,omitempty"`
}

func (x *ListBuildProgramTaskReply_BuildProgram) Reset() {
	*x = ListBuildProgramTaskReply_BuildProgram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBuildProgramTaskReply_BuildProgram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBuildProgramTaskReply_BuildProgram) ProtoMessage() {}

func (x *ListBuildProgramTaskReply_BuildProgram) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBuildProgramTaskReply_BuildProgram.ProtoReflect.Descriptor instead.
func (*ListBuildProgramTaskReply_BuildProgram) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{53, 0}
}

func (x *ListBuildProgramTaskReply_BuildProgram) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ListBuildProgramTaskReply_BuildProgram) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *ListBuildProgramTaskReply_BuildProgram) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListBuildProgramTaskReply_BuildProgram) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListBuildProgramTaskReply_BuildProgram) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ListBuildProgramTaskReply_BuildProgram) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *ListBuildProgramTaskReply_BuildProgram) GetRepoUrl() string {
	if x != nil {
		return x.RepoUrl
	}
	return ""
}

func (x *ListBuildProgramTaskReply_BuildProgram) GetRepoBranch() string {
	if x != nil {
		return x.RepoBranch
	}
	return ""
}

func (x *ListBuildProgramTaskReply_BuildProgram) GetRepoCommitId() string {
	if x != nil {
		return x.RepoCommitId
	}
	return ""
}

func (x *ListBuildProgramTaskReply_BuildProgram) GetRepoCommitMsg() string {
	if x != nil {
		return x.RepoCommitMsg
	}
	return ""
}

func (x *ListBuildProgramTaskReply_BuildProgram) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *ListBuildProgramTaskReply_BuildProgram) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *ListBuildProgramTaskReply_BuildProgram) GetTemplateUuid() string {
	if x != nil {
		return x.TemplateUuid
	}
	return ""
}

func (x *ListBuildProgramTaskReply_BuildProgram) GetIsPublicTemplate() bool {
	if x != nil {
		return x.IsPublicTemplate
	}
	return false
}

func (x *ListBuildProgramTaskReply_BuildProgram) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *ListBuildProgramTaskReply_BuildProgram) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *ListBuildProgramTaskReply_BuildProgram) GetStartExecTime() int64 {
	if x != nil {
		return x.StartExecTime
	}
	return 0
}

func (x *ListBuildProgramTaskReply_BuildProgram) GetEndExecTime() int64 {
	if x != nil {
		return x.EndExecTime
	}
	return 0
}

type ListBuildContainerImageTemplateReply_Template struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid                       string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	OrgUuid                    string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid                string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ContainerImageRegisterUuid string `protobuf:"bytes,4,opt,name=containerImageRegisterUuid,proto3" json:"containerImageRegisterUuid,omitempty"`
	Namespace                  string `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
	DockerFilePath             string `protobuf:"bytes,6,opt,name=dockerFilePath,proto3" json:"dockerFilePath,omitempty"`
	Describe                   string `protobuf:"bytes,7,opt,name=describe,proto3" json:"describe,omitempty"`
	CreateTime                 int64  `protobuf:"varint,8,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *ListBuildContainerImageTemplateReply_Template) Reset() {
	*x = ListBuildContainerImageTemplateReply_Template{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBuildContainerImageTemplateReply_Template) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBuildContainerImageTemplateReply_Template) ProtoMessage() {}

func (x *ListBuildContainerImageTemplateReply_Template) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBuildContainerImageTemplateReply_Template.ProtoReflect.Descriptor instead.
func (*ListBuildContainerImageTemplateReply_Template) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{57, 0}
}

func (x *ListBuildContainerImageTemplateReply_Template) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ListBuildContainerImageTemplateReply_Template) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListBuildContainerImageTemplateReply_Template) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ListBuildContainerImageTemplateReply_Template) GetContainerImageRegisterUuid() string {
	if x != nil {
		return x.ContainerImageRegisterUuid
	}
	return ""
}

func (x *ListBuildContainerImageTemplateReply_Template) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListBuildContainerImageTemplateReply_Template) GetDockerFilePath() string {
	if x != nil {
		return x.DockerFilePath
	}
	return ""
}

func (x *ListBuildContainerImageTemplateReply_Template) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *ListBuildContainerImageTemplateReply_Template) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type ListBuildContainerImageTaskReply_Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId        string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	RunId         string `protobuf:"bytes,2,opt,name=runId,proto3" json:"runId,omitempty"`
	UserUuid      string `protobuf:"bytes,3,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid       string `protobuf:"bytes,4,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid   string `protobuf:"bytes,5,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	TemplateUuid  string `protobuf:"bytes,6,opt,name=templateUuid,proto3" json:"templateUuid,omitempty"`
	RepoUuid      string `protobuf:"bytes,7,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	RepoUrl       string `protobuf:"bytes,8,opt,name=repoUrl,proto3" json:"repoUrl,omitempty"`
	RepoBranch    string `protobuf:"bytes,9,opt,name=repoBranch,proto3" json:"repoBranch,omitempty"`
	RepoCommitId  string `protobuf:"bytes,10,opt,name=repoCommitId,proto3" json:"repoCommitId,omitempty"`
	RepoCommitMsg string `protobuf:"bytes,11,opt,name=repoCommitMsg,proto3" json:"repoCommitMsg,omitempty"`
	Result        int32  `protobuf:"varint,12,opt,name=result,proto3" json:"result,omitempty"`
	Describe      string `protobuf:"bytes,13,opt,name=describe,proto3" json:"describe,omitempty"`
	StartExecTime int64  `protobuf:"varint,14,opt,name=startExecTime,proto3" json:"startExecTime,omitempty"`
	EndExecTime   int64  `protobuf:"varint,15,opt,name=endExecTime,proto3" json:"endExecTime,omitempty"`
	CreateTime    int64  `protobuf:"varint,16,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *ListBuildContainerImageTaskReply_Task) Reset() {
	*x = ListBuildContainerImageTaskReply_Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBuildContainerImageTaskReply_Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBuildContainerImageTaskReply_Task) ProtoMessage() {}

func (x *ListBuildContainerImageTaskReply_Task) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBuildContainerImageTaskReply_Task.ProtoReflect.Descriptor instead.
func (*ListBuildContainerImageTaskReply_Task) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{67, 0}
}

func (x *ListBuildContainerImageTaskReply_Task) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ListBuildContainerImageTaskReply_Task) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *ListBuildContainerImageTaskReply_Task) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListBuildContainerImageTaskReply_Task) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListBuildContainerImageTaskReply_Task) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ListBuildContainerImageTaskReply_Task) GetTemplateUuid() string {
	if x != nil {
		return x.TemplateUuid
	}
	return ""
}

func (x *ListBuildContainerImageTaskReply_Task) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *ListBuildContainerImageTaskReply_Task) GetRepoUrl() string {
	if x != nil {
		return x.RepoUrl
	}
	return ""
}

func (x *ListBuildContainerImageTaskReply_Task) GetRepoBranch() string {
	if x != nil {
		return x.RepoBranch
	}
	return ""
}

func (x *ListBuildContainerImageTaskReply_Task) GetRepoCommitId() string {
	if x != nil {
		return x.RepoCommitId
	}
	return ""
}

func (x *ListBuildContainerImageTaskReply_Task) GetRepoCommitMsg() string {
	if x != nil {
		return x.RepoCommitMsg
	}
	return ""
}

func (x *ListBuildContainerImageTaskReply_Task) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *ListBuildContainerImageTaskReply_Task) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *ListBuildContainerImageTaskReply_Task) GetStartExecTime() int64 {
	if x != nil {
		return x.StartExecTime
	}
	return 0
}

func (x *ListBuildContainerImageTaskReply_Task) GetEndExecTime() int64 {
	if x != nil {
		return x.EndExecTime
	}
	return 0
}

func (x *ListBuildContainerImageTaskReply_Task) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type ListBuildContainerImageReply_BuildContainerImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId         string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	RunId          string `protobuf:"bytes,2,opt,name=runId,proto3" json:"runId,omitempty"`
	UserUuid       string `protobuf:"bytes,3,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	UserName       string `protobuf:"bytes,4,opt,name=userName,proto3" json:"userName,omitempty"`
	RepoUuid       string `protobuf:"bytes,5,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	RepoUrl        string `protobuf:"bytes,6,opt,name=repoUrl,proto3" json:"repoUrl,omitempty"`
	Branch         string `protobuf:"bytes,7,opt,name=branch,proto3" json:"branch,omitempty"`
	CommitId       string `protobuf:"bytes,8,opt,name=commitId,proto3" json:"commitId,omitempty"`
	DockerfilePath string `protobuf:"bytes,9,opt,name=dockerfilePath,proto3" json:"dockerfilePath,omitempty"`
	ImageUrl       string `protobuf:"bytes,10,opt,name=imageUrl,proto3" json:"imageUrl,omitempty"`
	ImageId        string `protobuf:"bytes,11,opt,name=imageId,proto3" json:"imageId,omitempty"`
	Result         int32  `protobuf:"varint,12,opt,name=result,proto3" json:"result,omitempty"`
	Describe       string `protobuf:"bytes,13,opt,name=describe,proto3" json:"describe,omitempty"`
	Dockerfile     string `protobuf:"bytes,14,opt,name=dockerfile,proto3" json:"dockerfile,omitempty"`
	StartExecTime  int64  `protobuf:"varint,15,opt,name=startExecTime,proto3" json:"startExecTime,omitempty"`
	EndExecTime    int64  `protobuf:"varint,16,opt,name=endExecTime,proto3" json:"endExecTime,omitempty"`
	CreateTime     int64  `protobuf:"varint,17,opt,name=createTime,proto3" json:"createTime,omitempty"`
	CostTime       int64  `protobuf:"varint,18,opt,name=costTime,proto3" json:"costTime,omitempty"`
}

func (x *ListBuildContainerImageReply_BuildContainerImage) Reset() {
	*x = ListBuildContainerImageReply_BuildContainerImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBuildContainerImageReply_BuildContainerImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBuildContainerImageReply_BuildContainerImage) ProtoMessage() {}

func (x *ListBuildContainerImageReply_BuildContainerImage) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBuildContainerImageReply_BuildContainerImage.ProtoReflect.Descriptor instead.
func (*ListBuildContainerImageReply_BuildContainerImage) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{73, 0}
}

func (x *ListBuildContainerImageReply_BuildContainerImage) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ListBuildContainerImageReply_BuildContainerImage) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *ListBuildContainerImageReply_BuildContainerImage) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListBuildContainerImageReply_BuildContainerImage) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *ListBuildContainerImageReply_BuildContainerImage) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *ListBuildContainerImageReply_BuildContainerImage) GetRepoUrl() string {
	if x != nil {
		return x.RepoUrl
	}
	return ""
}

func (x *ListBuildContainerImageReply_BuildContainerImage) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *ListBuildContainerImageReply_BuildContainerImage) GetCommitId() string {
	if x != nil {
		return x.CommitId
	}
	return ""
}

func (x *ListBuildContainerImageReply_BuildContainerImage) GetDockerfilePath() string {
	if x != nil {
		return x.DockerfilePath
	}
	return ""
}

func (x *ListBuildContainerImageReply_BuildContainerImage) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *ListBuildContainerImageReply_BuildContainerImage) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *ListBuildContainerImageReply_BuildContainerImage) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *ListBuildContainerImageReply_BuildContainerImage) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *ListBuildContainerImageReply_BuildContainerImage) GetDockerfile() string {
	if x != nil {
		return x.Dockerfile
	}
	return ""
}

func (x *ListBuildContainerImageReply_BuildContainerImage) GetStartExecTime() int64 {
	if x != nil {
		return x.StartExecTime
	}
	return 0
}

func (x *ListBuildContainerImageReply_BuildContainerImage) GetEndExecTime() int64 {
	if x != nil {
		return x.EndExecTime
	}
	return 0
}

func (x *ListBuildContainerImageReply_BuildContainerImage) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *ListBuildContainerImageReply_BuildContainerImage) GetCostTime() int64 {
	if x != nil {
		return x.CostTime
	}
	return 0
}

type GetCiTasksReply_CiTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result              int32  `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	CreateTime          int64  `protobuf:"varint,3,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime          int64  `protobuf:"varint,4,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	ContainerImg        string `protobuf:"bytes,5,opt,name=containerImg,proto3" json:"containerImg,omitempty"`
	ObjectStorageTo     string `protobuf:"bytes,6,opt,name=objectStorageTo,proto3" json:"objectStorageTo,omitempty"`
	ObjectStorageBucket string `protobuf:"bytes,7,opt,name=objectStorageBucket,proto3" json:"objectStorageBucket,omitempty"`
	ObjectStoragePath   string `protobuf:"bytes,8,opt,name=objectStoragePath,proto3" json:"objectStoragePath,omitempty"`
}

func (x *GetCiTasksReply_CiTask) Reset() {
	*x = GetCiTasksReply_CiTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCiTasksReply_CiTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCiTasksReply_CiTask) ProtoMessage() {}

func (x *GetCiTasksReply_CiTask) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCiTasksReply_CiTask.ProtoReflect.Descriptor instead.
func (*GetCiTasksReply_CiTask) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{89, 1}
}

func (x *GetCiTasksReply_CiTask) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *GetCiTasksReply_CiTask) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *GetCiTasksReply_CiTask) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *GetCiTasksReply_CiTask) GetContainerImg() string {
	if x != nil {
		return x.ContainerImg
	}
	return ""
}

func (x *GetCiTasksReply_CiTask) GetObjectStorageTo() string {
	if x != nil {
		return x.ObjectStorageTo
	}
	return ""
}

func (x *GetCiTasksReply_CiTask) GetObjectStorageBucket() string {
	if x != nil {
		return x.ObjectStorageBucket
	}
	return ""
}

func (x *GetCiTasksReply_CiTask) GetObjectStoragePath() string {
	if x != nil {
		return x.ObjectStoragePath
	}
	return ""
}

type GetCiTaskDetailsReply_CiDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result        int32  `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Content       string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	CreateTime    int64  `protobuf:"varint,3,opt,name=createTime,proto3" json:"createTime,omitempty"`
	StageName     string `protobuf:"bytes,4,opt,name=stageName,proto3" json:"stageName,omitempty"`
	StageStepName string `protobuf:"bytes,5,opt,name=stageStepName,proto3" json:"stageStepName,omitempty"`
}

func (x *GetCiTaskDetailsReply_CiDetail) Reset() {
	*x = GetCiTaskDetailsReply_CiDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCiTaskDetailsReply_CiDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCiTaskDetailsReply_CiDetail) ProtoMessage() {}

func (x *GetCiTaskDetailsReply_CiDetail) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCiTaskDetailsReply_CiDetail.ProtoReflect.Descriptor instead.
func (*GetCiTaskDetailsReply_CiDetail) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{91, 0}
}

func (x *GetCiTaskDetailsReply_CiDetail) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *GetCiTaskDetailsReply_CiDetail) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *GetCiTaskDetailsReply_CiDetail) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *GetCiTaskDetailsReply_CiDetail) GetStageName() string {
	if x != nil {
		return x.StageName
	}
	return ""
}

func (x *GetCiTaskDetailsReply_CiDetail) GetStageStepName() string {
	if x != nil {
		return x.StageStepName
	}
	return ""
}

type ListCiTemplateReply_CiTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	Name        string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	CreateTime  int64  `protobuf:"varint,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *ListCiTemplateReply_CiTemplate) Reset() {
	*x = ListCiTemplateReply_CiTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCiTemplateReply_CiTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCiTemplateReply_CiTemplate) ProtoMessage() {}

func (x *ListCiTemplateReply_CiTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCiTemplateReply_CiTemplate.ProtoReflect.Descriptor instead.
func (*ListCiTemplateReply_CiTemplate) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{95, 0}
}

func (x *ListCiTemplateReply_CiTemplate) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ListCiTemplateReply_CiTemplate) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListCiTemplateReply_CiTemplate) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ListCiTemplateReply_CiTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListCiTemplateReply_CiTemplate) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type ListCiTemplateStepReply_Step struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid                     string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	TemplateUuid             string `protobuf:"bytes,2,opt,name=templateUuid,proto3" json:"templateUuid,omitempty"`
	StepType                 int32  `protobuf:"varint,3,opt,name=stepType,proto3" json:"stepType,omitempty"`
	StepTypeTemplateIsPublic bool   `protobuf:"varint,4,opt,name=stepTypeTemplateIsPublic,proto3" json:"stepTypeTemplateIsPublic,omitempty"`
	StepTypeTemplateUuid     string `protobuf:"bytes,5,opt,name=stepTypeTemplateUuid,proto3" json:"stepTypeTemplateUuid,omitempty"`
	Priority                 int32  `protobuf:"varint,6,opt,name=priority,proto3" json:"priority,omitempty"`
	CreateTime               int64  `protobuf:"varint,7,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *ListCiTemplateStepReply_Step) Reset() {
	*x = ListCiTemplateStepReply_Step{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCiTemplateStepReply_Step) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCiTemplateStepReply_Step) ProtoMessage() {}

func (x *ListCiTemplateStepReply_Step) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCiTemplateStepReply_Step.ProtoReflect.Descriptor instead.
func (*ListCiTemplateStepReply_Step) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{101, 0}
}

func (x *ListCiTemplateStepReply_Step) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ListCiTemplateStepReply_Step) GetTemplateUuid() string {
	if x != nil {
		return x.TemplateUuid
	}
	return ""
}

func (x *ListCiTemplateStepReply_Step) GetStepType() int32 {
	if x != nil {
		return x.StepType
	}
	return 0
}

func (x *ListCiTemplateStepReply_Step) GetStepTypeTemplateIsPublic() bool {
	if x != nil {
		return x.StepTypeTemplateIsPublic
	}
	return false
}

func (x *ListCiTemplateStepReply_Step) GetStepTypeTemplateUuid() string {
	if x != nil {
		return x.StepTypeTemplateUuid
	}
	return ""
}

func (x *ListCiTemplateStepReply_Step) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *ListCiTemplateStepReply_Step) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

var File_ci_v1_ci_proto protoreflect.FileDescriptor

var file_ci_v1_ci_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x63, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x05, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x87, 0x01, 0x0a, 0x1a, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12,
	0x1f, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x36, 0x0a, 0x1c, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0xeb, 0x02, 0x0a, 0x1d, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x72, 0x63, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x72, 0x63, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x55, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x73,
	0x72, 0x63, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x73, 0x72, 0x63, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x3d, 0x0a, 0x15, 0x64, 0x65, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x55, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x15, 0x64, 0x65, 0x73, 0x74, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x25, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x64, 0x65, 0x73,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x22, 0x39, 0x0a, 0x1f, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x25,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72,
	0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x22, 0xd9, 0x03, 0x0a, 0x27, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x49, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x70, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x1a,
	0xe2, 0x02, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x75, 0x6e, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x72, 0x63, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x72, 0x63, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65,
	0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x65, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x70, 0x79,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72,
	0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x1f, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x22, 0x84, 0x03, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x75, 0x6e, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x72, 0x63, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x65, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x65, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78,
	0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x45, 0x78, 0x65,
	0x63, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x6e, 0x64,
	0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x18, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x1d, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x36,
	0x0a, 0x1a, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x27,
	0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x51, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x67,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0xdd, 0x01, 0x0a, 0x20, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07,
	0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x22, 0x3c, 0x0a, 0x22, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb0, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xf3, 0x01, 0x0a, 0x19,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x47, 0x0a, 0x09, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61,
	0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x1a, 0x8c, 0x01, 0x0a, 0x08, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xd4, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61,
	0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x2b, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x22, 0x9c, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x43,
	0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x75,
	0x69, 0x64, 0x22, 0x32, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61,
	0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xdc, 0x02, 0x0a, 0x13, 0x45, 0x78, 0x65, 0x63, 0x43,
	0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x23,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f,
	0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x2b, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x72,
	0x65, 0x70, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x22, 0x2f, 0x0a, 0x15, 0x45, 0x78, 0x65, 0x63, 0x43, 0x6f, 0x64,
	0x65, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0xcd, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72,
	0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x23, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x72, 0x65, 0x70,
	0x6f, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0xc2, 0x04, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x67,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x65, 0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x72,
	0x65, 0x70, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x73, 0x67,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2a, 0x0a,
	0x10, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x65, 0x63,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x64,
	0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x65, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f,
	0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x22, 0x95, 0x05, 0x0a, 0x15,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x43, 0x0a, 0x09, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x52,
	0x09, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x73, 0x1a, 0xb6, 0x04, 0x0a, 0x08, 0x43,
	0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x70,
	0x6f, 0x55, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f,
	0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x72, 0x65, 0x70, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xdd, 0x01, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a,
	0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x23,
	0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x22, 0x3c, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x54, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0xb0, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x65,
	0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72,
	0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x22, 0xf3, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x54, 0x65, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x47, 0x0a, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x8c, 0x01, 0x0a, 0x08,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xd4, 0x01, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72,
	0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x22, 0x9c, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73,
	0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xb8, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2b,
	0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x22, 0x32, 0x0a, 0x18, 0x44,
	0x65, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0xdc, 0x02, 0x0a, 0x13, 0x45, 0x78, 0x65, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07,
	0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0c, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12,
	0x23, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x72, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07,
	0x72, 0x65, 0x70, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a,
	0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22, 0x2f,
	0x0a, 0x15, 0x45, 0x78, 0x65, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22,
	0xcd, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f,
	0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x72, 0x65, 0x70,
	0x6f, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22,
	0xc2, 0x04, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x70, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x70,
	0x6f, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x72, 0x65, 0x70, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x54, 0x65, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x23, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f,
	0x55, 0x75, 0x69, 0x64, 0x22, 0x95, 0x05, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x54, 0x65, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x43,
	0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e,
	0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e,
	0x55, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x54, 0x65,
	0x73, 0x74, 0x73, 0x1a, 0xb6, 0x04, 0x0a, 0x08, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x75, 0x6e, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72,
	0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x65, 0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x22, 0x0a, 0x0c,
	0x72, 0x65, 0x70, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x73,
	0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2a,
	0x0a, 0x10, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x65,
	0x63, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e,
	0x64, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x65, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xe1, 0x01, 0x0a,
	0x24, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72,
	0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x22, 0x40, 0x0a, 0x26, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0xb4, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xfb, 0x01, 0x0a, 0x1d, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4b, 0x0a, 0x09, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x09, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x8c, 0x01, 0x0a, 0x08, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xd8, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f,
	0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0c, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x22, 0xa0, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x55, 0x75, 0x69, 0x64, 0x22, 0x36, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xe0, 0x02, 0x0a,
	0x17, 0x45, 0x78, 0x65, 0x63, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a,
	0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0c, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x12, 0x23, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x72, 0x65, 0x70,
	0x6f, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x72, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f,
	0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22,
	0x33, 0x0a, 0x19, 0x45, 0x78, 0x65, 0x63, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x22, 0xd1, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12,
	0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07,
	0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x72,
	0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0xc6, 0x04, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75,
	0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x55,
	0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x72,
	0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65,
	0x70, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69,
	0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xb1, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a,
	0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x23, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x72, 0x65, 0x70,
	0x6f, 0x55, 0x75, 0x69, 0x64, 0x22, 0xad, 0x05, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x53, 0x0a, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0xba, 0x04, 0x0a, 0x0c, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x70, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65,
	0x70, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x70,
	0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x70,
	0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x73, 0x67, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x73, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x65, 0x63, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x45, 0x78, 0x65,
	0x63, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc4, 0x02, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x23,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f,
	0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x3e, 0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x46,
	0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x22, 0x40, 0x0a, 0x26,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x97,
	0x01, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72,
	0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x22, 0x99, 0x03, 0x0a, 0x24, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x52, 0x0a, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x09, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x9c, 0x02, 0x0a, 0x08, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x3e, 0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72,
	0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2b, 0x0a,
	0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x22, 0xb7, 0x02, 0x0a, 0x23, 0x47,
	0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x3e, 0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72,
	0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2b, 0x0a,
	0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x22, 0x3d, 0x0a, 0x23, 0x44, 0x65,
	0x6c, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xbf, 0x02, 0x0a, 0x1e, 0x45, 0x78,
	0x65, 0x63, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x2b, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x08,
	0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x21, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x72, 0x65, 0x70,
	0x6f, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x06, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22, 0x3a, 0x0a, 0x20, 0x45,
	0x78, 0x65, 0x63, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0xd8, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21,
	0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x08,
	0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x1f, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x22, 0x87, 0x04, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72,
	0x75, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x70, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x65, 0x70, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x70, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65,
	0x70, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x73, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x65,
	0x63, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e,
	0x64, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x65, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb8, 0x01, 0x0a,
	0x1e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12,
	0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x72,
	0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x22, 0xd5, 0x04, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x42, 0x0a, 0x05,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73,
	0x1a, 0xec, 0x03, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70,
	0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x70,
	0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x65, 0x70, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x72, 0x65, 0x70, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x65, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xa3, 0x04, 0x0a, 0x16, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a,
	0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x72,
	0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x55,
	0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1f, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x12, 0x29, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x55, 0x72, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x0b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x33, 0x0a, 0x10,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x33, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x35, 0x0a, 0x11, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x11, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x66, 0x69, 0x6c,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0x32, 0x0a, 0x18, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0xd4, 0x01, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07,
	0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x72, 0x65,
	0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x1f, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x22, 0xa3, 0x04, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x75, 0x6e, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0e, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72,
	0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x55, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x65, 0x63, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x45,
	0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65,
	0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f,
	0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f,
	0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72,
	0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x22, 0xa9, 0x05,
	0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6b,
	0x0a, 0x14, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x14, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x9b, 0x04, 0x0a, 0x13,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x75, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70,
	0x6f, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70,
	0x6f, 0x55, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x72, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x72, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x66, 0x69, 0x6c,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x6b, 0x65,
	0x72, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78,
	0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65,
	0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x65, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x63, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xfb, 0x02, 0x0a, 0x26, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x0b, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b,
	0x65, 0x79, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65,
	0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65,
	0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x2d, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x27, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2d, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46,
	0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x28, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0xff, 0x02, 0x0a, 0x2a,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x54, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x29, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x2d, 0x0a,
	0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x0a,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2d,
	0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0d,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x22, 0x46, 0x0a,
	0x2c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x54, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0xa8, 0x02, 0x0a, 0x18, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x53, 0x46, 0x54, 0x50, 0x52,
	0x65, 0x71, 0x12, 0x27, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x27, 0x0a, 0x0a, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x2d, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x2f, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x22, 0x34, 0x0a, 0x1a, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46,
	0x69, 0x6c, 0x65, 0x54, 0x6f, 0x53, 0x46, 0x54, 0x50, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0xaa, 0x02, 0x0a, 0x1a, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x53, 0x46, 0x54, 0x50, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x48,
	0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x27,
	0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x2d, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x2f, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x22, 0x36, 0x0a, 0x1c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53,
	0x46, 0x54, 0x50, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x70, 0x79, 0x53, 0x46, 0x54, 0x50, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x69,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x81, 0x03, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x70, 0x79, 0x53, 0x46, 0x54, 0x50, 0x46, 0x69, 0x6c, 0x65,
	0x48, 0x69, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x70, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x70, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x66, 0x74, 0x70, 0x41, 0x64, 0x64, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x66, 0x74, 0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x66, 0x74, 0x70, 0x55, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x66, 0x74, 0x70, 0x55, 0x73, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x22, 0x0a, 0x0c, 0x73, 0x66, 0x74, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x66, 0x74, 0x70, 0x46, 0x69, 0x6c, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x39, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0xb1, 0x03, 0x0a, 0x21,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x75, 0x6e,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x70, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x63, 0x6f, 0x70, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x65, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x79, 0x0a, 0x08, 0x52, 0x75, 0x6e, 0x43, 0x69, 0x52, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x0a, 0x67,
	0x69, 0x74, 0x48, 0x74, 0x74, 0x70, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x67, 0x69, 0x74, 0x48, 0x74, 0x74,
	0x70, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x08, 0x67, 0x69, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x08, 0x67, 0x69, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x06, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22, 0x24, 0x0a, 0x0a, 0x52, 0x75,
	0x6e, 0x43, 0x69, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x22, 0x29, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x69, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x73, 0x22, 0xb4, 0x03, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x43, 0x69, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x37, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x69, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x1a, 0x57, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x69, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e,
	0x43, 0x69, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x8e, 0x02, 0x0a, 0x06, 0x43, 0x69, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x49, 0x6d, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x12, 0x30, 0x0a, 0x13, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x22, 0x36, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x69, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0xfb, 0x01, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x43, 0x69, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x3f, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x69, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x2e, 0x43, 0x69, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0xa0, 0x01, 0x0a, 0x08, 0x43, 0x69, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x67, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x67, 0x65, 0x53, 0x74, 0x65, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x2f, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x86, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07,
	0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x22, 0xef, 0x01, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x45, 0x0a, 0x0a, 0x63, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x2e, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x63,
	0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x1a, 0x90, 0x01, 0x0a, 0x0a, 0x43, 0x69,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa2, 0x01, 0x0a,
	0x10, 0x44, 0x65, 0x6c, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x22, 0x2c, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0xe7, 0x02, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a,
	0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0c, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x65, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x65, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x73, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x73, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x12, 0x3b, 0x0a, 0x14, 0x73, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x14, 0x73, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x30, 0x0a, 0x16, 0x41, 0x64, 0x64,
	0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb7, 0x01, 0x0a, 0x15,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x65, 0x70, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72,
	0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x55, 0x75, 0x69, 0x64, 0x22, 0xdd, 0x02, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x69,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x69, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x2e, 0x53, 0x74, 0x65, 0x70, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x1a, 0x86, 0x02, 0x0a,
	0x04, 0x53, 0x74, 0x65, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x73, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x73, 0x74, 0x65,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x73, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x73, 0x74, 0x65,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x73, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x74, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xeb, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x43, 0x69, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x71, 0x12, 0x23,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f,
	0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x2b, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x33,
	0x0a, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x65, 0x70, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x65, 0x70, 0x55,
	0x75, 0x69, 0x64, 0x22, 0x30, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0xfb, 0x27, 0x0a, 0x02, 0x63, 0x69, 0x12, 0x63, 0x0a, 0x17,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x21, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x63, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x6c, 0x0a, 0x1a, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x24, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x70, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x84, 0x01, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2c, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x70, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2b, 0x2e, 0x63,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x63, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x15, 0x49, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x1f, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x16, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54,
	0x61, 0x67, 0x73, 0x12, 0x20, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x14, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1d,
	0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63,
	0x61, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e,
	0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61,
	0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x57, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x1d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x63, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61,
	0x6e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x4e, 0x0a, 0x10, 0x45, 0x78, 0x65, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x1a, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x1a, 0x1c, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x43, 0x6f, 0x64,
	0x65, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x4b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x19, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x1b,
	0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63,
	0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4e, 0x0a,
	0x10, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x1a, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e,
	0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63,
	0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5a, 0x0a,
	0x14, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x12, 0x1d, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x54, 0x65, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x1f, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x54,
	0x65, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x57, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73,
	0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x63, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x1d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x63,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x54,
	0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x4e, 0x0a, 0x10, 0x45, 0x78, 0x65, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x65,
	0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1a, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x55,
	0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x19, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x1a, 0x1b, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x54, 0x65, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x4e, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x1a, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a,
	0x1c, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x54, 0x65, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x66, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x22, 0x2e, 0x63, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x24, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x12, 0x21, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x17,
	0x44, 0x65, 0x6c, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x63, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x81, 0x01, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x14, 0x45, 0x78, 0x65, 0x63, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1e, 0x2e,
	0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e,
	0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x57, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1d, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x14, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x1e, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x1a, 0x20, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x29, 0x2e, 0x63, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x2a, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x78, 0x0a,
	0x1e, 0x44, 0x65, 0x6c, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12,
	0x28, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x63, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x2e,
	0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x63, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x1b, 0x45,
	0x78, 0x65, 0x63, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x2e, 0x63, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x1a, 0x27, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x24, 0x2e, 0x63, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x1a, 0x26, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x1b, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x2e, 0x63, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x1a, 0x27, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x13, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x1d, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x1f, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x20,
	0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x22, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x21, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x15, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f,
	0x53, 0x46, 0x54, 0x50, 0x12, 0x1f, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x53, 0x46,
	0x54, 0x50, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x53,
	0x46, 0x54, 0x50, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x17, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x46, 0x54, 0x50, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x21, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x46, 0x54, 0x50, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x46, 0x54, 0x50, 0x46, 0x69, 0x6c,
	0x65, 0x54, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x87, 0x01, 0x0a, 0x23, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46,
	0x69, 0x6c, 0x65, 0x54, 0x6f, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x54,
	0x6f, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x93, 0x01, 0x0a, 0x27, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x31, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x33, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x54, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x54, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x70, 0x79, 0x53, 0x46, 0x54, 0x50, 0x46, 0x69,
	0x6c, 0x65, 0x48, 0x69, 0x73, 0x12, 0x1c, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x70, 0x79, 0x53, 0x46, 0x54, 0x50, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x69, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x70, 0x79, 0x53, 0x46, 0x54, 0x50, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x69, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x70, 0x79,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x48, 0x69, 0x73, 0x12, 0x26, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e,
	0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x48,
	0x69, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x10, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x2e,
	0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x69, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x63, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x17, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e,
	0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x11, 0x41, 0x64,
	0x64, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12,
	0x1b, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x69, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x63,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x54, 0x0a,
	0x12, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x65, 0x70, 0x12, 0x1c, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65,
	0x71, 0x1a, 0x1e, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x69,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x1b, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x65, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x05, 0x52, 0x75, 0x6e, 0x43, 0x69, 0x12,
	0x0f, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x43, 0x69, 0x52, 0x65, 0x71,
	0x1a, 0x11, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x43, 0x69, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x69, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x12, 0x14, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x69, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x63, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x69, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x69, 0x54, 0x61, 0x73, 0x6b,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1a, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x69, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x69, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x42, 0x26, 0x5a, 0x24, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x70, 0x73, 0x7a, 0x2f, 0x63, 0x69, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x69, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_ci_v1_ci_proto_rawDescOnce sync.Once
	file_ci_v1_ci_proto_rawDescData = file_ci_v1_ci_proto_rawDesc
)

func file_ci_v1_ci_proto_rawDescGZIP() []byte {
	file_ci_v1_ci_proto_rawDescOnce.Do(func() {
		file_ci_v1_ci_proto_rawDescData = protoimpl.X.CompressGZIP(file_ci_v1_ci_proto_rawDescData)
	})
	return file_ci_v1_ci_proto_rawDescData
}

var file_ci_v1_ci_proto_msgTypes = make([]protoimpl.MessageInfo, 119)
var file_ci_v1_ci_proto_goTypes = []interface{}{
	(*VerifyContainerRegistryReq)(nil),                       // 0: ci.v1.VerifyContainerRegistryReq
	(*VerifyContainerRegistryReply)(nil),                     // 1: ci.v1.VerifyContainerRegistryReply
	(*CopyContainerRegistryImageReq)(nil),                    // 2: ci.v1.CopyContainerRegistryImageReq
	(*CopyContainerRegistryImageReply)(nil),                  // 3: ci.v1.CopyContainerRegistryImageReply
	(*ListCopyContainerRegistryImageTaskReq)(nil),            // 4: ci.v1.ListCopyContainerRegistryImageTaskReq
	(*ListCopyContainerRegistryImageTaskReply)(nil),          // 5: ci.v1.ListCopyContainerRegistryImageTaskReply
	(*GetCopyContainerRegistryImageTaskReq)(nil),             // 6: ci.v1.GetCopyContainerRegistryImageTaskReq
	(*GetCopyContainerRegistryImageTaskReply)(nil),           // 7: ci.v1.GetCopyContainerRegistryImageTaskReply
	(*InspectContainerImageReq)(nil),                         // 8: ci.v1.InspectContainerImageReq
	(*InspectContainerImageReply)(nil),                       // 9: ci.v1.InspectContainerImageReply
	(*ListContainerImageTagsReq)(nil),                        // 10: ci.v1.ListContainerImageTagsReq
	(*ListContainerImageTagsReply)(nil),                      // 11: ci.v1.ListContainerImageTagsReply
	(*CreateCodeScanPrivateTemplateReq)(nil),                 // 12: ci.v1.CreateCodeScanPrivateTemplateReq
	(*CreateCodeScanPrivateTemplateReply)(nil),               // 13: ci.v1.CreateCodeScanPrivateTemplateReply
	(*ListCodeScanTemplateReq)(nil),                          // 14: ci.v1.ListCodeScanTemplateReq
	(*ListCodeScanTemplateReply)(nil),                        // 15: ci.v1.ListCodeScanTemplateReply
	(*GetCodeScanTemplateReq)(nil),                           // 16: ci.v1.GetCodeScanTemplateReq
	(*GetCodeScanTemplateReply)(nil),                         // 17: ci.v1.GetCodeScanTemplateReply
	(*DelCodeScanTemplateReq)(nil),                           // 18: ci.v1.DelCodeScanTemplateReq
	(*DelCodeScanTemplateReply)(nil),                         // 19: ci.v1.DelCodeScanTemplateReply
	(*ExecCodeScanTaskReq)(nil),                              // 20: ci.v1.ExecCodeScanTaskReq
	(*ExecCodeScanTaskReply)(nil),                            // 21: ci.v1.ExecCodeScanTaskReply
	(*GetCodeScanTaskReq)(nil),                               // 22: ci.v1.GetCodeScanTaskReq
	(*GetCodeScanTaskReply)(nil),                             // 23: ci.v1.GetCodeScanTaskReply
	(*ListCodeScanTaskReq)(nil),                              // 24: ci.v1.ListCodeScanTaskReq
	(*ListCodeScanTaskReply)(nil),                            // 25: ci.v1.ListCodeScanTaskReply
	(*CreateUnitTestPrivateTemplateReq)(nil),                 // 26: ci.v1.CreateUnitTestPrivateTemplateReq
	(*CreateUnitTestPrivateTemplateReply)(nil),               // 27: ci.v1.CreateUnitTestPrivateTemplateReply
	(*ListUnitTestTemplateReq)(nil),                          // 28: ci.v1.ListUnitTestTemplateReq
	(*ListUnitTestTemplateReply)(nil),                        // 29: ci.v1.ListUnitTestTemplateReply
	(*GetUnitTestTemplateReq)(nil),                           // 30: ci.v1.GetUnitTestTemplateReq
	(*GetUnitTestTemplateReply)(nil),                         // 31: ci.v1.GetUnitTestTemplateReply
	(*DelUnitTestTemplateReq)(nil),                           // 32: ci.v1.DelUnitTestTemplateReq
	(*DelUnitTestTemplateReply)(nil),                         // 33: ci.v1.DelUnitTestTemplateReply
	(*ExecUnitTestTaskReq)(nil),                              // 34: ci.v1.ExecUnitTestTaskReq
	(*ExecUnitTestTaskReply)(nil),                            // 35: ci.v1.ExecUnitTestTaskReply
	(*GetUnitTestTaskReq)(nil),                               // 36: ci.v1.GetUnitTestTaskReq
	(*GetUnitTestTaskReply)(nil),                             // 37: ci.v1.GetUnitTestTaskReply
	(*ListUnitTestTaskReq)(nil),                              // 38: ci.v1.ListUnitTestTaskReq
	(*ListUnitTestTaskReply)(nil),                            // 39: ci.v1.ListUnitTestTaskReply
	(*CreateBuildProgramPrivateTemplateReq)(nil),             // 40: ci.v1.CreateBuildProgramPrivateTemplateReq
	(*CreateBuildProgramPrivateTemplateReply)(nil),           // 41: ci.v1.CreateBuildProgramPrivateTemplateReply
	(*ListBuildProgramTemplateReq)(nil),                      // 42: ci.v1.ListBuildProgramTemplateReq
	(*ListBuildProgramTemplateReply)(nil),                    // 43: ci.v1.ListBuildProgramTemplateReply
	(*GetBuildProgramTemplateReq)(nil),                       // 44: ci.v1.GetBuildProgramTemplateReq
	(*GetBuildProgramTemplateReply)(nil),                     // 45: ci.v1.GetBuildProgramTemplateReply
	(*DelBuildProgramTemplateReq)(nil),                       // 46: ci.v1.DelBuildProgramTemplateReq
	(*DelBuildProgramTemplateReply)(nil),                     // 47: ci.v1.DelBuildProgramTemplateReply
	(*ExecBuildProgramTaskReq)(nil),                          // 48: ci.v1.ExecBuildProgramTaskReq
	(*ExecBuildProgramTaskReply)(nil),                        // 49: ci.v1.ExecBuildProgramTaskReply
	(*GetBuildProgramTaskReq)(nil),                           // 50: ci.v1.GetBuildProgramTaskReq
	(*GetBuildProgramTaskReply)(nil),                         // 51: ci.v1.GetBuildProgramTaskReply
	(*ListBuildProgramTaskReq)(nil),                          // 52: ci.v1.ListBuildProgramTaskReq
	(*ListBuildProgramTaskReply)(nil),                        // 53: ci.v1.ListBuildProgramTaskReply
	(*CreateBuildContainerImageTemplateReq)(nil),             // 54: ci.v1.CreateBuildContainerImageTemplateReq
	(*CreateBuildContainerImageTemplateReply)(nil),           // 55: ci.v1.CreateBuildContainerImageTemplateReply
	(*ListBuildContainerImageTemplateReq)(nil),               // 56: ci.v1.ListBuildContainerImageTemplateReq
	(*ListBuildContainerImageTemplateReply)(nil),             // 57: ci.v1.ListBuildContainerImageTemplateReply
	(*GetBuildContainerImageTemplateReq)(nil),                // 58: ci.v1.GetBuildContainerImageTemplateReq
	(*GetBuildContainerImageTemplateReply)(nil),              // 59: ci.v1.GetBuildContainerImageTemplateReply
	(*DelBuildContainerImageTemplateReq)(nil),                // 60: ci.v1.DelBuildContainerImageTemplateReq
	(*DelBuildContainerImageTemplateReply)(nil),              // 61: ci.v1.DelBuildContainerImageTemplateReply
	(*ExecBuildContainerImageTaskReq)(nil),                   // 62: ci.v1.ExecBuildContainerImageTaskReq
	(*ExecBuildContainerImageTaskReply)(nil),                 // 63: ci.v1.ExecBuildContainerImageTaskReply
	(*GetBuildContainerImageTaskReq)(nil),                    // 64: ci.v1.GetBuildContainerImageTaskReq
	(*GetBuildContainerImageTaskReply)(nil),                  // 65: ci.v1.GetBuildContainerImageTaskReply
	(*ListBuildContainerImageTaskReq)(nil),                   // 66: ci.v1.ListBuildContainerImageTaskReq
	(*ListBuildContainerImageTaskReply)(nil),                 // 67: ci.v1.ListBuildContainerImageTaskReply
	(*BuildContainerImageReq)(nil),                           // 68: ci.v1.BuildContainerImageReq
	(*BuildContainerImageReply)(nil),                         // 69: ci.v1.BuildContainerImageReply
	(*GetBuildContainerImageReq)(nil),                        // 70: ci.v1.GetBuildContainerImageReq
	(*GetBuildContainerImageReply)(nil),                      // 71: ci.v1.GetBuildContainerImageReply
	(*ListBuildContainerImageReq)(nil),                       // 72: ci.v1.ListBuildContainerImageReq
	(*ListBuildContainerImageReply)(nil),                     // 73: ci.v1.ListBuildContainerImageReply
	(*UploadLocalFileToCloudObjectStorageReq)(nil),           // 74: ci.v1.UploadLocalFileToCloudObjectStorageReq
	(*UploadLocalFileToCloudObjectStorageReply)(nil),         // 75: ci.v1.UploadLocalFileToCloudObjectStorageReply
	(*DownloadCloudObjectStorageObjectToLocalReq)(nil),       // 76: ci.v1.DownloadCloudObjectStorageObjectToLocalReq
	(*DownloadCloudObjectStorageObjectToLocalReply)(nil),     // 77: ci.v1.DownloadCloudObjectStorageObjectToLocalReply
	(*UploadLocalFileToSFTPReq)(nil),                         // 78: ci.v1.UploadLocalFileToSFTPReq
	(*UploadLocalFileToSFTPReply)(nil),                       // 79: ci.v1.UploadLocalFileToSFTPReply
	(*DownloadSFTPFileToLocalReq)(nil),                       // 80: ci.v1.DownloadSFTPFileToLocalReq
	(*DownloadSFTPFileToLocalReply)(nil),                     // 81: ci.v1.DownloadSFTPFileToLocalReply
	(*GetCopySFTPFileHisReq)(nil),                            // 82: ci.v1.GetCopySFTPFileHisReq
	(*GetCopySFTPFileHisReply)(nil),                          // 83: ci.v1.GetCopySFTPFileHisReply
	(*GetCopyCloudObjectStorageHisReq)(nil),                  // 84: ci.v1.GetCopyCloudObjectStorageHisReq
	(*GetCopyCloudObjectStorageHisReply)(nil),                // 85: ci.v1.GetCopyCloudObjectStorageHisReply
	(*RunCiReq)(nil),                                         // 86: ci.v1.RunCiReq
	(*RunCiReply)(nil),                                       // 87: ci.v1.RunCiReply
	(*GetCiTasksReq)(nil),                                    // 88: ci.v1.GetCiTasksReq
	(*GetCiTasksReply)(nil),                                  // 89: ci.v1.GetCiTasksReply
	(*GetCiTaskDetailsReq)(nil),                              // 90: ci.v1.GetCiTaskDetailsReq
	(*GetCiTaskDetailsReply)(nil),                            // 91: ci.v1.GetCiTaskDetailsReply
	(*CreateCiTemplateReq)(nil),                              // 92: ci.v1.CreateCiTemplateReq
	(*CreateCiTemplateReply)(nil),                            // 93: ci.v1.CreateCiTemplateReply
	(*ListCiTemplateReq)(nil),                                // 94: ci.v1.ListCiTemplateReq
	(*ListCiTemplateReply)(nil),                              // 95: ci.v1.ListCiTemplateReply
	(*DelCiTemplateReq)(nil),                                 // 96: ci.v1.DelCiTemplateReq
	(*DelCiTemplateReply)(nil),                               // 97: ci.v1.DelCiTemplateReply
	(*AddCiTemplateStepReq)(nil),                             // 98: ci.v1.AddCiTemplateStepReq
	(*AddCiTemplateStepReply)(nil),                           // 99: ci.v1.AddCiTemplateStepReply
	(*ListCiTemplateStepReq)(nil),                            // 100: ci.v1.ListCiTemplateStepReq
	(*ListCiTemplateStepReply)(nil),                          // 101: ci.v1.ListCiTemplateStepReply
	(*DelCiTemplateStepReq)(nil),                             // 102: ci.v1.DelCiTemplateStepReq
	(*DelCiTemplateStepReply)(nil),                           // 103: ci.v1.DelCiTemplateStepReply
	(*ListCopyContainerRegistryImageTaskReply_Task)(nil),     // 104: ci.v1.ListCopyContainerRegistryImageTaskReply.Task
	(*ListCodeScanTemplateReply_Template)(nil),               // 105: ci.v1.ListCodeScanTemplateReply.Template
	(*ListCodeScanTaskReply_CodeScan)(nil),                   // 106: ci.v1.ListCodeScanTaskReply.CodeScan
	(*ListUnitTestTemplateReply_Template)(nil),               // 107: ci.v1.ListUnitTestTemplateReply.Template
	(*ListUnitTestTaskReply_UnitTest)(nil),                   // 108: ci.v1.ListUnitTestTaskReply.UnitTest
	(*ListBuildProgramTemplateReply_Template)(nil),           // 109: ci.v1.ListBuildProgramTemplateReply.Template
	(*ListBuildProgramTaskReply_BuildProgram)(nil),           // 110: ci.v1.ListBuildProgramTaskReply.BuildProgram
	(*ListBuildContainerImageTemplateReply_Template)(nil),    // 111: ci.v1.ListBuildContainerImageTemplateReply.Template
	(*ListBuildContainerImageTaskReply_Task)(nil),            // 112: ci.v1.ListBuildContainerImageTaskReply.Task
	(*ListBuildContainerImageReply_BuildContainerImage)(nil), // 113: ci.v1.ListBuildContainerImageReply.BuildContainerImage
	nil,                                    // 114: ci.v1.GetCiTasksReply.TasksEntry
	(*GetCiTasksReply_CiTask)(nil),         // 115: ci.v1.GetCiTasksReply.CiTask
	(*GetCiTaskDetailsReply_CiDetail)(nil), // 116: ci.v1.GetCiTaskDetailsReply.CiDetail
	(*ListCiTemplateReply_CiTemplate)(nil), // 117: ci.v1.ListCiTemplateReply.CiTemplate
	(*ListCiTemplateStepReply_Step)(nil),   // 118: ci.v1.ListCiTemplateStepReply.Step
}
var file_ci_v1_ci_proto_depIdxs = []int32{
	104, // 0: ci.v1.ListCopyContainerRegistryImageTaskReply.tasks:type_name -> ci.v1.ListCopyContainerRegistryImageTaskReply.Task
	105, // 1: ci.v1.ListCodeScanTemplateReply.templates:type_name -> ci.v1.ListCodeScanTemplateReply.Template
	106, // 2: ci.v1.ListCodeScanTaskReply.CodeScans:type_name -> ci.v1.ListCodeScanTaskReply.CodeScan
	107, // 3: ci.v1.ListUnitTestTemplateReply.templates:type_name -> ci.v1.ListUnitTestTemplateReply.Template
	108, // 4: ci.v1.ListUnitTestTaskReply.unitTests:type_name -> ci.v1.ListUnitTestTaskReply.UnitTest
	109, // 5: ci.v1.ListBuildProgramTemplateReply.templates:type_name -> ci.v1.ListBuildProgramTemplateReply.Template
	110, // 6: ci.v1.ListBuildProgramTaskReply.buildPrograms:type_name -> ci.v1.ListBuildProgramTaskReply.BuildProgram
	111, // 7: ci.v1.ListBuildContainerImageTemplateReply.templates:type_name -> ci.v1.ListBuildContainerImageTemplateReply.Template
	112, // 8: ci.v1.ListBuildContainerImageTaskReply.tasks:type_name -> ci.v1.ListBuildContainerImageTaskReply.Task
	113, // 9: ci.v1.ListBuildContainerImageReply.buildContainerImages:type_name -> ci.v1.ListBuildContainerImageReply.BuildContainerImage
	114, // 10: ci.v1.GetCiTasksReply.tasks:type_name -> ci.v1.GetCiTasksReply.TasksEntry
	116, // 11: ci.v1.GetCiTaskDetailsReply.details:type_name -> ci.v1.GetCiTaskDetailsReply.CiDetail
	117, // 12: ci.v1.ListCiTemplateReply.ciTemplate:type_name -> ci.v1.ListCiTemplateReply.CiTemplate
	118, // 13: ci.v1.ListCiTemplateStepReply.steps:type_name -> ci.v1.ListCiTemplateStepReply.Step
	115, // 14: ci.v1.GetCiTasksReply.TasksEntry.value:type_name -> ci.v1.GetCiTasksReply.CiTask
	0,   // 15: ci.v1.ci.VerifyContainerRegistry:input_type -> ci.v1.VerifyContainerRegistryReq
	2,   // 16: ci.v1.ci.CopyContainerRegistryImage:input_type -> ci.v1.CopyContainerRegistryImageReq
	4,   // 17: ci.v1.ci.ListCopyContainerRegistryImageTask:input_type -> ci.v1.ListCopyContainerRegistryImageTaskReq
	6,   // 18: ci.v1.ci.GetCopyContainerRegistryImageTask:input_type -> ci.v1.GetCopyContainerRegistryImageTaskReq
	8,   // 19: ci.v1.ci.InspectContainerImage:input_type -> ci.v1.InspectContainerImageReq
	10,  // 20: ci.v1.ci.ListContainerImageTags:input_type -> ci.v1.ListContainerImageTagsReq
	14,  // 21: ci.v1.ci.ListCodeScanTemplate:input_type -> ci.v1.ListCodeScanTemplateReq
	16,  // 22: ci.v1.ci.GetCodeScanTemplate:input_type -> ci.v1.GetCodeScanTemplateReq
	18,  // 23: ci.v1.ci.DelCodeScanTemplate:input_type -> ci.v1.DelCodeScanTemplateReq
	12,  // 24: ci.v1.ci.CreateCodeScanPrivateTemplate:input_type -> ci.v1.CreateCodeScanPrivateTemplateReq
	20,  // 25: ci.v1.ci.ExecCodeScanTask:input_type -> ci.v1.ExecCodeScanTaskReq
	22,  // 26: ci.v1.ci.GetCodeScanTask:input_type -> ci.v1.GetCodeScanTaskReq
	24,  // 27: ci.v1.ci.ListCodeScanTask:input_type -> ci.v1.ListCodeScanTaskReq
	28,  // 28: ci.v1.ci.ListUnitTestTemplate:input_type -> ci.v1.ListUnitTestTemplateReq
	30,  // 29: ci.v1.ci.GetUnitTestTemplate:input_type -> ci.v1.GetUnitTestTemplateReq
	32,  // 30: ci.v1.ci.DelUnitTestTemplate:input_type -> ci.v1.DelUnitTestTemplateReq
	26,  // 31: ci.v1.ci.CreateUnitTestPrivateTemplate:input_type -> ci.v1.CreateUnitTestPrivateTemplateReq
	34,  // 32: ci.v1.ci.ExecUnitTestTask:input_type -> ci.v1.ExecUnitTestTaskReq
	36,  // 33: ci.v1.ci.GetUnitTestTask:input_type -> ci.v1.GetUnitTestTaskReq
	38,  // 34: ci.v1.ci.ListUnitTestTask:input_type -> ci.v1.ListUnitTestTaskReq
	42,  // 35: ci.v1.ci.ListBuildProgramTemplate:input_type -> ci.v1.ListBuildProgramTemplateReq
	44,  // 36: ci.v1.ci.GetBuildProgramTemplate:input_type -> ci.v1.GetBuildProgramTemplateReq
	46,  // 37: ci.v1.ci.DelBuildProgramTemplate:input_type -> ci.v1.DelBuildProgramTemplateReq
	40,  // 38: ci.v1.ci.CreateBuildProgramPrivateTemplate:input_type -> ci.v1.CreateBuildProgramPrivateTemplateReq
	48,  // 39: ci.v1.ci.ExecBuildProgramTask:input_type -> ci.v1.ExecBuildProgramTaskReq
	50,  // 40: ci.v1.ci.GetBuildProgramTask:input_type -> ci.v1.GetBuildProgramTaskReq
	52,  // 41: ci.v1.ci.ListBuildProgramTask:input_type -> ci.v1.ListBuildProgramTaskReq
	56,  // 42: ci.v1.ci.ListBuildContainerImageTemplate:input_type -> ci.v1.ListBuildContainerImageTemplateReq
	58,  // 43: ci.v1.ci.GetBuildContainerImageTemplate:input_type -> ci.v1.GetBuildContainerImageTemplateReq
	60,  // 44: ci.v1.ci.DelBuildContainerImageTemplate:input_type -> ci.v1.DelBuildContainerImageTemplateReq
	54,  // 45: ci.v1.ci.CreateBuildContainerImageTemplate:input_type -> ci.v1.CreateBuildContainerImageTemplateReq
	62,  // 46: ci.v1.ci.ExecBuildContainerImageTask:input_type -> ci.v1.ExecBuildContainerImageTaskReq
	64,  // 47: ci.v1.ci.GetBuildContainerImageTask:input_type -> ci.v1.GetBuildContainerImageTaskReq
	66,  // 48: ci.v1.ci.ListBuildContainerImageTask:input_type -> ci.v1.ListBuildContainerImageTaskReq
	68,  // 49: ci.v1.ci.BuildContainerImage:input_type -> ci.v1.BuildContainerImageReq
	70,  // 50: ci.v1.ci.GetBuildContainerImage:input_type -> ci.v1.GetBuildContainerImageReq
	72,  // 51: ci.v1.ci.ListBuildContainerImage:input_type -> ci.v1.ListBuildContainerImageReq
	78,  // 52: ci.v1.ci.UploadLocalFileToSFTP:input_type -> ci.v1.UploadLocalFileToSFTPReq
	80,  // 53: ci.v1.ci.DownloadSFTPFileToLocal:input_type -> ci.v1.DownloadSFTPFileToLocalReq
	74,  // 54: ci.v1.ci.UploadLocalFileToCloudObjectStorage:input_type -> ci.v1.UploadLocalFileToCloudObjectStorageReq
	76,  // 55: ci.v1.ci.DownloadCloudObjectStorageObjectToLocal:input_type -> ci.v1.DownloadCloudObjectStorageObjectToLocalReq
	82,  // 56: ci.v1.ci.GetCopySFTPFileHis:input_type -> ci.v1.GetCopySFTPFileHisReq
	84,  // 57: ci.v1.ci.GetCopyCloudObjectStorageHis:input_type -> ci.v1.GetCopyCloudObjectStorageHisReq
	92,  // 58: ci.v1.ci.CreateCiTemplate:input_type -> ci.v1.CreateCiTemplateReq
	94,  // 59: ci.v1.ci.ListCiTemplate:input_type -> ci.v1.ListCiTemplateReq
	96,  // 60: ci.v1.ci.DelCiTemplate:input_type -> ci.v1.DelCiTemplateReq
	98,  // 61: ci.v1.ci.AddCiTemplateStep:input_type -> ci.v1.AddCiTemplateStepReq
	100, // 62: ci.v1.ci.ListCiTemplateStep:input_type -> ci.v1.ListCiTemplateStepReq
	102, // 63: ci.v1.ci.DelCiTemplateStep:input_type -> ci.v1.DelCiTemplateStepReq
	86,  // 64: ci.v1.ci.RunCi:input_type -> ci.v1.RunCiReq
	88,  // 65: ci.v1.ci.GetCiTasks:input_type -> ci.v1.GetCiTasksReq
	90,  // 66: ci.v1.ci.GetCiTaskDetails:input_type -> ci.v1.GetCiTaskDetailsReq
	1,   // 67: ci.v1.ci.VerifyContainerRegistry:output_type -> ci.v1.VerifyContainerRegistryReply
	3,   // 68: ci.v1.ci.CopyContainerRegistryImage:output_type -> ci.v1.CopyContainerRegistryImageReply
	5,   // 69: ci.v1.ci.ListCopyContainerRegistryImageTask:output_type -> ci.v1.ListCopyContainerRegistryImageTaskReply
	7,   // 70: ci.v1.ci.GetCopyContainerRegistryImageTask:output_type -> ci.v1.GetCopyContainerRegistryImageTaskReply
	9,   // 71: ci.v1.ci.InspectContainerImage:output_type -> ci.v1.InspectContainerImageReply
	11,  // 72: ci.v1.ci.ListContainerImageTags:output_type -> ci.v1.ListContainerImageTagsReply
	15,  // 73: ci.v1.ci.ListCodeScanTemplate:output_type -> ci.v1.ListCodeScanTemplateReply
	17,  // 74: ci.v1.ci.GetCodeScanTemplate:output_type -> ci.v1.GetCodeScanTemplateReply
	19,  // 75: ci.v1.ci.DelCodeScanTemplate:output_type -> ci.v1.DelCodeScanTemplateReply
	13,  // 76: ci.v1.ci.CreateCodeScanPrivateTemplate:output_type -> ci.v1.CreateCodeScanPrivateTemplateReply
	21,  // 77: ci.v1.ci.ExecCodeScanTask:output_type -> ci.v1.ExecCodeScanTaskReply
	23,  // 78: ci.v1.ci.GetCodeScanTask:output_type -> ci.v1.GetCodeScanTaskReply
	25,  // 79: ci.v1.ci.ListCodeScanTask:output_type -> ci.v1.ListCodeScanTaskReply
	29,  // 80: ci.v1.ci.ListUnitTestTemplate:output_type -> ci.v1.ListUnitTestTemplateReply
	31,  // 81: ci.v1.ci.GetUnitTestTemplate:output_type -> ci.v1.GetUnitTestTemplateReply
	33,  // 82: ci.v1.ci.DelUnitTestTemplate:output_type -> ci.v1.DelUnitTestTemplateReply
	27,  // 83: ci.v1.ci.CreateUnitTestPrivateTemplate:output_type -> ci.v1.CreateUnitTestPrivateTemplateReply
	35,  // 84: ci.v1.ci.ExecUnitTestTask:output_type -> ci.v1.ExecUnitTestTaskReply
	37,  // 85: ci.v1.ci.GetUnitTestTask:output_type -> ci.v1.GetUnitTestTaskReply
	39,  // 86: ci.v1.ci.ListUnitTestTask:output_type -> ci.v1.ListUnitTestTaskReply
	43,  // 87: ci.v1.ci.ListBuildProgramTemplate:output_type -> ci.v1.ListBuildProgramTemplateReply
	45,  // 88: ci.v1.ci.GetBuildProgramTemplate:output_type -> ci.v1.GetBuildProgramTemplateReply
	47,  // 89: ci.v1.ci.DelBuildProgramTemplate:output_type -> ci.v1.DelBuildProgramTemplateReply
	41,  // 90: ci.v1.ci.CreateBuildProgramPrivateTemplate:output_type -> ci.v1.CreateBuildProgramPrivateTemplateReply
	49,  // 91: ci.v1.ci.ExecBuildProgramTask:output_type -> ci.v1.ExecBuildProgramTaskReply
	51,  // 92: ci.v1.ci.GetBuildProgramTask:output_type -> ci.v1.GetBuildProgramTaskReply
	53,  // 93: ci.v1.ci.ListBuildProgramTask:output_type -> ci.v1.ListBuildProgramTaskReply
	57,  // 94: ci.v1.ci.ListBuildContainerImageTemplate:output_type -> ci.v1.ListBuildContainerImageTemplateReply
	59,  // 95: ci.v1.ci.GetBuildContainerImageTemplate:output_type -> ci.v1.GetBuildContainerImageTemplateReply
	61,  // 96: ci.v1.ci.DelBuildContainerImageTemplate:output_type -> ci.v1.DelBuildContainerImageTemplateReply
	55,  // 97: ci.v1.ci.CreateBuildContainerImageTemplate:output_type -> ci.v1.CreateBuildContainerImageTemplateReply
	63,  // 98: ci.v1.ci.ExecBuildContainerImageTask:output_type -> ci.v1.ExecBuildContainerImageTaskReply
	65,  // 99: ci.v1.ci.GetBuildContainerImageTask:output_type -> ci.v1.GetBuildContainerImageTaskReply
	67,  // 100: ci.v1.ci.ListBuildContainerImageTask:output_type -> ci.v1.ListBuildContainerImageTaskReply
	69,  // 101: ci.v1.ci.BuildContainerImage:output_type -> ci.v1.BuildContainerImageReply
	71,  // 102: ci.v1.ci.GetBuildContainerImage:output_type -> ci.v1.GetBuildContainerImageReply
	73,  // 103: ci.v1.ci.ListBuildContainerImage:output_type -> ci.v1.ListBuildContainerImageReply
	79,  // 104: ci.v1.ci.UploadLocalFileToSFTP:output_type -> ci.v1.UploadLocalFileToSFTPReply
	81,  // 105: ci.v1.ci.DownloadSFTPFileToLocal:output_type -> ci.v1.DownloadSFTPFileToLocalReply
	75,  // 106: ci.v1.ci.UploadLocalFileToCloudObjectStorage:output_type -> ci.v1.UploadLocalFileToCloudObjectStorageReply
	77,  // 107: ci.v1.ci.DownloadCloudObjectStorageObjectToLocal:output_type -> ci.v1.DownloadCloudObjectStorageObjectToLocalReply
	83,  // 108: ci.v1.ci.GetCopySFTPFileHis:output_type -> ci.v1.GetCopySFTPFileHisReply
	85,  // 109: ci.v1.ci.GetCopyCloudObjectStorageHis:output_type -> ci.v1.GetCopyCloudObjectStorageHisReply
	93,  // 110: ci.v1.ci.CreateCiTemplate:output_type -> ci.v1.CreateCiTemplateReply
	95,  // 111: ci.v1.ci.ListCiTemplate:output_type -> ci.v1.ListCiTemplateReply
	97,  // 112: ci.v1.ci.DelCiTemplate:output_type -> ci.v1.DelCiTemplateReply
	99,  // 113: ci.v1.ci.AddCiTemplateStep:output_type -> ci.v1.AddCiTemplateStepReply
	101, // 114: ci.v1.ci.ListCiTemplateStep:output_type -> ci.v1.ListCiTemplateStepReply
	103, // 115: ci.v1.ci.DelCiTemplateStep:output_type -> ci.v1.DelCiTemplateStepReply
	87,  // 116: ci.v1.ci.RunCi:output_type -> ci.v1.RunCiReply
	89,  // 117: ci.v1.ci.GetCiTasks:output_type -> ci.v1.GetCiTasksReply
	91,  // 118: ci.v1.ci.GetCiTaskDetails:output_type -> ci.v1.GetCiTaskDetailsReply
	67,  // [67:119] is the sub-list for method output_type
	15,  // [15:67] is the sub-list for method input_type
	15,  // [15:15] is the sub-list for extension type_name
	15,  // [15:15] is the sub-list for extension extendee
	0,   // [0:15] is the sub-list for field type_name
}

func init() { file_ci_v1_ci_proto_init() }
func file_ci_v1_ci_proto_init() {
	if File_ci_v1_ci_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ci_v1_ci_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyContainerRegistryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyContainerRegistryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyContainerRegistryImageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyContainerRegistryImageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCopyContainerRegistryImageTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCopyContainerRegistryImageTaskReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCopyContainerRegistryImageTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCopyContainerRegistryImageTaskReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectContainerImageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectContainerImageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListContainerImageTagsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListContainerImageTagsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCodeScanPrivateTemplateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCodeScanPrivateTemplateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCodeScanTemplateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCodeScanTemplateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCodeScanTemplateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCodeScanTemplateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelCodeScanTemplateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelCodeScanTemplateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecCodeScanTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecCodeScanTaskReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCodeScanTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCodeScanTaskReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCodeScanTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCodeScanTaskReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUnitTestPrivateTemplateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUnitTestPrivateTemplateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUnitTestTemplateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUnitTestTemplateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUnitTestTemplateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUnitTestTemplateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelUnitTestTemplateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelUnitTestTemplateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecUnitTestTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecUnitTestTaskReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUnitTestTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUnitTestTaskReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUnitTestTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUnitTestTaskReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBuildProgramPrivateTemplateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBuildProgramPrivateTemplateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBuildProgramTemplateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBuildProgramTemplateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBuildProgramTemplateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBuildProgramTemplateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelBuildProgramTemplateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelBuildProgramTemplateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecBuildProgramTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecBuildProgramTaskReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBuildProgramTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBuildProgramTaskReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBuildProgramTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBuildProgramTaskReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBuildContainerImageTemplateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBuildContainerImageTemplateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBuildContainerImageTemplateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBuildContainerImageTemplateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBuildContainerImageTemplateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBuildContainerImageTemplateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelBuildContainerImageTemplateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelBuildContainerImageTemplateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecBuildContainerImageTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecBuildContainerImageTaskReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBuildContainerImageTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBuildContainerImageTaskReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBuildContainerImageTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBuildContainerImageTaskReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildContainerImageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildContainerImageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBuildContainerImageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBuildContainerImageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBuildContainerImageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBuildContainerImageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadLocalFileToCloudObjectStorageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadLocalFileToCloudObjectStorageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadCloudObjectStorageObjectToLocalReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadCloudObjectStorageObjectToLocalReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadLocalFileToSFTPReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadLocalFileToSFTPReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadSFTPFileToLocalReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadSFTPFileToLocalReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCopySFTPFileHisReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCopySFTPFileHisReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCopyCloudObjectStorageHisReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCopyCloudObjectStorageHisReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCiReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCiReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCiTasksReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCiTasksReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCiTaskDetailsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCiTaskDetailsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCiTemplateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCiTemplateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCiTemplateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCiTemplateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelCiTemplateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelCiTemplateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCiTemplateStepReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCiTemplateStepReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCiTemplateStepReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCiTemplateStepReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelCiTemplateStepReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelCiTemplateStepReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCopyContainerRegistryImageTaskReply_Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCodeScanTemplateReply_Template); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCodeScanTaskReply_CodeScan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUnitTestTemplateReply_Template); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUnitTestTaskReply_UnitTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBuildProgramTemplateReply_Template); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBuildProgramTaskReply_BuildProgram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBuildContainerImageTemplateReply_Template); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBuildContainerImageTaskReply_Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBuildContainerImageReply_BuildContainerImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCiTasksReply_CiTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCiTaskDetailsReply_CiDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCiTemplateReply_CiTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCiTemplateStepReply_Step); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ci_v1_ci_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   119,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ci_v1_ci_proto_goTypes,
		DependencyIndexes: file_ci_v1_ci_proto_depIdxs,
		MessageInfos:      file_ci_v1_ci_proto_msgTypes,
	}.Build()
	File_ci_v1_ci_proto = out.File
	file_ci_v1_ci_proto_rawDesc = nil
	file_ci_v1_ci_proto_goTypes = nil
	file_ci_v1_ci_proto_depIdxs = nil
}
