// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.14.0
// source: ci/v1/ci.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Container
// 认证容器镜像仓库登录 - tool
type VerifyContainerRegistryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server   string `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *VerifyContainerRegistryReq) Reset() {
	*x = VerifyContainerRegistryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyContainerRegistryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyContainerRegistryReq) ProtoMessage() {}

func (x *VerifyContainerRegistryReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyContainerRegistryReq.ProtoReflect.Descriptor instead.
func (*VerifyContainerRegistryReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{0}
}

func (x *VerifyContainerRegistryReq) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

func (x *VerifyContainerRegistryReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *VerifyContainerRegistryReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type VerifyContainerRegistryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *VerifyContainerRegistryReply) Reset() {
	*x = VerifyContainerRegistryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyContainerRegistryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyContainerRegistryReply) ProtoMessage() {}

func (x *VerifyContainerRegistryReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyContainerRegistryReply.ProtoReflect.Descriptor instead.
func (*VerifyContainerRegistryReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{1}
}

func (x *VerifyContainerRegistryReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// 同步容器镜像仓库间的镜像
type CopyContainerRegistryImageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid             string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid              string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid          string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	SrcImageRegistryUuid string `protobuf:"bytes,4,opt,name=srcImageRegistryUuid,proto3" json:"srcImageRegistryUuid,omitempty"`
	//string srcImageRegistryUuid = 4 [(validate.rules).string.min_len = 1];
	//string srcUsername = 4 [(validate.rules).string.min_len = 1];
	//string srcPassword = 5 [(validate.rules).string.min_len = 1];
	SrcImage              string `protobuf:"bytes,6,opt,name=srcImage,proto3" json:"srcImage,omitempty"`
	DestImageRegistryUuid string `protobuf:"bytes,7,opt,name=destImageRegistryUuid,proto3" json:"destImageRegistryUuid,omitempty"`
	//string destUsername = 7 [(validate.rules).string.min_len = 1];
	//string destPassword = 8 [(validate.rules).string.min_len = 1];
	DestImage string `protobuf:"bytes,9,opt,name=destImage,proto3" json:"destImage,omitempty"`
	Timeout   int32  `protobuf:"varint,10,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *CopyContainerRegistryImageReq) Reset() {
	*x = CopyContainerRegistryImageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyContainerRegistryImageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyContainerRegistryImageReq) ProtoMessage() {}

func (x *CopyContainerRegistryImageReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyContainerRegistryImageReq.ProtoReflect.Descriptor instead.
func (*CopyContainerRegistryImageReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{2}
}

func (x *CopyContainerRegistryImageReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *CopyContainerRegistryImageReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *CopyContainerRegistryImageReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *CopyContainerRegistryImageReq) GetSrcImageRegistryUuid() string {
	if x != nil {
		return x.SrcImageRegistryUuid
	}
	return ""
}

func (x *CopyContainerRegistryImageReq) GetSrcImage() string {
	if x != nil {
		return x.SrcImage
	}
	return ""
}

func (x *CopyContainerRegistryImageReq) GetDestImageRegistryUuid() string {
	if x != nil {
		return x.DestImageRegistryUuid
	}
	return ""
}

func (x *CopyContainerRegistryImageReq) GetDestImage() string {
	if x != nil {
		return x.DestImage
	}
	return ""
}

func (x *CopyContainerRegistryImageReq) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type CopyContainerRegistryImageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *CopyContainerRegistryImageReply) Reset() {
	*x = CopyContainerRegistryImageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyContainerRegistryImageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyContainerRegistryImageReply) ProtoMessage() {}

func (x *CopyContainerRegistryImageReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyContainerRegistryImageReply.ProtoReflect.Descriptor instead.
func (*CopyContainerRegistryImageReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{3}
}

func (x *CopyContainerRegistryImageReply) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

// 列出容器镜像仓库镜像同步任务
type ListCopyContainerRegistryImageTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
}

func (x *ListCopyContainerRegistryImageTaskReq) Reset() {
	*x = ListCopyContainerRegistryImageTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCopyContainerRegistryImageTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCopyContainerRegistryImageTaskReq) ProtoMessage() {}

func (x *ListCopyContainerRegistryImageTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCopyContainerRegistryImageTaskReq.ProtoReflect.Descriptor instead.
func (*ListCopyContainerRegistryImageTaskReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{4}
}

func (x *ListCopyContainerRegistryImageTaskReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListCopyContainerRegistryImageTaskReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListCopyContainerRegistryImageTaskReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

type ListCopyContainerRegistryImageTaskReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks []*ListCopyContainerRegistryImageTaskReply_Task `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
}

func (x *ListCopyContainerRegistryImageTaskReply) Reset() {
	*x = ListCopyContainerRegistryImageTaskReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCopyContainerRegistryImageTaskReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCopyContainerRegistryImageTaskReply) ProtoMessage() {}

func (x *ListCopyContainerRegistryImageTaskReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCopyContainerRegistryImageTaskReply.ProtoReflect.Descriptor instead.
func (*ListCopyContainerRegistryImageTaskReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{5}
}

func (x *ListCopyContainerRegistryImageTaskReply) GetTasks() []*ListCopyContainerRegistryImageTaskReply_Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

// 获取容器镜像仓库镜像同步任务
type GetCopyContainerRegistryImageTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	TaskId      string `protobuf:"bytes,4,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *GetCopyContainerRegistryImageTaskReq) Reset() {
	*x = GetCopyContainerRegistryImageTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCopyContainerRegistryImageTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCopyContainerRegistryImageTaskReq) ProtoMessage() {}

func (x *GetCopyContainerRegistryImageTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCopyContainerRegistryImageTaskReq.ProtoReflect.Descriptor instead.
func (*GetCopyContainerRegistryImageTaskReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{6}
}

func (x *GetCopyContainerRegistryImageTaskReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *GetCopyContainerRegistryImageTaskReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *GetCopyContainerRegistryImageTaskReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *GetCopyContainerRegistryImageTaskReq) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type GetCopyContainerRegistryImageTaskReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId        string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	UserUuid      string `protobuf:"bytes,2,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid       string `protobuf:"bytes,3,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid   string `protobuf:"bytes,4,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	RunId         string `protobuf:"bytes,5,opt,name=runId,proto3" json:"runId,omitempty"`
	SrcImage      string `protobuf:"bytes,6,opt,name=srcImage,proto3" json:"srcImage,omitempty"`
	DestImage     string `protobuf:"bytes,7,opt,name=destImage,proto3" json:"destImage,omitempty"`
	Result        int32  `protobuf:"varint,8,opt,name=result,proto3" json:"result,omitempty"`
	Describe      string `protobuf:"bytes,9,opt,name=describe,proto3" json:"describe,omitempty"`
	StartExecTime int64  `protobuf:"varint,10,opt,name=startExecTime,proto3" json:"startExecTime,omitempty"`
	EndExecTime   int64  `protobuf:"varint,11,opt,name=endExecTime,proto3" json:"endExecTime,omitempty"`
	CreateTime    int64  `protobuf:"varint,12,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *GetCopyContainerRegistryImageTaskReply) Reset() {
	*x = GetCopyContainerRegistryImageTaskReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCopyContainerRegistryImageTaskReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCopyContainerRegistryImageTaskReply) ProtoMessage() {}

func (x *GetCopyContainerRegistryImageTaskReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCopyContainerRegistryImageTaskReply.ProtoReflect.Descriptor instead.
func (*GetCopyContainerRegistryImageTaskReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{7}
}

func (x *GetCopyContainerRegistryImageTaskReply) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *GetCopyContainerRegistryImageTaskReply) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *GetCopyContainerRegistryImageTaskReply) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *GetCopyContainerRegistryImageTaskReply) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *GetCopyContainerRegistryImageTaskReply) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *GetCopyContainerRegistryImageTaskReply) GetSrcImage() string {
	if x != nil {
		return x.SrcImage
	}
	return ""
}

func (x *GetCopyContainerRegistryImageTaskReply) GetDestImage() string {
	if x != nil {
		return x.DestImage
	}
	return ""
}

func (x *GetCopyContainerRegistryImageTaskReply) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *GetCopyContainerRegistryImageTaskReply) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *GetCopyContainerRegistryImageTaskReply) GetStartExecTime() int64 {
	if x != nil {
		return x.StartExecTime
	}
	return 0
}

func (x *GetCopyContainerRegistryImageTaskReply) GetEndExecTime() int64 {
	if x != nil {
		return x.EndExecTime
	}
	return 0
}

func (x *GetCopyContainerRegistryImageTaskReply) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

// 查看容器镜像信息 - tool
type InspectContainerImageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Image    string `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *InspectContainerImageReq) Reset() {
	*x = InspectContainerImageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectContainerImageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectContainerImageReq) ProtoMessage() {}

func (x *InspectContainerImageReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectContainerImageReq.ProtoReflect.Descriptor instead.
func (*InspectContainerImageReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{8}
}

func (x *InspectContainerImageReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *InspectContainerImageReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *InspectContainerImageReq) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

type InspectContainerImageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *InspectContainerImageReply) Reset() {
	*x = InspectContainerImageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectContainerImageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectContainerImageReply) ProtoMessage() {}

func (x *InspectContainerImageReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectContainerImageReply.ProtoReflect.Descriptor instead.
func (*InspectContainerImageReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{9}
}

func (x *InspectContainerImageReply) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// 列出容器仓库镜像 Tags
type ListContainerImageTagsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username   string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password   string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Repository string `protobuf:"bytes,3,opt,name=repository,proto3" json:"repository,omitempty"`
}

func (x *ListContainerImageTagsReq) Reset() {
	*x = ListContainerImageTagsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContainerImageTagsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContainerImageTagsReq) ProtoMessage() {}

func (x *ListContainerImageTagsReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContainerImageTagsReq.ProtoReflect.Descriptor instead.
func (*ListContainerImageTagsReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{10}
}

func (x *ListContainerImageTagsReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ListContainerImageTagsReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ListContainerImageTagsReq) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

type ListContainerImageTagsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repository string   `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	Tags       []string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *ListContainerImageTagsReply) Reset() {
	*x = ListContainerImageTagsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContainerImageTagsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContainerImageTagsReply) ProtoMessage() {}

func (x *ListContainerImageTagsReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContainerImageTagsReply.ProtoReflect.Descriptor instead.
func (*ListContainerImageTagsReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{11}
}

func (x *ListContainerImageTagsReply) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *ListContainerImageTagsReply) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// 列出程序语言
type ListProgramLanguageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListProgramLanguageReq) Reset() {
	*x = ListProgramLanguageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProgramLanguageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProgramLanguageReq) ProtoMessage() {}

func (x *ListProgramLanguageReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProgramLanguageReq.ProtoReflect.Descriptor instead.
func (*ListProgramLanguageReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{12}
}

type ListProgramLanguageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProgramLanguage []*ListProgramLanguageReply_ProgramLanguage `protobuf:"bytes,1,rep,name=programLanguage,proto3" json:"programLanguage,omitempty"`
}

func (x *ListProgramLanguageReply) Reset() {
	*x = ListProgramLanguageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProgramLanguageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProgramLanguageReply) ProtoMessage() {}

func (x *ListProgramLanguageReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProgramLanguageReply.ProtoReflect.Descriptor instead.
func (*ListProgramLanguageReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{13}
}

func (x *ListProgramLanguageReply) GetProgramLanguage() []*ListProgramLanguageReply_ProgramLanguage {
	if x != nil {
		return x.ProgramLanguage
	}
	return nil
}

// 仓库代码扫描
type ScanCodeRepositoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProgramLanguage int32  `protobuf:"varint,1,opt,name=programLanguage,proto3" json:"programLanguage,omitempty"`
	RepoUuid        string `protobuf:"bytes,2,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	RepoUrl         string `protobuf:"bytes,3,opt,name=repoUrl,proto3" json:"repoUrl,omitempty"`
	Token           string `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	Branch          string `protobuf:"bytes,5,opt,name=branch,proto3" json:"branch,omitempty"`
}

func (x *ScanCodeRepositoryReq) Reset() {
	*x = ScanCodeRepositoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanCodeRepositoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanCodeRepositoryReq) ProtoMessage() {}

func (x *ScanCodeRepositoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanCodeRepositoryReq.ProtoReflect.Descriptor instead.
func (*ScanCodeRepositoryReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{14}
}

func (x *ScanCodeRepositoryReq) GetProgramLanguage() int32 {
	if x != nil {
		return x.ProgramLanguage
	}
	return 0
}

func (x *ScanCodeRepositoryReq) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *ScanCodeRepositoryReq) GetRepoUrl() string {
	if x != nil {
		return x.RepoUrl
	}
	return ""
}

func (x *ScanCodeRepositoryReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ScanCodeRepositoryReq) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

type ScanCodeRepositoryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *ScanCodeRepositoryReply) Reset() {
	*x = ScanCodeRepositoryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanCodeRepositoryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanCodeRepositoryReply) ProtoMessage() {}

func (x *ScanCodeRepositoryReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanCodeRepositoryReply.ProtoReflect.Descriptor instead.
func (*ScanCodeRepositoryReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{15}
}

func (x *ScanCodeRepositoryReply) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type GetScanCodeRepositoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepoUuid string `protobuf:"bytes,1,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	TaskId   string `protobuf:"bytes,2,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *GetScanCodeRepositoryReq) Reset() {
	*x = GetScanCodeRepositoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScanCodeRepositoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScanCodeRepositoryReq) ProtoMessage() {}

func (x *GetScanCodeRepositoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScanCodeRepositoryReq.ProtoReflect.Descriptor instead.
func (*GetScanCodeRepositoryReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{16}
}

func (x *GetScanCodeRepositoryReq) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *GetScanCodeRepositoryReq) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type GetScanCodeRepositoryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId        string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	RunId         string `protobuf:"bytes,2,opt,name=runId,proto3" json:"runId,omitempty"`
	RepoUuid      string `protobuf:"bytes,3,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	Result        int32  `protobuf:"varint,4,opt,name=result,proto3" json:"result,omitempty"`
	Describe      string `protobuf:"bytes,5,opt,name=describe,proto3" json:"describe,omitempty"`
	StartExecTime int64  `protobuf:"varint,6,opt,name=startExecTime,proto3" json:"startExecTime,omitempty"`
	EndExecTime   int64  `protobuf:"varint,7,opt,name=endExecTime,proto3" json:"endExecTime,omitempty"`
	CreateTime    int64  `protobuf:"varint,8,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *GetScanCodeRepositoryReply) Reset() {
	*x = GetScanCodeRepositoryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScanCodeRepositoryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScanCodeRepositoryReply) ProtoMessage() {}

func (x *GetScanCodeRepositoryReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScanCodeRepositoryReply.ProtoReflect.Descriptor instead.
func (*GetScanCodeRepositoryReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{17}
}

func (x *GetScanCodeRepositoryReply) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *GetScanCodeRepositoryReply) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *GetScanCodeRepositoryReply) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *GetScanCodeRepositoryReply) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *GetScanCodeRepositoryReply) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *GetScanCodeRepositoryReply) GetStartExecTime() int64 {
	if x != nil {
		return x.StartExecTime
	}
	return 0
}

func (x *GetScanCodeRepositoryReply) GetEndExecTime() int64 {
	if x != nil {
		return x.EndExecTime
	}
	return 0
}

func (x *GetScanCodeRepositoryReply) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type ListScanCodeRepositoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepoUuid string   `protobuf:"bytes,1,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	TaskIds  []string `protobuf:"bytes,2,rep,name=taskIds,proto3" json:"taskIds,omitempty"`
}

func (x *ListScanCodeRepositoryReq) Reset() {
	*x = ListScanCodeRepositoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListScanCodeRepositoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListScanCodeRepositoryReq) ProtoMessage() {}

func (x *ListScanCodeRepositoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListScanCodeRepositoryReq.ProtoReflect.Descriptor instead.
func (*ListScanCodeRepositoryReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{18}
}

func (x *ListScanCodeRepositoryReq) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *ListScanCodeRepositoryReq) GetTaskIds() []string {
	if x != nil {
		return x.TaskIds
	}
	return nil
}

type ListScanCodeRepositoryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScanCodeRepos []*ListScanCodeRepositoryReply_ScanCodeRepo `protobuf:"bytes,1,rep,name=scanCodeRepos,proto3" json:"scanCodeRepos,omitempty"`
}

func (x *ListScanCodeRepositoryReply) Reset() {
	*x = ListScanCodeRepositoryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListScanCodeRepositoryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListScanCodeRepositoryReply) ProtoMessage() {}

func (x *ListScanCodeRepositoryReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListScanCodeRepositoryReply.ProtoReflect.Descriptor instead.
func (*ListScanCodeRepositoryReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{19}
}

func (x *ListScanCodeRepositoryReply) GetScanCodeRepos() []*ListScanCodeRepositoryReply_ScanCodeRepo {
	if x != nil {
		return x.ScanCodeRepos
	}
	return nil
}

// 仓库单元测试 - tool
type UnitTestCodeRepositoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProgramLanguage int32  `protobuf:"varint,1,opt,name=programLanguage,proto3" json:"programLanguage,omitempty"`
	RepoUuid        string `protobuf:"bytes,2,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	RepoUrl         string `protobuf:"bytes,3,opt,name=repoUrl,proto3" json:"repoUrl,omitempty"`
	Token           string `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	Branch          string `protobuf:"bytes,5,opt,name=branch,proto3" json:"branch,omitempty"`
}

func (x *UnitTestCodeRepositoryReq) Reset() {
	*x = UnitTestCodeRepositoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnitTestCodeRepositoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnitTestCodeRepositoryReq) ProtoMessage() {}

func (x *UnitTestCodeRepositoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnitTestCodeRepositoryReq.ProtoReflect.Descriptor instead.
func (*UnitTestCodeRepositoryReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{20}
}

func (x *UnitTestCodeRepositoryReq) GetProgramLanguage() int32 {
	if x != nil {
		return x.ProgramLanguage
	}
	return 0
}

func (x *UnitTestCodeRepositoryReq) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *UnitTestCodeRepositoryReq) GetRepoUrl() string {
	if x != nil {
		return x.RepoUrl
	}
	return ""
}

func (x *UnitTestCodeRepositoryReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *UnitTestCodeRepositoryReq) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

type UnitTestCodeRepositoryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *UnitTestCodeRepositoryReply) Reset() {
	*x = UnitTestCodeRepositoryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnitTestCodeRepositoryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnitTestCodeRepositoryReply) ProtoMessage() {}

func (x *UnitTestCodeRepositoryReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnitTestCodeRepositoryReply.ProtoReflect.Descriptor instead.
func (*UnitTestCodeRepositoryReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{21}
}

func (x *UnitTestCodeRepositoryReply) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type GetUnitTestCodeRepositoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepoUuid string `protobuf:"bytes,1,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	TaskId   string `protobuf:"bytes,2,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *GetUnitTestCodeRepositoryReq) Reset() {
	*x = GetUnitTestCodeRepositoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUnitTestCodeRepositoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUnitTestCodeRepositoryReq) ProtoMessage() {}

func (x *GetUnitTestCodeRepositoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUnitTestCodeRepositoryReq.ProtoReflect.Descriptor instead.
func (*GetUnitTestCodeRepositoryReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{22}
}

func (x *GetUnitTestCodeRepositoryReq) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *GetUnitTestCodeRepositoryReq) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type GetUnitTestCodeRepositoryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId        string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	RunId         string `protobuf:"bytes,2,opt,name=runId,proto3" json:"runId,omitempty"`
	RepoUuid      string `protobuf:"bytes,3,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	Result        int32  `protobuf:"varint,4,opt,name=result,proto3" json:"result,omitempty"`
	Describe      string `protobuf:"bytes,5,opt,name=describe,proto3" json:"describe,omitempty"`
	StartExecTime int64  `protobuf:"varint,6,opt,name=startExecTime,proto3" json:"startExecTime,omitempty"`
	EndExecTime   int64  `protobuf:"varint,7,opt,name=endExecTime,proto3" json:"endExecTime,omitempty"`
	CreateTime    int64  `protobuf:"varint,8,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *GetUnitTestCodeRepositoryReply) Reset() {
	*x = GetUnitTestCodeRepositoryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUnitTestCodeRepositoryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUnitTestCodeRepositoryReply) ProtoMessage() {}

func (x *GetUnitTestCodeRepositoryReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUnitTestCodeRepositoryReply.ProtoReflect.Descriptor instead.
func (*GetUnitTestCodeRepositoryReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{23}
}

func (x *GetUnitTestCodeRepositoryReply) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *GetUnitTestCodeRepositoryReply) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *GetUnitTestCodeRepositoryReply) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *GetUnitTestCodeRepositoryReply) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *GetUnitTestCodeRepositoryReply) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *GetUnitTestCodeRepositoryReply) GetStartExecTime() int64 {
	if x != nil {
		return x.StartExecTime
	}
	return 0
}

func (x *GetUnitTestCodeRepositoryReply) GetEndExecTime() int64 {
	if x != nil {
		return x.EndExecTime
	}
	return 0
}

func (x *GetUnitTestCodeRepositoryReply) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type ListUnitTestCodeRepositoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepoUuid string   `protobuf:"bytes,1,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	TaskIds  []string `protobuf:"bytes,2,rep,name=taskIds,proto3" json:"taskIds,omitempty"`
}

func (x *ListUnitTestCodeRepositoryReq) Reset() {
	*x = ListUnitTestCodeRepositoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUnitTestCodeRepositoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUnitTestCodeRepositoryReq) ProtoMessage() {}

func (x *ListUnitTestCodeRepositoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUnitTestCodeRepositoryReq.ProtoReflect.Descriptor instead.
func (*ListUnitTestCodeRepositoryReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{24}
}

func (x *ListUnitTestCodeRepositoryReq) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *ListUnitTestCodeRepositoryReq) GetTaskIds() []string {
	if x != nil {
		return x.TaskIds
	}
	return nil
}

type ListUnitTestCodeRepositoryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnitTestCodeRepos []*ListUnitTestCodeRepositoryReply_UnitTestCodeRepo `protobuf:"bytes,1,rep,name=unitTestCodeRepos,proto3" json:"unitTestCodeRepos,omitempty"`
}

func (x *ListUnitTestCodeRepositoryReply) Reset() {
	*x = ListUnitTestCodeRepositoryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUnitTestCodeRepositoryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUnitTestCodeRepositoryReply) ProtoMessage() {}

func (x *ListUnitTestCodeRepositoryReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUnitTestCodeRepositoryReply.ProtoReflect.Descriptor instead.
func (*ListUnitTestCodeRepositoryReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{25}
}

func (x *ListUnitTestCodeRepositoryReply) GetUnitTestCodeRepos() []*ListUnitTestCodeRepositoryReply_UnitTestCodeRepo {
	if x != nil {
		return x.UnitTestCodeRepos
	}
	return nil
}

// 构建容器镜像 - 不支持匿名上传
type BuildContainerImageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid          string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid           string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid       string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	RepoUuid          string `protobuf:"bytes,4,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	RepoName          string `protobuf:"bytes,5,opt,name=repoName,proto3" json:"repoName,omitempty"`
	RepoUrl           string `protobuf:"bytes,6,opt,name=repoUrl,proto3" json:"repoUrl,omitempty"`
	Token             string `protobuf:"bytes,7,opt,name=token,proto3" json:"token,omitempty"`
	Branch            string `protobuf:"bytes,8,opt,name=branch,proto3" json:"branch,omitempty"`
	RegistryUrl       string `protobuf:"bytes,9,opt,name=registryUrl,proto3" json:"registryUrl,omitempty"`
	RegistryUsername  string `protobuf:"bytes,10,opt,name=registryUsername,proto3" json:"registryUsername,omitempty"`
	RegistryPassword  string `protobuf:"bytes,11,opt,name=registryPassword,proto3" json:"registryPassword,omitempty"`
	RegistryNameSpace string `protobuf:"bytes,12,opt,name=registryNameSpace,proto3" json:"registryNameSpace,omitempty"`
	DockerfilePath    string `protobuf:"bytes,13,opt,name=dockerfilePath,proto3" json:"dockerfilePath,omitempty"`
}

func (x *BuildContainerImageReq) Reset() {
	*x = BuildContainerImageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildContainerImageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildContainerImageReq) ProtoMessage() {}

func (x *BuildContainerImageReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildContainerImageReq.ProtoReflect.Descriptor instead.
func (*BuildContainerImageReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{26}
}

func (x *BuildContainerImageReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *BuildContainerImageReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *BuildContainerImageReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *BuildContainerImageReq) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *BuildContainerImageReq) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *BuildContainerImageReq) GetRepoUrl() string {
	if x != nil {
		return x.RepoUrl
	}
	return ""
}

func (x *BuildContainerImageReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *BuildContainerImageReq) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *BuildContainerImageReq) GetRegistryUrl() string {
	if x != nil {
		return x.RegistryUrl
	}
	return ""
}

func (x *BuildContainerImageReq) GetRegistryUsername() string {
	if x != nil {
		return x.RegistryUsername
	}
	return ""
}

func (x *BuildContainerImageReq) GetRegistryPassword() string {
	if x != nil {
		return x.RegistryPassword
	}
	return ""
}

func (x *BuildContainerImageReq) GetRegistryNameSpace() string {
	if x != nil {
		return x.RegistryNameSpace
	}
	return ""
}

func (x *BuildContainerImageReq) GetDockerfilePath() string {
	if x != nil {
		return x.DockerfilePath
	}
	return ""
}

type BuildContainerImageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *BuildContainerImageReply) Reset() {
	*x = BuildContainerImageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildContainerImageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildContainerImageReply) ProtoMessage() {}

func (x *BuildContainerImageReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildContainerImageReply.ProtoReflect.Descriptor instead.
func (*BuildContainerImageReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{27}
}

func (x *BuildContainerImageReply) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type GetBuildContainerImageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	RepoUuid    string `protobuf:"bytes,4,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	TaskId      string `protobuf:"bytes,5,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *GetBuildContainerImageReq) Reset() {
	*x = GetBuildContainerImageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBuildContainerImageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBuildContainerImageReq) ProtoMessage() {}

func (x *GetBuildContainerImageReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBuildContainerImageReq.ProtoReflect.Descriptor instead.
func (*GetBuildContainerImageReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{28}
}

func (x *GetBuildContainerImageReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *GetBuildContainerImageReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *GetBuildContainerImageReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *GetBuildContainerImageReq) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *GetBuildContainerImageReq) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type GetBuildContainerImageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId         string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	RunId          string `protobuf:"bytes,2,opt,name=runId,proto3" json:"runId,omitempty"`
	UserUuid       string `protobuf:"bytes,3,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	UserName       string `protobuf:"bytes,4,opt,name=userName,proto3" json:"userName,omitempty"`
	RepoUuid       string `protobuf:"bytes,5,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	RepoUrl        string `protobuf:"bytes,6,opt,name=repoUrl,proto3" json:"repoUrl,omitempty"`
	Branch         string `protobuf:"bytes,7,opt,name=branch,proto3" json:"branch,omitempty"`
	CommitId       string `protobuf:"bytes,8,opt,name=commitId,proto3" json:"commitId,omitempty"`
	DockerfilePath string `protobuf:"bytes,9,opt,name=dockerfilePath,proto3" json:"dockerfilePath,omitempty"`
	ImageUrl       string `protobuf:"bytes,10,opt,name=imageUrl,proto3" json:"imageUrl,omitempty"`
	ImageId        string `protobuf:"bytes,11,opt,name=imageId,proto3" json:"imageId,omitempty"`
	Result         int32  `protobuf:"varint,12,opt,name=result,proto3" json:"result,omitempty"`
	Describe       string `protobuf:"bytes,13,opt,name=describe,proto3" json:"describe,omitempty"`
	Dockerfile     string `protobuf:"bytes,14,opt,name=dockerfile,proto3" json:"dockerfile,omitempty"`
	StartExecTime  int64  `protobuf:"varint,15,opt,name=startExecTime,proto3" json:"startExecTime,omitempty"`
	EndExecTime    int64  `protobuf:"varint,16,opt,name=endExecTime,proto3" json:"endExecTime,omitempty"`
	CreateTime     int64  `protobuf:"varint,17,opt,name=createTime,proto3" json:"createTime,omitempty"`
	CostTime       int64  `protobuf:"varint,18,opt,name=costTime,proto3" json:"costTime,omitempty"`
}

func (x *GetBuildContainerImageReply) Reset() {
	*x = GetBuildContainerImageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBuildContainerImageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBuildContainerImageReply) ProtoMessage() {}

func (x *GetBuildContainerImageReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBuildContainerImageReply.ProtoReflect.Descriptor instead.
func (*GetBuildContainerImageReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{29}
}

func (x *GetBuildContainerImageReply) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *GetBuildContainerImageReply) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *GetBuildContainerImageReply) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *GetBuildContainerImageReply) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *GetBuildContainerImageReply) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *GetBuildContainerImageReply) GetRepoUrl() string {
	if x != nil {
		return x.RepoUrl
	}
	return ""
}

func (x *GetBuildContainerImageReply) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *GetBuildContainerImageReply) GetCommitId() string {
	if x != nil {
		return x.CommitId
	}
	return ""
}

func (x *GetBuildContainerImageReply) GetDockerfilePath() string {
	if x != nil {
		return x.DockerfilePath
	}
	return ""
}

func (x *GetBuildContainerImageReply) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *GetBuildContainerImageReply) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *GetBuildContainerImageReply) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *GetBuildContainerImageReply) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *GetBuildContainerImageReply) GetDockerfile() string {
	if x != nil {
		return x.Dockerfile
	}
	return ""
}

func (x *GetBuildContainerImageReply) GetStartExecTime() int64 {
	if x != nil {
		return x.StartExecTime
	}
	return 0
}

func (x *GetBuildContainerImageReply) GetEndExecTime() int64 {
	if x != nil {
		return x.EndExecTime
	}
	return 0
}

func (x *GetBuildContainerImageReply) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *GetBuildContainerImageReply) GetCostTime() int64 {
	if x != nil {
		return x.CostTime
	}
	return 0
}

type ListBuildContainerImageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	RepoUuid    string `protobuf:"bytes,4,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
}

func (x *ListBuildContainerImageReq) Reset() {
	*x = ListBuildContainerImageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBuildContainerImageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBuildContainerImageReq) ProtoMessage() {}

func (x *ListBuildContainerImageReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBuildContainerImageReq.ProtoReflect.Descriptor instead.
func (*ListBuildContainerImageReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{30}
}

func (x *ListBuildContainerImageReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListBuildContainerImageReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListBuildContainerImageReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ListBuildContainerImageReq) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

type ListBuildContainerImageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuildContainerImages []*ListBuildContainerImageReply_BuildContainerImage `protobuf:"bytes,1,rep,name=buildContainerImages,proto3" json:"buildContainerImages,omitempty"`
}

func (x *ListBuildContainerImageReply) Reset() {
	*x = ListBuildContainerImageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBuildContainerImageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBuildContainerImageReply) ProtoMessage() {}

func (x *ListBuildContainerImageReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBuildContainerImageReply.ProtoReflect.Descriptor instead.
func (*ListBuildContainerImageReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{31}
}

func (x *ListBuildContainerImageReply) GetBuildContainerImages() []*ListBuildContainerImageReply_BuildContainerImage {
	if x != nil {
		return x.BuildContainerImages
	}
	return nil
}

//
type UploadLocalFileToCloudObjectStorageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint        string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	AccessKeyId     string `protobuf:"bytes,2,opt,name=accessKeyId,proto3" json:"accessKeyId,omitempty"`
	AccessKeySecret string `protobuf:"bytes,3,opt,name=accessKeySecret,proto3" json:"accessKeySecret,omitempty"`
	SecurityToken   string `protobuf:"bytes,4,opt,name=securityToken,proto3" json:"securityToken,omitempty"`
	BucketName      string `protobuf:"bytes,5,opt,name=bucketName,proto3" json:"bucketName,omitempty"`
	ObjectPath      string `protobuf:"bytes,6,opt,name=objectPath,proto3" json:"objectPath,omitempty"`
	LocalFilePath   string `protobuf:"bytes,7,opt,name=localFilePath,proto3" json:"localFilePath,omitempty"`
	PlatformId      int32  `protobuf:"varint,8,opt,name=platformId,proto3" json:"platformId,omitempty"`
}

func (x *UploadLocalFileToCloudObjectStorageReq) Reset() {
	*x = UploadLocalFileToCloudObjectStorageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadLocalFileToCloudObjectStorageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadLocalFileToCloudObjectStorageReq) ProtoMessage() {}

func (x *UploadLocalFileToCloudObjectStorageReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadLocalFileToCloudObjectStorageReq.ProtoReflect.Descriptor instead.
func (*UploadLocalFileToCloudObjectStorageReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{32}
}

func (x *UploadLocalFileToCloudObjectStorageReq) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *UploadLocalFileToCloudObjectStorageReq) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *UploadLocalFileToCloudObjectStorageReq) GetAccessKeySecret() string {
	if x != nil {
		return x.AccessKeySecret
	}
	return ""
}

func (x *UploadLocalFileToCloudObjectStorageReq) GetSecurityToken() string {
	if x != nil {
		return x.SecurityToken
	}
	return ""
}

func (x *UploadLocalFileToCloudObjectStorageReq) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *UploadLocalFileToCloudObjectStorageReq) GetObjectPath() string {
	if x != nil {
		return x.ObjectPath
	}
	return ""
}

func (x *UploadLocalFileToCloudObjectStorageReq) GetLocalFilePath() string {
	if x != nil {
		return x.LocalFilePath
	}
	return ""
}

func (x *UploadLocalFileToCloudObjectStorageReq) GetPlatformId() int32 {
	if x != nil {
		return x.PlatformId
	}
	return 0
}

type UploadLocalFileToCloudObjectStorageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *UploadLocalFileToCloudObjectStorageReply) Reset() {
	*x = UploadLocalFileToCloudObjectStorageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadLocalFileToCloudObjectStorageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadLocalFileToCloudObjectStorageReply) ProtoMessage() {}

func (x *UploadLocalFileToCloudObjectStorageReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadLocalFileToCloudObjectStorageReply.ProtoReflect.Descriptor instead.
func (*UploadLocalFileToCloudObjectStorageReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{33}
}

func (x *UploadLocalFileToCloudObjectStorageReply) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

//
type DownloadCloudObjectStorageObjectToLocalReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint        string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	AccessKeyId     string `protobuf:"bytes,2,opt,name=accessKeyId,proto3" json:"accessKeyId,omitempty"`
	AccessKeySecret string `protobuf:"bytes,3,opt,name=accessKeySecret,proto3" json:"accessKeySecret,omitempty"`
	SecurityToken   string `protobuf:"bytes,4,opt,name=securityToken,proto3" json:"securityToken,omitempty"`
	BucketName      string `protobuf:"bytes,5,opt,name=bucketName,proto3" json:"bucketName,omitempty"`
	ObjectPath      string `protobuf:"bytes,6,opt,name=objectPath,proto3" json:"objectPath,omitempty"`
	LocalFilePath   string `protobuf:"bytes,7,opt,name=localFilePath,proto3" json:"localFilePath,omitempty"`
	PlatformId      int32  `protobuf:"varint,8,opt,name=platformId,proto3" json:"platformId,omitempty"`
}

func (x *DownloadCloudObjectStorageObjectToLocalReq) Reset() {
	*x = DownloadCloudObjectStorageObjectToLocalReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadCloudObjectStorageObjectToLocalReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadCloudObjectStorageObjectToLocalReq) ProtoMessage() {}

func (x *DownloadCloudObjectStorageObjectToLocalReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadCloudObjectStorageObjectToLocalReq.ProtoReflect.Descriptor instead.
func (*DownloadCloudObjectStorageObjectToLocalReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{34}
}

func (x *DownloadCloudObjectStorageObjectToLocalReq) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *DownloadCloudObjectStorageObjectToLocalReq) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *DownloadCloudObjectStorageObjectToLocalReq) GetAccessKeySecret() string {
	if x != nil {
		return x.AccessKeySecret
	}
	return ""
}

func (x *DownloadCloudObjectStorageObjectToLocalReq) GetSecurityToken() string {
	if x != nil {
		return x.SecurityToken
	}
	return ""
}

func (x *DownloadCloudObjectStorageObjectToLocalReq) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *DownloadCloudObjectStorageObjectToLocalReq) GetObjectPath() string {
	if x != nil {
		return x.ObjectPath
	}
	return ""
}

func (x *DownloadCloudObjectStorageObjectToLocalReq) GetLocalFilePath() string {
	if x != nil {
		return x.LocalFilePath
	}
	return ""
}

func (x *DownloadCloudObjectStorageObjectToLocalReq) GetPlatformId() int32 {
	if x != nil {
		return x.PlatformId
	}
	return 0
}

type DownloadCloudObjectStorageObjectToLocalReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *DownloadCloudObjectStorageObjectToLocalReply) Reset() {
	*x = DownloadCloudObjectStorageObjectToLocalReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadCloudObjectStorageObjectToLocalReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadCloudObjectStorageObjectToLocalReply) ProtoMessage() {}

func (x *DownloadCloudObjectStorageObjectToLocalReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadCloudObjectStorageObjectToLocalReply.ProtoReflect.Descriptor instead.
func (*DownloadCloudObjectStorageObjectToLocalReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{35}
}

func (x *DownloadCloudObjectStorageObjectToLocalReply) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

//
type UploadLocalFileToSFTPReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteHost     string `protobuf:"bytes,1,opt,name=remoteHost,proto3" json:"remoteHost,omitempty"`
	RemotePort     int32  `protobuf:"varint,2,opt,name=remotePort,proto3" json:"remotePort,omitempty"`
	RemoteUser     string `protobuf:"bytes,3,opt,name=remoteUser,proto3" json:"remoteUser,omitempty"`
	PrivateKey     string `protobuf:"bytes,4,opt,name=privateKey,proto3" json:"privateKey,omitempty"`
	Password       string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	LocalFilePath  string `protobuf:"bytes,6,opt,name=localFilePath,proto3" json:"localFilePath,omitempty"`
	RemoteFilePath string `protobuf:"bytes,7,opt,name=remoteFilePath,proto3" json:"remoteFilePath,omitempty"`
}

func (x *UploadLocalFileToSFTPReq) Reset() {
	*x = UploadLocalFileToSFTPReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadLocalFileToSFTPReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadLocalFileToSFTPReq) ProtoMessage() {}

func (x *UploadLocalFileToSFTPReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadLocalFileToSFTPReq.ProtoReflect.Descriptor instead.
func (*UploadLocalFileToSFTPReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{36}
}

func (x *UploadLocalFileToSFTPReq) GetRemoteHost() string {
	if x != nil {
		return x.RemoteHost
	}
	return ""
}

func (x *UploadLocalFileToSFTPReq) GetRemotePort() int32 {
	if x != nil {
		return x.RemotePort
	}
	return 0
}

func (x *UploadLocalFileToSFTPReq) GetRemoteUser() string {
	if x != nil {
		return x.RemoteUser
	}
	return ""
}

func (x *UploadLocalFileToSFTPReq) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *UploadLocalFileToSFTPReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UploadLocalFileToSFTPReq) GetLocalFilePath() string {
	if x != nil {
		return x.LocalFilePath
	}
	return ""
}

func (x *UploadLocalFileToSFTPReq) GetRemoteFilePath() string {
	if x != nil {
		return x.RemoteFilePath
	}
	return ""
}

type UploadLocalFileToSFTPReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *UploadLocalFileToSFTPReply) Reset() {
	*x = UploadLocalFileToSFTPReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadLocalFileToSFTPReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadLocalFileToSFTPReply) ProtoMessage() {}

func (x *UploadLocalFileToSFTPReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadLocalFileToSFTPReply.ProtoReflect.Descriptor instead.
func (*UploadLocalFileToSFTPReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{37}
}

func (x *UploadLocalFileToSFTPReply) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

//
type DownloadSFTPFileToLocalReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteHost     string `protobuf:"bytes,1,opt,name=remoteHost,proto3" json:"remoteHost,omitempty"`
	RemotePort     int32  `protobuf:"varint,2,opt,name=remotePort,proto3" json:"remotePort,omitempty"`
	RemoteUser     string `protobuf:"bytes,3,opt,name=remoteUser,proto3" json:"remoteUser,omitempty"`
	PrivateKey     string `protobuf:"bytes,4,opt,name=privateKey,proto3" json:"privateKey,omitempty"`
	Password       string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	LocalFilePath  string `protobuf:"bytes,6,opt,name=localFilePath,proto3" json:"localFilePath,omitempty"`
	RemoteFilePath string `protobuf:"bytes,7,opt,name=remoteFilePath,proto3" json:"remoteFilePath,omitempty"`
}

func (x *DownloadSFTPFileToLocalReq) Reset() {
	*x = DownloadSFTPFileToLocalReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadSFTPFileToLocalReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadSFTPFileToLocalReq) ProtoMessage() {}

func (x *DownloadSFTPFileToLocalReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadSFTPFileToLocalReq.ProtoReflect.Descriptor instead.
func (*DownloadSFTPFileToLocalReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{38}
}

func (x *DownloadSFTPFileToLocalReq) GetRemoteHost() string {
	if x != nil {
		return x.RemoteHost
	}
	return ""
}

func (x *DownloadSFTPFileToLocalReq) GetRemotePort() int32 {
	if x != nil {
		return x.RemotePort
	}
	return 0
}

func (x *DownloadSFTPFileToLocalReq) GetRemoteUser() string {
	if x != nil {
		return x.RemoteUser
	}
	return ""
}

func (x *DownloadSFTPFileToLocalReq) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *DownloadSFTPFileToLocalReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *DownloadSFTPFileToLocalReq) GetLocalFilePath() string {
	if x != nil {
		return x.LocalFilePath
	}
	return ""
}

func (x *DownloadSFTPFileToLocalReq) GetRemoteFilePath() string {
	if x != nil {
		return x.RemoteFilePath
	}
	return ""
}

type DownloadSFTPFileToLocalReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *DownloadSFTPFileToLocalReply) Reset() {
	*x = DownloadSFTPFileToLocalReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadSFTPFileToLocalReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadSFTPFileToLocalReply) ProtoMessage() {}

func (x *DownloadSFTPFileToLocalReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadSFTPFileToLocalReply.ProtoReflect.Descriptor instead.
func (*DownloadSFTPFileToLocalReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{39}
}

func (x *DownloadSFTPFileToLocalReply) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

//
type GetCopySFTPFileHisReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *GetCopySFTPFileHisReq) Reset() {
	*x = GetCopySFTPFileHisReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCopySFTPFileHisReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCopySFTPFileHisReq) ProtoMessage() {}

func (x *GetCopySFTPFileHisReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCopySFTPFileHisReq.ProtoReflect.Descriptor instead.
func (*GetCopySFTPFileHisReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{40}
}

func (x *GetCopySFTPFileHisReq) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type GetCopySFTPFileHisReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId        string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	RunId         string `protobuf:"bytes,2,opt,name=runId,proto3" json:"runId,omitempty"`
	CopyType      int32  `protobuf:"varint,3,opt,name=copyType,proto3" json:"copyType,omitempty"`
	SftpAddr      string `protobuf:"bytes,4,opt,name=sftpAddr,proto3" json:"sftpAddr,omitempty"`
	SftpUser      string `protobuf:"bytes,5,opt,name=sftpUser,proto3" json:"sftpUser,omitempty"`
	LocalFilePath string `protobuf:"bytes,6,opt,name=localFilePath,proto3" json:"localFilePath,omitempty"`
	SftpFilePath  string `protobuf:"bytes,7,opt,name=sftpFilePath,proto3" json:"sftpFilePath,omitempty"`
	Result        int32  `protobuf:"varint,8,opt,name=result,proto3" json:"result,omitempty"`
	Describe      string `protobuf:"bytes,9,opt,name=describe,proto3" json:"describe,omitempty"`
	StartExecTime int64  `protobuf:"varint,10,opt,name=startExecTime,proto3" json:"startExecTime,omitempty"`
	EndExecTime   int64  `protobuf:"varint,11,opt,name=endExecTime,proto3" json:"endExecTime,omitempty"`
	CreateTime    int64  `protobuf:"varint,12,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *GetCopySFTPFileHisReply) Reset() {
	*x = GetCopySFTPFileHisReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCopySFTPFileHisReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCopySFTPFileHisReply) ProtoMessage() {}

func (x *GetCopySFTPFileHisReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCopySFTPFileHisReply.ProtoReflect.Descriptor instead.
func (*GetCopySFTPFileHisReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{41}
}

func (x *GetCopySFTPFileHisReply) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *GetCopySFTPFileHisReply) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *GetCopySFTPFileHisReply) GetCopyType() int32 {
	if x != nil {
		return x.CopyType
	}
	return 0
}

func (x *GetCopySFTPFileHisReply) GetSftpAddr() string {
	if x != nil {
		return x.SftpAddr
	}
	return ""
}

func (x *GetCopySFTPFileHisReply) GetSftpUser() string {
	if x != nil {
		return x.SftpUser
	}
	return ""
}

func (x *GetCopySFTPFileHisReply) GetLocalFilePath() string {
	if x != nil {
		return x.LocalFilePath
	}
	return ""
}

func (x *GetCopySFTPFileHisReply) GetSftpFilePath() string {
	if x != nil {
		return x.SftpFilePath
	}
	return ""
}

func (x *GetCopySFTPFileHisReply) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *GetCopySFTPFileHisReply) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *GetCopySFTPFileHisReply) GetStartExecTime() int64 {
	if x != nil {
		return x.StartExecTime
	}
	return 0
}

func (x *GetCopySFTPFileHisReply) GetEndExecTime() int64 {
	if x != nil {
		return x.EndExecTime
	}
	return 0
}

func (x *GetCopySFTPFileHisReply) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

//
type GetCopyCloudObjectStorageHisReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *GetCopyCloudObjectStorageHisReq) Reset() {
	*x = GetCopyCloudObjectStorageHisReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCopyCloudObjectStorageHisReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCopyCloudObjectStorageHisReq) ProtoMessage() {}

func (x *GetCopyCloudObjectStorageHisReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCopyCloudObjectStorageHisReq.ProtoReflect.Descriptor instead.
func (*GetCopyCloudObjectStorageHisReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{42}
}

func (x *GetCopyCloudObjectStorageHisReq) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type GetCopyCloudObjectStorageHisReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId            string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	RunId             string `protobuf:"bytes,2,opt,name=runId,proto3" json:"runId,omitempty"`
	PlatformId        int32  `protobuf:"varint,3,opt,name=platformId,proto3" json:"platformId,omitempty"`
	CopyType          int32  `protobuf:"varint,4,opt,name=copyType,proto3" json:"copyType,omitempty"`
	Endpoint          string `protobuf:"bytes,5,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Bucket            string `protobuf:"bytes,6,opt,name=bucket,proto3" json:"bucket,omitempty"`
	LocalFilePath     string `protobuf:"bytes,7,opt,name=localFilePath,proto3" json:"localFilePath,omitempty"`
	ObjectStoragePath string `protobuf:"bytes,8,opt,name=objectStoragePath,proto3" json:"objectStoragePath,omitempty"`
	Result            int32  `protobuf:"varint,9,opt,name=result,proto3" json:"result,omitempty"`
	Describe          string `protobuf:"bytes,10,opt,name=describe,proto3" json:"describe,omitempty"`
	StartExecTime     int64  `protobuf:"varint,11,opt,name=startExecTime,proto3" json:"startExecTime,omitempty"`
	EndExecTime       int64  `protobuf:"varint,12,opt,name=endExecTime,proto3" json:"endExecTime,omitempty"`
	CreateTime        int64  `protobuf:"varint,13,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *GetCopyCloudObjectStorageHisReply) Reset() {
	*x = GetCopyCloudObjectStorageHisReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCopyCloudObjectStorageHisReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCopyCloudObjectStorageHisReply) ProtoMessage() {}

func (x *GetCopyCloudObjectStorageHisReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCopyCloudObjectStorageHisReply.ProtoReflect.Descriptor instead.
func (*GetCopyCloudObjectStorageHisReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{43}
}

func (x *GetCopyCloudObjectStorageHisReply) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *GetCopyCloudObjectStorageHisReply) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *GetCopyCloudObjectStorageHisReply) GetPlatformId() int32 {
	if x != nil {
		return x.PlatformId
	}
	return 0
}

func (x *GetCopyCloudObjectStorageHisReply) GetCopyType() int32 {
	if x != nil {
		return x.CopyType
	}
	return 0
}

func (x *GetCopyCloudObjectStorageHisReply) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *GetCopyCloudObjectStorageHisReply) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *GetCopyCloudObjectStorageHisReply) GetLocalFilePath() string {
	if x != nil {
		return x.LocalFilePath
	}
	return ""
}

func (x *GetCopyCloudObjectStorageHisReply) GetObjectStoragePath() string {
	if x != nil {
		return x.ObjectStoragePath
	}
	return ""
}

func (x *GetCopyCloudObjectStorageHisReply) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *GetCopyCloudObjectStorageHisReply) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *GetCopyCloudObjectStorageHisReply) GetStartExecTime() int64 {
	if x != nil {
		return x.StartExecTime
	}
	return 0
}

func (x *GetCopyCloudObjectStorageHisReply) GetEndExecTime() int64 {
	if x != nil {
		return x.EndExecTime
	}
	return 0
}

func (x *GetCopyCloudObjectStorageHisReply) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

// 执行CI任务
type RunCiReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GitHttpUrl string `protobuf:"bytes,1,opt,name=gitHttpUrl,proto3" json:"gitHttpUrl,omitempty"`
	GitToken   string `protobuf:"bytes,2,opt,name=gitToken,proto3" json:"gitToken,omitempty"`
	Branch     string `protobuf:"bytes,3,opt,name=branch,proto3" json:"branch,omitempty"`
}

func (x *RunCiReq) Reset() {
	*x = RunCiReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCiReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCiReq) ProtoMessage() {}

func (x *RunCiReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCiReq.ProtoReflect.Descriptor instead.
func (*RunCiReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{44}
}

func (x *RunCiReq) GetGitHttpUrl() string {
	if x != nil {
		return x.GitHttpUrl
	}
	return ""
}

func (x *RunCiReq) GetGitToken() string {
	if x != nil {
		return x.GitToken
	}
	return ""
}

func (x *RunCiReq) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

type RunCiReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *RunCiReply) Reset() {
	*x = RunCiReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCiReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCiReply) ProtoMessage() {}

func (x *RunCiReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCiReply.ProtoReflect.Descriptor instead.
func (*RunCiReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{45}
}

func (x *RunCiReply) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

// 批量查询Ci任务信息
type GetCiTasksReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskIds []string `protobuf:"bytes,1,rep,name=taskIds,proto3" json:"taskIds,omitempty"`
}

func (x *GetCiTasksReq) Reset() {
	*x = GetCiTasksReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCiTasksReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCiTasksReq) ProtoMessage() {}

func (x *GetCiTasksReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCiTasksReq.ProtoReflect.Descriptor instead.
func (*GetCiTasksReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{46}
}

func (x *GetCiTasksReq) GetTaskIds() []string {
	if x != nil {
		return x.TaskIds
	}
	return nil
}

type GetCiTasksReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks map[string]*GetCiTasksReply_CiTask `protobuf:"bytes,4,rep,name=tasks,proto3" json:"tasks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetCiTasksReply) Reset() {
	*x = GetCiTasksReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCiTasksReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCiTasksReply) ProtoMessage() {}

func (x *GetCiTasksReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCiTasksReply.ProtoReflect.Descriptor instead.
func (*GetCiTasksReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{47}
}

func (x *GetCiTasksReply) GetTasks() map[string]*GetCiTasksReply_CiTask {
	if x != nil {
		return x.Tasks
	}
	return nil
}

// 获取Ci任务执行详情
type GetCiTaskDetailsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *GetCiTaskDetailsReq) Reset() {
	*x = GetCiTaskDetailsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCiTaskDetailsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCiTaskDetailsReq) ProtoMessage() {}

func (x *GetCiTaskDetailsReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCiTaskDetailsReq.ProtoReflect.Descriptor instead.
func (*GetCiTaskDetailsReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{48}
}

func (x *GetCiTaskDetailsReq) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type GetCiTaskDetailsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details []*GetCiTaskDetailsReply_CiDetail `protobuf:"bytes,4,rep,name=details,proto3" json:"details,omitempty"`
}

func (x *GetCiTaskDetailsReply) Reset() {
	*x = GetCiTaskDetailsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCiTaskDetailsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCiTaskDetailsReply) ProtoMessage() {}

func (x *GetCiTaskDetailsReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCiTaskDetailsReply.ProtoReflect.Descriptor instead.
func (*GetCiTaskDetailsReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{49}
}

func (x *GetCiTaskDetailsReply) GetDetails() []*GetCiTaskDetailsReply_CiDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

type CreateCiTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	Name        string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CreateCiTemplateReq) Reset() {
	*x = CreateCiTemplateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCiTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCiTemplateReq) ProtoMessage() {}

func (x *CreateCiTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCiTemplateReq.ProtoReflect.Descriptor instead.
func (*CreateCiTemplateReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{50}
}

func (x *CreateCiTemplateReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *CreateCiTemplateReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *CreateCiTemplateReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *CreateCiTemplateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateCiTemplateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CreateCiTemplateReply) Reset() {
	*x = CreateCiTemplateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCiTemplateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCiTemplateReply) ProtoMessage() {}

func (x *CreateCiTemplateReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCiTemplateReply.ProtoReflect.Descriptor instead.
func (*CreateCiTemplateReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{51}
}

func (x *CreateCiTemplateReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type ListCiTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
}

func (x *ListCiTemplateReq) Reset() {
	*x = ListCiTemplateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCiTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCiTemplateReq) ProtoMessage() {}

func (x *ListCiTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCiTemplateReq.ProtoReflect.Descriptor instead.
func (*ListCiTemplateReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{52}
}

func (x *ListCiTemplateReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListCiTemplateReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListCiTemplateReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

type ListCiTemplateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CiTemplate []*ListCiTemplateReply_CiTemplate `protobuf:"bytes,1,rep,name=ciTemplate,proto3" json:"ciTemplate,omitempty"`
}

func (x *ListCiTemplateReply) Reset() {
	*x = ListCiTemplateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCiTemplateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCiTemplateReply) ProtoMessage() {}

func (x *ListCiTemplateReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCiTemplateReply.ProtoReflect.Descriptor instead.
func (*ListCiTemplateReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{53}
}

func (x *ListCiTemplateReply) GetCiTemplate() []*ListCiTemplateReply_CiTemplate {
	if x != nil {
		return x.CiTemplate
	}
	return nil
}

type DelCiTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	Uuid        string `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *DelCiTemplateReq) Reset() {
	*x = DelCiTemplateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelCiTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelCiTemplateReq) ProtoMessage() {}

func (x *DelCiTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelCiTemplateReq.ProtoReflect.Descriptor instead.
func (*DelCiTemplateReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{54}
}

func (x *DelCiTemplateReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *DelCiTemplateReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *DelCiTemplateReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *DelCiTemplateReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type DelCiTemplateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *DelCiTemplateReply) Reset() {
	*x = DelCiTemplateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelCiTemplateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelCiTemplateReply) ProtoMessage() {}

func (x *DelCiTemplateReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelCiTemplateReply.ProtoReflect.Descriptor instead.
func (*DelCiTemplateReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{55}
}

func (x *DelCiTemplateReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type AddCiTemplateStepReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
}

func (x *AddCiTemplateStepReq) Reset() {
	*x = AddCiTemplateStepReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCiTemplateStepReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCiTemplateStepReq) ProtoMessage() {}

func (x *AddCiTemplateStepReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCiTemplateStepReq.ProtoReflect.Descriptor instead.
func (*AddCiTemplateStepReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{56}
}

func (x *AddCiTemplateStepReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *AddCiTemplateStepReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *AddCiTemplateStepReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

type AddCiTemplateStepReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid     string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid      string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid  string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	TemplateUuid string `protobuf:"bytes,4,opt,name=templateUuid,proto3" json:"templateUuid,omitempty"`
	StepUuid     string `protobuf:"bytes,5,opt,name=stepUuid,proto3" json:"stepUuid,omitempty"`
	Priority     int32  `protobuf:"varint,6,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *AddCiTemplateStepReply) Reset() {
	*x = AddCiTemplateStepReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCiTemplateStepReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCiTemplateStepReply) ProtoMessage() {}

func (x *AddCiTemplateStepReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCiTemplateStepReply.ProtoReflect.Descriptor instead.
func (*AddCiTemplateStepReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{57}
}

func (x *AddCiTemplateStepReply) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *AddCiTemplateStepReply) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *AddCiTemplateStepReply) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *AddCiTemplateStepReply) GetTemplateUuid() string {
	if x != nil {
		return x.TemplateUuid
	}
	return ""
}

func (x *AddCiTemplateStepReply) GetStepUuid() string {
	if x != nil {
		return x.StepUuid
	}
	return ""
}

func (x *AddCiTemplateStepReply) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type ListCiTemplateStepReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
}

func (x *ListCiTemplateStepReq) Reset() {
	*x = ListCiTemplateStepReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCiTemplateStepReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCiTemplateStepReq) ProtoMessage() {}

func (x *ListCiTemplateStepReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCiTemplateStepReq.ProtoReflect.Descriptor instead.
func (*ListCiTemplateStepReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{58}
}

func (x *ListCiTemplateStepReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListCiTemplateStepReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListCiTemplateStepReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

type ListCiTemplateStepReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListCiTemplateStepReply) Reset() {
	*x = ListCiTemplateStepReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCiTemplateStepReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCiTemplateStepReply) ProtoMessage() {}

func (x *ListCiTemplateStepReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCiTemplateStepReply.ProtoReflect.Descriptor instead.
func (*ListCiTemplateStepReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{59}
}

type DelCiTemplateStepReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
}

func (x *DelCiTemplateStepReq) Reset() {
	*x = DelCiTemplateStepReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelCiTemplateStepReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelCiTemplateStepReq) ProtoMessage() {}

func (x *DelCiTemplateStepReq) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelCiTemplateStepReq.ProtoReflect.Descriptor instead.
func (*DelCiTemplateStepReq) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{60}
}

func (x *DelCiTemplateStepReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *DelCiTemplateStepReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *DelCiTemplateStepReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

type DelCiTemplateStepReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelCiTemplateStepReply) Reset() {
	*x = DelCiTemplateStepReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelCiTemplateStepReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelCiTemplateStepReply) ProtoMessage() {}

func (x *DelCiTemplateStepReply) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelCiTemplateStepReply.ProtoReflect.Descriptor instead.
func (*DelCiTemplateStepReply) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{61}
}

type ListCopyContainerRegistryImageTaskReply_Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId        string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	UserUuid      string `protobuf:"bytes,2,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid       string `protobuf:"bytes,3,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid   string `protobuf:"bytes,4,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	RunId         string `protobuf:"bytes,5,opt,name=runId,proto3" json:"runId,omitempty"`
	SrcImage      string `protobuf:"bytes,6,opt,name=srcImage,proto3" json:"srcImage,omitempty"`
	DestImage     string `protobuf:"bytes,7,opt,name=destImage,proto3" json:"destImage,omitempty"`
	Result        int32  `protobuf:"varint,8,opt,name=result,proto3" json:"result,omitempty"`
	Describe      string `protobuf:"bytes,9,opt,name=describe,proto3" json:"describe,omitempty"`
	StartExecTime int64  `protobuf:"varint,10,opt,name=startExecTime,proto3" json:"startExecTime,omitempty"`
	EndExecTime   int64  `protobuf:"varint,11,opt,name=endExecTime,proto3" json:"endExecTime,omitempty"`
	CreateTime    int64  `protobuf:"varint,12,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *ListCopyContainerRegistryImageTaskReply_Task) Reset() {
	*x = ListCopyContainerRegistryImageTaskReply_Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCopyContainerRegistryImageTaskReply_Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCopyContainerRegistryImageTaskReply_Task) ProtoMessage() {}

func (x *ListCopyContainerRegistryImageTaskReply_Task) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCopyContainerRegistryImageTaskReply_Task.ProtoReflect.Descriptor instead.
func (*ListCopyContainerRegistryImageTaskReply_Task) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{5, 0}
}

func (x *ListCopyContainerRegistryImageTaskReply_Task) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ListCopyContainerRegistryImageTaskReply_Task) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListCopyContainerRegistryImageTaskReply_Task) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListCopyContainerRegistryImageTaskReply_Task) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ListCopyContainerRegistryImageTaskReply_Task) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *ListCopyContainerRegistryImageTaskReply_Task) GetSrcImage() string {
	if x != nil {
		return x.SrcImage
	}
	return ""
}

func (x *ListCopyContainerRegistryImageTaskReply_Task) GetDestImage() string {
	if x != nil {
		return x.DestImage
	}
	return ""
}

func (x *ListCopyContainerRegistryImageTaskReply_Task) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *ListCopyContainerRegistryImageTaskReply_Task) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *ListCopyContainerRegistryImageTaskReply_Task) GetStartExecTime() int64 {
	if x != nil {
		return x.StartExecTime
	}
	return 0
}

func (x *ListCopyContainerRegistryImageTaskReply_Task) GetEndExecTime() int64 {
	if x != nil {
		return x.EndExecTime
	}
	return 0
}

func (x *ListCopyContainerRegistryImageTaskReply_Task) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type ListProgramLanguageReply_ProgramLanguage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ListProgramLanguageReply_ProgramLanguage) Reset() {
	*x = ListProgramLanguageReply_ProgramLanguage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProgramLanguageReply_ProgramLanguage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProgramLanguageReply_ProgramLanguage) ProtoMessage() {}

func (x *ListProgramLanguageReply_ProgramLanguage) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProgramLanguageReply_ProgramLanguage.ProtoReflect.Descriptor instead.
func (*ListProgramLanguageReply_ProgramLanguage) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{13, 0}
}

func (x *ListProgramLanguageReply_ProgramLanguage) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListProgramLanguageReply_ProgramLanguage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListScanCodeRepositoryReply_ScanCodeRepo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId        string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	RunId         string `protobuf:"bytes,2,opt,name=runId,proto3" json:"runId,omitempty"`
	RepoUuid      string `protobuf:"bytes,3,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	Result        int32  `protobuf:"varint,4,opt,name=result,proto3" json:"result,omitempty"`
	Describe      string `protobuf:"bytes,5,opt,name=describe,proto3" json:"describe,omitempty"`
	StartExecTime int64  `protobuf:"varint,6,opt,name=startExecTime,proto3" json:"startExecTime,omitempty"`
	EndExecTime   int64  `protobuf:"varint,7,opt,name=endExecTime,proto3" json:"endExecTime,omitempty"`
	CreateTime    int64  `protobuf:"varint,8,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *ListScanCodeRepositoryReply_ScanCodeRepo) Reset() {
	*x = ListScanCodeRepositoryReply_ScanCodeRepo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListScanCodeRepositoryReply_ScanCodeRepo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListScanCodeRepositoryReply_ScanCodeRepo) ProtoMessage() {}

func (x *ListScanCodeRepositoryReply_ScanCodeRepo) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListScanCodeRepositoryReply_ScanCodeRepo.ProtoReflect.Descriptor instead.
func (*ListScanCodeRepositoryReply_ScanCodeRepo) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{19, 0}
}

func (x *ListScanCodeRepositoryReply_ScanCodeRepo) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ListScanCodeRepositoryReply_ScanCodeRepo) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *ListScanCodeRepositoryReply_ScanCodeRepo) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *ListScanCodeRepositoryReply_ScanCodeRepo) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *ListScanCodeRepositoryReply_ScanCodeRepo) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *ListScanCodeRepositoryReply_ScanCodeRepo) GetStartExecTime() int64 {
	if x != nil {
		return x.StartExecTime
	}
	return 0
}

func (x *ListScanCodeRepositoryReply_ScanCodeRepo) GetEndExecTime() int64 {
	if x != nil {
		return x.EndExecTime
	}
	return 0
}

func (x *ListScanCodeRepositoryReply_ScanCodeRepo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type ListUnitTestCodeRepositoryReply_UnitTestCodeRepo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId        string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	RunId         string `protobuf:"bytes,2,opt,name=runId,proto3" json:"runId,omitempty"`
	RepoUuid      string `protobuf:"bytes,3,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	Result        int32  `protobuf:"varint,4,opt,name=result,proto3" json:"result,omitempty"`
	Describe      string `protobuf:"bytes,5,opt,name=describe,proto3" json:"describe,omitempty"`
	StartExecTime int64  `protobuf:"varint,6,opt,name=startExecTime,proto3" json:"startExecTime,omitempty"`
	EndExecTime   int64  `protobuf:"varint,7,opt,name=endExecTime,proto3" json:"endExecTime,omitempty"`
	CreateTime    int64  `protobuf:"varint,8,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *ListUnitTestCodeRepositoryReply_UnitTestCodeRepo) Reset() {
	*x = ListUnitTestCodeRepositoryReply_UnitTestCodeRepo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUnitTestCodeRepositoryReply_UnitTestCodeRepo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUnitTestCodeRepositoryReply_UnitTestCodeRepo) ProtoMessage() {}

func (x *ListUnitTestCodeRepositoryReply_UnitTestCodeRepo) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUnitTestCodeRepositoryReply_UnitTestCodeRepo.ProtoReflect.Descriptor instead.
func (*ListUnitTestCodeRepositoryReply_UnitTestCodeRepo) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{25, 0}
}

func (x *ListUnitTestCodeRepositoryReply_UnitTestCodeRepo) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ListUnitTestCodeRepositoryReply_UnitTestCodeRepo) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *ListUnitTestCodeRepositoryReply_UnitTestCodeRepo) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *ListUnitTestCodeRepositoryReply_UnitTestCodeRepo) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *ListUnitTestCodeRepositoryReply_UnitTestCodeRepo) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *ListUnitTestCodeRepositoryReply_UnitTestCodeRepo) GetStartExecTime() int64 {
	if x != nil {
		return x.StartExecTime
	}
	return 0
}

func (x *ListUnitTestCodeRepositoryReply_UnitTestCodeRepo) GetEndExecTime() int64 {
	if x != nil {
		return x.EndExecTime
	}
	return 0
}

func (x *ListUnitTestCodeRepositoryReply_UnitTestCodeRepo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type ListBuildContainerImageReply_BuildContainerImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId         string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	RunId          string `protobuf:"bytes,2,opt,name=runId,proto3" json:"runId,omitempty"`
	UserUuid       string `protobuf:"bytes,3,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	UserName       string `protobuf:"bytes,4,opt,name=userName,proto3" json:"userName,omitempty"`
	RepoUuid       string `protobuf:"bytes,5,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	RepoUrl        string `protobuf:"bytes,6,opt,name=repoUrl,proto3" json:"repoUrl,omitempty"`
	Branch         string `protobuf:"bytes,7,opt,name=branch,proto3" json:"branch,omitempty"`
	CommitId       string `protobuf:"bytes,8,opt,name=commitId,proto3" json:"commitId,omitempty"`
	DockerfilePath string `protobuf:"bytes,9,opt,name=dockerfilePath,proto3" json:"dockerfilePath,omitempty"`
	ImageUrl       string `protobuf:"bytes,10,opt,name=imageUrl,proto3" json:"imageUrl,omitempty"`
	ImageId        string `protobuf:"bytes,11,opt,name=imageId,proto3" json:"imageId,omitempty"`
	Result         int32  `protobuf:"varint,12,opt,name=result,proto3" json:"result,omitempty"`
	Describe       string `protobuf:"bytes,13,opt,name=describe,proto3" json:"describe,omitempty"`
	Dockerfile     string `protobuf:"bytes,14,opt,name=dockerfile,proto3" json:"dockerfile,omitempty"`
	StartExecTime  int64  `protobuf:"varint,15,opt,name=startExecTime,proto3" json:"startExecTime,omitempty"`
	EndExecTime    int64  `protobuf:"varint,16,opt,name=endExecTime,proto3" json:"endExecTime,omitempty"`
	CreateTime     int64  `protobuf:"varint,17,opt,name=createTime,proto3" json:"createTime,omitempty"`
	CostTime       int64  `protobuf:"varint,18,opt,name=costTime,proto3" json:"costTime,omitempty"`
}

func (x *ListBuildContainerImageReply_BuildContainerImage) Reset() {
	*x = ListBuildContainerImageReply_BuildContainerImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBuildContainerImageReply_BuildContainerImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBuildContainerImageReply_BuildContainerImage) ProtoMessage() {}

func (x *ListBuildContainerImageReply_BuildContainerImage) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBuildContainerImageReply_BuildContainerImage.ProtoReflect.Descriptor instead.
func (*ListBuildContainerImageReply_BuildContainerImage) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{31, 0}
}

func (x *ListBuildContainerImageReply_BuildContainerImage) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ListBuildContainerImageReply_BuildContainerImage) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *ListBuildContainerImageReply_BuildContainerImage) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListBuildContainerImageReply_BuildContainerImage) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *ListBuildContainerImageReply_BuildContainerImage) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *ListBuildContainerImageReply_BuildContainerImage) GetRepoUrl() string {
	if x != nil {
		return x.RepoUrl
	}
	return ""
}

func (x *ListBuildContainerImageReply_BuildContainerImage) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *ListBuildContainerImageReply_BuildContainerImage) GetCommitId() string {
	if x != nil {
		return x.CommitId
	}
	return ""
}

func (x *ListBuildContainerImageReply_BuildContainerImage) GetDockerfilePath() string {
	if x != nil {
		return x.DockerfilePath
	}
	return ""
}

func (x *ListBuildContainerImageReply_BuildContainerImage) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *ListBuildContainerImageReply_BuildContainerImage) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *ListBuildContainerImageReply_BuildContainerImage) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *ListBuildContainerImageReply_BuildContainerImage) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *ListBuildContainerImageReply_BuildContainerImage) GetDockerfile() string {
	if x != nil {
		return x.Dockerfile
	}
	return ""
}

func (x *ListBuildContainerImageReply_BuildContainerImage) GetStartExecTime() int64 {
	if x != nil {
		return x.StartExecTime
	}
	return 0
}

func (x *ListBuildContainerImageReply_BuildContainerImage) GetEndExecTime() int64 {
	if x != nil {
		return x.EndExecTime
	}
	return 0
}

func (x *ListBuildContainerImageReply_BuildContainerImage) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *ListBuildContainerImageReply_BuildContainerImage) GetCostTime() int64 {
	if x != nil {
		return x.CostTime
	}
	return 0
}

type GetCiTasksReply_CiTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result              int32  `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	CreateTime          int64  `protobuf:"varint,3,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime          int64  `protobuf:"varint,4,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	ContainerImg        string `protobuf:"bytes,5,opt,name=containerImg,proto3" json:"containerImg,omitempty"`
	ObjectStorageTo     string `protobuf:"bytes,6,opt,name=objectStorageTo,proto3" json:"objectStorageTo,omitempty"`
	ObjectStorageBucket string `protobuf:"bytes,7,opt,name=objectStorageBucket,proto3" json:"objectStorageBucket,omitempty"`
	ObjectStoragePath   string `protobuf:"bytes,8,opt,name=objectStoragePath,proto3" json:"objectStoragePath,omitempty"`
}

func (x *GetCiTasksReply_CiTask) Reset() {
	*x = GetCiTasksReply_CiTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCiTasksReply_CiTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCiTasksReply_CiTask) ProtoMessage() {}

func (x *GetCiTasksReply_CiTask) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCiTasksReply_CiTask.ProtoReflect.Descriptor instead.
func (*GetCiTasksReply_CiTask) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{47, 1}
}

func (x *GetCiTasksReply_CiTask) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *GetCiTasksReply_CiTask) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *GetCiTasksReply_CiTask) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *GetCiTasksReply_CiTask) GetContainerImg() string {
	if x != nil {
		return x.ContainerImg
	}
	return ""
}

func (x *GetCiTasksReply_CiTask) GetObjectStorageTo() string {
	if x != nil {
		return x.ObjectStorageTo
	}
	return ""
}

func (x *GetCiTasksReply_CiTask) GetObjectStorageBucket() string {
	if x != nil {
		return x.ObjectStorageBucket
	}
	return ""
}

func (x *GetCiTasksReply_CiTask) GetObjectStoragePath() string {
	if x != nil {
		return x.ObjectStoragePath
	}
	return ""
}

type GetCiTaskDetailsReply_CiDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result        int32  `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Content       string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	CreateTime    int64  `protobuf:"varint,3,opt,name=createTime,proto3" json:"createTime,omitempty"`
	StageName     string `protobuf:"bytes,4,opt,name=stageName,proto3" json:"stageName,omitempty"`
	StageStepName string `protobuf:"bytes,5,opt,name=stageStepName,proto3" json:"stageStepName,omitempty"`
}

func (x *GetCiTaskDetailsReply_CiDetail) Reset() {
	*x = GetCiTaskDetailsReply_CiDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCiTaskDetailsReply_CiDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCiTaskDetailsReply_CiDetail) ProtoMessage() {}

func (x *GetCiTaskDetailsReply_CiDetail) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCiTaskDetailsReply_CiDetail.ProtoReflect.Descriptor instead.
func (*GetCiTaskDetailsReply_CiDetail) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{49, 0}
}

func (x *GetCiTaskDetailsReply_CiDetail) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *GetCiTaskDetailsReply_CiDetail) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *GetCiTaskDetailsReply_CiDetail) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *GetCiTaskDetailsReply_CiDetail) GetStageName() string {
	if x != nil {
		return x.StageName
	}
	return ""
}

func (x *GetCiTaskDetailsReply_CiDetail) GetStageStepName() string {
	if x != nil {
		return x.StageStepName
	}
	return ""
}

type ListCiTemplateReply_CiTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	Name        string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	CreateTime  int64  `protobuf:"varint,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *ListCiTemplateReply_CiTemplate) Reset() {
	*x = ListCiTemplateReply_CiTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ci_v1_ci_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCiTemplateReply_CiTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCiTemplateReply_CiTemplate) ProtoMessage() {}

func (x *ListCiTemplateReply_CiTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_ci_v1_ci_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCiTemplateReply_CiTemplate.ProtoReflect.Descriptor instead.
func (*ListCiTemplateReply_CiTemplate) Descriptor() ([]byte, []int) {
	return file_ci_v1_ci_proto_rawDescGZIP(), []int{53, 0}
}

func (x *ListCiTemplateReply_CiTemplate) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ListCiTemplateReply_CiTemplate) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListCiTemplateReply_CiTemplate) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ListCiTemplateReply_CiTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListCiTemplateReply_CiTemplate) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

var File_ci_v1_ci_proto protoreflect.FileDescriptor

var file_ci_v1_ci_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x63, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x05, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x87, 0x01, 0x0a, 0x1a, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12,
	0x1f, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x36, 0x0a, 0x1c, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0xeb, 0x02, 0x0a, 0x1d, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x72, 0x63, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x72, 0x63, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x55, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x73,
	0x72, 0x63, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x73, 0x72, 0x63, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x3d, 0x0a, 0x15, 0x64, 0x65, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x55, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x15, 0x64, 0x65, 0x73, 0x74, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x25, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x64, 0x65, 0x73,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x22, 0x39, 0x0a, 0x1f, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x25,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72,
	0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x22, 0xd9, 0x03, 0x0a, 0x27, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x49, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x70, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x1a,
	0xe2, 0x02, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x75, 0x6e, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x72, 0x63, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x72, 0x63, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65,
	0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x65, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x70, 0x79,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72,
	0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x1f, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x22, 0x84, 0x03, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x75, 0x6e, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x72, 0x63, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x65, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x65, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78,
	0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x45, 0x78, 0x65,
	0x63, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x6e, 0x64,
	0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x18, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x1d, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x36,
	0x0a, 0x1a, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x27,
	0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x51, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x67,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x18, 0x0a, 0x16, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x22, 0xac, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x59, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x1a, 0x35, 0x0a, 0x0f,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x15, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x28, 0x0a,
	0x0f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07,
	0x72, 0x65, 0x70, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x72, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22, 0x31, 0x0a, 0x17, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x60, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x82, 0x02, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x5a, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a,
	0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x73, 0x22, 0xeb, 0x02, 0x0a,
	0x1b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x55, 0x0a, 0x0d,
	0x73, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x52, 0x0d, 0x73, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x1a, 0xf4, 0x01, 0x0a, 0x0c, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x75, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x65, 0x63, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x45,
	0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65,
	0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc4, 0x01, 0x0a, 0x19, 0x55,
	0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x12, 0x23, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x72,
	0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x55,
	0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1f, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x22, 0x35, 0x0a, 0x1b, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x64, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x86,
	0x02, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x75, 0x6e,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x65,
	0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x45,
	0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x5e, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x73, 0x22, 0x83, 0x03, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x65, 0x0a, 0x11, 0x75,
	0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x55,
	0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x52,
	0x11, 0x75, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x1a, 0xf8, 0x01, 0x0a, 0x10, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78,
	0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65,
	0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x65, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa3, 0x04,
	0x0a, 0x16, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a,
	0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x72,
	0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x23, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x72, 0x65, 0x70,
	0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x72, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f,
	0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12,
	0x29, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x55, 0x72, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x33, 0x0a, 0x10, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x10, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x33, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x35, 0x0a, 0x11, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x11, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x64,
	0x6f, 0x63, 0x6b, 0x65, 0x72, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x66, 0x69, 0x6c, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x22, 0x32, 0x0a, 0x18, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0xd4, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72,
	0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0xa3,
	0x04, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x66, 0x69,
	0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55,
	0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55,
	0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78,
	0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x45, 0x78, 0x65,
	0x63, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x6e, 0x64,
	0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x73, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x73, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x22, 0xa9, 0x05, 0x0a, 0x1c,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6b, 0x0a, 0x14,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x14, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x9b, 0x04, 0x0a, 0x13, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x75, 0x6e,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x66, 0x69, 0x6c, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x6f, 0x63, 0x6b, 0x65,
	0x72, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x65, 0x63,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x64,
	0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x65, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63,
	0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xfb, 0x02, 0x0a, 0x26, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79,
	0x49, 0x64, 0x12, 0x31, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x2d, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a,
	0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2d, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46,
	0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x28, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0xff, 0x02, 0x0a, 0x2a, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x29, 0x0a,
	0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x2d, 0x0a, 0x0d, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x0a, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2d, 0x0a, 0x0d,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x2c, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54,
	0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x22, 0xa8, 0x02, 0x0a, 0x18, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x53, 0x46, 0x54, 0x50, 0x52, 0x65, 0x71,
	0x12, 0x27, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x27, 0x0a, 0x0a, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2d,
	0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0d,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2f, 0x0a,
	0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0x34,
	0x0a, 0x1a, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c,
	0x65, 0x54, 0x6f, 0x53, 0x46, 0x54, 0x50, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x22, 0xaa, 0x02, 0x0a, 0x1a, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x46, 0x54, 0x50, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x48, 0x6f, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x27, 0x0a, 0x0a,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x2d, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x2f, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x22, 0x36, 0x0a, 0x1c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x46, 0x54,
	0x50, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x70, 0x79, 0x53, 0x46, 0x54, 0x50, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x69, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x81, 0x03, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x70, 0x79, 0x53, 0x46, 0x54, 0x50, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x69,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72,
	0x75, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x70, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x70, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x66, 0x74, 0x70, 0x41, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x66, 0x74, 0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x66, 0x74, 0x70, 0x55, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x66, 0x74, 0x70, 0x55, 0x73, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x66, 0x74, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x66, 0x74, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45,
	0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x65, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x39,
	0x0a, 0x1f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0xb1, 0x03, 0x0a, 0x21, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6f, 0x70, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x63, 0x6f, 0x70, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x78,
	0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65,
	0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x65, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x79, 0x0a,
	0x08, 0x52, 0x75, 0x6e, 0x43, 0x69, 0x52, 0x65, 0x71, 0x12, 0x27, 0x0a, 0x0a, 0x67, 0x69, 0x74,
	0x48, 0x74, 0x74, 0x70, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x67, 0x69, 0x74, 0x48, 0x74, 0x74, 0x70, 0x55,
	0x72, 0x6c, 0x12, 0x23, 0x0a, 0x08, 0x67, 0x69, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x67,
	0x69, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22, 0x24, 0x0a, 0x0a, 0x52, 0x75, 0x6e, 0x43,
	0x69, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x29,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x69, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x73, 0x22, 0xb4, 0x03, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x43, 0x69, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x37, 0x0a,
	0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x69, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x1a, 0x57, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x69, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x69,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x8e, 0x02, 0x0a, 0x06, 0x43, 0x69, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x6d, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x49, 0x6d, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x12, 0x30, 0x0a, 0x13, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x22, 0x36, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x69, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0xfb, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x43, 0x69, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x3f, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x69, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x2e, 0x43, 0x69, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x1a, 0xa0, 0x01, 0x0a, 0x08, 0x43, 0x69, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x67, 0x65, 0x53, 0x74, 0x65, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x67, 0x65, 0x53, 0x74,
	0x65, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x23,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f,
	0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2f,
	0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x86, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72,
	0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x22, 0xef, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x45, 0x0a, 0x0a, 0x63, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x2e, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x63, 0x69, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x1a, 0x90, 0x01, 0x0a, 0x0a, 0x43, 0x69, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72,
	0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x10, 0x44,
	0x65, 0x6c, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07,
	0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22,
	0x2c, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x89, 0x01,
	0x0a, 0x14, 0x41, 0x64, 0x64, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x65, 0x70, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f,
	0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x22, 0xe7, 0x01, 0x0a, 0x16, 0x41, 0x64,
	0x64, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x74, 0x65, 0x70, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x74, 0x65, 0x70, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x22, 0x8a, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x69, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72,
	0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64,
	0x22, 0x19, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x89, 0x01, 0x0a, 0x14,
	0x44, 0x65, 0x6c, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x43, 0x69,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x32, 0xb6, 0x17, 0x0a, 0x02, 0x63, 0x69, 0x12, 0x63, 0x0a, 0x17, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x12, 0x21, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x6c, 0x0a,
	0x1a, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x24, 0x2e, 0x63, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x26, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x22,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x2c, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x70, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x1a, 0x2e, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x70,
	0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2b, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x15, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x1f, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x21, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x67, 0x73, 0x12,
	0x20, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x22, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x67, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x13, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1d,
	0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e,
	0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x60, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x20, 0x2e, 0x63, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x63,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x63, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x21, 0x2e,
	0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x23, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1d,
	0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e,
	0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x54, 0x0a, 0x12, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x63, 0x61, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x63, 0x61,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x1f, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x1a, 0x21, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x61, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x61,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x20, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x61, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x1a, 0x22, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63,
	0x61, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x16, 0x55, 0x6e, 0x69, 0x74, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x20, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x23, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x63, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x24, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x5d, 0x0a, 0x15, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x53, 0x46, 0x54, 0x50, 0x12, 0x1f, 0x2e, 0x63, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46,
	0x69, 0x6c, 0x65, 0x54, 0x6f, 0x53, 0x46, 0x54, 0x50, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x63,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x53, 0x46, 0x54, 0x50, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x63, 0x0a, 0x17, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x46, 0x54,
	0x50, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x21, 0x2e, 0x63,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x46, 0x54,
	0x50, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x1a,
	0x23, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x53, 0x46, 0x54, 0x50, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x23, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x2d,
	0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e,
	0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x93, 0x01, 0x0a, 0x27, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x31, 0x2e, 0x63,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x1a,
	0x33, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x70,
	0x79, 0x53, 0x46, 0x54, 0x50, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x69, 0x73, 0x12, 0x1c, 0x2e, 0x63,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x70, 0x79, 0x53, 0x46, 0x54, 0x50,
	0x46, 0x69, 0x6c, 0x65, 0x48, 0x69, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x63, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x70, 0x79, 0x53, 0x46, 0x54, 0x50, 0x46, 0x69,
	0x6c, 0x65, 0x48, 0x69, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x1c,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x12, 0x26, 0x2e, 0x63,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x70, 0x79, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x48, 0x69,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x70, 0x79, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x48, 0x69, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x4e, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x1c, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x48, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x12, 0x18, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x63,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0d, 0x44, 0x65,
	0x6c, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x17, 0x2e, 0x63, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x51, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x1b, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x64, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x43,
	0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x69, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x1c, 0x2e, 0x63, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x65, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x11, 0x44, 0x65,
	0x6c, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12,
	0x1b, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x43, 0x69, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x63,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x2d, 0x0a,
	0x05, 0x52, 0x75, 0x6e, 0x43, 0x69, 0x12, 0x0f, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x75, 0x6e, 0x43, 0x69, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x75, 0x6e, 0x43, 0x69, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x43, 0x69, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x14, 0x2e, 0x63, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x69, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x16, 0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x69, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x43, 0x69, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1a,
	0x2e, 0x63, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x69, 0x54, 0x61, 0x73, 0x6b,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x63, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x69, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x26, 0x5a, 0x24, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x70,
	0x73, 0x7a, 0x2f, 0x63, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x69, 0x2f, 0x76, 0x31, 0x3b,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ci_v1_ci_proto_rawDescOnce sync.Once
	file_ci_v1_ci_proto_rawDescData = file_ci_v1_ci_proto_rawDesc
)

func file_ci_v1_ci_proto_rawDescGZIP() []byte {
	file_ci_v1_ci_proto_rawDescOnce.Do(func() {
		file_ci_v1_ci_proto_rawDescData = protoimpl.X.CompressGZIP(file_ci_v1_ci_proto_rawDescData)
	})
	return file_ci_v1_ci_proto_rawDescData
}

var file_ci_v1_ci_proto_msgTypes = make([]protoimpl.MessageInfo, 71)
var file_ci_v1_ci_proto_goTypes = []interface{}{
	(*VerifyContainerRegistryReq)(nil),                       // 0: ci.v1.VerifyContainerRegistryReq
	(*VerifyContainerRegistryReply)(nil),                     // 1: ci.v1.VerifyContainerRegistryReply
	(*CopyContainerRegistryImageReq)(nil),                    // 2: ci.v1.CopyContainerRegistryImageReq
	(*CopyContainerRegistryImageReply)(nil),                  // 3: ci.v1.CopyContainerRegistryImageReply
	(*ListCopyContainerRegistryImageTaskReq)(nil),            // 4: ci.v1.ListCopyContainerRegistryImageTaskReq
	(*ListCopyContainerRegistryImageTaskReply)(nil),          // 5: ci.v1.ListCopyContainerRegistryImageTaskReply
	(*GetCopyContainerRegistryImageTaskReq)(nil),             // 6: ci.v1.GetCopyContainerRegistryImageTaskReq
	(*GetCopyContainerRegistryImageTaskReply)(nil),           // 7: ci.v1.GetCopyContainerRegistryImageTaskReply
	(*InspectContainerImageReq)(nil),                         // 8: ci.v1.InspectContainerImageReq
	(*InspectContainerImageReply)(nil),                       // 9: ci.v1.InspectContainerImageReply
	(*ListContainerImageTagsReq)(nil),                        // 10: ci.v1.ListContainerImageTagsReq
	(*ListContainerImageTagsReply)(nil),                      // 11: ci.v1.ListContainerImageTagsReply
	(*ListProgramLanguageReq)(nil),                           // 12: ci.v1.ListProgramLanguageReq
	(*ListProgramLanguageReply)(nil),                         // 13: ci.v1.ListProgramLanguageReply
	(*ScanCodeRepositoryReq)(nil),                            // 14: ci.v1.ScanCodeRepositoryReq
	(*ScanCodeRepositoryReply)(nil),                          // 15: ci.v1.ScanCodeRepositoryReply
	(*GetScanCodeRepositoryReq)(nil),                         // 16: ci.v1.GetScanCodeRepositoryReq
	(*GetScanCodeRepositoryReply)(nil),                       // 17: ci.v1.GetScanCodeRepositoryReply
	(*ListScanCodeRepositoryReq)(nil),                        // 18: ci.v1.ListScanCodeRepositoryReq
	(*ListScanCodeRepositoryReply)(nil),                      // 19: ci.v1.ListScanCodeRepositoryReply
	(*UnitTestCodeRepositoryReq)(nil),                        // 20: ci.v1.UnitTestCodeRepositoryReq
	(*UnitTestCodeRepositoryReply)(nil),                      // 21: ci.v1.UnitTestCodeRepositoryReply
	(*GetUnitTestCodeRepositoryReq)(nil),                     // 22: ci.v1.GetUnitTestCodeRepositoryReq
	(*GetUnitTestCodeRepositoryReply)(nil),                   // 23: ci.v1.GetUnitTestCodeRepositoryReply
	(*ListUnitTestCodeRepositoryReq)(nil),                    // 24: ci.v1.ListUnitTestCodeRepositoryReq
	(*ListUnitTestCodeRepositoryReply)(nil),                  // 25: ci.v1.ListUnitTestCodeRepositoryReply
	(*BuildContainerImageReq)(nil),                           // 26: ci.v1.BuildContainerImageReq
	(*BuildContainerImageReply)(nil),                         // 27: ci.v1.BuildContainerImageReply
	(*GetBuildContainerImageReq)(nil),                        // 28: ci.v1.GetBuildContainerImageReq
	(*GetBuildContainerImageReply)(nil),                      // 29: ci.v1.GetBuildContainerImageReply
	(*ListBuildContainerImageReq)(nil),                       // 30: ci.v1.ListBuildContainerImageReq
	(*ListBuildContainerImageReply)(nil),                     // 31: ci.v1.ListBuildContainerImageReply
	(*UploadLocalFileToCloudObjectStorageReq)(nil),           // 32: ci.v1.UploadLocalFileToCloudObjectStorageReq
	(*UploadLocalFileToCloudObjectStorageReply)(nil),         // 33: ci.v1.UploadLocalFileToCloudObjectStorageReply
	(*DownloadCloudObjectStorageObjectToLocalReq)(nil),       // 34: ci.v1.DownloadCloudObjectStorageObjectToLocalReq
	(*DownloadCloudObjectStorageObjectToLocalReply)(nil),     // 35: ci.v1.DownloadCloudObjectStorageObjectToLocalReply
	(*UploadLocalFileToSFTPReq)(nil),                         // 36: ci.v1.UploadLocalFileToSFTPReq
	(*UploadLocalFileToSFTPReply)(nil),                       // 37: ci.v1.UploadLocalFileToSFTPReply
	(*DownloadSFTPFileToLocalReq)(nil),                       // 38: ci.v1.DownloadSFTPFileToLocalReq
	(*DownloadSFTPFileToLocalReply)(nil),                     // 39: ci.v1.DownloadSFTPFileToLocalReply
	(*GetCopySFTPFileHisReq)(nil),                            // 40: ci.v1.GetCopySFTPFileHisReq
	(*GetCopySFTPFileHisReply)(nil),                          // 41: ci.v1.GetCopySFTPFileHisReply
	(*GetCopyCloudObjectStorageHisReq)(nil),                  // 42: ci.v1.GetCopyCloudObjectStorageHisReq
	(*GetCopyCloudObjectStorageHisReply)(nil),                // 43: ci.v1.GetCopyCloudObjectStorageHisReply
	(*RunCiReq)(nil),                                         // 44: ci.v1.RunCiReq
	(*RunCiReply)(nil),                                       // 45: ci.v1.RunCiReply
	(*GetCiTasksReq)(nil),                                    // 46: ci.v1.GetCiTasksReq
	(*GetCiTasksReply)(nil),                                  // 47: ci.v1.GetCiTasksReply
	(*GetCiTaskDetailsReq)(nil),                              // 48: ci.v1.GetCiTaskDetailsReq
	(*GetCiTaskDetailsReply)(nil),                            // 49: ci.v1.GetCiTaskDetailsReply
	(*CreateCiTemplateReq)(nil),                              // 50: ci.v1.CreateCiTemplateReq
	(*CreateCiTemplateReply)(nil),                            // 51: ci.v1.CreateCiTemplateReply
	(*ListCiTemplateReq)(nil),                                // 52: ci.v1.ListCiTemplateReq
	(*ListCiTemplateReply)(nil),                              // 53: ci.v1.ListCiTemplateReply
	(*DelCiTemplateReq)(nil),                                 // 54: ci.v1.DelCiTemplateReq
	(*DelCiTemplateReply)(nil),                               // 55: ci.v1.DelCiTemplateReply
	(*AddCiTemplateStepReq)(nil),                             // 56: ci.v1.AddCiTemplateStepReq
	(*AddCiTemplateStepReply)(nil),                           // 57: ci.v1.AddCiTemplateStepReply
	(*ListCiTemplateStepReq)(nil),                            // 58: ci.v1.ListCiTemplateStepReq
	(*ListCiTemplateStepReply)(nil),                          // 59: ci.v1.ListCiTemplateStepReply
	(*DelCiTemplateStepReq)(nil),                             // 60: ci.v1.DelCiTemplateStepReq
	(*DelCiTemplateStepReply)(nil),                           // 61: ci.v1.DelCiTemplateStepReply
	(*ListCopyContainerRegistryImageTaskReply_Task)(nil),     // 62: ci.v1.ListCopyContainerRegistryImageTaskReply.Task
	(*ListProgramLanguageReply_ProgramLanguage)(nil),         // 63: ci.v1.ListProgramLanguageReply.ProgramLanguage
	(*ListScanCodeRepositoryReply_ScanCodeRepo)(nil),         // 64: ci.v1.ListScanCodeRepositoryReply.ScanCodeRepo
	(*ListUnitTestCodeRepositoryReply_UnitTestCodeRepo)(nil), // 65: ci.v1.ListUnitTestCodeRepositoryReply.UnitTestCodeRepo
	(*ListBuildContainerImageReply_BuildContainerImage)(nil), // 66: ci.v1.ListBuildContainerImageReply.BuildContainerImage
	nil,                                    // 67: ci.v1.GetCiTasksReply.TasksEntry
	(*GetCiTasksReply_CiTask)(nil),         // 68: ci.v1.GetCiTasksReply.CiTask
	(*GetCiTaskDetailsReply_CiDetail)(nil), // 69: ci.v1.GetCiTaskDetailsReply.CiDetail
	(*ListCiTemplateReply_CiTemplate)(nil), // 70: ci.v1.ListCiTemplateReply.CiTemplate
}
var file_ci_v1_ci_proto_depIdxs = []int32{
	62, // 0: ci.v1.ListCopyContainerRegistryImageTaskReply.tasks:type_name -> ci.v1.ListCopyContainerRegistryImageTaskReply.Task
	63, // 1: ci.v1.ListProgramLanguageReply.programLanguage:type_name -> ci.v1.ListProgramLanguageReply.ProgramLanguage
	64, // 2: ci.v1.ListScanCodeRepositoryReply.scanCodeRepos:type_name -> ci.v1.ListScanCodeRepositoryReply.ScanCodeRepo
	65, // 3: ci.v1.ListUnitTestCodeRepositoryReply.unitTestCodeRepos:type_name -> ci.v1.ListUnitTestCodeRepositoryReply.UnitTestCodeRepo
	66, // 4: ci.v1.ListBuildContainerImageReply.buildContainerImages:type_name -> ci.v1.ListBuildContainerImageReply.BuildContainerImage
	67, // 5: ci.v1.GetCiTasksReply.tasks:type_name -> ci.v1.GetCiTasksReply.TasksEntry
	69, // 6: ci.v1.GetCiTaskDetailsReply.details:type_name -> ci.v1.GetCiTaskDetailsReply.CiDetail
	70, // 7: ci.v1.ListCiTemplateReply.ciTemplate:type_name -> ci.v1.ListCiTemplateReply.CiTemplate
	68, // 8: ci.v1.GetCiTasksReply.TasksEntry.value:type_name -> ci.v1.GetCiTasksReply.CiTask
	0,  // 9: ci.v1.ci.VerifyContainerRegistry:input_type -> ci.v1.VerifyContainerRegistryReq
	2,  // 10: ci.v1.ci.CopyContainerRegistryImage:input_type -> ci.v1.CopyContainerRegistryImageReq
	4,  // 11: ci.v1.ci.ListCopyContainerRegistryImageTask:input_type -> ci.v1.ListCopyContainerRegistryImageTaskReq
	6,  // 12: ci.v1.ci.GetCopyContainerRegistryImageTask:input_type -> ci.v1.GetCopyContainerRegistryImageTaskReq
	8,  // 13: ci.v1.ci.InspectContainerImage:input_type -> ci.v1.InspectContainerImageReq
	10, // 14: ci.v1.ci.ListContainerImageTags:input_type -> ci.v1.ListContainerImageTagsReq
	26, // 15: ci.v1.ci.BuildContainerImage:input_type -> ci.v1.BuildContainerImageReq
	28, // 16: ci.v1.ci.GetBuildContainerImage:input_type -> ci.v1.GetBuildContainerImageReq
	30, // 17: ci.v1.ci.ListBuildContainerImage:input_type -> ci.v1.ListBuildContainerImageReq
	12, // 18: ci.v1.ci.ListProgramLanguage:input_type -> ci.v1.ListProgramLanguageReq
	14, // 19: ci.v1.ci.ScanCodeRepository:input_type -> ci.v1.ScanCodeRepositoryReq
	16, // 20: ci.v1.ci.GetScanCodeRepository:input_type -> ci.v1.GetScanCodeRepositoryReq
	18, // 21: ci.v1.ci.ListScanCodeRepository:input_type -> ci.v1.ListScanCodeRepositoryReq
	20, // 22: ci.v1.ci.UnitTestCodeRepository:input_type -> ci.v1.UnitTestCodeRepositoryReq
	22, // 23: ci.v1.ci.GetUnitTestCodeRepository:input_type -> ci.v1.GetUnitTestCodeRepositoryReq
	24, // 24: ci.v1.ci.ListUnitTestCodeRepository:input_type -> ci.v1.ListUnitTestCodeRepositoryReq
	36, // 25: ci.v1.ci.UploadLocalFileToSFTP:input_type -> ci.v1.UploadLocalFileToSFTPReq
	38, // 26: ci.v1.ci.DownloadSFTPFileToLocal:input_type -> ci.v1.DownloadSFTPFileToLocalReq
	32, // 27: ci.v1.ci.UploadLocalFileToCloudObjectStorage:input_type -> ci.v1.UploadLocalFileToCloudObjectStorageReq
	34, // 28: ci.v1.ci.DownloadCloudObjectStorageObjectToLocal:input_type -> ci.v1.DownloadCloudObjectStorageObjectToLocalReq
	40, // 29: ci.v1.ci.GetCopySFTPFileHis:input_type -> ci.v1.GetCopySFTPFileHisReq
	42, // 30: ci.v1.ci.GetCopyCloudObjectStorageHis:input_type -> ci.v1.GetCopyCloudObjectStorageHisReq
	50, // 31: ci.v1.ci.CreateCiTemplate:input_type -> ci.v1.CreateCiTemplateReq
	52, // 32: ci.v1.ci.ListCiTemplate:input_type -> ci.v1.ListCiTemplateReq
	54, // 33: ci.v1.ci.DelCiTemplate:input_type -> ci.v1.DelCiTemplateReq
	56, // 34: ci.v1.ci.AddCiTemplateStep:input_type -> ci.v1.AddCiTemplateStepReq
	58, // 35: ci.v1.ci.ListCiTemplateStep:input_type -> ci.v1.ListCiTemplateStepReq
	60, // 36: ci.v1.ci.DelCiTemplateStep:input_type -> ci.v1.DelCiTemplateStepReq
	44, // 37: ci.v1.ci.RunCi:input_type -> ci.v1.RunCiReq
	46, // 38: ci.v1.ci.GetCiTasks:input_type -> ci.v1.GetCiTasksReq
	48, // 39: ci.v1.ci.GetCiTaskDetails:input_type -> ci.v1.GetCiTaskDetailsReq
	1,  // 40: ci.v1.ci.VerifyContainerRegistry:output_type -> ci.v1.VerifyContainerRegistryReply
	3,  // 41: ci.v1.ci.CopyContainerRegistryImage:output_type -> ci.v1.CopyContainerRegistryImageReply
	5,  // 42: ci.v1.ci.ListCopyContainerRegistryImageTask:output_type -> ci.v1.ListCopyContainerRegistryImageTaskReply
	7,  // 43: ci.v1.ci.GetCopyContainerRegistryImageTask:output_type -> ci.v1.GetCopyContainerRegistryImageTaskReply
	9,  // 44: ci.v1.ci.InspectContainerImage:output_type -> ci.v1.InspectContainerImageReply
	11, // 45: ci.v1.ci.ListContainerImageTags:output_type -> ci.v1.ListContainerImageTagsReply
	27, // 46: ci.v1.ci.BuildContainerImage:output_type -> ci.v1.BuildContainerImageReply
	29, // 47: ci.v1.ci.GetBuildContainerImage:output_type -> ci.v1.GetBuildContainerImageReply
	31, // 48: ci.v1.ci.ListBuildContainerImage:output_type -> ci.v1.ListBuildContainerImageReply
	13, // 49: ci.v1.ci.ListProgramLanguage:output_type -> ci.v1.ListProgramLanguageReply
	15, // 50: ci.v1.ci.ScanCodeRepository:output_type -> ci.v1.ScanCodeRepositoryReply
	17, // 51: ci.v1.ci.GetScanCodeRepository:output_type -> ci.v1.GetScanCodeRepositoryReply
	19, // 52: ci.v1.ci.ListScanCodeRepository:output_type -> ci.v1.ListScanCodeRepositoryReply
	21, // 53: ci.v1.ci.UnitTestCodeRepository:output_type -> ci.v1.UnitTestCodeRepositoryReply
	23, // 54: ci.v1.ci.GetUnitTestCodeRepository:output_type -> ci.v1.GetUnitTestCodeRepositoryReply
	25, // 55: ci.v1.ci.ListUnitTestCodeRepository:output_type -> ci.v1.ListUnitTestCodeRepositoryReply
	37, // 56: ci.v1.ci.UploadLocalFileToSFTP:output_type -> ci.v1.UploadLocalFileToSFTPReply
	39, // 57: ci.v1.ci.DownloadSFTPFileToLocal:output_type -> ci.v1.DownloadSFTPFileToLocalReply
	33, // 58: ci.v1.ci.UploadLocalFileToCloudObjectStorage:output_type -> ci.v1.UploadLocalFileToCloudObjectStorageReply
	35, // 59: ci.v1.ci.DownloadCloudObjectStorageObjectToLocal:output_type -> ci.v1.DownloadCloudObjectStorageObjectToLocalReply
	41, // 60: ci.v1.ci.GetCopySFTPFileHis:output_type -> ci.v1.GetCopySFTPFileHisReply
	43, // 61: ci.v1.ci.GetCopyCloudObjectStorageHis:output_type -> ci.v1.GetCopyCloudObjectStorageHisReply
	51, // 62: ci.v1.ci.CreateCiTemplate:output_type -> ci.v1.CreateCiTemplateReply
	53, // 63: ci.v1.ci.ListCiTemplate:output_type -> ci.v1.ListCiTemplateReply
	55, // 64: ci.v1.ci.DelCiTemplate:output_type -> ci.v1.DelCiTemplateReply
	57, // 65: ci.v1.ci.AddCiTemplateStep:output_type -> ci.v1.AddCiTemplateStepReply
	59, // 66: ci.v1.ci.ListCiTemplateStep:output_type -> ci.v1.ListCiTemplateStepReply
	61, // 67: ci.v1.ci.DelCiTemplateStep:output_type -> ci.v1.DelCiTemplateStepReply
	45, // 68: ci.v1.ci.RunCi:output_type -> ci.v1.RunCiReply
	47, // 69: ci.v1.ci.GetCiTasks:output_type -> ci.v1.GetCiTasksReply
	49, // 70: ci.v1.ci.GetCiTaskDetails:output_type -> ci.v1.GetCiTaskDetailsReply
	40, // [40:71] is the sub-list for method output_type
	9,  // [9:40] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_ci_v1_ci_proto_init() }
func file_ci_v1_ci_proto_init() {
	if File_ci_v1_ci_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ci_v1_ci_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyContainerRegistryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyContainerRegistryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyContainerRegistryImageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyContainerRegistryImageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCopyContainerRegistryImageTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCopyContainerRegistryImageTaskReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCopyContainerRegistryImageTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCopyContainerRegistryImageTaskReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectContainerImageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectContainerImageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListContainerImageTagsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListContainerImageTagsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProgramLanguageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProgramLanguageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanCodeRepositoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanCodeRepositoryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScanCodeRepositoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScanCodeRepositoryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListScanCodeRepositoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListScanCodeRepositoryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnitTestCodeRepositoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnitTestCodeRepositoryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUnitTestCodeRepositoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUnitTestCodeRepositoryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUnitTestCodeRepositoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUnitTestCodeRepositoryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildContainerImageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildContainerImageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBuildContainerImageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBuildContainerImageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBuildContainerImageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBuildContainerImageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadLocalFileToCloudObjectStorageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadLocalFileToCloudObjectStorageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadCloudObjectStorageObjectToLocalReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadCloudObjectStorageObjectToLocalReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadLocalFileToSFTPReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadLocalFileToSFTPReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadSFTPFileToLocalReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadSFTPFileToLocalReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCopySFTPFileHisReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCopySFTPFileHisReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCopyCloudObjectStorageHisReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCopyCloudObjectStorageHisReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCiReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCiReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCiTasksReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCiTasksReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCiTaskDetailsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCiTaskDetailsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCiTemplateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCiTemplateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCiTemplateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCiTemplateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelCiTemplateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelCiTemplateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCiTemplateStepReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCiTemplateStepReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCiTemplateStepReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCiTemplateStepReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelCiTemplateStepReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelCiTemplateStepReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCopyContainerRegistryImageTaskReply_Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProgramLanguageReply_ProgramLanguage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListScanCodeRepositoryReply_ScanCodeRepo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUnitTestCodeRepositoryReply_UnitTestCodeRepo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBuildContainerImageReply_BuildContainerImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCiTasksReply_CiTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCiTaskDetailsReply_CiDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ci_v1_ci_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCiTemplateReply_CiTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ci_v1_ci_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   71,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ci_v1_ci_proto_goTypes,
		DependencyIndexes: file_ci_v1_ci_proto_depIdxs,
		MessageInfos:      file_ci_v1_ci_proto_msgTypes,
	}.Build()
	File_ci_v1_ci_proto = out.File
	file_ci_v1_ci_proto_rawDesc = nil
	file_ci_v1_ci_proto_goTypes = nil
	file_ci_v1_ci_proto_depIdxs = nil
}
