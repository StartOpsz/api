// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.14.0
// source: ci/v1/ci.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Ci_VerifyContainerRegistry_FullMethodName                 = "/ci.v1.ci/VerifyContainerRegistry"
	Ci_CopyContainerRegistryImage_FullMethodName              = "/ci.v1.ci/CopyContainerRegistryImage"
	Ci_ListCopyContainerRegistryImageTask_FullMethodName      = "/ci.v1.ci/ListCopyContainerRegistryImageTask"
	Ci_GetCopyContainerRegistryImageTask_FullMethodName       = "/ci.v1.ci/GetCopyContainerRegistryImageTask"
	Ci_InspectContainerImage_FullMethodName                   = "/ci.v1.ci/InspectContainerImage"
	Ci_ListContainerImageTags_FullMethodName                  = "/ci.v1.ci/ListContainerImageTags"
	Ci_ListCodeScanTemplate_FullMethodName                    = "/ci.v1.ci/ListCodeScanTemplate"
	Ci_GetCodeScanTemplate_FullMethodName                     = "/ci.v1.ci/GetCodeScanTemplate"
	Ci_DelCodeScanTemplate_FullMethodName                     = "/ci.v1.ci/DelCodeScanTemplate"
	Ci_CreateCodeScanPrivateTemplate_FullMethodName           = "/ci.v1.ci/CreateCodeScanPrivateTemplate"
	Ci_ExecCodeScanTask_FullMethodName                        = "/ci.v1.ci/ExecCodeScanTask"
	Ci_GetCodeScanTask_FullMethodName                         = "/ci.v1.ci/GetCodeScanTask"
	Ci_ListCodeScanTask_FullMethodName                        = "/ci.v1.ci/ListCodeScanTask"
	Ci_ListUnitTestTemplate_FullMethodName                    = "/ci.v1.ci/ListUnitTestTemplate"
	Ci_GetUnitTestTemplate_FullMethodName                     = "/ci.v1.ci/GetUnitTestTemplate"
	Ci_DelUnitTestTemplate_FullMethodName                     = "/ci.v1.ci/DelUnitTestTemplate"
	Ci_CreateUnitTestPrivateTemplate_FullMethodName           = "/ci.v1.ci/CreateUnitTestPrivateTemplate"
	Ci_ExecUnitTestTask_FullMethodName                        = "/ci.v1.ci/ExecUnitTestTask"
	Ci_GetUnitTestTask_FullMethodName                         = "/ci.v1.ci/GetUnitTestTask"
	Ci_ListUnitTestTask_FullMethodName                        = "/ci.v1.ci/ListUnitTestTask"
	Ci_ListBuildProgramTemplate_FullMethodName                = "/ci.v1.ci/ListBuildProgramTemplate"
	Ci_GetBuildProgramTemplate_FullMethodName                 = "/ci.v1.ci/GetBuildProgramTemplate"
	Ci_DelBuildProgramTemplate_FullMethodName                 = "/ci.v1.ci/DelBuildProgramTemplate"
	Ci_CreateBuildProgramPrivateTemplate_FullMethodName       = "/ci.v1.ci/CreateBuildProgramPrivateTemplate"
	Ci_ExecBuildProgramTask_FullMethodName                    = "/ci.v1.ci/ExecBuildProgramTask"
	Ci_GetBuildProgramTask_FullMethodName                     = "/ci.v1.ci/GetBuildProgramTask"
	Ci_ListBuildProgramTask_FullMethodName                    = "/ci.v1.ci/ListBuildProgramTask"
	Ci_ListBuildContainerImageTemplate_FullMethodName         = "/ci.v1.ci/ListBuildContainerImageTemplate"
	Ci_GetBuildContainerImageTemplate_FullMethodName          = "/ci.v1.ci/GetBuildContainerImageTemplate"
	Ci_DelBuildContainerImageTemplate_FullMethodName          = "/ci.v1.ci/DelBuildContainerImageTemplate"
	Ci_CreateBuildContainerImageTemplate_FullMethodName       = "/ci.v1.ci/CreateBuildContainerImageTemplate"
	Ci_ExecBuildContainerImageTask_FullMethodName             = "/ci.v1.ci/ExecBuildContainerImageTask"
	Ci_GetBuildContainerImageTask_FullMethodName              = "/ci.v1.ci/GetBuildContainerImageTask"
	Ci_ListBuildContainerImageTask_FullMethodName             = "/ci.v1.ci/ListBuildContainerImageTask"
	Ci_BuildContainerImage_FullMethodName                     = "/ci.v1.ci/BuildContainerImage"
	Ci_GetBuildContainerImage_FullMethodName                  = "/ci.v1.ci/GetBuildContainerImage"
	Ci_ListBuildContainerImage_FullMethodName                 = "/ci.v1.ci/ListBuildContainerImage"
	Ci_CreateUploadProgramPrivateTemplate_FullMethodName      = "/ci.v1.ci/CreateUploadProgramPrivateTemplate"
	Ci_GetUploadProgramPrivateTemplate_FullMethodName         = "/ci.v1.ci/GetUploadProgramPrivateTemplate"
	Ci_ListUploadProgramPrivateTemplate_FullMethodName        = "/ci.v1.ci/ListUploadProgramPrivateTemplate"
	Ci_UploadLocalFileToSFTP_FullMethodName                   = "/ci.v1.ci/UploadLocalFileToSFTP"
	Ci_DownloadSFTPFileToLocal_FullMethodName                 = "/ci.v1.ci/DownloadSFTPFileToLocal"
	Ci_UploadLocalFileToCloudObjectStorage_FullMethodName     = "/ci.v1.ci/UploadLocalFileToCloudObjectStorage"
	Ci_DownloadCloudObjectStorageObjectToLocal_FullMethodName = "/ci.v1.ci/DownloadCloudObjectStorageObjectToLocal"
	Ci_GetCopySFTPFileHis_FullMethodName                      = "/ci.v1.ci/GetCopySFTPFileHis"
	Ci_GetCopyCloudObjectStorageHis_FullMethodName            = "/ci.v1.ci/GetCopyCloudObjectStorageHis"
	Ci_CreateCiTemplate_FullMethodName                        = "/ci.v1.ci/CreateCiTemplate"
	Ci_ListCiTemplate_FullMethodName                          = "/ci.v1.ci/ListCiTemplate"
	Ci_DelCiTemplate_FullMethodName                           = "/ci.v1.ci/DelCiTemplate"
	Ci_AddCiTemplateStep_FullMethodName                       = "/ci.v1.ci/AddCiTemplateStep"
	Ci_ListCiTemplateStep_FullMethodName                      = "/ci.v1.ci/ListCiTemplateStep"
	Ci_DelCiTemplateStep_FullMethodName                       = "/ci.v1.ci/DelCiTemplateStep"
	Ci_RunCi_FullMethodName                                   = "/ci.v1.ci/RunCi"
	Ci_GetCiTasks_FullMethodName                              = "/ci.v1.ci/GetCiTasks"
	Ci_GetCiTaskDetails_FullMethodName                        = "/ci.v1.ci/GetCiTaskDetails"
)

// CiClient is the client API for Ci service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CiClient interface {
	// 容器镜像
	// 验证容器镜像仓库账户 - tool
	VerifyContainerRegistry(ctx context.Context, in *VerifyContainerRegistryReq, opts ...grpc.CallOption) (*VerifyContainerRegistryReply, error)
	// 同步容器镜像仓库中的镜像到其他仓库 (源可以匿名，目标不允许匿名)
	CopyContainerRegistryImage(ctx context.Context, in *CopyContainerRegistryImageReq, opts ...grpc.CallOption) (*CopyContainerRegistryImageReply, error)
	// 列出容器镜像仓库镜像同步任务
	ListCopyContainerRegistryImageTask(ctx context.Context, in *ListCopyContainerRegistryImageTaskReq, opts ...grpc.CallOption) (*ListCopyContainerRegistryImageTaskReply, error)
	// 获取容器镜像仓库镜像同步任务
	GetCopyContainerRegistryImageTask(ctx context.Context, in *GetCopyContainerRegistryImageTaskReq, opts ...grpc.CallOption) (*GetCopyContainerRegistryImageTaskReply, error)
	// 查看容器镜像信息
	InspectContainerImage(ctx context.Context, in *InspectContainerImageReq, opts ...grpc.CallOption) (*InspectContainerImageReply, error)
	// 列出容器镜像仓库 tags
	ListContainerImageTags(ctx context.Context, in *ListContainerImageTagsReq, opts ...grpc.CallOption) (*ListContainerImageTagsReply, error)
	// 1. 代码仓库代码扫描 - CI
	ListCodeScanTemplate(ctx context.Context, in *ListCodeScanTemplateReq, opts ...grpc.CallOption) (*ListCodeScanTemplateReply, error)
	GetCodeScanTemplate(ctx context.Context, in *GetCodeScanTemplateReq, opts ...grpc.CallOption) (*GetCodeScanTemplateReply, error)
	DelCodeScanTemplate(ctx context.Context, in *DelCodeScanTemplateReq, opts ...grpc.CallOption) (*DelCodeScanTemplateReply, error)
	CreateCodeScanPrivateTemplate(ctx context.Context, in *CreateCodeScanPrivateTemplateReq, opts ...grpc.CallOption) (*CreateCodeScanPrivateTemplateReply, error)
	ExecCodeScanTask(ctx context.Context, in *ExecCodeScanTaskReq, opts ...grpc.CallOption) (*ExecCodeScanTaskReply, error)
	GetCodeScanTask(ctx context.Context, in *GetCodeScanTaskReq, opts ...grpc.CallOption) (*GetCodeScanTaskReply, error)
	ListCodeScanTask(ctx context.Context, in *ListCodeScanTaskReq, opts ...grpc.CallOption) (*ListCodeScanTaskReply, error)
	// 2. 代码仓库单元测试 - CI
	ListUnitTestTemplate(ctx context.Context, in *ListUnitTestTemplateReq, opts ...grpc.CallOption) (*ListUnitTestTemplateReply, error)
	GetUnitTestTemplate(ctx context.Context, in *GetUnitTestTemplateReq, opts ...grpc.CallOption) (*GetUnitTestTemplateReply, error)
	DelUnitTestTemplate(ctx context.Context, in *DelUnitTestTemplateReq, opts ...grpc.CallOption) (*DelUnitTestTemplateReply, error)
	CreateUnitTestPrivateTemplate(ctx context.Context, in *CreateUnitTestPrivateTemplateReq, opts ...grpc.CallOption) (*CreateUnitTestPrivateTemplateReply, error)
	ExecUnitTestTask(ctx context.Context, in *ExecUnitTestTaskReq, opts ...grpc.CallOption) (*ExecUnitTestTaskReply, error)
	GetUnitTestTask(ctx context.Context, in *GetUnitTestTaskReq, opts ...grpc.CallOption) (*GetUnitTestTaskReply, error)
	ListUnitTestTask(ctx context.Context, in *ListUnitTestTaskReq, opts ...grpc.CallOption) (*ListUnitTestTaskReply, error)
	// 3. 构建程序 - CI
	ListBuildProgramTemplate(ctx context.Context, in *ListBuildProgramTemplateReq, opts ...grpc.CallOption) (*ListBuildProgramTemplateReply, error)
	GetBuildProgramTemplate(ctx context.Context, in *GetBuildProgramTemplateReq, opts ...grpc.CallOption) (*GetBuildProgramTemplateReply, error)
	DelBuildProgramTemplate(ctx context.Context, in *DelBuildProgramTemplateReq, opts ...grpc.CallOption) (*DelBuildProgramTemplateReply, error)
	CreateBuildProgramPrivateTemplate(ctx context.Context, in *CreateBuildProgramPrivateTemplateReq, opts ...grpc.CallOption) (*CreateBuildProgramPrivateTemplateReply, error)
	ExecBuildProgramTask(ctx context.Context, in *ExecBuildProgramTaskReq, opts ...grpc.CallOption) (*ExecBuildProgramTaskReply, error)
	GetBuildProgramTask(ctx context.Context, in *GetBuildProgramTaskReq, opts ...grpc.CallOption) (*GetBuildProgramTaskReply, error)
	ListBuildProgramTask(ctx context.Context, in *ListBuildProgramTaskReq, opts ...grpc.CallOption) (*ListBuildProgramTaskReply, error)
	// 4. 构建容器镜像 - CI - 暂未完成
	ListBuildContainerImageTemplate(ctx context.Context, in *ListBuildContainerImageTemplateReq, opts ...grpc.CallOption) (*ListBuildContainerImageTemplateReply, error)
	GetBuildContainerImageTemplate(ctx context.Context, in *GetBuildContainerImageTemplateReq, opts ...grpc.CallOption) (*GetBuildContainerImageTemplateReply, error)
	DelBuildContainerImageTemplate(ctx context.Context, in *DelBuildContainerImageTemplateReq, opts ...grpc.CallOption) (*DelBuildContainerImageTemplateReply, error)
	CreateBuildContainerImageTemplate(ctx context.Context, in *CreateBuildContainerImageTemplateReq, opts ...grpc.CallOption) (*CreateBuildContainerImageTemplateReply, error)
	ExecBuildContainerImageTask(ctx context.Context, in *ExecBuildContainerImageTaskReq, opts ...grpc.CallOption) (*ExecBuildContainerImageTaskReply, error)
	GetBuildContainerImageTask(ctx context.Context, in *GetBuildContainerImageTaskReq, opts ...grpc.CallOption) (*GetBuildContainerImageTaskReply, error)
	ListBuildContainerImageTask(ctx context.Context, in *ListBuildContainerImageTaskReq, opts ...grpc.CallOption) (*ListBuildContainerImageTaskReply, error)
	// 4. 构建容器镜像 - CI
	BuildContainerImage(ctx context.Context, in *BuildContainerImageReq, opts ...grpc.CallOption) (*BuildContainerImageReply, error)
	// 获取构建容器镜像任务
	GetBuildContainerImage(ctx context.Context, in *GetBuildContainerImageReq, opts ...grpc.CallOption) (*GetBuildContainerImageReply, error)
	// 列出构建容器镜像任务
	ListBuildContainerImage(ctx context.Context, in *ListBuildContainerImageReq, opts ...grpc.CallOption) (*ListBuildContainerImageReply, error)
	// 5. 程序上传 - CI
	// 创建上传程序模版
	CreateUploadProgramPrivateTemplate(ctx context.Context, in *CreateUploadProgramPrivateTemplateReq, opts ...grpc.CallOption) (*CreateUploadProgramPrivateTemplateReply, error)
	// 获取上传程序模版
	GetUploadProgramPrivateTemplate(ctx context.Context, in *GetUploadProgramPrivateTemplateReq, opts ...grpc.CallOption) (*GetUploadProgramPrivateTemplateReply, error)
	// 列出上传程序模版
	ListUploadProgramPrivateTemplate(ctx context.Context, in *ListUploadProgramPrivateTemplateReq, opts ...grpc.CallOption) (*ListUploadProgramPrivateTemplateReply, error)
	// 上传本地文件到SFTP服务器
	UploadLocalFileToSFTP(ctx context.Context, in *UploadLocalFileToSFTPReq, opts ...grpc.CallOption) (*UploadLocalFileToSFTPReply, error)
	// 下载SFTP服务器文件到本地文件
	DownloadSFTPFileToLocal(ctx context.Context, in *DownloadSFTPFileToLocalReq, opts ...grpc.CallOption) (*DownloadSFTPFileToLocalReply, error)
	// 上传本地文件到云对象存储
	UploadLocalFileToCloudObjectStorage(ctx context.Context, in *UploadLocalFileToCloudObjectStorageReq, opts ...grpc.CallOption) (*UploadLocalFileToCloudObjectStorageReply, error)
	// 下载云对象存储对象到本地文件
	DownloadCloudObjectStorageObjectToLocal(ctx context.Context, in *DownloadCloudObjectStorageObjectToLocalReq, opts ...grpc.CallOption) (*DownloadCloudObjectStorageObjectToLocalReply, error)
	// 获取SFTP文件操作历史
	GetCopySFTPFileHis(ctx context.Context, in *GetCopySFTPFileHisReq, opts ...grpc.CallOption) (*GetCopySFTPFileHisReply, error)
	// 获取云对象存储操作历史
	GetCopyCloudObjectStorageHis(ctx context.Context, in *GetCopyCloudObjectStorageHisReq, opts ...grpc.CallOption) (*GetCopyCloudObjectStorageHisReply, error)
	// 6. CI 模版
	CreateCiTemplate(ctx context.Context, in *CreateCiTemplateReq, opts ...grpc.CallOption) (*CreateCiTemplateReply, error)
	ListCiTemplate(ctx context.Context, in *ListCiTemplateReq, opts ...grpc.CallOption) (*ListCiTemplateReply, error)
	DelCiTemplate(ctx context.Context, in *DelCiTemplateReq, opts ...grpc.CallOption) (*DelCiTemplateReply, error)
	AddCiTemplateStep(ctx context.Context, in *AddCiTemplateStepReq, opts ...grpc.CallOption) (*AddCiTemplateStepReply, error)
	ListCiTemplateStep(ctx context.Context, in *ListCiTemplateStepReq, opts ...grpc.CallOption) (*ListCiTemplateStepReply, error)
	DelCiTemplateStep(ctx context.Context, in *DelCiTemplateStepReq, opts ...grpc.CallOption) (*DelCiTemplateStepReply, error)
	// 7. CI 任务
	// 执行 CI 任务
	RunCi(ctx context.Context, in *RunCiReq, opts ...grpc.CallOption) (*RunCiReply, error)
	// 查询执行 CI 任务结果
	GetCiTasks(ctx context.Context, in *GetCiTasksReq, opts ...grpc.CallOption) (*GetCiTasksReply, error)
	// 查询执行 CI 任务详情
	GetCiTaskDetails(ctx context.Context, in *GetCiTaskDetailsReq, opts ...grpc.CallOption) (*GetCiTaskDetailsReply, error)
}

type ciClient struct {
	cc grpc.ClientConnInterface
}

func NewCiClient(cc grpc.ClientConnInterface) CiClient {
	return &ciClient{cc}
}

func (c *ciClient) VerifyContainerRegistry(ctx context.Context, in *VerifyContainerRegistryReq, opts ...grpc.CallOption) (*VerifyContainerRegistryReply, error) {
	out := new(VerifyContainerRegistryReply)
	err := c.cc.Invoke(ctx, Ci_VerifyContainerRegistry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) CopyContainerRegistryImage(ctx context.Context, in *CopyContainerRegistryImageReq, opts ...grpc.CallOption) (*CopyContainerRegistryImageReply, error) {
	out := new(CopyContainerRegistryImageReply)
	err := c.cc.Invoke(ctx, Ci_CopyContainerRegistryImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) ListCopyContainerRegistryImageTask(ctx context.Context, in *ListCopyContainerRegistryImageTaskReq, opts ...grpc.CallOption) (*ListCopyContainerRegistryImageTaskReply, error) {
	out := new(ListCopyContainerRegistryImageTaskReply)
	err := c.cc.Invoke(ctx, Ci_ListCopyContainerRegistryImageTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) GetCopyContainerRegistryImageTask(ctx context.Context, in *GetCopyContainerRegistryImageTaskReq, opts ...grpc.CallOption) (*GetCopyContainerRegistryImageTaskReply, error) {
	out := new(GetCopyContainerRegistryImageTaskReply)
	err := c.cc.Invoke(ctx, Ci_GetCopyContainerRegistryImageTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) InspectContainerImage(ctx context.Context, in *InspectContainerImageReq, opts ...grpc.CallOption) (*InspectContainerImageReply, error) {
	out := new(InspectContainerImageReply)
	err := c.cc.Invoke(ctx, Ci_InspectContainerImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) ListContainerImageTags(ctx context.Context, in *ListContainerImageTagsReq, opts ...grpc.CallOption) (*ListContainerImageTagsReply, error) {
	out := new(ListContainerImageTagsReply)
	err := c.cc.Invoke(ctx, Ci_ListContainerImageTags_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) ListCodeScanTemplate(ctx context.Context, in *ListCodeScanTemplateReq, opts ...grpc.CallOption) (*ListCodeScanTemplateReply, error) {
	out := new(ListCodeScanTemplateReply)
	err := c.cc.Invoke(ctx, Ci_ListCodeScanTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) GetCodeScanTemplate(ctx context.Context, in *GetCodeScanTemplateReq, opts ...grpc.CallOption) (*GetCodeScanTemplateReply, error) {
	out := new(GetCodeScanTemplateReply)
	err := c.cc.Invoke(ctx, Ci_GetCodeScanTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) DelCodeScanTemplate(ctx context.Context, in *DelCodeScanTemplateReq, opts ...grpc.CallOption) (*DelCodeScanTemplateReply, error) {
	out := new(DelCodeScanTemplateReply)
	err := c.cc.Invoke(ctx, Ci_DelCodeScanTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) CreateCodeScanPrivateTemplate(ctx context.Context, in *CreateCodeScanPrivateTemplateReq, opts ...grpc.CallOption) (*CreateCodeScanPrivateTemplateReply, error) {
	out := new(CreateCodeScanPrivateTemplateReply)
	err := c.cc.Invoke(ctx, Ci_CreateCodeScanPrivateTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) ExecCodeScanTask(ctx context.Context, in *ExecCodeScanTaskReq, opts ...grpc.CallOption) (*ExecCodeScanTaskReply, error) {
	out := new(ExecCodeScanTaskReply)
	err := c.cc.Invoke(ctx, Ci_ExecCodeScanTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) GetCodeScanTask(ctx context.Context, in *GetCodeScanTaskReq, opts ...grpc.CallOption) (*GetCodeScanTaskReply, error) {
	out := new(GetCodeScanTaskReply)
	err := c.cc.Invoke(ctx, Ci_GetCodeScanTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) ListCodeScanTask(ctx context.Context, in *ListCodeScanTaskReq, opts ...grpc.CallOption) (*ListCodeScanTaskReply, error) {
	out := new(ListCodeScanTaskReply)
	err := c.cc.Invoke(ctx, Ci_ListCodeScanTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) ListUnitTestTemplate(ctx context.Context, in *ListUnitTestTemplateReq, opts ...grpc.CallOption) (*ListUnitTestTemplateReply, error) {
	out := new(ListUnitTestTemplateReply)
	err := c.cc.Invoke(ctx, Ci_ListUnitTestTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) GetUnitTestTemplate(ctx context.Context, in *GetUnitTestTemplateReq, opts ...grpc.CallOption) (*GetUnitTestTemplateReply, error) {
	out := new(GetUnitTestTemplateReply)
	err := c.cc.Invoke(ctx, Ci_GetUnitTestTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) DelUnitTestTemplate(ctx context.Context, in *DelUnitTestTemplateReq, opts ...grpc.CallOption) (*DelUnitTestTemplateReply, error) {
	out := new(DelUnitTestTemplateReply)
	err := c.cc.Invoke(ctx, Ci_DelUnitTestTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) CreateUnitTestPrivateTemplate(ctx context.Context, in *CreateUnitTestPrivateTemplateReq, opts ...grpc.CallOption) (*CreateUnitTestPrivateTemplateReply, error) {
	out := new(CreateUnitTestPrivateTemplateReply)
	err := c.cc.Invoke(ctx, Ci_CreateUnitTestPrivateTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) ExecUnitTestTask(ctx context.Context, in *ExecUnitTestTaskReq, opts ...grpc.CallOption) (*ExecUnitTestTaskReply, error) {
	out := new(ExecUnitTestTaskReply)
	err := c.cc.Invoke(ctx, Ci_ExecUnitTestTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) GetUnitTestTask(ctx context.Context, in *GetUnitTestTaskReq, opts ...grpc.CallOption) (*GetUnitTestTaskReply, error) {
	out := new(GetUnitTestTaskReply)
	err := c.cc.Invoke(ctx, Ci_GetUnitTestTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) ListUnitTestTask(ctx context.Context, in *ListUnitTestTaskReq, opts ...grpc.CallOption) (*ListUnitTestTaskReply, error) {
	out := new(ListUnitTestTaskReply)
	err := c.cc.Invoke(ctx, Ci_ListUnitTestTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) ListBuildProgramTemplate(ctx context.Context, in *ListBuildProgramTemplateReq, opts ...grpc.CallOption) (*ListBuildProgramTemplateReply, error) {
	out := new(ListBuildProgramTemplateReply)
	err := c.cc.Invoke(ctx, Ci_ListBuildProgramTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) GetBuildProgramTemplate(ctx context.Context, in *GetBuildProgramTemplateReq, opts ...grpc.CallOption) (*GetBuildProgramTemplateReply, error) {
	out := new(GetBuildProgramTemplateReply)
	err := c.cc.Invoke(ctx, Ci_GetBuildProgramTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) DelBuildProgramTemplate(ctx context.Context, in *DelBuildProgramTemplateReq, opts ...grpc.CallOption) (*DelBuildProgramTemplateReply, error) {
	out := new(DelBuildProgramTemplateReply)
	err := c.cc.Invoke(ctx, Ci_DelBuildProgramTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) CreateBuildProgramPrivateTemplate(ctx context.Context, in *CreateBuildProgramPrivateTemplateReq, opts ...grpc.CallOption) (*CreateBuildProgramPrivateTemplateReply, error) {
	out := new(CreateBuildProgramPrivateTemplateReply)
	err := c.cc.Invoke(ctx, Ci_CreateBuildProgramPrivateTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) ExecBuildProgramTask(ctx context.Context, in *ExecBuildProgramTaskReq, opts ...grpc.CallOption) (*ExecBuildProgramTaskReply, error) {
	out := new(ExecBuildProgramTaskReply)
	err := c.cc.Invoke(ctx, Ci_ExecBuildProgramTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) GetBuildProgramTask(ctx context.Context, in *GetBuildProgramTaskReq, opts ...grpc.CallOption) (*GetBuildProgramTaskReply, error) {
	out := new(GetBuildProgramTaskReply)
	err := c.cc.Invoke(ctx, Ci_GetBuildProgramTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) ListBuildProgramTask(ctx context.Context, in *ListBuildProgramTaskReq, opts ...grpc.CallOption) (*ListBuildProgramTaskReply, error) {
	out := new(ListBuildProgramTaskReply)
	err := c.cc.Invoke(ctx, Ci_ListBuildProgramTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) ListBuildContainerImageTemplate(ctx context.Context, in *ListBuildContainerImageTemplateReq, opts ...grpc.CallOption) (*ListBuildContainerImageTemplateReply, error) {
	out := new(ListBuildContainerImageTemplateReply)
	err := c.cc.Invoke(ctx, Ci_ListBuildContainerImageTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) GetBuildContainerImageTemplate(ctx context.Context, in *GetBuildContainerImageTemplateReq, opts ...grpc.CallOption) (*GetBuildContainerImageTemplateReply, error) {
	out := new(GetBuildContainerImageTemplateReply)
	err := c.cc.Invoke(ctx, Ci_GetBuildContainerImageTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) DelBuildContainerImageTemplate(ctx context.Context, in *DelBuildContainerImageTemplateReq, opts ...grpc.CallOption) (*DelBuildContainerImageTemplateReply, error) {
	out := new(DelBuildContainerImageTemplateReply)
	err := c.cc.Invoke(ctx, Ci_DelBuildContainerImageTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) CreateBuildContainerImageTemplate(ctx context.Context, in *CreateBuildContainerImageTemplateReq, opts ...grpc.CallOption) (*CreateBuildContainerImageTemplateReply, error) {
	out := new(CreateBuildContainerImageTemplateReply)
	err := c.cc.Invoke(ctx, Ci_CreateBuildContainerImageTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) ExecBuildContainerImageTask(ctx context.Context, in *ExecBuildContainerImageTaskReq, opts ...grpc.CallOption) (*ExecBuildContainerImageTaskReply, error) {
	out := new(ExecBuildContainerImageTaskReply)
	err := c.cc.Invoke(ctx, Ci_ExecBuildContainerImageTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) GetBuildContainerImageTask(ctx context.Context, in *GetBuildContainerImageTaskReq, opts ...grpc.CallOption) (*GetBuildContainerImageTaskReply, error) {
	out := new(GetBuildContainerImageTaskReply)
	err := c.cc.Invoke(ctx, Ci_GetBuildContainerImageTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) ListBuildContainerImageTask(ctx context.Context, in *ListBuildContainerImageTaskReq, opts ...grpc.CallOption) (*ListBuildContainerImageTaskReply, error) {
	out := new(ListBuildContainerImageTaskReply)
	err := c.cc.Invoke(ctx, Ci_ListBuildContainerImageTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) BuildContainerImage(ctx context.Context, in *BuildContainerImageReq, opts ...grpc.CallOption) (*BuildContainerImageReply, error) {
	out := new(BuildContainerImageReply)
	err := c.cc.Invoke(ctx, Ci_BuildContainerImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) GetBuildContainerImage(ctx context.Context, in *GetBuildContainerImageReq, opts ...grpc.CallOption) (*GetBuildContainerImageReply, error) {
	out := new(GetBuildContainerImageReply)
	err := c.cc.Invoke(ctx, Ci_GetBuildContainerImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) ListBuildContainerImage(ctx context.Context, in *ListBuildContainerImageReq, opts ...grpc.CallOption) (*ListBuildContainerImageReply, error) {
	out := new(ListBuildContainerImageReply)
	err := c.cc.Invoke(ctx, Ci_ListBuildContainerImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) CreateUploadProgramPrivateTemplate(ctx context.Context, in *CreateUploadProgramPrivateTemplateReq, opts ...grpc.CallOption) (*CreateUploadProgramPrivateTemplateReply, error) {
	out := new(CreateUploadProgramPrivateTemplateReply)
	err := c.cc.Invoke(ctx, Ci_CreateUploadProgramPrivateTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) GetUploadProgramPrivateTemplate(ctx context.Context, in *GetUploadProgramPrivateTemplateReq, opts ...grpc.CallOption) (*GetUploadProgramPrivateTemplateReply, error) {
	out := new(GetUploadProgramPrivateTemplateReply)
	err := c.cc.Invoke(ctx, Ci_GetUploadProgramPrivateTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) ListUploadProgramPrivateTemplate(ctx context.Context, in *ListUploadProgramPrivateTemplateReq, opts ...grpc.CallOption) (*ListUploadProgramPrivateTemplateReply, error) {
	out := new(ListUploadProgramPrivateTemplateReply)
	err := c.cc.Invoke(ctx, Ci_ListUploadProgramPrivateTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) UploadLocalFileToSFTP(ctx context.Context, in *UploadLocalFileToSFTPReq, opts ...grpc.CallOption) (*UploadLocalFileToSFTPReply, error) {
	out := new(UploadLocalFileToSFTPReply)
	err := c.cc.Invoke(ctx, Ci_UploadLocalFileToSFTP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) DownloadSFTPFileToLocal(ctx context.Context, in *DownloadSFTPFileToLocalReq, opts ...grpc.CallOption) (*DownloadSFTPFileToLocalReply, error) {
	out := new(DownloadSFTPFileToLocalReply)
	err := c.cc.Invoke(ctx, Ci_DownloadSFTPFileToLocal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) UploadLocalFileToCloudObjectStorage(ctx context.Context, in *UploadLocalFileToCloudObjectStorageReq, opts ...grpc.CallOption) (*UploadLocalFileToCloudObjectStorageReply, error) {
	out := new(UploadLocalFileToCloudObjectStorageReply)
	err := c.cc.Invoke(ctx, Ci_UploadLocalFileToCloudObjectStorage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) DownloadCloudObjectStorageObjectToLocal(ctx context.Context, in *DownloadCloudObjectStorageObjectToLocalReq, opts ...grpc.CallOption) (*DownloadCloudObjectStorageObjectToLocalReply, error) {
	out := new(DownloadCloudObjectStorageObjectToLocalReply)
	err := c.cc.Invoke(ctx, Ci_DownloadCloudObjectStorageObjectToLocal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) GetCopySFTPFileHis(ctx context.Context, in *GetCopySFTPFileHisReq, opts ...grpc.CallOption) (*GetCopySFTPFileHisReply, error) {
	out := new(GetCopySFTPFileHisReply)
	err := c.cc.Invoke(ctx, Ci_GetCopySFTPFileHis_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) GetCopyCloudObjectStorageHis(ctx context.Context, in *GetCopyCloudObjectStorageHisReq, opts ...grpc.CallOption) (*GetCopyCloudObjectStorageHisReply, error) {
	out := new(GetCopyCloudObjectStorageHisReply)
	err := c.cc.Invoke(ctx, Ci_GetCopyCloudObjectStorageHis_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) CreateCiTemplate(ctx context.Context, in *CreateCiTemplateReq, opts ...grpc.CallOption) (*CreateCiTemplateReply, error) {
	out := new(CreateCiTemplateReply)
	err := c.cc.Invoke(ctx, Ci_CreateCiTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) ListCiTemplate(ctx context.Context, in *ListCiTemplateReq, opts ...grpc.CallOption) (*ListCiTemplateReply, error) {
	out := new(ListCiTemplateReply)
	err := c.cc.Invoke(ctx, Ci_ListCiTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) DelCiTemplate(ctx context.Context, in *DelCiTemplateReq, opts ...grpc.CallOption) (*DelCiTemplateReply, error) {
	out := new(DelCiTemplateReply)
	err := c.cc.Invoke(ctx, Ci_DelCiTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) AddCiTemplateStep(ctx context.Context, in *AddCiTemplateStepReq, opts ...grpc.CallOption) (*AddCiTemplateStepReply, error) {
	out := new(AddCiTemplateStepReply)
	err := c.cc.Invoke(ctx, Ci_AddCiTemplateStep_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) ListCiTemplateStep(ctx context.Context, in *ListCiTemplateStepReq, opts ...grpc.CallOption) (*ListCiTemplateStepReply, error) {
	out := new(ListCiTemplateStepReply)
	err := c.cc.Invoke(ctx, Ci_ListCiTemplateStep_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) DelCiTemplateStep(ctx context.Context, in *DelCiTemplateStepReq, opts ...grpc.CallOption) (*DelCiTemplateStepReply, error) {
	out := new(DelCiTemplateStepReply)
	err := c.cc.Invoke(ctx, Ci_DelCiTemplateStep_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) RunCi(ctx context.Context, in *RunCiReq, opts ...grpc.CallOption) (*RunCiReply, error) {
	out := new(RunCiReply)
	err := c.cc.Invoke(ctx, Ci_RunCi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) GetCiTasks(ctx context.Context, in *GetCiTasksReq, opts ...grpc.CallOption) (*GetCiTasksReply, error) {
	out := new(GetCiTasksReply)
	err := c.cc.Invoke(ctx, Ci_GetCiTasks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) GetCiTaskDetails(ctx context.Context, in *GetCiTaskDetailsReq, opts ...grpc.CallOption) (*GetCiTaskDetailsReply, error) {
	out := new(GetCiTaskDetailsReply)
	err := c.cc.Invoke(ctx, Ci_GetCiTaskDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CiServer is the server API for Ci service.
// All implementations must embed UnimplementedCiServer
// for forward compatibility
type CiServer interface {
	// 容器镜像
	// 验证容器镜像仓库账户 - tool
	VerifyContainerRegistry(context.Context, *VerifyContainerRegistryReq) (*VerifyContainerRegistryReply, error)
	// 同步容器镜像仓库中的镜像到其他仓库 (源可以匿名，目标不允许匿名)
	CopyContainerRegistryImage(context.Context, *CopyContainerRegistryImageReq) (*CopyContainerRegistryImageReply, error)
	// 列出容器镜像仓库镜像同步任务
	ListCopyContainerRegistryImageTask(context.Context, *ListCopyContainerRegistryImageTaskReq) (*ListCopyContainerRegistryImageTaskReply, error)
	// 获取容器镜像仓库镜像同步任务
	GetCopyContainerRegistryImageTask(context.Context, *GetCopyContainerRegistryImageTaskReq) (*GetCopyContainerRegistryImageTaskReply, error)
	// 查看容器镜像信息
	InspectContainerImage(context.Context, *InspectContainerImageReq) (*InspectContainerImageReply, error)
	// 列出容器镜像仓库 tags
	ListContainerImageTags(context.Context, *ListContainerImageTagsReq) (*ListContainerImageTagsReply, error)
	// 1. 代码仓库代码扫描 - CI
	ListCodeScanTemplate(context.Context, *ListCodeScanTemplateReq) (*ListCodeScanTemplateReply, error)
	GetCodeScanTemplate(context.Context, *GetCodeScanTemplateReq) (*GetCodeScanTemplateReply, error)
	DelCodeScanTemplate(context.Context, *DelCodeScanTemplateReq) (*DelCodeScanTemplateReply, error)
	CreateCodeScanPrivateTemplate(context.Context, *CreateCodeScanPrivateTemplateReq) (*CreateCodeScanPrivateTemplateReply, error)
	ExecCodeScanTask(context.Context, *ExecCodeScanTaskReq) (*ExecCodeScanTaskReply, error)
	GetCodeScanTask(context.Context, *GetCodeScanTaskReq) (*GetCodeScanTaskReply, error)
	ListCodeScanTask(context.Context, *ListCodeScanTaskReq) (*ListCodeScanTaskReply, error)
	// 2. 代码仓库单元测试 - CI
	ListUnitTestTemplate(context.Context, *ListUnitTestTemplateReq) (*ListUnitTestTemplateReply, error)
	GetUnitTestTemplate(context.Context, *GetUnitTestTemplateReq) (*GetUnitTestTemplateReply, error)
	DelUnitTestTemplate(context.Context, *DelUnitTestTemplateReq) (*DelUnitTestTemplateReply, error)
	CreateUnitTestPrivateTemplate(context.Context, *CreateUnitTestPrivateTemplateReq) (*CreateUnitTestPrivateTemplateReply, error)
	ExecUnitTestTask(context.Context, *ExecUnitTestTaskReq) (*ExecUnitTestTaskReply, error)
	GetUnitTestTask(context.Context, *GetUnitTestTaskReq) (*GetUnitTestTaskReply, error)
	ListUnitTestTask(context.Context, *ListUnitTestTaskReq) (*ListUnitTestTaskReply, error)
	// 3. 构建程序 - CI
	ListBuildProgramTemplate(context.Context, *ListBuildProgramTemplateReq) (*ListBuildProgramTemplateReply, error)
	GetBuildProgramTemplate(context.Context, *GetBuildProgramTemplateReq) (*GetBuildProgramTemplateReply, error)
	DelBuildProgramTemplate(context.Context, *DelBuildProgramTemplateReq) (*DelBuildProgramTemplateReply, error)
	CreateBuildProgramPrivateTemplate(context.Context, *CreateBuildProgramPrivateTemplateReq) (*CreateBuildProgramPrivateTemplateReply, error)
	ExecBuildProgramTask(context.Context, *ExecBuildProgramTaskReq) (*ExecBuildProgramTaskReply, error)
	GetBuildProgramTask(context.Context, *GetBuildProgramTaskReq) (*GetBuildProgramTaskReply, error)
	ListBuildProgramTask(context.Context, *ListBuildProgramTaskReq) (*ListBuildProgramTaskReply, error)
	// 4. 构建容器镜像 - CI - 暂未完成
	ListBuildContainerImageTemplate(context.Context, *ListBuildContainerImageTemplateReq) (*ListBuildContainerImageTemplateReply, error)
	GetBuildContainerImageTemplate(context.Context, *GetBuildContainerImageTemplateReq) (*GetBuildContainerImageTemplateReply, error)
	DelBuildContainerImageTemplate(context.Context, *DelBuildContainerImageTemplateReq) (*DelBuildContainerImageTemplateReply, error)
	CreateBuildContainerImageTemplate(context.Context, *CreateBuildContainerImageTemplateReq) (*CreateBuildContainerImageTemplateReply, error)
	ExecBuildContainerImageTask(context.Context, *ExecBuildContainerImageTaskReq) (*ExecBuildContainerImageTaskReply, error)
	GetBuildContainerImageTask(context.Context, *GetBuildContainerImageTaskReq) (*GetBuildContainerImageTaskReply, error)
	ListBuildContainerImageTask(context.Context, *ListBuildContainerImageTaskReq) (*ListBuildContainerImageTaskReply, error)
	// 4. 构建容器镜像 - CI
	BuildContainerImage(context.Context, *BuildContainerImageReq) (*BuildContainerImageReply, error)
	// 获取构建容器镜像任务
	GetBuildContainerImage(context.Context, *GetBuildContainerImageReq) (*GetBuildContainerImageReply, error)
	// 列出构建容器镜像任务
	ListBuildContainerImage(context.Context, *ListBuildContainerImageReq) (*ListBuildContainerImageReply, error)
	// 5. 程序上传 - CI
	// 创建上传程序模版
	CreateUploadProgramPrivateTemplate(context.Context, *CreateUploadProgramPrivateTemplateReq) (*CreateUploadProgramPrivateTemplateReply, error)
	// 获取上传程序模版
	GetUploadProgramPrivateTemplate(context.Context, *GetUploadProgramPrivateTemplateReq) (*GetUploadProgramPrivateTemplateReply, error)
	// 列出上传程序模版
	ListUploadProgramPrivateTemplate(context.Context, *ListUploadProgramPrivateTemplateReq) (*ListUploadProgramPrivateTemplateReply, error)
	// 上传本地文件到SFTP服务器
	UploadLocalFileToSFTP(context.Context, *UploadLocalFileToSFTPReq) (*UploadLocalFileToSFTPReply, error)
	// 下载SFTP服务器文件到本地文件
	DownloadSFTPFileToLocal(context.Context, *DownloadSFTPFileToLocalReq) (*DownloadSFTPFileToLocalReply, error)
	// 上传本地文件到云对象存储
	UploadLocalFileToCloudObjectStorage(context.Context, *UploadLocalFileToCloudObjectStorageReq) (*UploadLocalFileToCloudObjectStorageReply, error)
	// 下载云对象存储对象到本地文件
	DownloadCloudObjectStorageObjectToLocal(context.Context, *DownloadCloudObjectStorageObjectToLocalReq) (*DownloadCloudObjectStorageObjectToLocalReply, error)
	// 获取SFTP文件操作历史
	GetCopySFTPFileHis(context.Context, *GetCopySFTPFileHisReq) (*GetCopySFTPFileHisReply, error)
	// 获取云对象存储操作历史
	GetCopyCloudObjectStorageHis(context.Context, *GetCopyCloudObjectStorageHisReq) (*GetCopyCloudObjectStorageHisReply, error)
	// 6. CI 模版
	CreateCiTemplate(context.Context, *CreateCiTemplateReq) (*CreateCiTemplateReply, error)
	ListCiTemplate(context.Context, *ListCiTemplateReq) (*ListCiTemplateReply, error)
	DelCiTemplate(context.Context, *DelCiTemplateReq) (*DelCiTemplateReply, error)
	AddCiTemplateStep(context.Context, *AddCiTemplateStepReq) (*AddCiTemplateStepReply, error)
	ListCiTemplateStep(context.Context, *ListCiTemplateStepReq) (*ListCiTemplateStepReply, error)
	DelCiTemplateStep(context.Context, *DelCiTemplateStepReq) (*DelCiTemplateStepReply, error)
	// 7. CI 任务
	// 执行 CI 任务
	RunCi(context.Context, *RunCiReq) (*RunCiReply, error)
	// 查询执行 CI 任务结果
	GetCiTasks(context.Context, *GetCiTasksReq) (*GetCiTasksReply, error)
	// 查询执行 CI 任务详情
	GetCiTaskDetails(context.Context, *GetCiTaskDetailsReq) (*GetCiTaskDetailsReply, error)
	mustEmbedUnimplementedCiServer()
}

// UnimplementedCiServer must be embedded to have forward compatible implementations.
type UnimplementedCiServer struct {
}

func (UnimplementedCiServer) VerifyContainerRegistry(context.Context, *VerifyContainerRegistryReq) (*VerifyContainerRegistryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyContainerRegistry not implemented")
}
func (UnimplementedCiServer) CopyContainerRegistryImage(context.Context, *CopyContainerRegistryImageReq) (*CopyContainerRegistryImageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyContainerRegistryImage not implemented")
}
func (UnimplementedCiServer) ListCopyContainerRegistryImageTask(context.Context, *ListCopyContainerRegistryImageTaskReq) (*ListCopyContainerRegistryImageTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCopyContainerRegistryImageTask not implemented")
}
func (UnimplementedCiServer) GetCopyContainerRegistryImageTask(context.Context, *GetCopyContainerRegistryImageTaskReq) (*GetCopyContainerRegistryImageTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCopyContainerRegistryImageTask not implemented")
}
func (UnimplementedCiServer) InspectContainerImage(context.Context, *InspectContainerImageReq) (*InspectContainerImageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InspectContainerImage not implemented")
}
func (UnimplementedCiServer) ListContainerImageTags(context.Context, *ListContainerImageTagsReq) (*ListContainerImageTagsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContainerImageTags not implemented")
}
func (UnimplementedCiServer) ListCodeScanTemplate(context.Context, *ListCodeScanTemplateReq) (*ListCodeScanTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCodeScanTemplate not implemented")
}
func (UnimplementedCiServer) GetCodeScanTemplate(context.Context, *GetCodeScanTemplateReq) (*GetCodeScanTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCodeScanTemplate not implemented")
}
func (UnimplementedCiServer) DelCodeScanTemplate(context.Context, *DelCodeScanTemplateReq) (*DelCodeScanTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelCodeScanTemplate not implemented")
}
func (UnimplementedCiServer) CreateCodeScanPrivateTemplate(context.Context, *CreateCodeScanPrivateTemplateReq) (*CreateCodeScanPrivateTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCodeScanPrivateTemplate not implemented")
}
func (UnimplementedCiServer) ExecCodeScanTask(context.Context, *ExecCodeScanTaskReq) (*ExecCodeScanTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecCodeScanTask not implemented")
}
func (UnimplementedCiServer) GetCodeScanTask(context.Context, *GetCodeScanTaskReq) (*GetCodeScanTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCodeScanTask not implemented")
}
func (UnimplementedCiServer) ListCodeScanTask(context.Context, *ListCodeScanTaskReq) (*ListCodeScanTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCodeScanTask not implemented")
}
func (UnimplementedCiServer) ListUnitTestTemplate(context.Context, *ListUnitTestTemplateReq) (*ListUnitTestTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUnitTestTemplate not implemented")
}
func (UnimplementedCiServer) GetUnitTestTemplate(context.Context, *GetUnitTestTemplateReq) (*GetUnitTestTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnitTestTemplate not implemented")
}
func (UnimplementedCiServer) DelUnitTestTemplate(context.Context, *DelUnitTestTemplateReq) (*DelUnitTestTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUnitTestTemplate not implemented")
}
func (UnimplementedCiServer) CreateUnitTestPrivateTemplate(context.Context, *CreateUnitTestPrivateTemplateReq) (*CreateUnitTestPrivateTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUnitTestPrivateTemplate not implemented")
}
func (UnimplementedCiServer) ExecUnitTestTask(context.Context, *ExecUnitTestTaskReq) (*ExecUnitTestTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecUnitTestTask not implemented")
}
func (UnimplementedCiServer) GetUnitTestTask(context.Context, *GetUnitTestTaskReq) (*GetUnitTestTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnitTestTask not implemented")
}
func (UnimplementedCiServer) ListUnitTestTask(context.Context, *ListUnitTestTaskReq) (*ListUnitTestTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUnitTestTask not implemented")
}
func (UnimplementedCiServer) ListBuildProgramTemplate(context.Context, *ListBuildProgramTemplateReq) (*ListBuildProgramTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBuildProgramTemplate not implemented")
}
func (UnimplementedCiServer) GetBuildProgramTemplate(context.Context, *GetBuildProgramTemplateReq) (*GetBuildProgramTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuildProgramTemplate not implemented")
}
func (UnimplementedCiServer) DelBuildProgramTemplate(context.Context, *DelBuildProgramTemplateReq) (*DelBuildProgramTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelBuildProgramTemplate not implemented")
}
func (UnimplementedCiServer) CreateBuildProgramPrivateTemplate(context.Context, *CreateBuildProgramPrivateTemplateReq) (*CreateBuildProgramPrivateTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBuildProgramPrivateTemplate not implemented")
}
func (UnimplementedCiServer) ExecBuildProgramTask(context.Context, *ExecBuildProgramTaskReq) (*ExecBuildProgramTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecBuildProgramTask not implemented")
}
func (UnimplementedCiServer) GetBuildProgramTask(context.Context, *GetBuildProgramTaskReq) (*GetBuildProgramTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuildProgramTask not implemented")
}
func (UnimplementedCiServer) ListBuildProgramTask(context.Context, *ListBuildProgramTaskReq) (*ListBuildProgramTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBuildProgramTask not implemented")
}
func (UnimplementedCiServer) ListBuildContainerImageTemplate(context.Context, *ListBuildContainerImageTemplateReq) (*ListBuildContainerImageTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBuildContainerImageTemplate not implemented")
}
func (UnimplementedCiServer) GetBuildContainerImageTemplate(context.Context, *GetBuildContainerImageTemplateReq) (*GetBuildContainerImageTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuildContainerImageTemplate not implemented")
}
func (UnimplementedCiServer) DelBuildContainerImageTemplate(context.Context, *DelBuildContainerImageTemplateReq) (*DelBuildContainerImageTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelBuildContainerImageTemplate not implemented")
}
func (UnimplementedCiServer) CreateBuildContainerImageTemplate(context.Context, *CreateBuildContainerImageTemplateReq) (*CreateBuildContainerImageTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBuildContainerImageTemplate not implemented")
}
func (UnimplementedCiServer) ExecBuildContainerImageTask(context.Context, *ExecBuildContainerImageTaskReq) (*ExecBuildContainerImageTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecBuildContainerImageTask not implemented")
}
func (UnimplementedCiServer) GetBuildContainerImageTask(context.Context, *GetBuildContainerImageTaskReq) (*GetBuildContainerImageTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuildContainerImageTask not implemented")
}
func (UnimplementedCiServer) ListBuildContainerImageTask(context.Context, *ListBuildContainerImageTaskReq) (*ListBuildContainerImageTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBuildContainerImageTask not implemented")
}
func (UnimplementedCiServer) BuildContainerImage(context.Context, *BuildContainerImageReq) (*BuildContainerImageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildContainerImage not implemented")
}
func (UnimplementedCiServer) GetBuildContainerImage(context.Context, *GetBuildContainerImageReq) (*GetBuildContainerImageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuildContainerImage not implemented")
}
func (UnimplementedCiServer) ListBuildContainerImage(context.Context, *ListBuildContainerImageReq) (*ListBuildContainerImageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBuildContainerImage not implemented")
}
func (UnimplementedCiServer) CreateUploadProgramPrivateTemplate(context.Context, *CreateUploadProgramPrivateTemplateReq) (*CreateUploadProgramPrivateTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUploadProgramPrivateTemplate not implemented")
}
func (UnimplementedCiServer) GetUploadProgramPrivateTemplate(context.Context, *GetUploadProgramPrivateTemplateReq) (*GetUploadProgramPrivateTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUploadProgramPrivateTemplate not implemented")
}
func (UnimplementedCiServer) ListUploadProgramPrivateTemplate(context.Context, *ListUploadProgramPrivateTemplateReq) (*ListUploadProgramPrivateTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUploadProgramPrivateTemplate not implemented")
}
func (UnimplementedCiServer) UploadLocalFileToSFTP(context.Context, *UploadLocalFileToSFTPReq) (*UploadLocalFileToSFTPReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadLocalFileToSFTP not implemented")
}
func (UnimplementedCiServer) DownloadSFTPFileToLocal(context.Context, *DownloadSFTPFileToLocalReq) (*DownloadSFTPFileToLocalReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadSFTPFileToLocal not implemented")
}
func (UnimplementedCiServer) UploadLocalFileToCloudObjectStorage(context.Context, *UploadLocalFileToCloudObjectStorageReq) (*UploadLocalFileToCloudObjectStorageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadLocalFileToCloudObjectStorage not implemented")
}
func (UnimplementedCiServer) DownloadCloudObjectStorageObjectToLocal(context.Context, *DownloadCloudObjectStorageObjectToLocalReq) (*DownloadCloudObjectStorageObjectToLocalReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadCloudObjectStorageObjectToLocal not implemented")
}
func (UnimplementedCiServer) GetCopySFTPFileHis(context.Context, *GetCopySFTPFileHisReq) (*GetCopySFTPFileHisReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCopySFTPFileHis not implemented")
}
func (UnimplementedCiServer) GetCopyCloudObjectStorageHis(context.Context, *GetCopyCloudObjectStorageHisReq) (*GetCopyCloudObjectStorageHisReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCopyCloudObjectStorageHis not implemented")
}
func (UnimplementedCiServer) CreateCiTemplate(context.Context, *CreateCiTemplateReq) (*CreateCiTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCiTemplate not implemented")
}
func (UnimplementedCiServer) ListCiTemplate(context.Context, *ListCiTemplateReq) (*ListCiTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCiTemplate not implemented")
}
func (UnimplementedCiServer) DelCiTemplate(context.Context, *DelCiTemplateReq) (*DelCiTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelCiTemplate not implemented")
}
func (UnimplementedCiServer) AddCiTemplateStep(context.Context, *AddCiTemplateStepReq) (*AddCiTemplateStepReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCiTemplateStep not implemented")
}
func (UnimplementedCiServer) ListCiTemplateStep(context.Context, *ListCiTemplateStepReq) (*ListCiTemplateStepReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCiTemplateStep not implemented")
}
func (UnimplementedCiServer) DelCiTemplateStep(context.Context, *DelCiTemplateStepReq) (*DelCiTemplateStepReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelCiTemplateStep not implemented")
}
func (UnimplementedCiServer) RunCi(context.Context, *RunCiReq) (*RunCiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunCi not implemented")
}
func (UnimplementedCiServer) GetCiTasks(context.Context, *GetCiTasksReq) (*GetCiTasksReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCiTasks not implemented")
}
func (UnimplementedCiServer) GetCiTaskDetails(context.Context, *GetCiTaskDetailsReq) (*GetCiTaskDetailsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCiTaskDetails not implemented")
}
func (UnimplementedCiServer) mustEmbedUnimplementedCiServer() {}

// UnsafeCiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CiServer will
// result in compilation errors.
type UnsafeCiServer interface {
	mustEmbedUnimplementedCiServer()
}

func RegisterCiServer(s grpc.ServiceRegistrar, srv CiServer) {
	s.RegisterService(&Ci_ServiceDesc, srv)
}

func _Ci_VerifyContainerRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyContainerRegistryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).VerifyContainerRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_VerifyContainerRegistry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).VerifyContainerRegistry(ctx, req.(*VerifyContainerRegistryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_CopyContainerRegistryImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyContainerRegistryImageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).CopyContainerRegistryImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_CopyContainerRegistryImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).CopyContainerRegistryImage(ctx, req.(*CopyContainerRegistryImageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_ListCopyContainerRegistryImageTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCopyContainerRegistryImageTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).ListCopyContainerRegistryImageTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_ListCopyContainerRegistryImageTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).ListCopyContainerRegistryImageTask(ctx, req.(*ListCopyContainerRegistryImageTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_GetCopyContainerRegistryImageTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCopyContainerRegistryImageTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).GetCopyContainerRegistryImageTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_GetCopyContainerRegistryImageTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).GetCopyContainerRegistryImageTask(ctx, req.(*GetCopyContainerRegistryImageTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_InspectContainerImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InspectContainerImageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).InspectContainerImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_InspectContainerImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).InspectContainerImage(ctx, req.(*InspectContainerImageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_ListContainerImageTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContainerImageTagsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).ListContainerImageTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_ListContainerImageTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).ListContainerImageTags(ctx, req.(*ListContainerImageTagsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_ListCodeScanTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCodeScanTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).ListCodeScanTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_ListCodeScanTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).ListCodeScanTemplate(ctx, req.(*ListCodeScanTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_GetCodeScanTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCodeScanTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).GetCodeScanTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_GetCodeScanTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).GetCodeScanTemplate(ctx, req.(*GetCodeScanTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_DelCodeScanTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelCodeScanTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).DelCodeScanTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_DelCodeScanTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).DelCodeScanTemplate(ctx, req.(*DelCodeScanTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_CreateCodeScanPrivateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCodeScanPrivateTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).CreateCodeScanPrivateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_CreateCodeScanPrivateTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).CreateCodeScanPrivateTemplate(ctx, req.(*CreateCodeScanPrivateTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_ExecCodeScanTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecCodeScanTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).ExecCodeScanTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_ExecCodeScanTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).ExecCodeScanTask(ctx, req.(*ExecCodeScanTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_GetCodeScanTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCodeScanTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).GetCodeScanTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_GetCodeScanTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).GetCodeScanTask(ctx, req.(*GetCodeScanTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_ListCodeScanTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCodeScanTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).ListCodeScanTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_ListCodeScanTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).ListCodeScanTask(ctx, req.(*ListCodeScanTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_ListUnitTestTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUnitTestTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).ListUnitTestTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_ListUnitTestTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).ListUnitTestTemplate(ctx, req.(*ListUnitTestTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_GetUnitTestTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnitTestTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).GetUnitTestTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_GetUnitTestTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).GetUnitTestTemplate(ctx, req.(*GetUnitTestTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_DelUnitTestTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelUnitTestTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).DelUnitTestTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_DelUnitTestTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).DelUnitTestTemplate(ctx, req.(*DelUnitTestTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_CreateUnitTestPrivateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUnitTestPrivateTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).CreateUnitTestPrivateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_CreateUnitTestPrivateTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).CreateUnitTestPrivateTemplate(ctx, req.(*CreateUnitTestPrivateTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_ExecUnitTestTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecUnitTestTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).ExecUnitTestTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_ExecUnitTestTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).ExecUnitTestTask(ctx, req.(*ExecUnitTestTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_GetUnitTestTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnitTestTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).GetUnitTestTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_GetUnitTestTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).GetUnitTestTask(ctx, req.(*GetUnitTestTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_ListUnitTestTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUnitTestTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).ListUnitTestTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_ListUnitTestTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).ListUnitTestTask(ctx, req.(*ListUnitTestTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_ListBuildProgramTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBuildProgramTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).ListBuildProgramTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_ListBuildProgramTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).ListBuildProgramTemplate(ctx, req.(*ListBuildProgramTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_GetBuildProgramTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBuildProgramTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).GetBuildProgramTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_GetBuildProgramTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).GetBuildProgramTemplate(ctx, req.(*GetBuildProgramTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_DelBuildProgramTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelBuildProgramTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).DelBuildProgramTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_DelBuildProgramTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).DelBuildProgramTemplate(ctx, req.(*DelBuildProgramTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_CreateBuildProgramPrivateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBuildProgramPrivateTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).CreateBuildProgramPrivateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_CreateBuildProgramPrivateTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).CreateBuildProgramPrivateTemplate(ctx, req.(*CreateBuildProgramPrivateTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_ExecBuildProgramTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecBuildProgramTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).ExecBuildProgramTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_ExecBuildProgramTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).ExecBuildProgramTask(ctx, req.(*ExecBuildProgramTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_GetBuildProgramTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBuildProgramTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).GetBuildProgramTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_GetBuildProgramTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).GetBuildProgramTask(ctx, req.(*GetBuildProgramTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_ListBuildProgramTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBuildProgramTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).ListBuildProgramTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_ListBuildProgramTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).ListBuildProgramTask(ctx, req.(*ListBuildProgramTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_ListBuildContainerImageTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBuildContainerImageTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).ListBuildContainerImageTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_ListBuildContainerImageTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).ListBuildContainerImageTemplate(ctx, req.(*ListBuildContainerImageTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_GetBuildContainerImageTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBuildContainerImageTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).GetBuildContainerImageTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_GetBuildContainerImageTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).GetBuildContainerImageTemplate(ctx, req.(*GetBuildContainerImageTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_DelBuildContainerImageTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelBuildContainerImageTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).DelBuildContainerImageTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_DelBuildContainerImageTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).DelBuildContainerImageTemplate(ctx, req.(*DelBuildContainerImageTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_CreateBuildContainerImageTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBuildContainerImageTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).CreateBuildContainerImageTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_CreateBuildContainerImageTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).CreateBuildContainerImageTemplate(ctx, req.(*CreateBuildContainerImageTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_ExecBuildContainerImageTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecBuildContainerImageTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).ExecBuildContainerImageTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_ExecBuildContainerImageTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).ExecBuildContainerImageTask(ctx, req.(*ExecBuildContainerImageTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_GetBuildContainerImageTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBuildContainerImageTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).GetBuildContainerImageTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_GetBuildContainerImageTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).GetBuildContainerImageTask(ctx, req.(*GetBuildContainerImageTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_ListBuildContainerImageTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBuildContainerImageTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).ListBuildContainerImageTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_ListBuildContainerImageTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).ListBuildContainerImageTask(ctx, req.(*ListBuildContainerImageTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_BuildContainerImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildContainerImageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).BuildContainerImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_BuildContainerImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).BuildContainerImage(ctx, req.(*BuildContainerImageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_GetBuildContainerImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBuildContainerImageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).GetBuildContainerImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_GetBuildContainerImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).GetBuildContainerImage(ctx, req.(*GetBuildContainerImageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_ListBuildContainerImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBuildContainerImageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).ListBuildContainerImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_ListBuildContainerImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).ListBuildContainerImage(ctx, req.(*ListBuildContainerImageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_CreateUploadProgramPrivateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUploadProgramPrivateTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).CreateUploadProgramPrivateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_CreateUploadProgramPrivateTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).CreateUploadProgramPrivateTemplate(ctx, req.(*CreateUploadProgramPrivateTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_GetUploadProgramPrivateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUploadProgramPrivateTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).GetUploadProgramPrivateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_GetUploadProgramPrivateTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).GetUploadProgramPrivateTemplate(ctx, req.(*GetUploadProgramPrivateTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_ListUploadProgramPrivateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUploadProgramPrivateTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).ListUploadProgramPrivateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_ListUploadProgramPrivateTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).ListUploadProgramPrivateTemplate(ctx, req.(*ListUploadProgramPrivateTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_UploadLocalFileToSFTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadLocalFileToSFTPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).UploadLocalFileToSFTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_UploadLocalFileToSFTP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).UploadLocalFileToSFTP(ctx, req.(*UploadLocalFileToSFTPReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_DownloadSFTPFileToLocal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadSFTPFileToLocalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).DownloadSFTPFileToLocal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_DownloadSFTPFileToLocal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).DownloadSFTPFileToLocal(ctx, req.(*DownloadSFTPFileToLocalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_UploadLocalFileToCloudObjectStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadLocalFileToCloudObjectStorageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).UploadLocalFileToCloudObjectStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_UploadLocalFileToCloudObjectStorage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).UploadLocalFileToCloudObjectStorage(ctx, req.(*UploadLocalFileToCloudObjectStorageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_DownloadCloudObjectStorageObjectToLocal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadCloudObjectStorageObjectToLocalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).DownloadCloudObjectStorageObjectToLocal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_DownloadCloudObjectStorageObjectToLocal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).DownloadCloudObjectStorageObjectToLocal(ctx, req.(*DownloadCloudObjectStorageObjectToLocalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_GetCopySFTPFileHis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCopySFTPFileHisReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).GetCopySFTPFileHis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_GetCopySFTPFileHis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).GetCopySFTPFileHis(ctx, req.(*GetCopySFTPFileHisReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_GetCopyCloudObjectStorageHis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCopyCloudObjectStorageHisReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).GetCopyCloudObjectStorageHis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_GetCopyCloudObjectStorageHis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).GetCopyCloudObjectStorageHis(ctx, req.(*GetCopyCloudObjectStorageHisReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_CreateCiTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCiTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).CreateCiTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_CreateCiTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).CreateCiTemplate(ctx, req.(*CreateCiTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_ListCiTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCiTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).ListCiTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_ListCiTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).ListCiTemplate(ctx, req.(*ListCiTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_DelCiTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelCiTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).DelCiTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_DelCiTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).DelCiTemplate(ctx, req.(*DelCiTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_AddCiTemplateStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCiTemplateStepReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).AddCiTemplateStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_AddCiTemplateStep_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).AddCiTemplateStep(ctx, req.(*AddCiTemplateStepReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_ListCiTemplateStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCiTemplateStepReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).ListCiTemplateStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_ListCiTemplateStep_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).ListCiTemplateStep(ctx, req.(*ListCiTemplateStepReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_DelCiTemplateStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelCiTemplateStepReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).DelCiTemplateStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_DelCiTemplateStep_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).DelCiTemplateStep(ctx, req.(*DelCiTemplateStepReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_RunCi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunCiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).RunCi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_RunCi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).RunCi(ctx, req.(*RunCiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_GetCiTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCiTasksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).GetCiTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_GetCiTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).GetCiTasks(ctx, req.(*GetCiTasksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_GetCiTaskDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCiTaskDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).GetCiTaskDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_GetCiTaskDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).GetCiTaskDetails(ctx, req.(*GetCiTaskDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Ci_ServiceDesc is the grpc.ServiceDesc for Ci service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ci_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ci.v1.ci",
	HandlerType: (*CiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyContainerRegistry",
			Handler:    _Ci_VerifyContainerRegistry_Handler,
		},
		{
			MethodName: "CopyContainerRegistryImage",
			Handler:    _Ci_CopyContainerRegistryImage_Handler,
		},
		{
			MethodName: "ListCopyContainerRegistryImageTask",
			Handler:    _Ci_ListCopyContainerRegistryImageTask_Handler,
		},
		{
			MethodName: "GetCopyContainerRegistryImageTask",
			Handler:    _Ci_GetCopyContainerRegistryImageTask_Handler,
		},
		{
			MethodName: "InspectContainerImage",
			Handler:    _Ci_InspectContainerImage_Handler,
		},
		{
			MethodName: "ListContainerImageTags",
			Handler:    _Ci_ListContainerImageTags_Handler,
		},
		{
			MethodName: "ListCodeScanTemplate",
			Handler:    _Ci_ListCodeScanTemplate_Handler,
		},
		{
			MethodName: "GetCodeScanTemplate",
			Handler:    _Ci_GetCodeScanTemplate_Handler,
		},
		{
			MethodName: "DelCodeScanTemplate",
			Handler:    _Ci_DelCodeScanTemplate_Handler,
		},
		{
			MethodName: "CreateCodeScanPrivateTemplate",
			Handler:    _Ci_CreateCodeScanPrivateTemplate_Handler,
		},
		{
			MethodName: "ExecCodeScanTask",
			Handler:    _Ci_ExecCodeScanTask_Handler,
		},
		{
			MethodName: "GetCodeScanTask",
			Handler:    _Ci_GetCodeScanTask_Handler,
		},
		{
			MethodName: "ListCodeScanTask",
			Handler:    _Ci_ListCodeScanTask_Handler,
		},
		{
			MethodName: "ListUnitTestTemplate",
			Handler:    _Ci_ListUnitTestTemplate_Handler,
		},
		{
			MethodName: "GetUnitTestTemplate",
			Handler:    _Ci_GetUnitTestTemplate_Handler,
		},
		{
			MethodName: "DelUnitTestTemplate",
			Handler:    _Ci_DelUnitTestTemplate_Handler,
		},
		{
			MethodName: "CreateUnitTestPrivateTemplate",
			Handler:    _Ci_CreateUnitTestPrivateTemplate_Handler,
		},
		{
			MethodName: "ExecUnitTestTask",
			Handler:    _Ci_ExecUnitTestTask_Handler,
		},
		{
			MethodName: "GetUnitTestTask",
			Handler:    _Ci_GetUnitTestTask_Handler,
		},
		{
			MethodName: "ListUnitTestTask",
			Handler:    _Ci_ListUnitTestTask_Handler,
		},
		{
			MethodName: "ListBuildProgramTemplate",
			Handler:    _Ci_ListBuildProgramTemplate_Handler,
		},
		{
			MethodName: "GetBuildProgramTemplate",
			Handler:    _Ci_GetBuildProgramTemplate_Handler,
		},
		{
			MethodName: "DelBuildProgramTemplate",
			Handler:    _Ci_DelBuildProgramTemplate_Handler,
		},
		{
			MethodName: "CreateBuildProgramPrivateTemplate",
			Handler:    _Ci_CreateBuildProgramPrivateTemplate_Handler,
		},
		{
			MethodName: "ExecBuildProgramTask",
			Handler:    _Ci_ExecBuildProgramTask_Handler,
		},
		{
			MethodName: "GetBuildProgramTask",
			Handler:    _Ci_GetBuildProgramTask_Handler,
		},
		{
			MethodName: "ListBuildProgramTask",
			Handler:    _Ci_ListBuildProgramTask_Handler,
		},
		{
			MethodName: "ListBuildContainerImageTemplate",
			Handler:    _Ci_ListBuildContainerImageTemplate_Handler,
		},
		{
			MethodName: "GetBuildContainerImageTemplate",
			Handler:    _Ci_GetBuildContainerImageTemplate_Handler,
		},
		{
			MethodName: "DelBuildContainerImageTemplate",
			Handler:    _Ci_DelBuildContainerImageTemplate_Handler,
		},
		{
			MethodName: "CreateBuildContainerImageTemplate",
			Handler:    _Ci_CreateBuildContainerImageTemplate_Handler,
		},
		{
			MethodName: "ExecBuildContainerImageTask",
			Handler:    _Ci_ExecBuildContainerImageTask_Handler,
		},
		{
			MethodName: "GetBuildContainerImageTask",
			Handler:    _Ci_GetBuildContainerImageTask_Handler,
		},
		{
			MethodName: "ListBuildContainerImageTask",
			Handler:    _Ci_ListBuildContainerImageTask_Handler,
		},
		{
			MethodName: "BuildContainerImage",
			Handler:    _Ci_BuildContainerImage_Handler,
		},
		{
			MethodName: "GetBuildContainerImage",
			Handler:    _Ci_GetBuildContainerImage_Handler,
		},
		{
			MethodName: "ListBuildContainerImage",
			Handler:    _Ci_ListBuildContainerImage_Handler,
		},
		{
			MethodName: "CreateUploadProgramPrivateTemplate",
			Handler:    _Ci_CreateUploadProgramPrivateTemplate_Handler,
		},
		{
			MethodName: "GetUploadProgramPrivateTemplate",
			Handler:    _Ci_GetUploadProgramPrivateTemplate_Handler,
		},
		{
			MethodName: "ListUploadProgramPrivateTemplate",
			Handler:    _Ci_ListUploadProgramPrivateTemplate_Handler,
		},
		{
			MethodName: "UploadLocalFileToSFTP",
			Handler:    _Ci_UploadLocalFileToSFTP_Handler,
		},
		{
			MethodName: "DownloadSFTPFileToLocal",
			Handler:    _Ci_DownloadSFTPFileToLocal_Handler,
		},
		{
			MethodName: "UploadLocalFileToCloudObjectStorage",
			Handler:    _Ci_UploadLocalFileToCloudObjectStorage_Handler,
		},
		{
			MethodName: "DownloadCloudObjectStorageObjectToLocal",
			Handler:    _Ci_DownloadCloudObjectStorageObjectToLocal_Handler,
		},
		{
			MethodName: "GetCopySFTPFileHis",
			Handler:    _Ci_GetCopySFTPFileHis_Handler,
		},
		{
			MethodName: "GetCopyCloudObjectStorageHis",
			Handler:    _Ci_GetCopyCloudObjectStorageHis_Handler,
		},
		{
			MethodName: "CreateCiTemplate",
			Handler:    _Ci_CreateCiTemplate_Handler,
		},
		{
			MethodName: "ListCiTemplate",
			Handler:    _Ci_ListCiTemplate_Handler,
		},
		{
			MethodName: "DelCiTemplate",
			Handler:    _Ci_DelCiTemplate_Handler,
		},
		{
			MethodName: "AddCiTemplateStep",
			Handler:    _Ci_AddCiTemplateStep_Handler,
		},
		{
			MethodName: "ListCiTemplateStep",
			Handler:    _Ci_ListCiTemplateStep_Handler,
		},
		{
			MethodName: "DelCiTemplateStep",
			Handler:    _Ci_DelCiTemplateStep_Handler,
		},
		{
			MethodName: "RunCi",
			Handler:    _Ci_RunCi_Handler,
		},
		{
			MethodName: "GetCiTasks",
			Handler:    _Ci_GetCiTasks_Handler,
		},
		{
			MethodName: "GetCiTaskDetails",
			Handler:    _Ci_GetCiTaskDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ci/v1/ci.proto",
}
