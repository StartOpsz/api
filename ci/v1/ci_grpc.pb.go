// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.14.0
// source: ci/v1/ci.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Ci_VerifyContainerRegistry_FullMethodName                 = "/ci.v1.ci/VerifyContainerRegistry"
	Ci_CopyContainerRegistryImage_FullMethodName              = "/ci.v1.ci/CopyContainerRegistryImage"
	Ci_ListCopyContainerRegistryImageTask_FullMethodName      = "/ci.v1.ci/ListCopyContainerRegistryImageTask"
	Ci_GetCopyContainerRegistryImageTask_FullMethodName       = "/ci.v1.ci/GetCopyContainerRegistryImageTask"
	Ci_InspectContainerImage_FullMethodName                   = "/ci.v1.ci/InspectContainerImage"
	Ci_ListContainerImageTags_FullMethodName                  = "/ci.v1.ci/ListContainerImageTags"
	Ci_BuildContainerImage_FullMethodName                     = "/ci.v1.ci/BuildContainerImage"
	Ci_GetBuildContainerImage_FullMethodName                  = "/ci.v1.ci/GetBuildContainerImage"
	Ci_ListBuildContainerImage_FullMethodName                 = "/ci.v1.ci/ListBuildContainerImage"
	Ci_ListProgramLanguage_FullMethodName                     = "/ci.v1.ci/ListProgramLanguage"
	Ci_ScanCodeRepository_FullMethodName                      = "/ci.v1.ci/ScanCodeRepository"
	Ci_GetScanCodeRepository_FullMethodName                   = "/ci.v1.ci/GetScanCodeRepository"
	Ci_ListScanCodeRepository_FullMethodName                  = "/ci.v1.ci/ListScanCodeRepository"
	Ci_UnitTestCodeRepository_FullMethodName                  = "/ci.v1.ci/UnitTestCodeRepository"
	Ci_GetUnitTestCodeRepository_FullMethodName               = "/ci.v1.ci/GetUnitTestCodeRepository"
	Ci_ListUnitTestCodeRepository_FullMethodName              = "/ci.v1.ci/ListUnitTestCodeRepository"
	Ci_UploadLocalFileToSFTP_FullMethodName                   = "/ci.v1.ci/UploadLocalFileToSFTP"
	Ci_DownloadSFTPFileToLocal_FullMethodName                 = "/ci.v1.ci/DownloadSFTPFileToLocal"
	Ci_UploadLocalFileToCloudObjectStorage_FullMethodName     = "/ci.v1.ci/UploadLocalFileToCloudObjectStorage"
	Ci_DownloadCloudObjectStorageObjectToLocal_FullMethodName = "/ci.v1.ci/DownloadCloudObjectStorageObjectToLocal"
	Ci_GetCopySFTPFileHis_FullMethodName                      = "/ci.v1.ci/GetCopySFTPFileHis"
	Ci_GetCopyCloudObjectStorageHis_FullMethodName            = "/ci.v1.ci/GetCopyCloudObjectStorageHis"
	Ci_CreateCiTemplate_FullMethodName                        = "/ci.v1.ci/CreateCiTemplate"
	Ci_ListCiTemplate_FullMethodName                          = "/ci.v1.ci/ListCiTemplate"
	Ci_DelCiTemplate_FullMethodName                           = "/ci.v1.ci/DelCiTemplate"
	Ci_AddCiTemplateStep_FullMethodName                       = "/ci.v1.ci/AddCiTemplateStep"
	Ci_ListCiTemplateStep_FullMethodName                      = "/ci.v1.ci/ListCiTemplateStep"
	Ci_DelCiTemplateStep_FullMethodName                       = "/ci.v1.ci/DelCiTemplateStep"
	Ci_RunCi_FullMethodName                                   = "/ci.v1.ci/RunCi"
	Ci_GetCiTasks_FullMethodName                              = "/ci.v1.ci/GetCiTasks"
	Ci_GetCiTaskDetails_FullMethodName                        = "/ci.v1.ci/GetCiTaskDetails"
)

// CiClient is the client API for Ci service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CiClient interface {
	// 容器镜像
	// 验证容器镜像仓库账户 - tool
	VerifyContainerRegistry(ctx context.Context, in *VerifyContainerRegistryReq, opts ...grpc.CallOption) (*VerifyContainerRegistryReply, error)
	// 同步容器镜像仓库中的镜像到其他仓库 (源可以匿名，目标不允许匿名)
	CopyContainerRegistryImage(ctx context.Context, in *CopyContainerRegistryImageReq, opts ...grpc.CallOption) (*CopyContainerRegistryImageReply, error)
	// 列出容器镜像仓库镜像同步任务
	ListCopyContainerRegistryImageTask(ctx context.Context, in *ListCopyContainerRegistryImageTaskReq, opts ...grpc.CallOption) (*ListCopyContainerRegistryImageTaskReply, error)
	// 获取容器镜像仓库镜像同步任务
	GetCopyContainerRegistryImageTask(ctx context.Context, in *GetCopyContainerRegistryImageTaskReq, opts ...grpc.CallOption) (*GetCopyContainerRegistryImageTaskReply, error)
	// 查看容器镜像信息
	InspectContainerImage(ctx context.Context, in *InspectContainerImageReq, opts ...grpc.CallOption) (*InspectContainerImageReply, error)
	// 列出容器镜像仓库 tags
	ListContainerImageTags(ctx context.Context, in *ListContainerImageTagsReq, opts ...grpc.CallOption) (*ListContainerImageTagsReply, error)
	// 构建容器镜像
	BuildContainerImage(ctx context.Context, in *BuildContainerImageReq, opts ...grpc.CallOption) (*BuildContainerImageReply, error)
	// 获取构建容器镜像任务
	GetBuildContainerImage(ctx context.Context, in *GetBuildContainerImageReq, opts ...grpc.CallOption) (*GetBuildContainerImageReply, error)
	// 列出构建容器镜像任务
	ListBuildContainerImage(ctx context.Context, in *ListBuildContainerImageReq, opts ...grpc.CallOption) (*ListBuildContainerImageReply, error)
	// 代码仓库
	// 列出程序语言
	ListProgramLanguage(ctx context.Context, in *ListProgramLanguageReq, opts ...grpc.CallOption) (*ListProgramLanguageReply, error)
	// 代码仓库代码扫描
	ScanCodeRepository(ctx context.Context, in *ScanCodeRepositoryReq, opts ...grpc.CallOption) (*ScanCodeRepositoryReply, error)
	GetScanCodeRepository(ctx context.Context, in *GetScanCodeRepositoryReq, opts ...grpc.CallOption) (*GetScanCodeRepositoryReply, error)
	ListScanCodeRepository(ctx context.Context, in *ListScanCodeRepositoryReq, opts ...grpc.CallOption) (*ListScanCodeRepositoryReply, error)
	// 代码仓库单元测试
	UnitTestCodeRepository(ctx context.Context, in *UnitTestCodeRepositoryReq, opts ...grpc.CallOption) (*UnitTestCodeRepositoryReply, error)
	GetUnitTestCodeRepository(ctx context.Context, in *GetUnitTestCodeRepositoryReq, opts ...grpc.CallOption) (*GetUnitTestCodeRepositoryReply, error)
	ListUnitTestCodeRepository(ctx context.Context, in *ListUnitTestCodeRepositoryReq, opts ...grpc.CallOption) (*ListUnitTestCodeRepositoryReply, error)
	// 上传本地文件到SFTP服务器
	UploadLocalFileToSFTP(ctx context.Context, in *UploadLocalFileToSFTPReq, opts ...grpc.CallOption) (*UploadLocalFileToSFTPReply, error)
	// 下载SFTP服务器文件到本地文件
	DownloadSFTPFileToLocal(ctx context.Context, in *DownloadSFTPFileToLocalReq, opts ...grpc.CallOption) (*DownloadSFTPFileToLocalReply, error)
	// 上传本地文件到云对象存储
	UploadLocalFileToCloudObjectStorage(ctx context.Context, in *UploadLocalFileToCloudObjectStorageReq, opts ...grpc.CallOption) (*UploadLocalFileToCloudObjectStorageReply, error)
	// 下载云对象存储对象到本地文件
	DownloadCloudObjectStorageObjectToLocal(ctx context.Context, in *DownloadCloudObjectStorageObjectToLocalReq, opts ...grpc.CallOption) (*DownloadCloudObjectStorageObjectToLocalReply, error)
	// 获取SFTP文件操作历史
	GetCopySFTPFileHis(ctx context.Context, in *GetCopySFTPFileHisReq, opts ...grpc.CallOption) (*GetCopySFTPFileHisReply, error)
	// 获取云对象存储操作历史
	GetCopyCloudObjectStorageHis(ctx context.Context, in *GetCopyCloudObjectStorageHisReq, opts ...grpc.CallOption) (*GetCopyCloudObjectStorageHisReply, error)
	//
	CreateCiTemplate(ctx context.Context, in *CreateCiTemplateReq, opts ...grpc.CallOption) (*CreateCiTemplateReply, error)
	ListCiTemplate(ctx context.Context, in *ListCiTemplateReq, opts ...grpc.CallOption) (*ListCiTemplateReply, error)
	DelCiTemplate(ctx context.Context, in *DelCiTemplateReq, opts ...grpc.CallOption) (*DelCiTemplateReply, error)
	AddCiTemplateStep(ctx context.Context, in *AddCiTemplateStepReq, opts ...grpc.CallOption) (*AddCiTemplateStepReply, error)
	ListCiTemplateStep(ctx context.Context, in *ListCiTemplateStepReq, opts ...grpc.CallOption) (*ListCiTemplateStepReply, error)
	DelCiTemplateStep(ctx context.Context, in *DelCiTemplateStepReq, opts ...grpc.CallOption) (*DelCiTemplateStepReply, error)
	// 执行 CI 任务
	RunCi(ctx context.Context, in *RunCiReq, opts ...grpc.CallOption) (*RunCiReply, error)
	// 查询执行 CI 任务结果
	GetCiTasks(ctx context.Context, in *GetCiTasksReq, opts ...grpc.CallOption) (*GetCiTasksReply, error)
	// 查询执行 CI 任务详情
	GetCiTaskDetails(ctx context.Context, in *GetCiTaskDetailsReq, opts ...grpc.CallOption) (*GetCiTaskDetailsReply, error)
}

type ciClient struct {
	cc grpc.ClientConnInterface
}

func NewCiClient(cc grpc.ClientConnInterface) CiClient {
	return &ciClient{cc}
}

func (c *ciClient) VerifyContainerRegistry(ctx context.Context, in *VerifyContainerRegistryReq, opts ...grpc.CallOption) (*VerifyContainerRegistryReply, error) {
	out := new(VerifyContainerRegistryReply)
	err := c.cc.Invoke(ctx, Ci_VerifyContainerRegistry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) CopyContainerRegistryImage(ctx context.Context, in *CopyContainerRegistryImageReq, opts ...grpc.CallOption) (*CopyContainerRegistryImageReply, error) {
	out := new(CopyContainerRegistryImageReply)
	err := c.cc.Invoke(ctx, Ci_CopyContainerRegistryImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) ListCopyContainerRegistryImageTask(ctx context.Context, in *ListCopyContainerRegistryImageTaskReq, opts ...grpc.CallOption) (*ListCopyContainerRegistryImageTaskReply, error) {
	out := new(ListCopyContainerRegistryImageTaskReply)
	err := c.cc.Invoke(ctx, Ci_ListCopyContainerRegistryImageTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) GetCopyContainerRegistryImageTask(ctx context.Context, in *GetCopyContainerRegistryImageTaskReq, opts ...grpc.CallOption) (*GetCopyContainerRegistryImageTaskReply, error) {
	out := new(GetCopyContainerRegistryImageTaskReply)
	err := c.cc.Invoke(ctx, Ci_GetCopyContainerRegistryImageTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) InspectContainerImage(ctx context.Context, in *InspectContainerImageReq, opts ...grpc.CallOption) (*InspectContainerImageReply, error) {
	out := new(InspectContainerImageReply)
	err := c.cc.Invoke(ctx, Ci_InspectContainerImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) ListContainerImageTags(ctx context.Context, in *ListContainerImageTagsReq, opts ...grpc.CallOption) (*ListContainerImageTagsReply, error) {
	out := new(ListContainerImageTagsReply)
	err := c.cc.Invoke(ctx, Ci_ListContainerImageTags_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) BuildContainerImage(ctx context.Context, in *BuildContainerImageReq, opts ...grpc.CallOption) (*BuildContainerImageReply, error) {
	out := new(BuildContainerImageReply)
	err := c.cc.Invoke(ctx, Ci_BuildContainerImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) GetBuildContainerImage(ctx context.Context, in *GetBuildContainerImageReq, opts ...grpc.CallOption) (*GetBuildContainerImageReply, error) {
	out := new(GetBuildContainerImageReply)
	err := c.cc.Invoke(ctx, Ci_GetBuildContainerImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) ListBuildContainerImage(ctx context.Context, in *ListBuildContainerImageReq, opts ...grpc.CallOption) (*ListBuildContainerImageReply, error) {
	out := new(ListBuildContainerImageReply)
	err := c.cc.Invoke(ctx, Ci_ListBuildContainerImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) ListProgramLanguage(ctx context.Context, in *ListProgramLanguageReq, opts ...grpc.CallOption) (*ListProgramLanguageReply, error) {
	out := new(ListProgramLanguageReply)
	err := c.cc.Invoke(ctx, Ci_ListProgramLanguage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) ScanCodeRepository(ctx context.Context, in *ScanCodeRepositoryReq, opts ...grpc.CallOption) (*ScanCodeRepositoryReply, error) {
	out := new(ScanCodeRepositoryReply)
	err := c.cc.Invoke(ctx, Ci_ScanCodeRepository_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) GetScanCodeRepository(ctx context.Context, in *GetScanCodeRepositoryReq, opts ...grpc.CallOption) (*GetScanCodeRepositoryReply, error) {
	out := new(GetScanCodeRepositoryReply)
	err := c.cc.Invoke(ctx, Ci_GetScanCodeRepository_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) ListScanCodeRepository(ctx context.Context, in *ListScanCodeRepositoryReq, opts ...grpc.CallOption) (*ListScanCodeRepositoryReply, error) {
	out := new(ListScanCodeRepositoryReply)
	err := c.cc.Invoke(ctx, Ci_ListScanCodeRepository_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) UnitTestCodeRepository(ctx context.Context, in *UnitTestCodeRepositoryReq, opts ...grpc.CallOption) (*UnitTestCodeRepositoryReply, error) {
	out := new(UnitTestCodeRepositoryReply)
	err := c.cc.Invoke(ctx, Ci_UnitTestCodeRepository_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) GetUnitTestCodeRepository(ctx context.Context, in *GetUnitTestCodeRepositoryReq, opts ...grpc.CallOption) (*GetUnitTestCodeRepositoryReply, error) {
	out := new(GetUnitTestCodeRepositoryReply)
	err := c.cc.Invoke(ctx, Ci_GetUnitTestCodeRepository_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) ListUnitTestCodeRepository(ctx context.Context, in *ListUnitTestCodeRepositoryReq, opts ...grpc.CallOption) (*ListUnitTestCodeRepositoryReply, error) {
	out := new(ListUnitTestCodeRepositoryReply)
	err := c.cc.Invoke(ctx, Ci_ListUnitTestCodeRepository_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) UploadLocalFileToSFTP(ctx context.Context, in *UploadLocalFileToSFTPReq, opts ...grpc.CallOption) (*UploadLocalFileToSFTPReply, error) {
	out := new(UploadLocalFileToSFTPReply)
	err := c.cc.Invoke(ctx, Ci_UploadLocalFileToSFTP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) DownloadSFTPFileToLocal(ctx context.Context, in *DownloadSFTPFileToLocalReq, opts ...grpc.CallOption) (*DownloadSFTPFileToLocalReply, error) {
	out := new(DownloadSFTPFileToLocalReply)
	err := c.cc.Invoke(ctx, Ci_DownloadSFTPFileToLocal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) UploadLocalFileToCloudObjectStorage(ctx context.Context, in *UploadLocalFileToCloudObjectStorageReq, opts ...grpc.CallOption) (*UploadLocalFileToCloudObjectStorageReply, error) {
	out := new(UploadLocalFileToCloudObjectStorageReply)
	err := c.cc.Invoke(ctx, Ci_UploadLocalFileToCloudObjectStorage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) DownloadCloudObjectStorageObjectToLocal(ctx context.Context, in *DownloadCloudObjectStorageObjectToLocalReq, opts ...grpc.CallOption) (*DownloadCloudObjectStorageObjectToLocalReply, error) {
	out := new(DownloadCloudObjectStorageObjectToLocalReply)
	err := c.cc.Invoke(ctx, Ci_DownloadCloudObjectStorageObjectToLocal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) GetCopySFTPFileHis(ctx context.Context, in *GetCopySFTPFileHisReq, opts ...grpc.CallOption) (*GetCopySFTPFileHisReply, error) {
	out := new(GetCopySFTPFileHisReply)
	err := c.cc.Invoke(ctx, Ci_GetCopySFTPFileHis_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) GetCopyCloudObjectStorageHis(ctx context.Context, in *GetCopyCloudObjectStorageHisReq, opts ...grpc.CallOption) (*GetCopyCloudObjectStorageHisReply, error) {
	out := new(GetCopyCloudObjectStorageHisReply)
	err := c.cc.Invoke(ctx, Ci_GetCopyCloudObjectStorageHis_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) CreateCiTemplate(ctx context.Context, in *CreateCiTemplateReq, opts ...grpc.CallOption) (*CreateCiTemplateReply, error) {
	out := new(CreateCiTemplateReply)
	err := c.cc.Invoke(ctx, Ci_CreateCiTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) ListCiTemplate(ctx context.Context, in *ListCiTemplateReq, opts ...grpc.CallOption) (*ListCiTemplateReply, error) {
	out := new(ListCiTemplateReply)
	err := c.cc.Invoke(ctx, Ci_ListCiTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) DelCiTemplate(ctx context.Context, in *DelCiTemplateReq, opts ...grpc.CallOption) (*DelCiTemplateReply, error) {
	out := new(DelCiTemplateReply)
	err := c.cc.Invoke(ctx, Ci_DelCiTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) AddCiTemplateStep(ctx context.Context, in *AddCiTemplateStepReq, opts ...grpc.CallOption) (*AddCiTemplateStepReply, error) {
	out := new(AddCiTemplateStepReply)
	err := c.cc.Invoke(ctx, Ci_AddCiTemplateStep_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) ListCiTemplateStep(ctx context.Context, in *ListCiTemplateStepReq, opts ...grpc.CallOption) (*ListCiTemplateStepReply, error) {
	out := new(ListCiTemplateStepReply)
	err := c.cc.Invoke(ctx, Ci_ListCiTemplateStep_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) DelCiTemplateStep(ctx context.Context, in *DelCiTemplateStepReq, opts ...grpc.CallOption) (*DelCiTemplateStepReply, error) {
	out := new(DelCiTemplateStepReply)
	err := c.cc.Invoke(ctx, Ci_DelCiTemplateStep_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) RunCi(ctx context.Context, in *RunCiReq, opts ...grpc.CallOption) (*RunCiReply, error) {
	out := new(RunCiReply)
	err := c.cc.Invoke(ctx, Ci_RunCi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) GetCiTasks(ctx context.Context, in *GetCiTasksReq, opts ...grpc.CallOption) (*GetCiTasksReply, error) {
	out := new(GetCiTasksReply)
	err := c.cc.Invoke(ctx, Ci_GetCiTasks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) GetCiTaskDetails(ctx context.Context, in *GetCiTaskDetailsReq, opts ...grpc.CallOption) (*GetCiTaskDetailsReply, error) {
	out := new(GetCiTaskDetailsReply)
	err := c.cc.Invoke(ctx, Ci_GetCiTaskDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CiServer is the server API for Ci service.
// All implementations must embed UnimplementedCiServer
// for forward compatibility
type CiServer interface {
	// 容器镜像
	// 验证容器镜像仓库账户 - tool
	VerifyContainerRegistry(context.Context, *VerifyContainerRegistryReq) (*VerifyContainerRegistryReply, error)
	// 同步容器镜像仓库中的镜像到其他仓库 (源可以匿名，目标不允许匿名)
	CopyContainerRegistryImage(context.Context, *CopyContainerRegistryImageReq) (*CopyContainerRegistryImageReply, error)
	// 列出容器镜像仓库镜像同步任务
	ListCopyContainerRegistryImageTask(context.Context, *ListCopyContainerRegistryImageTaskReq) (*ListCopyContainerRegistryImageTaskReply, error)
	// 获取容器镜像仓库镜像同步任务
	GetCopyContainerRegistryImageTask(context.Context, *GetCopyContainerRegistryImageTaskReq) (*GetCopyContainerRegistryImageTaskReply, error)
	// 查看容器镜像信息
	InspectContainerImage(context.Context, *InspectContainerImageReq) (*InspectContainerImageReply, error)
	// 列出容器镜像仓库 tags
	ListContainerImageTags(context.Context, *ListContainerImageTagsReq) (*ListContainerImageTagsReply, error)
	// 构建容器镜像
	BuildContainerImage(context.Context, *BuildContainerImageReq) (*BuildContainerImageReply, error)
	// 获取构建容器镜像任务
	GetBuildContainerImage(context.Context, *GetBuildContainerImageReq) (*GetBuildContainerImageReply, error)
	// 列出构建容器镜像任务
	ListBuildContainerImage(context.Context, *ListBuildContainerImageReq) (*ListBuildContainerImageReply, error)
	// 代码仓库
	// 列出程序语言
	ListProgramLanguage(context.Context, *ListProgramLanguageReq) (*ListProgramLanguageReply, error)
	// 代码仓库代码扫描
	ScanCodeRepository(context.Context, *ScanCodeRepositoryReq) (*ScanCodeRepositoryReply, error)
	GetScanCodeRepository(context.Context, *GetScanCodeRepositoryReq) (*GetScanCodeRepositoryReply, error)
	ListScanCodeRepository(context.Context, *ListScanCodeRepositoryReq) (*ListScanCodeRepositoryReply, error)
	// 代码仓库单元测试
	UnitTestCodeRepository(context.Context, *UnitTestCodeRepositoryReq) (*UnitTestCodeRepositoryReply, error)
	GetUnitTestCodeRepository(context.Context, *GetUnitTestCodeRepositoryReq) (*GetUnitTestCodeRepositoryReply, error)
	ListUnitTestCodeRepository(context.Context, *ListUnitTestCodeRepositoryReq) (*ListUnitTestCodeRepositoryReply, error)
	// 上传本地文件到SFTP服务器
	UploadLocalFileToSFTP(context.Context, *UploadLocalFileToSFTPReq) (*UploadLocalFileToSFTPReply, error)
	// 下载SFTP服务器文件到本地文件
	DownloadSFTPFileToLocal(context.Context, *DownloadSFTPFileToLocalReq) (*DownloadSFTPFileToLocalReply, error)
	// 上传本地文件到云对象存储
	UploadLocalFileToCloudObjectStorage(context.Context, *UploadLocalFileToCloudObjectStorageReq) (*UploadLocalFileToCloudObjectStorageReply, error)
	// 下载云对象存储对象到本地文件
	DownloadCloudObjectStorageObjectToLocal(context.Context, *DownloadCloudObjectStorageObjectToLocalReq) (*DownloadCloudObjectStorageObjectToLocalReply, error)
	// 获取SFTP文件操作历史
	GetCopySFTPFileHis(context.Context, *GetCopySFTPFileHisReq) (*GetCopySFTPFileHisReply, error)
	// 获取云对象存储操作历史
	GetCopyCloudObjectStorageHis(context.Context, *GetCopyCloudObjectStorageHisReq) (*GetCopyCloudObjectStorageHisReply, error)
	//
	CreateCiTemplate(context.Context, *CreateCiTemplateReq) (*CreateCiTemplateReply, error)
	ListCiTemplate(context.Context, *ListCiTemplateReq) (*ListCiTemplateReply, error)
	DelCiTemplate(context.Context, *DelCiTemplateReq) (*DelCiTemplateReply, error)
	AddCiTemplateStep(context.Context, *AddCiTemplateStepReq) (*AddCiTemplateStepReply, error)
	ListCiTemplateStep(context.Context, *ListCiTemplateStepReq) (*ListCiTemplateStepReply, error)
	DelCiTemplateStep(context.Context, *DelCiTemplateStepReq) (*DelCiTemplateStepReply, error)
	// 执行 CI 任务
	RunCi(context.Context, *RunCiReq) (*RunCiReply, error)
	// 查询执行 CI 任务结果
	GetCiTasks(context.Context, *GetCiTasksReq) (*GetCiTasksReply, error)
	// 查询执行 CI 任务详情
	GetCiTaskDetails(context.Context, *GetCiTaskDetailsReq) (*GetCiTaskDetailsReply, error)
	mustEmbedUnimplementedCiServer()
}

// UnimplementedCiServer must be embedded to have forward compatible implementations.
type UnimplementedCiServer struct {
}

func (UnimplementedCiServer) VerifyContainerRegistry(context.Context, *VerifyContainerRegistryReq) (*VerifyContainerRegistryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyContainerRegistry not implemented")
}
func (UnimplementedCiServer) CopyContainerRegistryImage(context.Context, *CopyContainerRegistryImageReq) (*CopyContainerRegistryImageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyContainerRegistryImage not implemented")
}
func (UnimplementedCiServer) ListCopyContainerRegistryImageTask(context.Context, *ListCopyContainerRegistryImageTaskReq) (*ListCopyContainerRegistryImageTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCopyContainerRegistryImageTask not implemented")
}
func (UnimplementedCiServer) GetCopyContainerRegistryImageTask(context.Context, *GetCopyContainerRegistryImageTaskReq) (*GetCopyContainerRegistryImageTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCopyContainerRegistryImageTask not implemented")
}
func (UnimplementedCiServer) InspectContainerImage(context.Context, *InspectContainerImageReq) (*InspectContainerImageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InspectContainerImage not implemented")
}
func (UnimplementedCiServer) ListContainerImageTags(context.Context, *ListContainerImageTagsReq) (*ListContainerImageTagsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContainerImageTags not implemented")
}
func (UnimplementedCiServer) BuildContainerImage(context.Context, *BuildContainerImageReq) (*BuildContainerImageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildContainerImage not implemented")
}
func (UnimplementedCiServer) GetBuildContainerImage(context.Context, *GetBuildContainerImageReq) (*GetBuildContainerImageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuildContainerImage not implemented")
}
func (UnimplementedCiServer) ListBuildContainerImage(context.Context, *ListBuildContainerImageReq) (*ListBuildContainerImageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBuildContainerImage not implemented")
}
func (UnimplementedCiServer) ListProgramLanguage(context.Context, *ListProgramLanguageReq) (*ListProgramLanguageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProgramLanguage not implemented")
}
func (UnimplementedCiServer) ScanCodeRepository(context.Context, *ScanCodeRepositoryReq) (*ScanCodeRepositoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanCodeRepository not implemented")
}
func (UnimplementedCiServer) GetScanCodeRepository(context.Context, *GetScanCodeRepositoryReq) (*GetScanCodeRepositoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScanCodeRepository not implemented")
}
func (UnimplementedCiServer) ListScanCodeRepository(context.Context, *ListScanCodeRepositoryReq) (*ListScanCodeRepositoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListScanCodeRepository not implemented")
}
func (UnimplementedCiServer) UnitTestCodeRepository(context.Context, *UnitTestCodeRepositoryReq) (*UnitTestCodeRepositoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnitTestCodeRepository not implemented")
}
func (UnimplementedCiServer) GetUnitTestCodeRepository(context.Context, *GetUnitTestCodeRepositoryReq) (*GetUnitTestCodeRepositoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnitTestCodeRepository not implemented")
}
func (UnimplementedCiServer) ListUnitTestCodeRepository(context.Context, *ListUnitTestCodeRepositoryReq) (*ListUnitTestCodeRepositoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUnitTestCodeRepository not implemented")
}
func (UnimplementedCiServer) UploadLocalFileToSFTP(context.Context, *UploadLocalFileToSFTPReq) (*UploadLocalFileToSFTPReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadLocalFileToSFTP not implemented")
}
func (UnimplementedCiServer) DownloadSFTPFileToLocal(context.Context, *DownloadSFTPFileToLocalReq) (*DownloadSFTPFileToLocalReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadSFTPFileToLocal not implemented")
}
func (UnimplementedCiServer) UploadLocalFileToCloudObjectStorage(context.Context, *UploadLocalFileToCloudObjectStorageReq) (*UploadLocalFileToCloudObjectStorageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadLocalFileToCloudObjectStorage not implemented")
}
func (UnimplementedCiServer) DownloadCloudObjectStorageObjectToLocal(context.Context, *DownloadCloudObjectStorageObjectToLocalReq) (*DownloadCloudObjectStorageObjectToLocalReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadCloudObjectStorageObjectToLocal not implemented")
}
func (UnimplementedCiServer) GetCopySFTPFileHis(context.Context, *GetCopySFTPFileHisReq) (*GetCopySFTPFileHisReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCopySFTPFileHis not implemented")
}
func (UnimplementedCiServer) GetCopyCloudObjectStorageHis(context.Context, *GetCopyCloudObjectStorageHisReq) (*GetCopyCloudObjectStorageHisReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCopyCloudObjectStorageHis not implemented")
}
func (UnimplementedCiServer) CreateCiTemplate(context.Context, *CreateCiTemplateReq) (*CreateCiTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCiTemplate not implemented")
}
func (UnimplementedCiServer) ListCiTemplate(context.Context, *ListCiTemplateReq) (*ListCiTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCiTemplate not implemented")
}
func (UnimplementedCiServer) DelCiTemplate(context.Context, *DelCiTemplateReq) (*DelCiTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelCiTemplate not implemented")
}
func (UnimplementedCiServer) AddCiTemplateStep(context.Context, *AddCiTemplateStepReq) (*AddCiTemplateStepReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCiTemplateStep not implemented")
}
func (UnimplementedCiServer) ListCiTemplateStep(context.Context, *ListCiTemplateStepReq) (*ListCiTemplateStepReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCiTemplateStep not implemented")
}
func (UnimplementedCiServer) DelCiTemplateStep(context.Context, *DelCiTemplateStepReq) (*DelCiTemplateStepReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelCiTemplateStep not implemented")
}
func (UnimplementedCiServer) RunCi(context.Context, *RunCiReq) (*RunCiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunCi not implemented")
}
func (UnimplementedCiServer) GetCiTasks(context.Context, *GetCiTasksReq) (*GetCiTasksReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCiTasks not implemented")
}
func (UnimplementedCiServer) GetCiTaskDetails(context.Context, *GetCiTaskDetailsReq) (*GetCiTaskDetailsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCiTaskDetails not implemented")
}
func (UnimplementedCiServer) mustEmbedUnimplementedCiServer() {}

// UnsafeCiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CiServer will
// result in compilation errors.
type UnsafeCiServer interface {
	mustEmbedUnimplementedCiServer()
}

func RegisterCiServer(s grpc.ServiceRegistrar, srv CiServer) {
	s.RegisterService(&Ci_ServiceDesc, srv)
}

func _Ci_VerifyContainerRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyContainerRegistryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).VerifyContainerRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_VerifyContainerRegistry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).VerifyContainerRegistry(ctx, req.(*VerifyContainerRegistryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_CopyContainerRegistryImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyContainerRegistryImageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).CopyContainerRegistryImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_CopyContainerRegistryImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).CopyContainerRegistryImage(ctx, req.(*CopyContainerRegistryImageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_ListCopyContainerRegistryImageTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCopyContainerRegistryImageTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).ListCopyContainerRegistryImageTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_ListCopyContainerRegistryImageTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).ListCopyContainerRegistryImageTask(ctx, req.(*ListCopyContainerRegistryImageTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_GetCopyContainerRegistryImageTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCopyContainerRegistryImageTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).GetCopyContainerRegistryImageTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_GetCopyContainerRegistryImageTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).GetCopyContainerRegistryImageTask(ctx, req.(*GetCopyContainerRegistryImageTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_InspectContainerImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InspectContainerImageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).InspectContainerImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_InspectContainerImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).InspectContainerImage(ctx, req.(*InspectContainerImageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_ListContainerImageTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContainerImageTagsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).ListContainerImageTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_ListContainerImageTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).ListContainerImageTags(ctx, req.(*ListContainerImageTagsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_BuildContainerImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildContainerImageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).BuildContainerImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_BuildContainerImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).BuildContainerImage(ctx, req.(*BuildContainerImageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_GetBuildContainerImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBuildContainerImageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).GetBuildContainerImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_GetBuildContainerImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).GetBuildContainerImage(ctx, req.(*GetBuildContainerImageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_ListBuildContainerImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBuildContainerImageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).ListBuildContainerImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_ListBuildContainerImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).ListBuildContainerImage(ctx, req.(*ListBuildContainerImageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_ListProgramLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProgramLanguageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).ListProgramLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_ListProgramLanguage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).ListProgramLanguage(ctx, req.(*ListProgramLanguageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_ScanCodeRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanCodeRepositoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).ScanCodeRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_ScanCodeRepository_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).ScanCodeRepository(ctx, req.(*ScanCodeRepositoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_GetScanCodeRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScanCodeRepositoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).GetScanCodeRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_GetScanCodeRepository_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).GetScanCodeRepository(ctx, req.(*GetScanCodeRepositoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_ListScanCodeRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListScanCodeRepositoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).ListScanCodeRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_ListScanCodeRepository_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).ListScanCodeRepository(ctx, req.(*ListScanCodeRepositoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_UnitTestCodeRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnitTestCodeRepositoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).UnitTestCodeRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_UnitTestCodeRepository_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).UnitTestCodeRepository(ctx, req.(*UnitTestCodeRepositoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_GetUnitTestCodeRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnitTestCodeRepositoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).GetUnitTestCodeRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_GetUnitTestCodeRepository_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).GetUnitTestCodeRepository(ctx, req.(*GetUnitTestCodeRepositoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_ListUnitTestCodeRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUnitTestCodeRepositoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).ListUnitTestCodeRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_ListUnitTestCodeRepository_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).ListUnitTestCodeRepository(ctx, req.(*ListUnitTestCodeRepositoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_UploadLocalFileToSFTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadLocalFileToSFTPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).UploadLocalFileToSFTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_UploadLocalFileToSFTP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).UploadLocalFileToSFTP(ctx, req.(*UploadLocalFileToSFTPReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_DownloadSFTPFileToLocal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadSFTPFileToLocalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).DownloadSFTPFileToLocal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_DownloadSFTPFileToLocal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).DownloadSFTPFileToLocal(ctx, req.(*DownloadSFTPFileToLocalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_UploadLocalFileToCloudObjectStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadLocalFileToCloudObjectStorageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).UploadLocalFileToCloudObjectStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_UploadLocalFileToCloudObjectStorage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).UploadLocalFileToCloudObjectStorage(ctx, req.(*UploadLocalFileToCloudObjectStorageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_DownloadCloudObjectStorageObjectToLocal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadCloudObjectStorageObjectToLocalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).DownloadCloudObjectStorageObjectToLocal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_DownloadCloudObjectStorageObjectToLocal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).DownloadCloudObjectStorageObjectToLocal(ctx, req.(*DownloadCloudObjectStorageObjectToLocalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_GetCopySFTPFileHis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCopySFTPFileHisReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).GetCopySFTPFileHis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_GetCopySFTPFileHis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).GetCopySFTPFileHis(ctx, req.(*GetCopySFTPFileHisReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_GetCopyCloudObjectStorageHis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCopyCloudObjectStorageHisReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).GetCopyCloudObjectStorageHis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_GetCopyCloudObjectStorageHis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).GetCopyCloudObjectStorageHis(ctx, req.(*GetCopyCloudObjectStorageHisReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_CreateCiTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCiTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).CreateCiTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_CreateCiTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).CreateCiTemplate(ctx, req.(*CreateCiTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_ListCiTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCiTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).ListCiTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_ListCiTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).ListCiTemplate(ctx, req.(*ListCiTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_DelCiTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelCiTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).DelCiTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_DelCiTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).DelCiTemplate(ctx, req.(*DelCiTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_AddCiTemplateStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCiTemplateStepReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).AddCiTemplateStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_AddCiTemplateStep_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).AddCiTemplateStep(ctx, req.(*AddCiTemplateStepReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_ListCiTemplateStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCiTemplateStepReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).ListCiTemplateStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_ListCiTemplateStep_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).ListCiTemplateStep(ctx, req.(*ListCiTemplateStepReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_DelCiTemplateStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelCiTemplateStepReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).DelCiTemplateStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_DelCiTemplateStep_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).DelCiTemplateStep(ctx, req.(*DelCiTemplateStepReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_RunCi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunCiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).RunCi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_RunCi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).RunCi(ctx, req.(*RunCiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_GetCiTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCiTasksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).GetCiTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_GetCiTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).GetCiTasks(ctx, req.(*GetCiTasksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_GetCiTaskDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCiTaskDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).GetCiTaskDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_GetCiTaskDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).GetCiTaskDetails(ctx, req.(*GetCiTaskDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Ci_ServiceDesc is the grpc.ServiceDesc for Ci service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ci_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ci.v1.ci",
	HandlerType: (*CiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyContainerRegistry",
			Handler:    _Ci_VerifyContainerRegistry_Handler,
		},
		{
			MethodName: "CopyContainerRegistryImage",
			Handler:    _Ci_CopyContainerRegistryImage_Handler,
		},
		{
			MethodName: "ListCopyContainerRegistryImageTask",
			Handler:    _Ci_ListCopyContainerRegistryImageTask_Handler,
		},
		{
			MethodName: "GetCopyContainerRegistryImageTask",
			Handler:    _Ci_GetCopyContainerRegistryImageTask_Handler,
		},
		{
			MethodName: "InspectContainerImage",
			Handler:    _Ci_InspectContainerImage_Handler,
		},
		{
			MethodName: "ListContainerImageTags",
			Handler:    _Ci_ListContainerImageTags_Handler,
		},
		{
			MethodName: "BuildContainerImage",
			Handler:    _Ci_BuildContainerImage_Handler,
		},
		{
			MethodName: "GetBuildContainerImage",
			Handler:    _Ci_GetBuildContainerImage_Handler,
		},
		{
			MethodName: "ListBuildContainerImage",
			Handler:    _Ci_ListBuildContainerImage_Handler,
		},
		{
			MethodName: "ListProgramLanguage",
			Handler:    _Ci_ListProgramLanguage_Handler,
		},
		{
			MethodName: "ScanCodeRepository",
			Handler:    _Ci_ScanCodeRepository_Handler,
		},
		{
			MethodName: "GetScanCodeRepository",
			Handler:    _Ci_GetScanCodeRepository_Handler,
		},
		{
			MethodName: "ListScanCodeRepository",
			Handler:    _Ci_ListScanCodeRepository_Handler,
		},
		{
			MethodName: "UnitTestCodeRepository",
			Handler:    _Ci_UnitTestCodeRepository_Handler,
		},
		{
			MethodName: "GetUnitTestCodeRepository",
			Handler:    _Ci_GetUnitTestCodeRepository_Handler,
		},
		{
			MethodName: "ListUnitTestCodeRepository",
			Handler:    _Ci_ListUnitTestCodeRepository_Handler,
		},
		{
			MethodName: "UploadLocalFileToSFTP",
			Handler:    _Ci_UploadLocalFileToSFTP_Handler,
		},
		{
			MethodName: "DownloadSFTPFileToLocal",
			Handler:    _Ci_DownloadSFTPFileToLocal_Handler,
		},
		{
			MethodName: "UploadLocalFileToCloudObjectStorage",
			Handler:    _Ci_UploadLocalFileToCloudObjectStorage_Handler,
		},
		{
			MethodName: "DownloadCloudObjectStorageObjectToLocal",
			Handler:    _Ci_DownloadCloudObjectStorageObjectToLocal_Handler,
		},
		{
			MethodName: "GetCopySFTPFileHis",
			Handler:    _Ci_GetCopySFTPFileHis_Handler,
		},
		{
			MethodName: "GetCopyCloudObjectStorageHis",
			Handler:    _Ci_GetCopyCloudObjectStorageHis_Handler,
		},
		{
			MethodName: "CreateCiTemplate",
			Handler:    _Ci_CreateCiTemplate_Handler,
		},
		{
			MethodName: "ListCiTemplate",
			Handler:    _Ci_ListCiTemplate_Handler,
		},
		{
			MethodName: "DelCiTemplate",
			Handler:    _Ci_DelCiTemplate_Handler,
		},
		{
			MethodName: "AddCiTemplateStep",
			Handler:    _Ci_AddCiTemplateStep_Handler,
		},
		{
			MethodName: "ListCiTemplateStep",
			Handler:    _Ci_ListCiTemplateStep_Handler,
		},
		{
			MethodName: "DelCiTemplateStep",
			Handler:    _Ci_DelCiTemplateStep_Handler,
		},
		{
			MethodName: "RunCi",
			Handler:    _Ci_RunCi_Handler,
		},
		{
			MethodName: "GetCiTasks",
			Handler:    _Ci_GetCiTasks_Handler,
		},
		{
			MethodName: "GetCiTaskDetails",
			Handler:    _Ci_GetCiTaskDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ci/v1/ci.proto",
}
