// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/ci/v1/ci.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on VerifyContainerRegistryReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifyContainerRegistryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyContainerRegistryReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyContainerRegistryReqMultiError, or nil if none found.
func (m *VerifyContainerRegistryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyContainerRegistryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetServer()) < 1 {
		err := VerifyContainerRegistryReqValidationError{
			field:  "Server",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUsername()) < 1 {
		err := VerifyContainerRegistryReqValidationError{
			field:  "Username",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 1 {
		err := VerifyContainerRegistryReqValidationError{
			field:  "Password",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return VerifyContainerRegistryReqMultiError(errors)
	}

	return nil
}

// VerifyContainerRegistryReqMultiError is an error wrapping multiple
// validation errors returned by VerifyContainerRegistryReq.ValidateAll() if
// the designated constraints aren't met.
type VerifyContainerRegistryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyContainerRegistryReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyContainerRegistryReqMultiError) AllErrors() []error { return m }

// VerifyContainerRegistryReqValidationError is the validation error returned
// by VerifyContainerRegistryReq.Validate if the designated constraints aren't met.
type VerifyContainerRegistryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyContainerRegistryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyContainerRegistryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyContainerRegistryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyContainerRegistryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyContainerRegistryReqValidationError) ErrorName() string {
	return "VerifyContainerRegistryReqValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyContainerRegistryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyContainerRegistryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyContainerRegistryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyContainerRegistryReqValidationError{}

// Validate checks the field values on VerifyContainerRegistryReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifyContainerRegistryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyContainerRegistryReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyContainerRegistryReplyMultiError, or nil if none found.
func (m *VerifyContainerRegistryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyContainerRegistryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return VerifyContainerRegistryReplyMultiError(errors)
	}

	return nil
}

// VerifyContainerRegistryReplyMultiError is an error wrapping multiple
// validation errors returned by VerifyContainerRegistryReply.ValidateAll() if
// the designated constraints aren't met.
type VerifyContainerRegistryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyContainerRegistryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyContainerRegistryReplyMultiError) AllErrors() []error { return m }

// VerifyContainerRegistryReplyValidationError is the validation error returned
// by VerifyContainerRegistryReply.Validate if the designated constraints
// aren't met.
type VerifyContainerRegistryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyContainerRegistryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyContainerRegistryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyContainerRegistryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyContainerRegistryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyContainerRegistryReplyValidationError) ErrorName() string {
	return "VerifyContainerRegistryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyContainerRegistryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyContainerRegistryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyContainerRegistryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyContainerRegistryReplyValidationError{}

// Validate checks the field values on CopyContainerRegistryImageReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CopyContainerRegistryImageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CopyContainerRegistryImageReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CopyContainerRegistryImageReqMultiError, or nil if none found.
func (m *CopyContainerRegistryImageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CopyContainerRegistryImageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := CopyContainerRegistryImageReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := CopyContainerRegistryImageReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := CopyContainerRegistryImageReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for SrcImageRegistryUuid

	if utf8.RuneCountInString(m.GetSrcImage()) < 1 {
		err := CopyContainerRegistryImageReqValidationError{
			field:  "SrcImage",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDestImageRegistryUuid()) < 1 {
		err := CopyContainerRegistryImageReqValidationError{
			field:  "DestImageRegistryUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDestImage()) < 1 {
		err := CopyContainerRegistryImageReqValidationError{
			field:  "DestImage",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Timeout

	if len(errors) > 0 {
		return CopyContainerRegistryImageReqMultiError(errors)
	}

	return nil
}

// CopyContainerRegistryImageReqMultiError is an error wrapping multiple
// validation errors returned by CopyContainerRegistryImageReq.ValidateAll()
// if the designated constraints aren't met.
type CopyContainerRegistryImageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CopyContainerRegistryImageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CopyContainerRegistryImageReqMultiError) AllErrors() []error { return m }

// CopyContainerRegistryImageReqValidationError is the validation error
// returned by CopyContainerRegistryImageReq.Validate if the designated
// constraints aren't met.
type CopyContainerRegistryImageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CopyContainerRegistryImageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CopyContainerRegistryImageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CopyContainerRegistryImageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CopyContainerRegistryImageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CopyContainerRegistryImageReqValidationError) ErrorName() string {
	return "CopyContainerRegistryImageReqValidationError"
}

// Error satisfies the builtin error interface
func (e CopyContainerRegistryImageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCopyContainerRegistryImageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CopyContainerRegistryImageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CopyContainerRegistryImageReqValidationError{}

// Validate checks the field values on CopyContainerRegistryImageReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CopyContainerRegistryImageReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CopyContainerRegistryImageReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CopyContainerRegistryImageReplyMultiError, or nil if none found.
func (m *CopyContainerRegistryImageReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CopyContainerRegistryImageReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	if len(errors) > 0 {
		return CopyContainerRegistryImageReplyMultiError(errors)
	}

	return nil
}

// CopyContainerRegistryImageReplyMultiError is an error wrapping multiple
// validation errors returned by CopyContainerRegistryImageReply.ValidateAll()
// if the designated constraints aren't met.
type CopyContainerRegistryImageReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CopyContainerRegistryImageReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CopyContainerRegistryImageReplyMultiError) AllErrors() []error { return m }

// CopyContainerRegistryImageReplyValidationError is the validation error
// returned by CopyContainerRegistryImageReply.Validate if the designated
// constraints aren't met.
type CopyContainerRegistryImageReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CopyContainerRegistryImageReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CopyContainerRegistryImageReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CopyContainerRegistryImageReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CopyContainerRegistryImageReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CopyContainerRegistryImageReplyValidationError) ErrorName() string {
	return "CopyContainerRegistryImageReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CopyContainerRegistryImageReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCopyContainerRegistryImageReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CopyContainerRegistryImageReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CopyContainerRegistryImageReplyValidationError{}

// Validate checks the field values on ListCopyContainerRegistryImageTaskReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListCopyContainerRegistryImageTaskReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCopyContainerRegistryImageTaskReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListCopyContainerRegistryImageTaskReqMultiError, or nil if none found.
func (m *ListCopyContainerRegistryImageTaskReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCopyContainerRegistryImageTaskReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ListCopyContainerRegistryImageTaskReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ListCopyContainerRegistryImageTaskReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ListCopyContainerRegistryImageTaskReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListCopyContainerRegistryImageTaskReqMultiError(errors)
	}

	return nil
}

// ListCopyContainerRegistryImageTaskReqMultiError is an error wrapping
// multiple validation errors returned by
// ListCopyContainerRegistryImageTaskReq.ValidateAll() if the designated
// constraints aren't met.
type ListCopyContainerRegistryImageTaskReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCopyContainerRegistryImageTaskReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCopyContainerRegistryImageTaskReqMultiError) AllErrors() []error { return m }

// ListCopyContainerRegistryImageTaskReqValidationError is the validation error
// returned by ListCopyContainerRegistryImageTaskReq.Validate if the
// designated constraints aren't met.
type ListCopyContainerRegistryImageTaskReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCopyContainerRegistryImageTaskReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCopyContainerRegistryImageTaskReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCopyContainerRegistryImageTaskReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCopyContainerRegistryImageTaskReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCopyContainerRegistryImageTaskReqValidationError) ErrorName() string {
	return "ListCopyContainerRegistryImageTaskReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListCopyContainerRegistryImageTaskReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCopyContainerRegistryImageTaskReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCopyContainerRegistryImageTaskReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCopyContainerRegistryImageTaskReqValidationError{}

// Validate checks the field values on ListCopyContainerRegistryImageTaskReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListCopyContainerRegistryImageTaskReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListCopyContainerRegistryImageTaskReply with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListCopyContainerRegistryImageTaskReplyMultiError, or nil if none found.
func (m *ListCopyContainerRegistryImageTaskReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCopyContainerRegistryImageTaskReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTasks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCopyContainerRegistryImageTaskReplyValidationError{
						field:  fmt.Sprintf("Tasks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCopyContainerRegistryImageTaskReplyValidationError{
						field:  fmt.Sprintf("Tasks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCopyContainerRegistryImageTaskReplyValidationError{
					field:  fmt.Sprintf("Tasks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCopyContainerRegistryImageTaskReplyMultiError(errors)
	}

	return nil
}

// ListCopyContainerRegistryImageTaskReplyMultiError is an error wrapping
// multiple validation errors returned by
// ListCopyContainerRegistryImageTaskReply.ValidateAll() if the designated
// constraints aren't met.
type ListCopyContainerRegistryImageTaskReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCopyContainerRegistryImageTaskReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCopyContainerRegistryImageTaskReplyMultiError) AllErrors() []error { return m }

// ListCopyContainerRegistryImageTaskReplyValidationError is the validation
// error returned by ListCopyContainerRegistryImageTaskReply.Validate if the
// designated constraints aren't met.
type ListCopyContainerRegistryImageTaskReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCopyContainerRegistryImageTaskReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCopyContainerRegistryImageTaskReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCopyContainerRegistryImageTaskReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCopyContainerRegistryImageTaskReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCopyContainerRegistryImageTaskReplyValidationError) ErrorName() string {
	return "ListCopyContainerRegistryImageTaskReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListCopyContainerRegistryImageTaskReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCopyContainerRegistryImageTaskReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCopyContainerRegistryImageTaskReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCopyContainerRegistryImageTaskReplyValidationError{}

// Validate checks the field values on GetCopyContainerRegistryImageTaskReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetCopyContainerRegistryImageTaskReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCopyContainerRegistryImageTaskReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetCopyContainerRegistryImageTaskReqMultiError, or nil if none found.
func (m *GetCopyContainerRegistryImageTaskReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCopyContainerRegistryImageTaskReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := GetCopyContainerRegistryImageTaskReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := GetCopyContainerRegistryImageTaskReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := GetCopyContainerRegistryImageTaskReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTaskId()) < 1 {
		err := GetCopyContainerRegistryImageTaskReqValidationError{
			field:  "TaskId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCopyContainerRegistryImageTaskReqMultiError(errors)
	}

	return nil
}

// GetCopyContainerRegistryImageTaskReqMultiError is an error wrapping multiple
// validation errors returned by
// GetCopyContainerRegistryImageTaskReq.ValidateAll() if the designated
// constraints aren't met.
type GetCopyContainerRegistryImageTaskReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCopyContainerRegistryImageTaskReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCopyContainerRegistryImageTaskReqMultiError) AllErrors() []error { return m }

// GetCopyContainerRegistryImageTaskReqValidationError is the validation error
// returned by GetCopyContainerRegistryImageTaskReq.Validate if the designated
// constraints aren't met.
type GetCopyContainerRegistryImageTaskReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCopyContainerRegistryImageTaskReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCopyContainerRegistryImageTaskReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCopyContainerRegistryImageTaskReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCopyContainerRegistryImageTaskReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCopyContainerRegistryImageTaskReqValidationError) ErrorName() string {
	return "GetCopyContainerRegistryImageTaskReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetCopyContainerRegistryImageTaskReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCopyContainerRegistryImageTaskReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCopyContainerRegistryImageTaskReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCopyContainerRegistryImageTaskReqValidationError{}

// Validate checks the field values on GetCopyContainerRegistryImageTaskReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetCopyContainerRegistryImageTaskReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetCopyContainerRegistryImageTaskReply with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetCopyContainerRegistryImageTaskReplyMultiError, or nil if none found.
func (m *GetCopyContainerRegistryImageTaskReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCopyContainerRegistryImageTaskReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	// no validation rules for UserUuid

	// no validation rules for OrgUuid

	// no validation rules for ProductUuid

	// no validation rules for RunId

	// no validation rules for SrcImage

	// no validation rules for DestImage

	// no validation rules for Result

	// no validation rules for Describe

	// no validation rules for StartExecTime

	// no validation rules for EndExecTime

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return GetCopyContainerRegistryImageTaskReplyMultiError(errors)
	}

	return nil
}

// GetCopyContainerRegistryImageTaskReplyMultiError is an error wrapping
// multiple validation errors returned by
// GetCopyContainerRegistryImageTaskReply.ValidateAll() if the designated
// constraints aren't met.
type GetCopyContainerRegistryImageTaskReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCopyContainerRegistryImageTaskReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCopyContainerRegistryImageTaskReplyMultiError) AllErrors() []error { return m }

// GetCopyContainerRegistryImageTaskReplyValidationError is the validation
// error returned by GetCopyContainerRegistryImageTaskReply.Validate if the
// designated constraints aren't met.
type GetCopyContainerRegistryImageTaskReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCopyContainerRegistryImageTaskReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCopyContainerRegistryImageTaskReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCopyContainerRegistryImageTaskReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCopyContainerRegistryImageTaskReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCopyContainerRegistryImageTaskReplyValidationError) ErrorName() string {
	return "GetCopyContainerRegistryImageTaskReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetCopyContainerRegistryImageTaskReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCopyContainerRegistryImageTaskReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCopyContainerRegistryImageTaskReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCopyContainerRegistryImageTaskReplyValidationError{}

// Validate checks the field values on InspectContainerImageReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InspectContainerImageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InspectContainerImageReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InspectContainerImageReqMultiError, or nil if none found.
func (m *InspectContainerImageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *InspectContainerImageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUsername()) < 1 {
		err := InspectContainerImageReqValidationError{
			field:  "Username",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 1 {
		err := InspectContainerImageReqValidationError{
			field:  "Password",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetImage()) < 1 {
		err := InspectContainerImageReqValidationError{
			field:  "Image",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return InspectContainerImageReqMultiError(errors)
	}

	return nil
}

// InspectContainerImageReqMultiError is an error wrapping multiple validation
// errors returned by InspectContainerImageReq.ValidateAll() if the designated
// constraints aren't met.
type InspectContainerImageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InspectContainerImageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InspectContainerImageReqMultiError) AllErrors() []error { return m }

// InspectContainerImageReqValidationError is the validation error returned by
// InspectContainerImageReq.Validate if the designated constraints aren't met.
type InspectContainerImageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InspectContainerImageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InspectContainerImageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InspectContainerImageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InspectContainerImageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InspectContainerImageReqValidationError) ErrorName() string {
	return "InspectContainerImageReqValidationError"
}

// Error satisfies the builtin error interface
func (e InspectContainerImageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInspectContainerImageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InspectContainerImageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InspectContainerImageReqValidationError{}

// Validate checks the field values on InspectContainerImageReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InspectContainerImageReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InspectContainerImageReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InspectContainerImageReplyMultiError, or nil if none found.
func (m *InspectContainerImageReply) ValidateAll() error {
	return m.validate(true)
}

func (m *InspectContainerImageReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Content

	if len(errors) > 0 {
		return InspectContainerImageReplyMultiError(errors)
	}

	return nil
}

// InspectContainerImageReplyMultiError is an error wrapping multiple
// validation errors returned by InspectContainerImageReply.ValidateAll() if
// the designated constraints aren't met.
type InspectContainerImageReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InspectContainerImageReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InspectContainerImageReplyMultiError) AllErrors() []error { return m }

// InspectContainerImageReplyValidationError is the validation error returned
// by InspectContainerImageReply.Validate if the designated constraints aren't met.
type InspectContainerImageReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InspectContainerImageReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InspectContainerImageReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InspectContainerImageReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InspectContainerImageReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InspectContainerImageReplyValidationError) ErrorName() string {
	return "InspectContainerImageReplyValidationError"
}

// Error satisfies the builtin error interface
func (e InspectContainerImageReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInspectContainerImageReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InspectContainerImageReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InspectContainerImageReplyValidationError{}

// Validate checks the field values on ListContainerImageTagsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListContainerImageTagsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListContainerImageTagsReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListContainerImageTagsReqMultiError, or nil if none found.
func (m *ListContainerImageTagsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListContainerImageTagsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUsername()) < 1 {
		err := ListContainerImageTagsReqValidationError{
			field:  "Username",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 1 {
		err := ListContainerImageTagsReqValidationError{
			field:  "Password",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRepository()) < 1 {
		err := ListContainerImageTagsReqValidationError{
			field:  "Repository",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListContainerImageTagsReqMultiError(errors)
	}

	return nil
}

// ListContainerImageTagsReqMultiError is an error wrapping multiple validation
// errors returned by ListContainerImageTagsReq.ValidateAll() if the
// designated constraints aren't met.
type ListContainerImageTagsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListContainerImageTagsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListContainerImageTagsReqMultiError) AllErrors() []error { return m }

// ListContainerImageTagsReqValidationError is the validation error returned by
// ListContainerImageTagsReq.Validate if the designated constraints aren't met.
type ListContainerImageTagsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListContainerImageTagsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListContainerImageTagsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListContainerImageTagsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListContainerImageTagsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListContainerImageTagsReqValidationError) ErrorName() string {
	return "ListContainerImageTagsReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListContainerImageTagsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContainerImageTagsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListContainerImageTagsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListContainerImageTagsReqValidationError{}

// Validate checks the field values on ListContainerImageTagsReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListContainerImageTagsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListContainerImageTagsReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListContainerImageTagsReplyMultiError, or nil if none found.
func (m *ListContainerImageTagsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListContainerImageTagsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Repository

	if len(errors) > 0 {
		return ListContainerImageTagsReplyMultiError(errors)
	}

	return nil
}

// ListContainerImageTagsReplyMultiError is an error wrapping multiple
// validation errors returned by ListContainerImageTagsReply.ValidateAll() if
// the designated constraints aren't met.
type ListContainerImageTagsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListContainerImageTagsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListContainerImageTagsReplyMultiError) AllErrors() []error { return m }

// ListContainerImageTagsReplyValidationError is the validation error returned
// by ListContainerImageTagsReply.Validate if the designated constraints
// aren't met.
type ListContainerImageTagsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListContainerImageTagsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListContainerImageTagsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListContainerImageTagsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListContainerImageTagsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListContainerImageTagsReplyValidationError) ErrorName() string {
	return "ListContainerImageTagsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListContainerImageTagsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContainerImageTagsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListContainerImageTagsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListContainerImageTagsReplyValidationError{}

// Validate checks the field values on ListProgramLanguageReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProgramLanguageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProgramLanguageReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProgramLanguageReqMultiError, or nil if none found.
func (m *ListProgramLanguageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProgramLanguageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListProgramLanguageReqMultiError(errors)
	}

	return nil
}

// ListProgramLanguageReqMultiError is an error wrapping multiple validation
// errors returned by ListProgramLanguageReq.ValidateAll() if the designated
// constraints aren't met.
type ListProgramLanguageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProgramLanguageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProgramLanguageReqMultiError) AllErrors() []error { return m }

// ListProgramLanguageReqValidationError is the validation error returned by
// ListProgramLanguageReq.Validate if the designated constraints aren't met.
type ListProgramLanguageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProgramLanguageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProgramLanguageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProgramLanguageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProgramLanguageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProgramLanguageReqValidationError) ErrorName() string {
	return "ListProgramLanguageReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListProgramLanguageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProgramLanguageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProgramLanguageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProgramLanguageReqValidationError{}

// Validate checks the field values on ListProgramLanguageReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProgramLanguageReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProgramLanguageReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProgramLanguageReplyMultiError, or nil if none found.
func (m *ListProgramLanguageReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProgramLanguageReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProgramLanguage() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProgramLanguageReplyValidationError{
						field:  fmt.Sprintf("ProgramLanguage[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProgramLanguageReplyValidationError{
						field:  fmt.Sprintf("ProgramLanguage[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProgramLanguageReplyValidationError{
					field:  fmt.Sprintf("ProgramLanguage[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListProgramLanguageReplyMultiError(errors)
	}

	return nil
}

// ListProgramLanguageReplyMultiError is an error wrapping multiple validation
// errors returned by ListProgramLanguageReply.ValidateAll() if the designated
// constraints aren't met.
type ListProgramLanguageReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProgramLanguageReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProgramLanguageReplyMultiError) AllErrors() []error { return m }

// ListProgramLanguageReplyValidationError is the validation error returned by
// ListProgramLanguageReply.Validate if the designated constraints aren't met.
type ListProgramLanguageReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProgramLanguageReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProgramLanguageReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProgramLanguageReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProgramLanguageReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProgramLanguageReplyValidationError) ErrorName() string {
	return "ListProgramLanguageReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListProgramLanguageReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProgramLanguageReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProgramLanguageReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProgramLanguageReplyValidationError{}

// Validate checks the field values on ScanCodeRepositoryReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ScanCodeRepositoryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScanCodeRepositoryReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScanCodeRepositoryReqMultiError, or nil if none found.
func (m *ScanCodeRepositoryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ScanCodeRepositoryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProgramLanguage

	if utf8.RuneCountInString(m.GetRepoUuid()) < 1 {
		err := ScanCodeRepositoryReqValidationError{
			field:  "RepoUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRepoUrl()) < 1 {
		err := ScanCodeRepositoryReqValidationError{
			field:  "RepoUrl",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Token

	if utf8.RuneCountInString(m.GetBranch()) < 1 {
		err := ScanCodeRepositoryReqValidationError{
			field:  "Branch",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ScanCodeRepositoryReqMultiError(errors)
	}

	return nil
}

// ScanCodeRepositoryReqMultiError is an error wrapping multiple validation
// errors returned by ScanCodeRepositoryReq.ValidateAll() if the designated
// constraints aren't met.
type ScanCodeRepositoryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScanCodeRepositoryReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScanCodeRepositoryReqMultiError) AllErrors() []error { return m }

// ScanCodeRepositoryReqValidationError is the validation error returned by
// ScanCodeRepositoryReq.Validate if the designated constraints aren't met.
type ScanCodeRepositoryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScanCodeRepositoryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScanCodeRepositoryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScanCodeRepositoryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScanCodeRepositoryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScanCodeRepositoryReqValidationError) ErrorName() string {
	return "ScanCodeRepositoryReqValidationError"
}

// Error satisfies the builtin error interface
func (e ScanCodeRepositoryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScanCodeRepositoryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScanCodeRepositoryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScanCodeRepositoryReqValidationError{}

// Validate checks the field values on ScanCodeRepositoryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ScanCodeRepositoryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScanCodeRepositoryReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScanCodeRepositoryReplyMultiError, or nil if none found.
func (m *ScanCodeRepositoryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ScanCodeRepositoryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	if len(errors) > 0 {
		return ScanCodeRepositoryReplyMultiError(errors)
	}

	return nil
}

// ScanCodeRepositoryReplyMultiError is an error wrapping multiple validation
// errors returned by ScanCodeRepositoryReply.ValidateAll() if the designated
// constraints aren't met.
type ScanCodeRepositoryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScanCodeRepositoryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScanCodeRepositoryReplyMultiError) AllErrors() []error { return m }

// ScanCodeRepositoryReplyValidationError is the validation error returned by
// ScanCodeRepositoryReply.Validate if the designated constraints aren't met.
type ScanCodeRepositoryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScanCodeRepositoryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScanCodeRepositoryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScanCodeRepositoryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScanCodeRepositoryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScanCodeRepositoryReplyValidationError) ErrorName() string {
	return "ScanCodeRepositoryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ScanCodeRepositoryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScanCodeRepositoryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScanCodeRepositoryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScanCodeRepositoryReplyValidationError{}

// Validate checks the field values on GetScanCodeRepositoryReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetScanCodeRepositoryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetScanCodeRepositoryReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetScanCodeRepositoryReqMultiError, or nil if none found.
func (m *GetScanCodeRepositoryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetScanCodeRepositoryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRepoUuid()) < 1 {
		err := GetScanCodeRepositoryReqValidationError{
			field:  "RepoUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTaskId()) < 1 {
		err := GetScanCodeRepositoryReqValidationError{
			field:  "TaskId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetScanCodeRepositoryReqMultiError(errors)
	}

	return nil
}

// GetScanCodeRepositoryReqMultiError is an error wrapping multiple validation
// errors returned by GetScanCodeRepositoryReq.ValidateAll() if the designated
// constraints aren't met.
type GetScanCodeRepositoryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetScanCodeRepositoryReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetScanCodeRepositoryReqMultiError) AllErrors() []error { return m }

// GetScanCodeRepositoryReqValidationError is the validation error returned by
// GetScanCodeRepositoryReq.Validate if the designated constraints aren't met.
type GetScanCodeRepositoryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetScanCodeRepositoryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetScanCodeRepositoryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetScanCodeRepositoryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetScanCodeRepositoryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetScanCodeRepositoryReqValidationError) ErrorName() string {
	return "GetScanCodeRepositoryReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetScanCodeRepositoryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetScanCodeRepositoryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetScanCodeRepositoryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetScanCodeRepositoryReqValidationError{}

// Validate checks the field values on GetScanCodeRepositoryReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetScanCodeRepositoryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetScanCodeRepositoryReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetScanCodeRepositoryReplyMultiError, or nil if none found.
func (m *GetScanCodeRepositoryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetScanCodeRepositoryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	// no validation rules for RunId

	// no validation rules for RepoUuid

	// no validation rules for Result

	// no validation rules for Describe

	// no validation rules for StartExecTime

	// no validation rules for EndExecTime

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return GetScanCodeRepositoryReplyMultiError(errors)
	}

	return nil
}

// GetScanCodeRepositoryReplyMultiError is an error wrapping multiple
// validation errors returned by GetScanCodeRepositoryReply.ValidateAll() if
// the designated constraints aren't met.
type GetScanCodeRepositoryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetScanCodeRepositoryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetScanCodeRepositoryReplyMultiError) AllErrors() []error { return m }

// GetScanCodeRepositoryReplyValidationError is the validation error returned
// by GetScanCodeRepositoryReply.Validate if the designated constraints aren't met.
type GetScanCodeRepositoryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetScanCodeRepositoryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetScanCodeRepositoryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetScanCodeRepositoryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetScanCodeRepositoryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetScanCodeRepositoryReplyValidationError) ErrorName() string {
	return "GetScanCodeRepositoryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetScanCodeRepositoryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetScanCodeRepositoryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetScanCodeRepositoryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetScanCodeRepositoryReplyValidationError{}

// Validate checks the field values on ListScanCodeRepositoryReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListScanCodeRepositoryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListScanCodeRepositoryReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListScanCodeRepositoryReqMultiError, or nil if none found.
func (m *ListScanCodeRepositoryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListScanCodeRepositoryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRepoUuid()) < 1 {
		err := ListScanCodeRepositoryReqValidationError{
			field:  "RepoUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListScanCodeRepositoryReqMultiError(errors)
	}

	return nil
}

// ListScanCodeRepositoryReqMultiError is an error wrapping multiple validation
// errors returned by ListScanCodeRepositoryReq.ValidateAll() if the
// designated constraints aren't met.
type ListScanCodeRepositoryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListScanCodeRepositoryReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListScanCodeRepositoryReqMultiError) AllErrors() []error { return m }

// ListScanCodeRepositoryReqValidationError is the validation error returned by
// ListScanCodeRepositoryReq.Validate if the designated constraints aren't met.
type ListScanCodeRepositoryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListScanCodeRepositoryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListScanCodeRepositoryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListScanCodeRepositoryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListScanCodeRepositoryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListScanCodeRepositoryReqValidationError) ErrorName() string {
	return "ListScanCodeRepositoryReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListScanCodeRepositoryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListScanCodeRepositoryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListScanCodeRepositoryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListScanCodeRepositoryReqValidationError{}

// Validate checks the field values on ListScanCodeRepositoryReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListScanCodeRepositoryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListScanCodeRepositoryReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListScanCodeRepositoryReplyMultiError, or nil if none found.
func (m *ListScanCodeRepositoryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListScanCodeRepositoryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetScanCodeRepos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListScanCodeRepositoryReplyValidationError{
						field:  fmt.Sprintf("ScanCodeRepos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListScanCodeRepositoryReplyValidationError{
						field:  fmt.Sprintf("ScanCodeRepos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListScanCodeRepositoryReplyValidationError{
					field:  fmt.Sprintf("ScanCodeRepos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListScanCodeRepositoryReplyMultiError(errors)
	}

	return nil
}

// ListScanCodeRepositoryReplyMultiError is an error wrapping multiple
// validation errors returned by ListScanCodeRepositoryReply.ValidateAll() if
// the designated constraints aren't met.
type ListScanCodeRepositoryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListScanCodeRepositoryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListScanCodeRepositoryReplyMultiError) AllErrors() []error { return m }

// ListScanCodeRepositoryReplyValidationError is the validation error returned
// by ListScanCodeRepositoryReply.Validate if the designated constraints
// aren't met.
type ListScanCodeRepositoryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListScanCodeRepositoryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListScanCodeRepositoryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListScanCodeRepositoryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListScanCodeRepositoryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListScanCodeRepositoryReplyValidationError) ErrorName() string {
	return "ListScanCodeRepositoryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListScanCodeRepositoryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListScanCodeRepositoryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListScanCodeRepositoryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListScanCodeRepositoryReplyValidationError{}

// Validate checks the field values on UnitTestCodeRepositoryReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnitTestCodeRepositoryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnitTestCodeRepositoryReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnitTestCodeRepositoryReqMultiError, or nil if none found.
func (m *UnitTestCodeRepositoryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UnitTestCodeRepositoryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProgramLanguage

	if utf8.RuneCountInString(m.GetRepoUuid()) < 1 {
		err := UnitTestCodeRepositoryReqValidationError{
			field:  "RepoUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRepoUrl()) < 1 {
		err := UnitTestCodeRepositoryReqValidationError{
			field:  "RepoUrl",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Token

	if utf8.RuneCountInString(m.GetBranch()) < 1 {
		err := UnitTestCodeRepositoryReqValidationError{
			field:  "Branch",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UnitTestCodeRepositoryReqMultiError(errors)
	}

	return nil
}

// UnitTestCodeRepositoryReqMultiError is an error wrapping multiple validation
// errors returned by UnitTestCodeRepositoryReq.ValidateAll() if the
// designated constraints aren't met.
type UnitTestCodeRepositoryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnitTestCodeRepositoryReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnitTestCodeRepositoryReqMultiError) AllErrors() []error { return m }

// UnitTestCodeRepositoryReqValidationError is the validation error returned by
// UnitTestCodeRepositoryReq.Validate if the designated constraints aren't met.
type UnitTestCodeRepositoryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnitTestCodeRepositoryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnitTestCodeRepositoryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnitTestCodeRepositoryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnitTestCodeRepositoryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnitTestCodeRepositoryReqValidationError) ErrorName() string {
	return "UnitTestCodeRepositoryReqValidationError"
}

// Error satisfies the builtin error interface
func (e UnitTestCodeRepositoryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnitTestCodeRepositoryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnitTestCodeRepositoryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnitTestCodeRepositoryReqValidationError{}

// Validate checks the field values on UnitTestCodeRepositoryReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnitTestCodeRepositoryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnitTestCodeRepositoryReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnitTestCodeRepositoryReplyMultiError, or nil if none found.
func (m *UnitTestCodeRepositoryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UnitTestCodeRepositoryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	if len(errors) > 0 {
		return UnitTestCodeRepositoryReplyMultiError(errors)
	}

	return nil
}

// UnitTestCodeRepositoryReplyMultiError is an error wrapping multiple
// validation errors returned by UnitTestCodeRepositoryReply.ValidateAll() if
// the designated constraints aren't met.
type UnitTestCodeRepositoryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnitTestCodeRepositoryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnitTestCodeRepositoryReplyMultiError) AllErrors() []error { return m }

// UnitTestCodeRepositoryReplyValidationError is the validation error returned
// by UnitTestCodeRepositoryReply.Validate if the designated constraints
// aren't met.
type UnitTestCodeRepositoryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnitTestCodeRepositoryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnitTestCodeRepositoryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnitTestCodeRepositoryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnitTestCodeRepositoryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnitTestCodeRepositoryReplyValidationError) ErrorName() string {
	return "UnitTestCodeRepositoryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UnitTestCodeRepositoryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnitTestCodeRepositoryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnitTestCodeRepositoryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnitTestCodeRepositoryReplyValidationError{}

// Validate checks the field values on GetUnitTestCodeRepositoryReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUnitTestCodeRepositoryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUnitTestCodeRepositoryReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUnitTestCodeRepositoryReqMultiError, or nil if none found.
func (m *GetUnitTestCodeRepositoryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUnitTestCodeRepositoryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRepoUuid()) < 1 {
		err := GetUnitTestCodeRepositoryReqValidationError{
			field:  "RepoUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTaskId()) < 1 {
		err := GetUnitTestCodeRepositoryReqValidationError{
			field:  "TaskId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUnitTestCodeRepositoryReqMultiError(errors)
	}

	return nil
}

// GetUnitTestCodeRepositoryReqMultiError is an error wrapping multiple
// validation errors returned by GetUnitTestCodeRepositoryReq.ValidateAll() if
// the designated constraints aren't met.
type GetUnitTestCodeRepositoryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUnitTestCodeRepositoryReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUnitTestCodeRepositoryReqMultiError) AllErrors() []error { return m }

// GetUnitTestCodeRepositoryReqValidationError is the validation error returned
// by GetUnitTestCodeRepositoryReq.Validate if the designated constraints
// aren't met.
type GetUnitTestCodeRepositoryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUnitTestCodeRepositoryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUnitTestCodeRepositoryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUnitTestCodeRepositoryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUnitTestCodeRepositoryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUnitTestCodeRepositoryReqValidationError) ErrorName() string {
	return "GetUnitTestCodeRepositoryReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetUnitTestCodeRepositoryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUnitTestCodeRepositoryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUnitTestCodeRepositoryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUnitTestCodeRepositoryReqValidationError{}

// Validate checks the field values on GetUnitTestCodeRepositoryReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUnitTestCodeRepositoryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUnitTestCodeRepositoryReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUnitTestCodeRepositoryReplyMultiError, or nil if none found.
func (m *GetUnitTestCodeRepositoryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUnitTestCodeRepositoryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	// no validation rules for RunId

	// no validation rules for RepoUuid

	// no validation rules for Result

	// no validation rules for Describe

	// no validation rules for StartExecTime

	// no validation rules for EndExecTime

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return GetUnitTestCodeRepositoryReplyMultiError(errors)
	}

	return nil
}

// GetUnitTestCodeRepositoryReplyMultiError is an error wrapping multiple
// validation errors returned by GetUnitTestCodeRepositoryReply.ValidateAll()
// if the designated constraints aren't met.
type GetUnitTestCodeRepositoryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUnitTestCodeRepositoryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUnitTestCodeRepositoryReplyMultiError) AllErrors() []error { return m }

// GetUnitTestCodeRepositoryReplyValidationError is the validation error
// returned by GetUnitTestCodeRepositoryReply.Validate if the designated
// constraints aren't met.
type GetUnitTestCodeRepositoryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUnitTestCodeRepositoryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUnitTestCodeRepositoryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUnitTestCodeRepositoryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUnitTestCodeRepositoryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUnitTestCodeRepositoryReplyValidationError) ErrorName() string {
	return "GetUnitTestCodeRepositoryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetUnitTestCodeRepositoryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUnitTestCodeRepositoryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUnitTestCodeRepositoryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUnitTestCodeRepositoryReplyValidationError{}

// Validate checks the field values on ListUnitTestCodeRepositoryReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUnitTestCodeRepositoryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUnitTestCodeRepositoryReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListUnitTestCodeRepositoryReqMultiError, or nil if none found.
func (m *ListUnitTestCodeRepositoryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUnitTestCodeRepositoryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRepoUuid()) < 1 {
		err := ListUnitTestCodeRepositoryReqValidationError{
			field:  "RepoUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListUnitTestCodeRepositoryReqMultiError(errors)
	}

	return nil
}

// ListUnitTestCodeRepositoryReqMultiError is an error wrapping multiple
// validation errors returned by ListUnitTestCodeRepositoryReq.ValidateAll()
// if the designated constraints aren't met.
type ListUnitTestCodeRepositoryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUnitTestCodeRepositoryReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUnitTestCodeRepositoryReqMultiError) AllErrors() []error { return m }

// ListUnitTestCodeRepositoryReqValidationError is the validation error
// returned by ListUnitTestCodeRepositoryReq.Validate if the designated
// constraints aren't met.
type ListUnitTestCodeRepositoryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUnitTestCodeRepositoryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUnitTestCodeRepositoryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUnitTestCodeRepositoryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUnitTestCodeRepositoryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUnitTestCodeRepositoryReqValidationError) ErrorName() string {
	return "ListUnitTestCodeRepositoryReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListUnitTestCodeRepositoryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUnitTestCodeRepositoryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUnitTestCodeRepositoryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUnitTestCodeRepositoryReqValidationError{}

// Validate checks the field values on ListUnitTestCodeRepositoryReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUnitTestCodeRepositoryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUnitTestCodeRepositoryReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListUnitTestCodeRepositoryReplyMultiError, or nil if none found.
func (m *ListUnitTestCodeRepositoryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUnitTestCodeRepositoryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUnitTestCodeRepos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUnitTestCodeRepositoryReplyValidationError{
						field:  fmt.Sprintf("UnitTestCodeRepos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUnitTestCodeRepositoryReplyValidationError{
						field:  fmt.Sprintf("UnitTestCodeRepos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUnitTestCodeRepositoryReplyValidationError{
					field:  fmt.Sprintf("UnitTestCodeRepos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUnitTestCodeRepositoryReplyMultiError(errors)
	}

	return nil
}

// ListUnitTestCodeRepositoryReplyMultiError is an error wrapping multiple
// validation errors returned by ListUnitTestCodeRepositoryReply.ValidateAll()
// if the designated constraints aren't met.
type ListUnitTestCodeRepositoryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUnitTestCodeRepositoryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUnitTestCodeRepositoryReplyMultiError) AllErrors() []error { return m }

// ListUnitTestCodeRepositoryReplyValidationError is the validation error
// returned by ListUnitTestCodeRepositoryReply.Validate if the designated
// constraints aren't met.
type ListUnitTestCodeRepositoryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUnitTestCodeRepositoryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUnitTestCodeRepositoryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUnitTestCodeRepositoryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUnitTestCodeRepositoryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUnitTestCodeRepositoryReplyValidationError) ErrorName() string {
	return "ListUnitTestCodeRepositoryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListUnitTestCodeRepositoryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUnitTestCodeRepositoryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUnitTestCodeRepositoryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUnitTestCodeRepositoryReplyValidationError{}

// Validate checks the field values on BuildContainerImageReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BuildContainerImageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BuildContainerImageReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BuildContainerImageReqMultiError, or nil if none found.
func (m *BuildContainerImageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *BuildContainerImageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRepoUuid()) < 1 {
		err := BuildContainerImageReqValidationError{
			field:  "RepoUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRepoName()) < 1 {
		err := BuildContainerImageReqValidationError{
			field:  "RepoName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRepoUrl()) < 1 {
		err := BuildContainerImageReqValidationError{
			field:  "RepoUrl",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Token

	if utf8.RuneCountInString(m.GetBranch()) < 1 {
		err := BuildContainerImageReqValidationError{
			field:  "Branch",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRegistryUrl()) < 1 {
		err := BuildContainerImageReqValidationError{
			field:  "RegistryUrl",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for RegistryUsername

	// no validation rules for RegistryPassword

	if utf8.RuneCountInString(m.GetRegistryNameSpace()) < 1 {
		err := BuildContainerImageReqValidationError{
			field:  "RegistryNameSpace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for DockerfilePath

	if len(errors) > 0 {
		return BuildContainerImageReqMultiError(errors)
	}

	return nil
}

// BuildContainerImageReqMultiError is an error wrapping multiple validation
// errors returned by BuildContainerImageReq.ValidateAll() if the designated
// constraints aren't met.
type BuildContainerImageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BuildContainerImageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BuildContainerImageReqMultiError) AllErrors() []error { return m }

// BuildContainerImageReqValidationError is the validation error returned by
// BuildContainerImageReq.Validate if the designated constraints aren't met.
type BuildContainerImageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BuildContainerImageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BuildContainerImageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BuildContainerImageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BuildContainerImageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BuildContainerImageReqValidationError) ErrorName() string {
	return "BuildContainerImageReqValidationError"
}

// Error satisfies the builtin error interface
func (e BuildContainerImageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBuildContainerImageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BuildContainerImageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BuildContainerImageReqValidationError{}

// Validate checks the field values on BuildContainerImageReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BuildContainerImageReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BuildContainerImageReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BuildContainerImageReplyMultiError, or nil if none found.
func (m *BuildContainerImageReply) ValidateAll() error {
	return m.validate(true)
}

func (m *BuildContainerImageReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	if len(errors) > 0 {
		return BuildContainerImageReplyMultiError(errors)
	}

	return nil
}

// BuildContainerImageReplyMultiError is an error wrapping multiple validation
// errors returned by BuildContainerImageReply.ValidateAll() if the designated
// constraints aren't met.
type BuildContainerImageReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BuildContainerImageReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BuildContainerImageReplyMultiError) AllErrors() []error { return m }

// BuildContainerImageReplyValidationError is the validation error returned by
// BuildContainerImageReply.Validate if the designated constraints aren't met.
type BuildContainerImageReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BuildContainerImageReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BuildContainerImageReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BuildContainerImageReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BuildContainerImageReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BuildContainerImageReplyValidationError) ErrorName() string {
	return "BuildContainerImageReplyValidationError"
}

// Error satisfies the builtin error interface
func (e BuildContainerImageReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBuildContainerImageReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BuildContainerImageReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BuildContainerImageReplyValidationError{}

// Validate checks the field values on GetBuildContainerImageReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBuildContainerImageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBuildContainerImageReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBuildContainerImageReqMultiError, or nil if none found.
func (m *GetBuildContainerImageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBuildContainerImageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRepoUuid()) < 1 {
		err := GetBuildContainerImageReqValidationError{
			field:  "RepoUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for TaskId

	if len(errors) > 0 {
		return GetBuildContainerImageReqMultiError(errors)
	}

	return nil
}

// GetBuildContainerImageReqMultiError is an error wrapping multiple validation
// errors returned by GetBuildContainerImageReq.ValidateAll() if the
// designated constraints aren't met.
type GetBuildContainerImageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBuildContainerImageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBuildContainerImageReqMultiError) AllErrors() []error { return m }

// GetBuildContainerImageReqValidationError is the validation error returned by
// GetBuildContainerImageReq.Validate if the designated constraints aren't met.
type GetBuildContainerImageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBuildContainerImageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBuildContainerImageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBuildContainerImageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBuildContainerImageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBuildContainerImageReqValidationError) ErrorName() string {
	return "GetBuildContainerImageReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetBuildContainerImageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBuildContainerImageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBuildContainerImageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBuildContainerImageReqValidationError{}

// Validate checks the field values on GetBuildContainerImageReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBuildContainerImageReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBuildContainerImageReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBuildContainerImageReplyMultiError, or nil if none found.
func (m *GetBuildContainerImageReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBuildContainerImageReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	// no validation rules for RunId

	// no validation rules for RepoUuid

	// no validation rules for RepoUrl

	// no validation rules for Branch

	// no validation rules for CommitId

	// no validation rules for DockerfilePath

	// no validation rules for ImageUrl

	// no validation rules for ImageId

	// no validation rules for Result

	// no validation rules for Describe

	// no validation rules for Dockerfile

	// no validation rules for StartExecTime

	// no validation rules for EndExecTime

	// no validation rules for CreateTime

	// no validation rules for CostTime

	if len(errors) > 0 {
		return GetBuildContainerImageReplyMultiError(errors)
	}

	return nil
}

// GetBuildContainerImageReplyMultiError is an error wrapping multiple
// validation errors returned by GetBuildContainerImageReply.ValidateAll() if
// the designated constraints aren't met.
type GetBuildContainerImageReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBuildContainerImageReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBuildContainerImageReplyMultiError) AllErrors() []error { return m }

// GetBuildContainerImageReplyValidationError is the validation error returned
// by GetBuildContainerImageReply.Validate if the designated constraints
// aren't met.
type GetBuildContainerImageReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBuildContainerImageReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBuildContainerImageReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBuildContainerImageReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBuildContainerImageReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBuildContainerImageReplyValidationError) ErrorName() string {
	return "GetBuildContainerImageReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetBuildContainerImageReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBuildContainerImageReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBuildContainerImageReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBuildContainerImageReplyValidationError{}

// Validate checks the field values on ListBuildContainerImageReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBuildContainerImageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBuildContainerImageReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBuildContainerImageReqMultiError, or nil if none found.
func (m *ListBuildContainerImageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBuildContainerImageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRepoUuid()) < 1 {
		err := ListBuildContainerImageReqValidationError{
			field:  "RepoUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListBuildContainerImageReqMultiError(errors)
	}

	return nil
}

// ListBuildContainerImageReqMultiError is an error wrapping multiple
// validation errors returned by ListBuildContainerImageReq.ValidateAll() if
// the designated constraints aren't met.
type ListBuildContainerImageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBuildContainerImageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBuildContainerImageReqMultiError) AllErrors() []error { return m }

// ListBuildContainerImageReqValidationError is the validation error returned
// by ListBuildContainerImageReq.Validate if the designated constraints aren't met.
type ListBuildContainerImageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBuildContainerImageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBuildContainerImageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBuildContainerImageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBuildContainerImageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBuildContainerImageReqValidationError) ErrorName() string {
	return "ListBuildContainerImageReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListBuildContainerImageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBuildContainerImageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBuildContainerImageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBuildContainerImageReqValidationError{}

// Validate checks the field values on ListBuildContainerImageReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBuildContainerImageReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBuildContainerImageReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBuildContainerImageReplyMultiError, or nil if none found.
func (m *ListBuildContainerImageReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBuildContainerImageReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBuildContainerImages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBuildContainerImageReplyValidationError{
						field:  fmt.Sprintf("BuildContainerImages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBuildContainerImageReplyValidationError{
						field:  fmt.Sprintf("BuildContainerImages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBuildContainerImageReplyValidationError{
					field:  fmt.Sprintf("BuildContainerImages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListBuildContainerImageReplyMultiError(errors)
	}

	return nil
}

// ListBuildContainerImageReplyMultiError is an error wrapping multiple
// validation errors returned by ListBuildContainerImageReply.ValidateAll() if
// the designated constraints aren't met.
type ListBuildContainerImageReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBuildContainerImageReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBuildContainerImageReplyMultiError) AllErrors() []error { return m }

// ListBuildContainerImageReplyValidationError is the validation error returned
// by ListBuildContainerImageReply.Validate if the designated constraints
// aren't met.
type ListBuildContainerImageReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBuildContainerImageReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBuildContainerImageReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBuildContainerImageReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBuildContainerImageReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBuildContainerImageReplyValidationError) ErrorName() string {
	return "ListBuildContainerImageReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListBuildContainerImageReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBuildContainerImageReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBuildContainerImageReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBuildContainerImageReplyValidationError{}

// Validate checks the field values on UploadLocalFileToCloudObjectStorageReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UploadLocalFileToCloudObjectStorageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UploadLocalFileToCloudObjectStorageReq with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// UploadLocalFileToCloudObjectStorageReqMultiError, or nil if none found.
func (m *UploadLocalFileToCloudObjectStorageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadLocalFileToCloudObjectStorageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetEndpoint()) < 1 {
		err := UploadLocalFileToCloudObjectStorageReqValidationError{
			field:  "Endpoint",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAccessKeyId()) < 1 {
		err := UploadLocalFileToCloudObjectStorageReqValidationError{
			field:  "AccessKeyId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAccessKeySecret()) < 1 {
		err := UploadLocalFileToCloudObjectStorageReqValidationError{
			field:  "AccessKeySecret",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSecurityToken()) < 1 {
		err := UploadLocalFileToCloudObjectStorageReqValidationError{
			field:  "SecurityToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBucketName()) < 1 {
		err := UploadLocalFileToCloudObjectStorageReqValidationError{
			field:  "BucketName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetObjectPath()) < 1 {
		err := UploadLocalFileToCloudObjectStorageReqValidationError{
			field:  "ObjectPath",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetLocalFilePath()) < 1 {
		err := UploadLocalFileToCloudObjectStorageReqValidationError{
			field:  "LocalFilePath",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PlatformId

	if len(errors) > 0 {
		return UploadLocalFileToCloudObjectStorageReqMultiError(errors)
	}

	return nil
}

// UploadLocalFileToCloudObjectStorageReqMultiError is an error wrapping
// multiple validation errors returned by
// UploadLocalFileToCloudObjectStorageReq.ValidateAll() if the designated
// constraints aren't met.
type UploadLocalFileToCloudObjectStorageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadLocalFileToCloudObjectStorageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadLocalFileToCloudObjectStorageReqMultiError) AllErrors() []error { return m }

// UploadLocalFileToCloudObjectStorageReqValidationError is the validation
// error returned by UploadLocalFileToCloudObjectStorageReq.Validate if the
// designated constraints aren't met.
type UploadLocalFileToCloudObjectStorageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadLocalFileToCloudObjectStorageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadLocalFileToCloudObjectStorageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadLocalFileToCloudObjectStorageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadLocalFileToCloudObjectStorageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadLocalFileToCloudObjectStorageReqValidationError) ErrorName() string {
	return "UploadLocalFileToCloudObjectStorageReqValidationError"
}

// Error satisfies the builtin error interface
func (e UploadLocalFileToCloudObjectStorageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadLocalFileToCloudObjectStorageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadLocalFileToCloudObjectStorageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadLocalFileToCloudObjectStorageReqValidationError{}

// Validate checks the field values on UploadLocalFileToCloudObjectStorageReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UploadLocalFileToCloudObjectStorageReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UploadLocalFileToCloudObjectStorageReply with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// UploadLocalFileToCloudObjectStorageReplyMultiError, or nil if none found.
func (m *UploadLocalFileToCloudObjectStorageReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadLocalFileToCloudObjectStorageReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	if len(errors) > 0 {
		return UploadLocalFileToCloudObjectStorageReplyMultiError(errors)
	}

	return nil
}

// UploadLocalFileToCloudObjectStorageReplyMultiError is an error wrapping
// multiple validation errors returned by
// UploadLocalFileToCloudObjectStorageReply.ValidateAll() if the designated
// constraints aren't met.
type UploadLocalFileToCloudObjectStorageReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadLocalFileToCloudObjectStorageReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadLocalFileToCloudObjectStorageReplyMultiError) AllErrors() []error { return m }

// UploadLocalFileToCloudObjectStorageReplyValidationError is the validation
// error returned by UploadLocalFileToCloudObjectStorageReply.Validate if the
// designated constraints aren't met.
type UploadLocalFileToCloudObjectStorageReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadLocalFileToCloudObjectStorageReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadLocalFileToCloudObjectStorageReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadLocalFileToCloudObjectStorageReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadLocalFileToCloudObjectStorageReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadLocalFileToCloudObjectStorageReplyValidationError) ErrorName() string {
	return "UploadLocalFileToCloudObjectStorageReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UploadLocalFileToCloudObjectStorageReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadLocalFileToCloudObjectStorageReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadLocalFileToCloudObjectStorageReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadLocalFileToCloudObjectStorageReplyValidationError{}

// Validate checks the field values on
// DownloadCloudObjectStorageObjectToLocalReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DownloadCloudObjectStorageObjectToLocalReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DownloadCloudObjectStorageObjectToLocalReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// DownloadCloudObjectStorageObjectToLocalReqMultiError, or nil if none found.
func (m *DownloadCloudObjectStorageObjectToLocalReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DownloadCloudObjectStorageObjectToLocalReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetEndpoint()) < 1 {
		err := DownloadCloudObjectStorageObjectToLocalReqValidationError{
			field:  "Endpoint",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAccessKeyId()) < 1 {
		err := DownloadCloudObjectStorageObjectToLocalReqValidationError{
			field:  "AccessKeyId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAccessKeySecret()) < 1 {
		err := DownloadCloudObjectStorageObjectToLocalReqValidationError{
			field:  "AccessKeySecret",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSecurityToken()) < 1 {
		err := DownloadCloudObjectStorageObjectToLocalReqValidationError{
			field:  "SecurityToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBucketName()) < 1 {
		err := DownloadCloudObjectStorageObjectToLocalReqValidationError{
			field:  "BucketName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetObjectPath()) < 1 {
		err := DownloadCloudObjectStorageObjectToLocalReqValidationError{
			field:  "ObjectPath",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetLocalFilePath()) < 1 {
		err := DownloadCloudObjectStorageObjectToLocalReqValidationError{
			field:  "LocalFilePath",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PlatformId

	if len(errors) > 0 {
		return DownloadCloudObjectStorageObjectToLocalReqMultiError(errors)
	}

	return nil
}

// DownloadCloudObjectStorageObjectToLocalReqMultiError is an error wrapping
// multiple validation errors returned by
// DownloadCloudObjectStorageObjectToLocalReq.ValidateAll() if the designated
// constraints aren't met.
type DownloadCloudObjectStorageObjectToLocalReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DownloadCloudObjectStorageObjectToLocalReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DownloadCloudObjectStorageObjectToLocalReqMultiError) AllErrors() []error { return m }

// DownloadCloudObjectStorageObjectToLocalReqValidationError is the validation
// error returned by DownloadCloudObjectStorageObjectToLocalReq.Validate if
// the designated constraints aren't met.
type DownloadCloudObjectStorageObjectToLocalReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DownloadCloudObjectStorageObjectToLocalReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DownloadCloudObjectStorageObjectToLocalReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DownloadCloudObjectStorageObjectToLocalReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DownloadCloudObjectStorageObjectToLocalReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DownloadCloudObjectStorageObjectToLocalReqValidationError) ErrorName() string {
	return "DownloadCloudObjectStorageObjectToLocalReqValidationError"
}

// Error satisfies the builtin error interface
func (e DownloadCloudObjectStorageObjectToLocalReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDownloadCloudObjectStorageObjectToLocalReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DownloadCloudObjectStorageObjectToLocalReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DownloadCloudObjectStorageObjectToLocalReqValidationError{}

// Validate checks the field values on
// DownloadCloudObjectStorageObjectToLocalReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DownloadCloudObjectStorageObjectToLocalReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DownloadCloudObjectStorageObjectToLocalReply with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// DownloadCloudObjectStorageObjectToLocalReplyMultiError, or nil if none found.
func (m *DownloadCloudObjectStorageObjectToLocalReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DownloadCloudObjectStorageObjectToLocalReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	if len(errors) > 0 {
		return DownloadCloudObjectStorageObjectToLocalReplyMultiError(errors)
	}

	return nil
}

// DownloadCloudObjectStorageObjectToLocalReplyMultiError is an error wrapping
// multiple validation errors returned by
// DownloadCloudObjectStorageObjectToLocalReply.ValidateAll() if the
// designated constraints aren't met.
type DownloadCloudObjectStorageObjectToLocalReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DownloadCloudObjectStorageObjectToLocalReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DownloadCloudObjectStorageObjectToLocalReplyMultiError) AllErrors() []error { return m }

// DownloadCloudObjectStorageObjectToLocalReplyValidationError is the
// validation error returned by
// DownloadCloudObjectStorageObjectToLocalReply.Validate if the designated
// constraints aren't met.
type DownloadCloudObjectStorageObjectToLocalReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DownloadCloudObjectStorageObjectToLocalReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DownloadCloudObjectStorageObjectToLocalReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DownloadCloudObjectStorageObjectToLocalReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DownloadCloudObjectStorageObjectToLocalReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DownloadCloudObjectStorageObjectToLocalReplyValidationError) ErrorName() string {
	return "DownloadCloudObjectStorageObjectToLocalReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DownloadCloudObjectStorageObjectToLocalReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDownloadCloudObjectStorageObjectToLocalReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DownloadCloudObjectStorageObjectToLocalReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DownloadCloudObjectStorageObjectToLocalReplyValidationError{}

// Validate checks the field values on UploadLocalFileToSFTPReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadLocalFileToSFTPReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadLocalFileToSFTPReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadLocalFileToSFTPReqMultiError, or nil if none found.
func (m *UploadLocalFileToSFTPReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadLocalFileToSFTPReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRemoteHost()) < 1 {
		err := UploadLocalFileToSFTPReqValidationError{
			field:  "RemoteHost",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for RemotePort

	if utf8.RuneCountInString(m.GetRemoteUser()) < 1 {
		err := UploadLocalFileToSFTPReqValidationError{
			field:  "RemoteUser",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PrivateKey

	// no validation rules for Password

	if utf8.RuneCountInString(m.GetLocalFilePath()) < 1 {
		err := UploadLocalFileToSFTPReqValidationError{
			field:  "LocalFilePath",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRemoteFilePath()) < 1 {
		err := UploadLocalFileToSFTPReqValidationError{
			field:  "RemoteFilePath",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UploadLocalFileToSFTPReqMultiError(errors)
	}

	return nil
}

// UploadLocalFileToSFTPReqMultiError is an error wrapping multiple validation
// errors returned by UploadLocalFileToSFTPReq.ValidateAll() if the designated
// constraints aren't met.
type UploadLocalFileToSFTPReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadLocalFileToSFTPReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadLocalFileToSFTPReqMultiError) AllErrors() []error { return m }

// UploadLocalFileToSFTPReqValidationError is the validation error returned by
// UploadLocalFileToSFTPReq.Validate if the designated constraints aren't met.
type UploadLocalFileToSFTPReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadLocalFileToSFTPReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadLocalFileToSFTPReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadLocalFileToSFTPReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadLocalFileToSFTPReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadLocalFileToSFTPReqValidationError) ErrorName() string {
	return "UploadLocalFileToSFTPReqValidationError"
}

// Error satisfies the builtin error interface
func (e UploadLocalFileToSFTPReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadLocalFileToSFTPReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadLocalFileToSFTPReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadLocalFileToSFTPReqValidationError{}

// Validate checks the field values on UploadLocalFileToSFTPReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadLocalFileToSFTPReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadLocalFileToSFTPReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadLocalFileToSFTPReplyMultiError, or nil if none found.
func (m *UploadLocalFileToSFTPReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadLocalFileToSFTPReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	if len(errors) > 0 {
		return UploadLocalFileToSFTPReplyMultiError(errors)
	}

	return nil
}

// UploadLocalFileToSFTPReplyMultiError is an error wrapping multiple
// validation errors returned by UploadLocalFileToSFTPReply.ValidateAll() if
// the designated constraints aren't met.
type UploadLocalFileToSFTPReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadLocalFileToSFTPReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadLocalFileToSFTPReplyMultiError) AllErrors() []error { return m }

// UploadLocalFileToSFTPReplyValidationError is the validation error returned
// by UploadLocalFileToSFTPReply.Validate if the designated constraints aren't met.
type UploadLocalFileToSFTPReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadLocalFileToSFTPReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadLocalFileToSFTPReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadLocalFileToSFTPReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadLocalFileToSFTPReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadLocalFileToSFTPReplyValidationError) ErrorName() string {
	return "UploadLocalFileToSFTPReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UploadLocalFileToSFTPReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadLocalFileToSFTPReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadLocalFileToSFTPReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadLocalFileToSFTPReplyValidationError{}

// Validate checks the field values on DownloadSFTPFileToLocalReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DownloadSFTPFileToLocalReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DownloadSFTPFileToLocalReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DownloadSFTPFileToLocalReqMultiError, or nil if none found.
func (m *DownloadSFTPFileToLocalReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DownloadSFTPFileToLocalReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRemoteHost()) < 1 {
		err := DownloadSFTPFileToLocalReqValidationError{
			field:  "RemoteHost",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for RemotePort

	if utf8.RuneCountInString(m.GetRemoteUser()) < 1 {
		err := DownloadSFTPFileToLocalReqValidationError{
			field:  "RemoteUser",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PrivateKey

	// no validation rules for Password

	if utf8.RuneCountInString(m.GetLocalFilePath()) < 1 {
		err := DownloadSFTPFileToLocalReqValidationError{
			field:  "LocalFilePath",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRemoteFilePath()) < 1 {
		err := DownloadSFTPFileToLocalReqValidationError{
			field:  "RemoteFilePath",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DownloadSFTPFileToLocalReqMultiError(errors)
	}

	return nil
}

// DownloadSFTPFileToLocalReqMultiError is an error wrapping multiple
// validation errors returned by DownloadSFTPFileToLocalReq.ValidateAll() if
// the designated constraints aren't met.
type DownloadSFTPFileToLocalReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DownloadSFTPFileToLocalReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DownloadSFTPFileToLocalReqMultiError) AllErrors() []error { return m }

// DownloadSFTPFileToLocalReqValidationError is the validation error returned
// by DownloadSFTPFileToLocalReq.Validate if the designated constraints aren't met.
type DownloadSFTPFileToLocalReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DownloadSFTPFileToLocalReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DownloadSFTPFileToLocalReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DownloadSFTPFileToLocalReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DownloadSFTPFileToLocalReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DownloadSFTPFileToLocalReqValidationError) ErrorName() string {
	return "DownloadSFTPFileToLocalReqValidationError"
}

// Error satisfies the builtin error interface
func (e DownloadSFTPFileToLocalReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDownloadSFTPFileToLocalReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DownloadSFTPFileToLocalReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DownloadSFTPFileToLocalReqValidationError{}

// Validate checks the field values on DownloadSFTPFileToLocalReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DownloadSFTPFileToLocalReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DownloadSFTPFileToLocalReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DownloadSFTPFileToLocalReplyMultiError, or nil if none found.
func (m *DownloadSFTPFileToLocalReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DownloadSFTPFileToLocalReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	if len(errors) > 0 {
		return DownloadSFTPFileToLocalReplyMultiError(errors)
	}

	return nil
}

// DownloadSFTPFileToLocalReplyMultiError is an error wrapping multiple
// validation errors returned by DownloadSFTPFileToLocalReply.ValidateAll() if
// the designated constraints aren't met.
type DownloadSFTPFileToLocalReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DownloadSFTPFileToLocalReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DownloadSFTPFileToLocalReplyMultiError) AllErrors() []error { return m }

// DownloadSFTPFileToLocalReplyValidationError is the validation error returned
// by DownloadSFTPFileToLocalReply.Validate if the designated constraints
// aren't met.
type DownloadSFTPFileToLocalReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DownloadSFTPFileToLocalReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DownloadSFTPFileToLocalReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DownloadSFTPFileToLocalReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DownloadSFTPFileToLocalReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DownloadSFTPFileToLocalReplyValidationError) ErrorName() string {
	return "DownloadSFTPFileToLocalReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DownloadSFTPFileToLocalReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDownloadSFTPFileToLocalReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DownloadSFTPFileToLocalReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DownloadSFTPFileToLocalReplyValidationError{}

// Validate checks the field values on GetCopySFTPFileHisReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCopySFTPFileHisReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCopySFTPFileHisReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCopySFTPFileHisReqMultiError, or nil if none found.
func (m *GetCopySFTPFileHisReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCopySFTPFileHisReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	if len(errors) > 0 {
		return GetCopySFTPFileHisReqMultiError(errors)
	}

	return nil
}

// GetCopySFTPFileHisReqMultiError is an error wrapping multiple validation
// errors returned by GetCopySFTPFileHisReq.ValidateAll() if the designated
// constraints aren't met.
type GetCopySFTPFileHisReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCopySFTPFileHisReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCopySFTPFileHisReqMultiError) AllErrors() []error { return m }

// GetCopySFTPFileHisReqValidationError is the validation error returned by
// GetCopySFTPFileHisReq.Validate if the designated constraints aren't met.
type GetCopySFTPFileHisReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCopySFTPFileHisReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCopySFTPFileHisReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCopySFTPFileHisReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCopySFTPFileHisReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCopySFTPFileHisReqValidationError) ErrorName() string {
	return "GetCopySFTPFileHisReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetCopySFTPFileHisReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCopySFTPFileHisReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCopySFTPFileHisReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCopySFTPFileHisReqValidationError{}

// Validate checks the field values on GetCopySFTPFileHisReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCopySFTPFileHisReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCopySFTPFileHisReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCopySFTPFileHisReplyMultiError, or nil if none found.
func (m *GetCopySFTPFileHisReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCopySFTPFileHisReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	// no validation rules for RunId

	// no validation rules for CopyType

	// no validation rules for SftpAddr

	// no validation rules for SftpUser

	// no validation rules for LocalFilePath

	// no validation rules for SftpFilePath

	// no validation rules for Result

	// no validation rules for Describe

	// no validation rules for StartExecTime

	// no validation rules for EndExecTime

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return GetCopySFTPFileHisReplyMultiError(errors)
	}

	return nil
}

// GetCopySFTPFileHisReplyMultiError is an error wrapping multiple validation
// errors returned by GetCopySFTPFileHisReply.ValidateAll() if the designated
// constraints aren't met.
type GetCopySFTPFileHisReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCopySFTPFileHisReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCopySFTPFileHisReplyMultiError) AllErrors() []error { return m }

// GetCopySFTPFileHisReplyValidationError is the validation error returned by
// GetCopySFTPFileHisReply.Validate if the designated constraints aren't met.
type GetCopySFTPFileHisReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCopySFTPFileHisReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCopySFTPFileHisReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCopySFTPFileHisReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCopySFTPFileHisReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCopySFTPFileHisReplyValidationError) ErrorName() string {
	return "GetCopySFTPFileHisReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetCopySFTPFileHisReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCopySFTPFileHisReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCopySFTPFileHisReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCopySFTPFileHisReplyValidationError{}

// Validate checks the field values on GetCopyCloudObjectStorageHisReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCopyCloudObjectStorageHisReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCopyCloudObjectStorageHisReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetCopyCloudObjectStorageHisReqMultiError, or nil if none found.
func (m *GetCopyCloudObjectStorageHisReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCopyCloudObjectStorageHisReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	if len(errors) > 0 {
		return GetCopyCloudObjectStorageHisReqMultiError(errors)
	}

	return nil
}

// GetCopyCloudObjectStorageHisReqMultiError is an error wrapping multiple
// validation errors returned by GetCopyCloudObjectStorageHisReq.ValidateAll()
// if the designated constraints aren't met.
type GetCopyCloudObjectStorageHisReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCopyCloudObjectStorageHisReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCopyCloudObjectStorageHisReqMultiError) AllErrors() []error { return m }

// GetCopyCloudObjectStorageHisReqValidationError is the validation error
// returned by GetCopyCloudObjectStorageHisReq.Validate if the designated
// constraints aren't met.
type GetCopyCloudObjectStorageHisReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCopyCloudObjectStorageHisReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCopyCloudObjectStorageHisReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCopyCloudObjectStorageHisReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCopyCloudObjectStorageHisReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCopyCloudObjectStorageHisReqValidationError) ErrorName() string {
	return "GetCopyCloudObjectStorageHisReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetCopyCloudObjectStorageHisReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCopyCloudObjectStorageHisReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCopyCloudObjectStorageHisReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCopyCloudObjectStorageHisReqValidationError{}

// Validate checks the field values on GetCopyCloudObjectStorageHisReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetCopyCloudObjectStorageHisReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCopyCloudObjectStorageHisReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetCopyCloudObjectStorageHisReplyMultiError, or nil if none found.
func (m *GetCopyCloudObjectStorageHisReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCopyCloudObjectStorageHisReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	// no validation rules for RunId

	// no validation rules for PlatformId

	// no validation rules for CopyType

	// no validation rules for Endpoint

	// no validation rules for Bucket

	// no validation rules for LocalFilePath

	// no validation rules for ObjectStoragePath

	// no validation rules for Result

	// no validation rules for Describe

	// no validation rules for StartExecTime

	// no validation rules for EndExecTime

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return GetCopyCloudObjectStorageHisReplyMultiError(errors)
	}

	return nil
}

// GetCopyCloudObjectStorageHisReplyMultiError is an error wrapping multiple
// validation errors returned by
// GetCopyCloudObjectStorageHisReply.ValidateAll() if the designated
// constraints aren't met.
type GetCopyCloudObjectStorageHisReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCopyCloudObjectStorageHisReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCopyCloudObjectStorageHisReplyMultiError) AllErrors() []error { return m }

// GetCopyCloudObjectStorageHisReplyValidationError is the validation error
// returned by GetCopyCloudObjectStorageHisReply.Validate if the designated
// constraints aren't met.
type GetCopyCloudObjectStorageHisReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCopyCloudObjectStorageHisReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCopyCloudObjectStorageHisReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCopyCloudObjectStorageHisReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCopyCloudObjectStorageHisReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCopyCloudObjectStorageHisReplyValidationError) ErrorName() string {
	return "GetCopyCloudObjectStorageHisReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetCopyCloudObjectStorageHisReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCopyCloudObjectStorageHisReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCopyCloudObjectStorageHisReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCopyCloudObjectStorageHisReplyValidationError{}

// Validate checks the field values on RunCiReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RunCiReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunCiReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RunCiReqMultiError, or nil
// if none found.
func (m *RunCiReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RunCiReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetGitHttpUrl()) < 1 {
		err := RunCiReqValidationError{
			field:  "GitHttpUrl",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetGitToken()) < 1 {
		err := RunCiReqValidationError{
			field:  "GitToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBranch()) < 1 {
		err := RunCiReqValidationError{
			field:  "Branch",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RunCiReqMultiError(errors)
	}

	return nil
}

// RunCiReqMultiError is an error wrapping multiple validation errors returned
// by RunCiReq.ValidateAll() if the designated constraints aren't met.
type RunCiReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunCiReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunCiReqMultiError) AllErrors() []error { return m }

// RunCiReqValidationError is the validation error returned by
// RunCiReq.Validate if the designated constraints aren't met.
type RunCiReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunCiReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunCiReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunCiReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunCiReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunCiReqValidationError) ErrorName() string { return "RunCiReqValidationError" }

// Error satisfies the builtin error interface
func (e RunCiReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunCiReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunCiReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunCiReqValidationError{}

// Validate checks the field values on RunCiReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RunCiReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunCiReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RunCiReplyMultiError, or
// nil if none found.
func (m *RunCiReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RunCiReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	if len(errors) > 0 {
		return RunCiReplyMultiError(errors)
	}

	return nil
}

// RunCiReplyMultiError is an error wrapping multiple validation errors
// returned by RunCiReply.ValidateAll() if the designated constraints aren't met.
type RunCiReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunCiReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunCiReplyMultiError) AllErrors() []error { return m }

// RunCiReplyValidationError is the validation error returned by
// RunCiReply.Validate if the designated constraints aren't met.
type RunCiReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunCiReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunCiReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunCiReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunCiReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunCiReplyValidationError) ErrorName() string { return "RunCiReplyValidationError" }

// Error satisfies the builtin error interface
func (e RunCiReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunCiReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunCiReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunCiReplyValidationError{}

// Validate checks the field values on GetCiTasksReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetCiTasksReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCiTasksReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetCiTasksReqMultiError, or
// nil if none found.
func (m *GetCiTasksReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCiTasksReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCiTasksReqMultiError(errors)
	}

	return nil
}

// GetCiTasksReqMultiError is an error wrapping multiple validation errors
// returned by GetCiTasksReq.ValidateAll() if the designated constraints
// aren't met.
type GetCiTasksReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCiTasksReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCiTasksReqMultiError) AllErrors() []error { return m }

// GetCiTasksReqValidationError is the validation error returned by
// GetCiTasksReq.Validate if the designated constraints aren't met.
type GetCiTasksReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCiTasksReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCiTasksReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCiTasksReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCiTasksReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCiTasksReqValidationError) ErrorName() string { return "GetCiTasksReqValidationError" }

// Error satisfies the builtin error interface
func (e GetCiTasksReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCiTasksReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCiTasksReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCiTasksReqValidationError{}

// Validate checks the field values on GetCiTasksReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCiTasksReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCiTasksReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCiTasksReplyMultiError, or nil if none found.
func (m *GetCiTasksReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCiTasksReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetTasks()))
		i := 0
		for key := range m.GetTasks() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetTasks()[key]
			_ = val

			// no validation rules for Tasks[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, GetCiTasksReplyValidationError{
							field:  fmt.Sprintf("Tasks[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, GetCiTasksReplyValidationError{
							field:  fmt.Sprintf("Tasks[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return GetCiTasksReplyValidationError{
						field:  fmt.Sprintf("Tasks[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return GetCiTasksReplyMultiError(errors)
	}

	return nil
}

// GetCiTasksReplyMultiError is an error wrapping multiple validation errors
// returned by GetCiTasksReply.ValidateAll() if the designated constraints
// aren't met.
type GetCiTasksReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCiTasksReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCiTasksReplyMultiError) AllErrors() []error { return m }

// GetCiTasksReplyValidationError is the validation error returned by
// GetCiTasksReply.Validate if the designated constraints aren't met.
type GetCiTasksReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCiTasksReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCiTasksReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCiTasksReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCiTasksReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCiTasksReplyValidationError) ErrorName() string { return "GetCiTasksReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetCiTasksReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCiTasksReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCiTasksReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCiTasksReplyValidationError{}

// Validate checks the field values on GetCiTaskDetailsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCiTaskDetailsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCiTaskDetailsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCiTaskDetailsReqMultiError, or nil if none found.
func (m *GetCiTaskDetailsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCiTaskDetailsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetTaskId()) < 1 {
		err := GetCiTaskDetailsReqValidationError{
			field:  "TaskId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCiTaskDetailsReqMultiError(errors)
	}

	return nil
}

// GetCiTaskDetailsReqMultiError is an error wrapping multiple validation
// errors returned by GetCiTaskDetailsReq.ValidateAll() if the designated
// constraints aren't met.
type GetCiTaskDetailsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCiTaskDetailsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCiTaskDetailsReqMultiError) AllErrors() []error { return m }

// GetCiTaskDetailsReqValidationError is the validation error returned by
// GetCiTaskDetailsReq.Validate if the designated constraints aren't met.
type GetCiTaskDetailsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCiTaskDetailsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCiTaskDetailsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCiTaskDetailsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCiTaskDetailsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCiTaskDetailsReqValidationError) ErrorName() string {
	return "GetCiTaskDetailsReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetCiTaskDetailsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCiTaskDetailsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCiTaskDetailsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCiTaskDetailsReqValidationError{}

// Validate checks the field values on GetCiTaskDetailsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCiTaskDetailsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCiTaskDetailsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCiTaskDetailsReplyMultiError, or nil if none found.
func (m *GetCiTaskDetailsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCiTaskDetailsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDetails() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCiTaskDetailsReplyValidationError{
						field:  fmt.Sprintf("Details[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCiTaskDetailsReplyValidationError{
						field:  fmt.Sprintf("Details[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCiTaskDetailsReplyValidationError{
					field:  fmt.Sprintf("Details[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCiTaskDetailsReplyMultiError(errors)
	}

	return nil
}

// GetCiTaskDetailsReplyMultiError is an error wrapping multiple validation
// errors returned by GetCiTaskDetailsReply.ValidateAll() if the designated
// constraints aren't met.
type GetCiTaskDetailsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCiTaskDetailsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCiTaskDetailsReplyMultiError) AllErrors() []error { return m }

// GetCiTaskDetailsReplyValidationError is the validation error returned by
// GetCiTaskDetailsReply.Validate if the designated constraints aren't met.
type GetCiTaskDetailsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCiTaskDetailsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCiTaskDetailsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCiTaskDetailsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCiTaskDetailsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCiTaskDetailsReplyValidationError) ErrorName() string {
	return "GetCiTaskDetailsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetCiTaskDetailsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCiTaskDetailsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCiTaskDetailsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCiTaskDetailsReplyValidationError{}

// Validate checks the field values on CreateCiTemplateReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCiTemplateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCiTemplateReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCiTemplateReqMultiError, or nil if none found.
func (m *CreateCiTemplateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCiTemplateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := CreateCiTemplateReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := CreateCiTemplateReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := CreateCiTemplateReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateCiTemplateReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateCiTemplateReqMultiError(errors)
	}

	return nil
}

// CreateCiTemplateReqMultiError is an error wrapping multiple validation
// errors returned by CreateCiTemplateReq.ValidateAll() if the designated
// constraints aren't met.
type CreateCiTemplateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCiTemplateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCiTemplateReqMultiError) AllErrors() []error { return m }

// CreateCiTemplateReqValidationError is the validation error returned by
// CreateCiTemplateReq.Validate if the designated constraints aren't met.
type CreateCiTemplateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCiTemplateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCiTemplateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCiTemplateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCiTemplateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCiTemplateReqValidationError) ErrorName() string {
	return "CreateCiTemplateReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCiTemplateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCiTemplateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCiTemplateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCiTemplateReqValidationError{}

// Validate checks the field values on CreateCiTemplateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCiTemplateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCiTemplateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCiTemplateReplyMultiError, or nil if none found.
func (m *CreateCiTemplateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCiTemplateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return CreateCiTemplateReplyMultiError(errors)
	}

	return nil
}

// CreateCiTemplateReplyMultiError is an error wrapping multiple validation
// errors returned by CreateCiTemplateReply.ValidateAll() if the designated
// constraints aren't met.
type CreateCiTemplateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCiTemplateReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCiTemplateReplyMultiError) AllErrors() []error { return m }

// CreateCiTemplateReplyValidationError is the validation error returned by
// CreateCiTemplateReply.Validate if the designated constraints aren't met.
type CreateCiTemplateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCiTemplateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCiTemplateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCiTemplateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCiTemplateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCiTemplateReplyValidationError) ErrorName() string {
	return "CreateCiTemplateReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCiTemplateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCiTemplateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCiTemplateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCiTemplateReplyValidationError{}

// Validate checks the field values on ListCiTemplateReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListCiTemplateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCiTemplateReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCiTemplateReqMultiError, or nil if none found.
func (m *ListCiTemplateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCiTemplateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ListCiTemplateReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ListCiTemplateReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ListCiTemplateReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListCiTemplateReqMultiError(errors)
	}

	return nil
}

// ListCiTemplateReqMultiError is an error wrapping multiple validation errors
// returned by ListCiTemplateReq.ValidateAll() if the designated constraints
// aren't met.
type ListCiTemplateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCiTemplateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCiTemplateReqMultiError) AllErrors() []error { return m }

// ListCiTemplateReqValidationError is the validation error returned by
// ListCiTemplateReq.Validate if the designated constraints aren't met.
type ListCiTemplateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCiTemplateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCiTemplateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCiTemplateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCiTemplateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCiTemplateReqValidationError) ErrorName() string {
	return "ListCiTemplateReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListCiTemplateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCiTemplateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCiTemplateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCiTemplateReqValidationError{}

// Validate checks the field values on ListCiTemplateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCiTemplateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCiTemplateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCiTemplateReplyMultiError, or nil if none found.
func (m *ListCiTemplateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCiTemplateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCiTemplate() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCiTemplateReplyValidationError{
						field:  fmt.Sprintf("CiTemplate[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCiTemplateReplyValidationError{
						field:  fmt.Sprintf("CiTemplate[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCiTemplateReplyValidationError{
					field:  fmt.Sprintf("CiTemplate[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCiTemplateReplyMultiError(errors)
	}

	return nil
}

// ListCiTemplateReplyMultiError is an error wrapping multiple validation
// errors returned by ListCiTemplateReply.ValidateAll() if the designated
// constraints aren't met.
type ListCiTemplateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCiTemplateReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCiTemplateReplyMultiError) AllErrors() []error { return m }

// ListCiTemplateReplyValidationError is the validation error returned by
// ListCiTemplateReply.Validate if the designated constraints aren't met.
type ListCiTemplateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCiTemplateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCiTemplateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCiTemplateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCiTemplateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCiTemplateReplyValidationError) ErrorName() string {
	return "ListCiTemplateReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListCiTemplateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCiTemplateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCiTemplateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCiTemplateReplyValidationError{}

// Validate checks the field values on DelCiTemplateReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DelCiTemplateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelCiTemplateReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelCiTemplateReqMultiError, or nil if none found.
func (m *DelCiTemplateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelCiTemplateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := DelCiTemplateReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := DelCiTemplateReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := DelCiTemplateReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUuid()) < 1 {
		err := DelCiTemplateReqValidationError{
			field:  "Uuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelCiTemplateReqMultiError(errors)
	}

	return nil
}

// DelCiTemplateReqMultiError is an error wrapping multiple validation errors
// returned by DelCiTemplateReq.ValidateAll() if the designated constraints
// aren't met.
type DelCiTemplateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelCiTemplateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelCiTemplateReqMultiError) AllErrors() []error { return m }

// DelCiTemplateReqValidationError is the validation error returned by
// DelCiTemplateReq.Validate if the designated constraints aren't met.
type DelCiTemplateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelCiTemplateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelCiTemplateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelCiTemplateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelCiTemplateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelCiTemplateReqValidationError) ErrorName() string { return "DelCiTemplateReqValidationError" }

// Error satisfies the builtin error interface
func (e DelCiTemplateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelCiTemplateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelCiTemplateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelCiTemplateReqValidationError{}

// Validate checks the field values on DelCiTemplateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelCiTemplateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelCiTemplateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelCiTemplateReplyMultiError, or nil if none found.
func (m *DelCiTemplateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DelCiTemplateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return DelCiTemplateReplyMultiError(errors)
	}

	return nil
}

// DelCiTemplateReplyMultiError is an error wrapping multiple validation errors
// returned by DelCiTemplateReply.ValidateAll() if the designated constraints
// aren't met.
type DelCiTemplateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelCiTemplateReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelCiTemplateReplyMultiError) AllErrors() []error { return m }

// DelCiTemplateReplyValidationError is the validation error returned by
// DelCiTemplateReply.Validate if the designated constraints aren't met.
type DelCiTemplateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelCiTemplateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelCiTemplateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelCiTemplateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelCiTemplateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelCiTemplateReplyValidationError) ErrorName() string {
	return "DelCiTemplateReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DelCiTemplateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelCiTemplateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelCiTemplateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelCiTemplateReplyValidationError{}

// Validate checks the field values on AddCiTemplateStepReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddCiTemplateStepReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddCiTemplateStepReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddCiTemplateStepReqMultiError, or nil if none found.
func (m *AddCiTemplateStepReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddCiTemplateStepReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := AddCiTemplateStepReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := AddCiTemplateStepReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := AddCiTemplateStepReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddCiTemplateStepReqMultiError(errors)
	}

	return nil
}

// AddCiTemplateStepReqMultiError is an error wrapping multiple validation
// errors returned by AddCiTemplateStepReq.ValidateAll() if the designated
// constraints aren't met.
type AddCiTemplateStepReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddCiTemplateStepReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddCiTemplateStepReqMultiError) AllErrors() []error { return m }

// AddCiTemplateStepReqValidationError is the validation error returned by
// AddCiTemplateStepReq.Validate if the designated constraints aren't met.
type AddCiTemplateStepReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCiTemplateStepReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCiTemplateStepReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCiTemplateStepReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCiTemplateStepReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCiTemplateStepReqValidationError) ErrorName() string {
	return "AddCiTemplateStepReqValidationError"
}

// Error satisfies the builtin error interface
func (e AddCiTemplateStepReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCiTemplateStepReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCiTemplateStepReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCiTemplateStepReqValidationError{}

// Validate checks the field values on AddCiTemplateStepReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddCiTemplateStepReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddCiTemplateStepReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddCiTemplateStepReplyMultiError, or nil if none found.
func (m *AddCiTemplateStepReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddCiTemplateStepReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := AddCiTemplateStepReplyValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := AddCiTemplateStepReplyValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := AddCiTemplateStepReplyValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for TemplateUuid

	// no validation rules for StepUuid

	// no validation rules for Priority

	if len(errors) > 0 {
		return AddCiTemplateStepReplyMultiError(errors)
	}

	return nil
}

// AddCiTemplateStepReplyMultiError is an error wrapping multiple validation
// errors returned by AddCiTemplateStepReply.ValidateAll() if the designated
// constraints aren't met.
type AddCiTemplateStepReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddCiTemplateStepReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddCiTemplateStepReplyMultiError) AllErrors() []error { return m }

// AddCiTemplateStepReplyValidationError is the validation error returned by
// AddCiTemplateStepReply.Validate if the designated constraints aren't met.
type AddCiTemplateStepReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCiTemplateStepReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCiTemplateStepReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCiTemplateStepReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCiTemplateStepReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCiTemplateStepReplyValidationError) ErrorName() string {
	return "AddCiTemplateStepReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AddCiTemplateStepReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCiTemplateStepReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCiTemplateStepReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCiTemplateStepReplyValidationError{}

// Validate checks the field values on ListCiTemplateStepReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCiTemplateStepReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCiTemplateStepReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCiTemplateStepReqMultiError, or nil if none found.
func (m *ListCiTemplateStepReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCiTemplateStepReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ListCiTemplateStepReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ListCiTemplateStepReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ListCiTemplateStepReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListCiTemplateStepReqMultiError(errors)
	}

	return nil
}

// ListCiTemplateStepReqMultiError is an error wrapping multiple validation
// errors returned by ListCiTemplateStepReq.ValidateAll() if the designated
// constraints aren't met.
type ListCiTemplateStepReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCiTemplateStepReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCiTemplateStepReqMultiError) AllErrors() []error { return m }

// ListCiTemplateStepReqValidationError is the validation error returned by
// ListCiTemplateStepReq.Validate if the designated constraints aren't met.
type ListCiTemplateStepReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCiTemplateStepReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCiTemplateStepReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCiTemplateStepReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCiTemplateStepReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCiTemplateStepReqValidationError) ErrorName() string {
	return "ListCiTemplateStepReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListCiTemplateStepReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCiTemplateStepReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCiTemplateStepReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCiTemplateStepReqValidationError{}

// Validate checks the field values on ListCiTemplateStepReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCiTemplateStepReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCiTemplateStepReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCiTemplateStepReplyMultiError, or nil if none found.
func (m *ListCiTemplateStepReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCiTemplateStepReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListCiTemplateStepReplyMultiError(errors)
	}

	return nil
}

// ListCiTemplateStepReplyMultiError is an error wrapping multiple validation
// errors returned by ListCiTemplateStepReply.ValidateAll() if the designated
// constraints aren't met.
type ListCiTemplateStepReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCiTemplateStepReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCiTemplateStepReplyMultiError) AllErrors() []error { return m }

// ListCiTemplateStepReplyValidationError is the validation error returned by
// ListCiTemplateStepReply.Validate if the designated constraints aren't met.
type ListCiTemplateStepReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCiTemplateStepReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCiTemplateStepReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCiTemplateStepReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCiTemplateStepReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCiTemplateStepReplyValidationError) ErrorName() string {
	return "ListCiTemplateStepReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListCiTemplateStepReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCiTemplateStepReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCiTemplateStepReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCiTemplateStepReplyValidationError{}

// Validate checks the field values on DelCiTemplateStepReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelCiTemplateStepReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelCiTemplateStepReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelCiTemplateStepReqMultiError, or nil if none found.
func (m *DelCiTemplateStepReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelCiTemplateStepReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := DelCiTemplateStepReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := DelCiTemplateStepReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := DelCiTemplateStepReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelCiTemplateStepReqMultiError(errors)
	}

	return nil
}

// DelCiTemplateStepReqMultiError is an error wrapping multiple validation
// errors returned by DelCiTemplateStepReq.ValidateAll() if the designated
// constraints aren't met.
type DelCiTemplateStepReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelCiTemplateStepReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelCiTemplateStepReqMultiError) AllErrors() []error { return m }

// DelCiTemplateStepReqValidationError is the validation error returned by
// DelCiTemplateStepReq.Validate if the designated constraints aren't met.
type DelCiTemplateStepReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelCiTemplateStepReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelCiTemplateStepReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelCiTemplateStepReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelCiTemplateStepReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelCiTemplateStepReqValidationError) ErrorName() string {
	return "DelCiTemplateStepReqValidationError"
}

// Error satisfies the builtin error interface
func (e DelCiTemplateStepReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelCiTemplateStepReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelCiTemplateStepReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelCiTemplateStepReqValidationError{}

// Validate checks the field values on DelCiTemplateStepReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelCiTemplateStepReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelCiTemplateStepReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelCiTemplateStepReplyMultiError, or nil if none found.
func (m *DelCiTemplateStepReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DelCiTemplateStepReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DelCiTemplateStepReplyMultiError(errors)
	}

	return nil
}

// DelCiTemplateStepReplyMultiError is an error wrapping multiple validation
// errors returned by DelCiTemplateStepReply.ValidateAll() if the designated
// constraints aren't met.
type DelCiTemplateStepReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelCiTemplateStepReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelCiTemplateStepReplyMultiError) AllErrors() []error { return m }

// DelCiTemplateStepReplyValidationError is the validation error returned by
// DelCiTemplateStepReply.Validate if the designated constraints aren't met.
type DelCiTemplateStepReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelCiTemplateStepReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelCiTemplateStepReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelCiTemplateStepReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelCiTemplateStepReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelCiTemplateStepReplyValidationError) ErrorName() string {
	return "DelCiTemplateStepReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DelCiTemplateStepReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelCiTemplateStepReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelCiTemplateStepReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelCiTemplateStepReplyValidationError{}

// Validate checks the field values on
// ListCopyContainerRegistryImageTaskReply_Task with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListCopyContainerRegistryImageTaskReply_Task) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListCopyContainerRegistryImageTaskReply_Task with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListCopyContainerRegistryImageTaskReply_TaskMultiError, or nil if none found.
func (m *ListCopyContainerRegistryImageTaskReply_Task) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCopyContainerRegistryImageTaskReply_Task) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	// no validation rules for UserUuid

	// no validation rules for OrgUuid

	// no validation rules for ProductUuid

	// no validation rules for RunId

	// no validation rules for SrcImage

	// no validation rules for DestImage

	// no validation rules for Result

	// no validation rules for Describe

	// no validation rules for StartExecTime

	// no validation rules for EndExecTime

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return ListCopyContainerRegistryImageTaskReply_TaskMultiError(errors)
	}

	return nil
}

// ListCopyContainerRegistryImageTaskReply_TaskMultiError is an error wrapping
// multiple validation errors returned by
// ListCopyContainerRegistryImageTaskReply_Task.ValidateAll() if the
// designated constraints aren't met.
type ListCopyContainerRegistryImageTaskReply_TaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCopyContainerRegistryImageTaskReply_TaskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCopyContainerRegistryImageTaskReply_TaskMultiError) AllErrors() []error { return m }

// ListCopyContainerRegistryImageTaskReply_TaskValidationError is the
// validation error returned by
// ListCopyContainerRegistryImageTaskReply_Task.Validate if the designated
// constraints aren't met.
type ListCopyContainerRegistryImageTaskReply_TaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCopyContainerRegistryImageTaskReply_TaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCopyContainerRegistryImageTaskReply_TaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCopyContainerRegistryImageTaskReply_TaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCopyContainerRegistryImageTaskReply_TaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCopyContainerRegistryImageTaskReply_TaskValidationError) ErrorName() string {
	return "ListCopyContainerRegistryImageTaskReply_TaskValidationError"
}

// Error satisfies the builtin error interface
func (e ListCopyContainerRegistryImageTaskReply_TaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCopyContainerRegistryImageTaskReply_Task.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCopyContainerRegistryImageTaskReply_TaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCopyContainerRegistryImageTaskReply_TaskValidationError{}

// Validate checks the field values on ListProgramLanguageReply_ProgramLanguage
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListProgramLanguageReply_ProgramLanguage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListProgramLanguageReply_ProgramLanguage with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListProgramLanguageReply_ProgramLanguageMultiError, or nil if none found.
func (m *ListProgramLanguageReply_ProgramLanguage) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProgramLanguageReply_ProgramLanguage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return ListProgramLanguageReply_ProgramLanguageMultiError(errors)
	}

	return nil
}

// ListProgramLanguageReply_ProgramLanguageMultiError is an error wrapping
// multiple validation errors returned by
// ListProgramLanguageReply_ProgramLanguage.ValidateAll() if the designated
// constraints aren't met.
type ListProgramLanguageReply_ProgramLanguageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProgramLanguageReply_ProgramLanguageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProgramLanguageReply_ProgramLanguageMultiError) AllErrors() []error { return m }

// ListProgramLanguageReply_ProgramLanguageValidationError is the validation
// error returned by ListProgramLanguageReply_ProgramLanguage.Validate if the
// designated constraints aren't met.
type ListProgramLanguageReply_ProgramLanguageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProgramLanguageReply_ProgramLanguageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProgramLanguageReply_ProgramLanguageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProgramLanguageReply_ProgramLanguageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProgramLanguageReply_ProgramLanguageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProgramLanguageReply_ProgramLanguageValidationError) ErrorName() string {
	return "ListProgramLanguageReply_ProgramLanguageValidationError"
}

// Error satisfies the builtin error interface
func (e ListProgramLanguageReply_ProgramLanguageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProgramLanguageReply_ProgramLanguage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProgramLanguageReply_ProgramLanguageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProgramLanguageReply_ProgramLanguageValidationError{}

// Validate checks the field values on ListScanCodeRepositoryReply_ScanCodeRepo
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListScanCodeRepositoryReply_ScanCodeRepo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListScanCodeRepositoryReply_ScanCodeRepo with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListScanCodeRepositoryReply_ScanCodeRepoMultiError, or nil if none found.
func (m *ListScanCodeRepositoryReply_ScanCodeRepo) ValidateAll() error {
	return m.validate(true)
}

func (m *ListScanCodeRepositoryReply_ScanCodeRepo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	// no validation rules for RunId

	// no validation rules for RepoUuid

	// no validation rules for Result

	// no validation rules for Describe

	// no validation rules for StartExecTime

	// no validation rules for EndExecTime

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return ListScanCodeRepositoryReply_ScanCodeRepoMultiError(errors)
	}

	return nil
}

// ListScanCodeRepositoryReply_ScanCodeRepoMultiError is an error wrapping
// multiple validation errors returned by
// ListScanCodeRepositoryReply_ScanCodeRepo.ValidateAll() if the designated
// constraints aren't met.
type ListScanCodeRepositoryReply_ScanCodeRepoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListScanCodeRepositoryReply_ScanCodeRepoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListScanCodeRepositoryReply_ScanCodeRepoMultiError) AllErrors() []error { return m }

// ListScanCodeRepositoryReply_ScanCodeRepoValidationError is the validation
// error returned by ListScanCodeRepositoryReply_ScanCodeRepo.Validate if the
// designated constraints aren't met.
type ListScanCodeRepositoryReply_ScanCodeRepoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListScanCodeRepositoryReply_ScanCodeRepoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListScanCodeRepositoryReply_ScanCodeRepoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListScanCodeRepositoryReply_ScanCodeRepoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListScanCodeRepositoryReply_ScanCodeRepoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListScanCodeRepositoryReply_ScanCodeRepoValidationError) ErrorName() string {
	return "ListScanCodeRepositoryReply_ScanCodeRepoValidationError"
}

// Error satisfies the builtin error interface
func (e ListScanCodeRepositoryReply_ScanCodeRepoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListScanCodeRepositoryReply_ScanCodeRepo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListScanCodeRepositoryReply_ScanCodeRepoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListScanCodeRepositoryReply_ScanCodeRepoValidationError{}

// Validate checks the field values on
// ListUnitTestCodeRepositoryReply_UnitTestCodeRepo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListUnitTestCodeRepositoryReply_UnitTestCodeRepo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListUnitTestCodeRepositoryReply_UnitTestCodeRepo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// ListUnitTestCodeRepositoryReply_UnitTestCodeRepoMultiError, or nil if none found.
func (m *ListUnitTestCodeRepositoryReply_UnitTestCodeRepo) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUnitTestCodeRepositoryReply_UnitTestCodeRepo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	// no validation rules for RunId

	// no validation rules for RepoUuid

	// no validation rules for Result

	// no validation rules for Describe

	// no validation rules for StartExecTime

	// no validation rules for EndExecTime

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return ListUnitTestCodeRepositoryReply_UnitTestCodeRepoMultiError(errors)
	}

	return nil
}

// ListUnitTestCodeRepositoryReply_UnitTestCodeRepoMultiError is an error
// wrapping multiple validation errors returned by
// ListUnitTestCodeRepositoryReply_UnitTestCodeRepo.ValidateAll() if the
// designated constraints aren't met.
type ListUnitTestCodeRepositoryReply_UnitTestCodeRepoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUnitTestCodeRepositoryReply_UnitTestCodeRepoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUnitTestCodeRepositoryReply_UnitTestCodeRepoMultiError) AllErrors() []error { return m }

// ListUnitTestCodeRepositoryReply_UnitTestCodeRepoValidationError is the
// validation error returned by
// ListUnitTestCodeRepositoryReply_UnitTestCodeRepo.Validate if the designated
// constraints aren't met.
type ListUnitTestCodeRepositoryReply_UnitTestCodeRepoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUnitTestCodeRepositoryReply_UnitTestCodeRepoValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ListUnitTestCodeRepositoryReply_UnitTestCodeRepoValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListUnitTestCodeRepositoryReply_UnitTestCodeRepoValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ListUnitTestCodeRepositoryReply_UnitTestCodeRepoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUnitTestCodeRepositoryReply_UnitTestCodeRepoValidationError) ErrorName() string {
	return "ListUnitTestCodeRepositoryReply_UnitTestCodeRepoValidationError"
}

// Error satisfies the builtin error interface
func (e ListUnitTestCodeRepositoryReply_UnitTestCodeRepoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUnitTestCodeRepositoryReply_UnitTestCodeRepo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUnitTestCodeRepositoryReply_UnitTestCodeRepoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUnitTestCodeRepositoryReply_UnitTestCodeRepoValidationError{}

// Validate checks the field values on
// ListBuildContainerImageReply_BuildContainerImage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListBuildContainerImageReply_BuildContainerImage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListBuildContainerImageReply_BuildContainerImage with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// ListBuildContainerImageReply_BuildContainerImageMultiError, or nil if none found.
func (m *ListBuildContainerImageReply_BuildContainerImage) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBuildContainerImageReply_BuildContainerImage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	// no validation rules for RunId

	// no validation rules for RepoUuid

	// no validation rules for RepoUrl

	// no validation rules for Branch

	// no validation rules for CommitId

	// no validation rules for DockerfilePath

	// no validation rules for ImageUrl

	// no validation rules for ImageId

	// no validation rules for Result

	// no validation rules for Describe

	// no validation rules for Dockerfile

	// no validation rules for StartExecTime

	// no validation rules for EndExecTime

	// no validation rules for CreateTime

	// no validation rules for CostTime

	if len(errors) > 0 {
		return ListBuildContainerImageReply_BuildContainerImageMultiError(errors)
	}

	return nil
}

// ListBuildContainerImageReply_BuildContainerImageMultiError is an error
// wrapping multiple validation errors returned by
// ListBuildContainerImageReply_BuildContainerImage.ValidateAll() if the
// designated constraints aren't met.
type ListBuildContainerImageReply_BuildContainerImageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBuildContainerImageReply_BuildContainerImageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBuildContainerImageReply_BuildContainerImageMultiError) AllErrors() []error { return m }

// ListBuildContainerImageReply_BuildContainerImageValidationError is the
// validation error returned by
// ListBuildContainerImageReply_BuildContainerImage.Validate if the designated
// constraints aren't met.
type ListBuildContainerImageReply_BuildContainerImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBuildContainerImageReply_BuildContainerImageValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ListBuildContainerImageReply_BuildContainerImageValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListBuildContainerImageReply_BuildContainerImageValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ListBuildContainerImageReply_BuildContainerImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBuildContainerImageReply_BuildContainerImageValidationError) ErrorName() string {
	return "ListBuildContainerImageReply_BuildContainerImageValidationError"
}

// Error satisfies the builtin error interface
func (e ListBuildContainerImageReply_BuildContainerImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBuildContainerImageReply_BuildContainerImage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBuildContainerImageReply_BuildContainerImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBuildContainerImageReply_BuildContainerImageValidationError{}

// Validate checks the field values on GetCiTasksReply_CiTask with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCiTasksReply_CiTask) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCiTasksReply_CiTask with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCiTasksReply_CiTaskMultiError, or nil if none found.
func (m *GetCiTasksReply_CiTask) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCiTasksReply_CiTask) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	// no validation rules for CreateTime

	// no validation rules for UpdateTime

	// no validation rules for ContainerImg

	// no validation rules for ObjectStorageTo

	// no validation rules for ObjectStorageBucket

	// no validation rules for ObjectStoragePath

	if len(errors) > 0 {
		return GetCiTasksReply_CiTaskMultiError(errors)
	}

	return nil
}

// GetCiTasksReply_CiTaskMultiError is an error wrapping multiple validation
// errors returned by GetCiTasksReply_CiTask.ValidateAll() if the designated
// constraints aren't met.
type GetCiTasksReply_CiTaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCiTasksReply_CiTaskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCiTasksReply_CiTaskMultiError) AllErrors() []error { return m }

// GetCiTasksReply_CiTaskValidationError is the validation error returned by
// GetCiTasksReply_CiTask.Validate if the designated constraints aren't met.
type GetCiTasksReply_CiTaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCiTasksReply_CiTaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCiTasksReply_CiTaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCiTasksReply_CiTaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCiTasksReply_CiTaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCiTasksReply_CiTaskValidationError) ErrorName() string {
	return "GetCiTasksReply_CiTaskValidationError"
}

// Error satisfies the builtin error interface
func (e GetCiTasksReply_CiTaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCiTasksReply_CiTask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCiTasksReply_CiTaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCiTasksReply_CiTaskValidationError{}

// Validate checks the field values on GetCiTaskDetailsReply_CiDetail with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCiTaskDetailsReply_CiDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCiTaskDetailsReply_CiDetail with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetCiTaskDetailsReply_CiDetailMultiError, or nil if none found.
func (m *GetCiTaskDetailsReply_CiDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCiTaskDetailsReply_CiDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	// no validation rules for Content

	// no validation rules for CreateTime

	// no validation rules for StageName

	// no validation rules for StageStepName

	if len(errors) > 0 {
		return GetCiTaskDetailsReply_CiDetailMultiError(errors)
	}

	return nil
}

// GetCiTaskDetailsReply_CiDetailMultiError is an error wrapping multiple
// validation errors returned by GetCiTaskDetailsReply_CiDetail.ValidateAll()
// if the designated constraints aren't met.
type GetCiTaskDetailsReply_CiDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCiTaskDetailsReply_CiDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCiTaskDetailsReply_CiDetailMultiError) AllErrors() []error { return m }

// GetCiTaskDetailsReply_CiDetailValidationError is the validation error
// returned by GetCiTaskDetailsReply_CiDetail.Validate if the designated
// constraints aren't met.
type GetCiTaskDetailsReply_CiDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCiTaskDetailsReply_CiDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCiTaskDetailsReply_CiDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCiTaskDetailsReply_CiDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCiTaskDetailsReply_CiDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCiTaskDetailsReply_CiDetailValidationError) ErrorName() string {
	return "GetCiTaskDetailsReply_CiDetailValidationError"
}

// Error satisfies the builtin error interface
func (e GetCiTaskDetailsReply_CiDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCiTaskDetailsReply_CiDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCiTaskDetailsReply_CiDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCiTaskDetailsReply_CiDetailValidationError{}

// Validate checks the field values on ListCiTemplateReply_CiTemplate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCiTemplateReply_CiTemplate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCiTemplateReply_CiTemplate with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListCiTemplateReply_CiTemplateMultiError, or nil if none found.
func (m *ListCiTemplateReply_CiTemplate) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCiTemplateReply_CiTemplate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for OrgUuid

	// no validation rules for ProductUuid

	// no validation rules for Name

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return ListCiTemplateReply_CiTemplateMultiError(errors)
	}

	return nil
}

// ListCiTemplateReply_CiTemplateMultiError is an error wrapping multiple
// validation errors returned by ListCiTemplateReply_CiTemplate.ValidateAll()
// if the designated constraints aren't met.
type ListCiTemplateReply_CiTemplateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCiTemplateReply_CiTemplateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCiTemplateReply_CiTemplateMultiError) AllErrors() []error { return m }

// ListCiTemplateReply_CiTemplateValidationError is the validation error
// returned by ListCiTemplateReply_CiTemplate.Validate if the designated
// constraints aren't met.
type ListCiTemplateReply_CiTemplateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCiTemplateReply_CiTemplateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCiTemplateReply_CiTemplateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCiTemplateReply_CiTemplateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCiTemplateReply_CiTemplateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCiTemplateReply_CiTemplateValidationError) ErrorName() string {
	return "ListCiTemplateReply_CiTemplateValidationError"
}

// Error satisfies the builtin error interface
func (e ListCiTemplateReply_CiTemplateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCiTemplateReply_CiTemplate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCiTemplateReply_CiTemplateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCiTemplateReply_CiTemplateValidationError{}
