// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.14.0
// source: workSpace/v1/workSpace.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WorkSpace_CreateFault_FullMethodName                    = "/workSpace.v1.WorkSpace/CreateFault"
	WorkSpace_ListFault_FullMethodName                      = "/workSpace.v1.WorkSpace/ListFault"
	WorkSpace_DelFault_FullMethodName                       = "/workSpace.v1.WorkSpace/DelFault"
	WorkSpace_CreateFaultStream_FullMethodName              = "/workSpace.v1.WorkSpace/CreateFaultStream"
	WorkSpace_ListFaultStream_FullMethodName                = "/workSpace.v1.WorkSpace/ListFaultStream"
	WorkSpace_DelFaultStream_FullMethodName                 = "/workSpace.v1.WorkSpace/DelFaultStream"
	WorkSpace_CreateWorkOrderType_FullMethodName            = "/workSpace.v1.WorkSpace/CreateWorkOrderType"
	WorkSpace_ListWorkOrderType_FullMethodName              = "/workSpace.v1.WorkSpace/ListWorkOrderType"
	WorkSpace_DelWorkOrderType_FullMethodName               = "/workSpace.v1.WorkSpace/DelWorkOrderType"
	WorkSpace_CreateWorkOrder_FullMethodName                = "/workSpace.v1.WorkSpace/CreateWorkOrder"
	WorkSpace_ListWorkOrder_FullMethodName                  = "/workSpace.v1.WorkSpace/ListWorkOrder"
	WorkSpace_CloseWorkOrder_FullMethodName                 = "/workSpace.v1.WorkSpace/CloseWorkOrder"
	WorkSpace_AddWorkOrderStep_FullMethodName               = "/workSpace.v1.WorkSpace/AddWorkOrderStep"
	WorkSpace_ListWorkOrderStep_FullMethodName              = "/workSpace.v1.WorkSpace/ListWorkOrderStep"
	WorkSpace_CreateOnDuty_FullMethodName                   = "/workSpace.v1.WorkSpace/CreateOnDuty"
	WorkSpace_ListOnDuty_FullMethodName                     = "/workSpace.v1.WorkSpace/ListOnDuty"
	WorkSpace_DelOnDuty_FullMethodName                      = "/workSpace.v1.WorkSpace/DelOnDuty"
	WorkSpace_CreateTodo_FullMethodName                     = "/workSpace.v1.WorkSpace/CreateTodo"
	WorkSpace_ListTodo_FullMethodName                       = "/workSpace.v1.WorkSpace/ListTodo"
	WorkSpace_CloseTodo_FullMethodName                      = "/workSpace.v1.WorkSpace/CloseTodo"
	WorkSpace_DelTodo_FullMethodName                        = "/workSpace.v1.WorkSpace/DelTodo"
	WorkSpace_CreateTask_FullMethodName                     = "/workSpace.v1.WorkSpace/CreateTask"
	WorkSpace_ListSelfDistTask_FullMethodName               = "/workSpace.v1.WorkSpace/ListSelfDistTask"
	WorkSpace_ListSelfTask_FullMethodName                   = "/workSpace.v1.WorkSpace/ListSelfTask"
	WorkSpace_CloseSelfDistTask_FullMethodName              = "/workSpace.v1.WorkSpace/CloseSelfDistTask"
	WorkSpace_CloseSelfTask_FullMethodName                  = "/workSpace.v1.WorkSpace/CloseSelfTask"
	WorkSpace_CreateKnowledgePublicLabel_FullMethodName     = "/workSpace.v1.WorkSpace/CreateKnowledgePublicLabel"
	WorkSpace_CreateKnowledgePublicResource_FullMethodName  = "/workSpace.v1.WorkSpace/CreateKnowledgePublicResource"
	WorkSpace_CreateKnowledgePrivateLabel_FullMethodName    = "/workSpace.v1.WorkSpace/CreateKnowledgePrivateLabel"
	WorkSpace_CreateKnowledgePrivateResource_FullMethodName = "/workSpace.v1.WorkSpace/CreateKnowledgePrivateResource"
)

// WorkSpaceClient is the client API for WorkSpace service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkSpaceClient interface {
	// Fault
	// 创建故障报告
	CreateFault(ctx context.Context, in *CreateFaultReq, opts ...grpc.CallOption) (*CreateFaultReply, error)
	// 列出故障报告
	ListFault(ctx context.Context, in *ListFaultReq, opts ...grpc.CallOption) (*ListFaultReply, error)
	// 删除故障报告
	DelFault(ctx context.Context, in *DelFaultReq, opts ...grpc.CallOption) (*DelFaultReply, error)
	// 创建故障报告流
	CreateFaultStream(ctx context.Context, in *CreateFaultStreamReq, opts ...grpc.CallOption) (*CreateFaultStreamReply, error)
	// 列出故障报告流
	ListFaultStream(ctx context.Context, in *ListFaultStreamReq, opts ...grpc.CallOption) (*ListFaultStreamReply, error)
	// 删除故障报告流
	DelFaultStream(ctx context.Context, in *DelFaultStreamReq, opts ...grpc.CallOption) (*DelFaultStreamReply, error)
	// WorkOrder
	// 创建工单类型
	CreateWorkOrderType(ctx context.Context, in *CreateWorkOrderTypeReq, opts ...grpc.CallOption) (*CreateWorkOrderTypeReply, error)
	// 列出工单类型
	ListWorkOrderType(ctx context.Context, in *ListWorkOrderTypeReq, opts ...grpc.CallOption) (*ListWorkOrderTypeReply, error)
	// 删除工单类型
	DelWorkOrderType(ctx context.Context, in *DelWorkOrderTypeReq, opts ...grpc.CallOption) (*DelWorkOrderTypeReply, error)
	// 创建工单
	CreateWorkOrder(ctx context.Context, in *CreateWorkOrderReq, opts ...grpc.CallOption) (*CreateWorkOrderReply, error)
	// 列出工单
	ListWorkOrder(ctx context.Context, in *ListWorkOrderReq, opts ...grpc.CallOption) (*ListWorkOrderReply, error)
	// 关闭工单
	CloseWorkOrder(ctx context.Context, in *CloseWorkOrderReq, opts ...grpc.CallOption) (*CloseWorkOrderReply, error)
	// 创建工单步骤
	AddWorkOrderStep(ctx context.Context, in *AddWorkOrderStepReq, opts ...grpc.CallOption) (*AddWorkOrderStepReply, error)
	// 列出工单步骤
	ListWorkOrderStep(ctx context.Context, in *ListWorkOrderStepReq, opts ...grpc.CallOption) (*ListWorkOrderStepReply, error)
	// OnDuty
	CreateOnDuty(ctx context.Context, in *CreateOnDutyReq, opts ...grpc.CallOption) (*CreateOnDutyReply, error)
	ListOnDuty(ctx context.Context, in *ListOnDutyReq, opts ...grpc.CallOption) (*ListOnDutyReply, error)
	DelOnDuty(ctx context.Context, in *DelOnDutyReq, opts ...grpc.CallOption) (*DelOnDutyReply, error)
	// Todo
	CreateTodo(ctx context.Context, in *CreateTodoReq, opts ...grpc.CallOption) (*CreateTodoReply, error)
	ListTodo(ctx context.Context, in *ListTodoReq, opts ...grpc.CallOption) (*ListTodoReply, error)
	CloseTodo(ctx context.Context, in *CloseTodoReq, opts ...grpc.CallOption) (*CloseTodoReply, error)
	DelTodo(ctx context.Context, in *DelTodoReq, opts ...grpc.CallOption) (*DelTodoReply, error)
	// Task
	CreateTask(ctx context.Context, in *CreateTaskReq, opts ...grpc.CallOption) (*CreateTaskReply, error)
	ListSelfDistTask(ctx context.Context, in *ListTaskReq, opts ...grpc.CallOption) (*ListTaskReply, error)
	ListSelfTask(ctx context.Context, in *ListTaskReq, opts ...grpc.CallOption) (*ListTaskReply, error)
	CloseSelfDistTask(ctx context.Context, in *CloseTaskReq, opts ...grpc.CallOption) (*CloseTaskReply, error)
	CloseSelfTask(ctx context.Context, in *CloseTaskReq, opts ...grpc.CallOption) (*CloseTaskReply, error)
	// Knowledge
	CreateKnowledgePublicLabel(ctx context.Context, in *CreateKnowledgePublicLabelReq, opts ...grpc.CallOption) (*CreateKnowledgePublicLabelReply, error)
	CreateKnowledgePublicResource(ctx context.Context, in *CreateKnowledgePublicResourceReq, opts ...grpc.CallOption) (*CreateKnowledgePublicResourceReply, error)
	CreateKnowledgePrivateLabel(ctx context.Context, in *CreateKnowledgePrivateLabelReq, opts ...grpc.CallOption) (*CreateKnowledgePrivateLabelReply, error)
	CreateKnowledgePrivateResource(ctx context.Context, in *CreateKnowledgePrivateResourceReq, opts ...grpc.CallOption) (*CreateKnowledgePrivateResourceReply, error)
}

type workSpaceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkSpaceClient(cc grpc.ClientConnInterface) WorkSpaceClient {
	return &workSpaceClient{cc}
}

func (c *workSpaceClient) CreateFault(ctx context.Context, in *CreateFaultReq, opts ...grpc.CallOption) (*CreateFaultReply, error) {
	out := new(CreateFaultReply)
	err := c.cc.Invoke(ctx, WorkSpace_CreateFault_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workSpaceClient) ListFault(ctx context.Context, in *ListFaultReq, opts ...grpc.CallOption) (*ListFaultReply, error) {
	out := new(ListFaultReply)
	err := c.cc.Invoke(ctx, WorkSpace_ListFault_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workSpaceClient) DelFault(ctx context.Context, in *DelFaultReq, opts ...grpc.CallOption) (*DelFaultReply, error) {
	out := new(DelFaultReply)
	err := c.cc.Invoke(ctx, WorkSpace_DelFault_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workSpaceClient) CreateFaultStream(ctx context.Context, in *CreateFaultStreamReq, opts ...grpc.CallOption) (*CreateFaultStreamReply, error) {
	out := new(CreateFaultStreamReply)
	err := c.cc.Invoke(ctx, WorkSpace_CreateFaultStream_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workSpaceClient) ListFaultStream(ctx context.Context, in *ListFaultStreamReq, opts ...grpc.CallOption) (*ListFaultStreamReply, error) {
	out := new(ListFaultStreamReply)
	err := c.cc.Invoke(ctx, WorkSpace_ListFaultStream_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workSpaceClient) DelFaultStream(ctx context.Context, in *DelFaultStreamReq, opts ...grpc.CallOption) (*DelFaultStreamReply, error) {
	out := new(DelFaultStreamReply)
	err := c.cc.Invoke(ctx, WorkSpace_DelFaultStream_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workSpaceClient) CreateWorkOrderType(ctx context.Context, in *CreateWorkOrderTypeReq, opts ...grpc.CallOption) (*CreateWorkOrderTypeReply, error) {
	out := new(CreateWorkOrderTypeReply)
	err := c.cc.Invoke(ctx, WorkSpace_CreateWorkOrderType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workSpaceClient) ListWorkOrderType(ctx context.Context, in *ListWorkOrderTypeReq, opts ...grpc.CallOption) (*ListWorkOrderTypeReply, error) {
	out := new(ListWorkOrderTypeReply)
	err := c.cc.Invoke(ctx, WorkSpace_ListWorkOrderType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workSpaceClient) DelWorkOrderType(ctx context.Context, in *DelWorkOrderTypeReq, opts ...grpc.CallOption) (*DelWorkOrderTypeReply, error) {
	out := new(DelWorkOrderTypeReply)
	err := c.cc.Invoke(ctx, WorkSpace_DelWorkOrderType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workSpaceClient) CreateWorkOrder(ctx context.Context, in *CreateWorkOrderReq, opts ...grpc.CallOption) (*CreateWorkOrderReply, error) {
	out := new(CreateWorkOrderReply)
	err := c.cc.Invoke(ctx, WorkSpace_CreateWorkOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workSpaceClient) ListWorkOrder(ctx context.Context, in *ListWorkOrderReq, opts ...grpc.CallOption) (*ListWorkOrderReply, error) {
	out := new(ListWorkOrderReply)
	err := c.cc.Invoke(ctx, WorkSpace_ListWorkOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workSpaceClient) CloseWorkOrder(ctx context.Context, in *CloseWorkOrderReq, opts ...grpc.CallOption) (*CloseWorkOrderReply, error) {
	out := new(CloseWorkOrderReply)
	err := c.cc.Invoke(ctx, WorkSpace_CloseWorkOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workSpaceClient) AddWorkOrderStep(ctx context.Context, in *AddWorkOrderStepReq, opts ...grpc.CallOption) (*AddWorkOrderStepReply, error) {
	out := new(AddWorkOrderStepReply)
	err := c.cc.Invoke(ctx, WorkSpace_AddWorkOrderStep_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workSpaceClient) ListWorkOrderStep(ctx context.Context, in *ListWorkOrderStepReq, opts ...grpc.CallOption) (*ListWorkOrderStepReply, error) {
	out := new(ListWorkOrderStepReply)
	err := c.cc.Invoke(ctx, WorkSpace_ListWorkOrderStep_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workSpaceClient) CreateOnDuty(ctx context.Context, in *CreateOnDutyReq, opts ...grpc.CallOption) (*CreateOnDutyReply, error) {
	out := new(CreateOnDutyReply)
	err := c.cc.Invoke(ctx, WorkSpace_CreateOnDuty_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workSpaceClient) ListOnDuty(ctx context.Context, in *ListOnDutyReq, opts ...grpc.CallOption) (*ListOnDutyReply, error) {
	out := new(ListOnDutyReply)
	err := c.cc.Invoke(ctx, WorkSpace_ListOnDuty_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workSpaceClient) DelOnDuty(ctx context.Context, in *DelOnDutyReq, opts ...grpc.CallOption) (*DelOnDutyReply, error) {
	out := new(DelOnDutyReply)
	err := c.cc.Invoke(ctx, WorkSpace_DelOnDuty_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workSpaceClient) CreateTodo(ctx context.Context, in *CreateTodoReq, opts ...grpc.CallOption) (*CreateTodoReply, error) {
	out := new(CreateTodoReply)
	err := c.cc.Invoke(ctx, WorkSpace_CreateTodo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workSpaceClient) ListTodo(ctx context.Context, in *ListTodoReq, opts ...grpc.CallOption) (*ListTodoReply, error) {
	out := new(ListTodoReply)
	err := c.cc.Invoke(ctx, WorkSpace_ListTodo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workSpaceClient) CloseTodo(ctx context.Context, in *CloseTodoReq, opts ...grpc.CallOption) (*CloseTodoReply, error) {
	out := new(CloseTodoReply)
	err := c.cc.Invoke(ctx, WorkSpace_CloseTodo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workSpaceClient) DelTodo(ctx context.Context, in *DelTodoReq, opts ...grpc.CallOption) (*DelTodoReply, error) {
	out := new(DelTodoReply)
	err := c.cc.Invoke(ctx, WorkSpace_DelTodo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workSpaceClient) CreateTask(ctx context.Context, in *CreateTaskReq, opts ...grpc.CallOption) (*CreateTaskReply, error) {
	out := new(CreateTaskReply)
	err := c.cc.Invoke(ctx, WorkSpace_CreateTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workSpaceClient) ListSelfDistTask(ctx context.Context, in *ListTaskReq, opts ...grpc.CallOption) (*ListTaskReply, error) {
	out := new(ListTaskReply)
	err := c.cc.Invoke(ctx, WorkSpace_ListSelfDistTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workSpaceClient) ListSelfTask(ctx context.Context, in *ListTaskReq, opts ...grpc.CallOption) (*ListTaskReply, error) {
	out := new(ListTaskReply)
	err := c.cc.Invoke(ctx, WorkSpace_ListSelfTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workSpaceClient) CloseSelfDistTask(ctx context.Context, in *CloseTaskReq, opts ...grpc.CallOption) (*CloseTaskReply, error) {
	out := new(CloseTaskReply)
	err := c.cc.Invoke(ctx, WorkSpace_CloseSelfDistTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workSpaceClient) CloseSelfTask(ctx context.Context, in *CloseTaskReq, opts ...grpc.CallOption) (*CloseTaskReply, error) {
	out := new(CloseTaskReply)
	err := c.cc.Invoke(ctx, WorkSpace_CloseSelfTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workSpaceClient) CreateKnowledgePublicLabel(ctx context.Context, in *CreateKnowledgePublicLabelReq, opts ...grpc.CallOption) (*CreateKnowledgePublicLabelReply, error) {
	out := new(CreateKnowledgePublicLabelReply)
	err := c.cc.Invoke(ctx, WorkSpace_CreateKnowledgePublicLabel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workSpaceClient) CreateKnowledgePublicResource(ctx context.Context, in *CreateKnowledgePublicResourceReq, opts ...grpc.CallOption) (*CreateKnowledgePublicResourceReply, error) {
	out := new(CreateKnowledgePublicResourceReply)
	err := c.cc.Invoke(ctx, WorkSpace_CreateKnowledgePublicResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workSpaceClient) CreateKnowledgePrivateLabel(ctx context.Context, in *CreateKnowledgePrivateLabelReq, opts ...grpc.CallOption) (*CreateKnowledgePrivateLabelReply, error) {
	out := new(CreateKnowledgePrivateLabelReply)
	err := c.cc.Invoke(ctx, WorkSpace_CreateKnowledgePrivateLabel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workSpaceClient) CreateKnowledgePrivateResource(ctx context.Context, in *CreateKnowledgePrivateResourceReq, opts ...grpc.CallOption) (*CreateKnowledgePrivateResourceReply, error) {
	out := new(CreateKnowledgePrivateResourceReply)
	err := c.cc.Invoke(ctx, WorkSpace_CreateKnowledgePrivateResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkSpaceServer is the server API for WorkSpace service.
// All implementations must embed UnimplementedWorkSpaceServer
// for forward compatibility
type WorkSpaceServer interface {
	// Fault
	// 创建故障报告
	CreateFault(context.Context, *CreateFaultReq) (*CreateFaultReply, error)
	// 列出故障报告
	ListFault(context.Context, *ListFaultReq) (*ListFaultReply, error)
	// 删除故障报告
	DelFault(context.Context, *DelFaultReq) (*DelFaultReply, error)
	// 创建故障报告流
	CreateFaultStream(context.Context, *CreateFaultStreamReq) (*CreateFaultStreamReply, error)
	// 列出故障报告流
	ListFaultStream(context.Context, *ListFaultStreamReq) (*ListFaultStreamReply, error)
	// 删除故障报告流
	DelFaultStream(context.Context, *DelFaultStreamReq) (*DelFaultStreamReply, error)
	// WorkOrder
	// 创建工单类型
	CreateWorkOrderType(context.Context, *CreateWorkOrderTypeReq) (*CreateWorkOrderTypeReply, error)
	// 列出工单类型
	ListWorkOrderType(context.Context, *ListWorkOrderTypeReq) (*ListWorkOrderTypeReply, error)
	// 删除工单类型
	DelWorkOrderType(context.Context, *DelWorkOrderTypeReq) (*DelWorkOrderTypeReply, error)
	// 创建工单
	CreateWorkOrder(context.Context, *CreateWorkOrderReq) (*CreateWorkOrderReply, error)
	// 列出工单
	ListWorkOrder(context.Context, *ListWorkOrderReq) (*ListWorkOrderReply, error)
	// 关闭工单
	CloseWorkOrder(context.Context, *CloseWorkOrderReq) (*CloseWorkOrderReply, error)
	// 创建工单步骤
	AddWorkOrderStep(context.Context, *AddWorkOrderStepReq) (*AddWorkOrderStepReply, error)
	// 列出工单步骤
	ListWorkOrderStep(context.Context, *ListWorkOrderStepReq) (*ListWorkOrderStepReply, error)
	// OnDuty
	CreateOnDuty(context.Context, *CreateOnDutyReq) (*CreateOnDutyReply, error)
	ListOnDuty(context.Context, *ListOnDutyReq) (*ListOnDutyReply, error)
	DelOnDuty(context.Context, *DelOnDutyReq) (*DelOnDutyReply, error)
	// Todo
	CreateTodo(context.Context, *CreateTodoReq) (*CreateTodoReply, error)
	ListTodo(context.Context, *ListTodoReq) (*ListTodoReply, error)
	CloseTodo(context.Context, *CloseTodoReq) (*CloseTodoReply, error)
	DelTodo(context.Context, *DelTodoReq) (*DelTodoReply, error)
	// Task
	CreateTask(context.Context, *CreateTaskReq) (*CreateTaskReply, error)
	ListSelfDistTask(context.Context, *ListTaskReq) (*ListTaskReply, error)
	ListSelfTask(context.Context, *ListTaskReq) (*ListTaskReply, error)
	CloseSelfDistTask(context.Context, *CloseTaskReq) (*CloseTaskReply, error)
	CloseSelfTask(context.Context, *CloseTaskReq) (*CloseTaskReply, error)
	// Knowledge
	CreateKnowledgePublicLabel(context.Context, *CreateKnowledgePublicLabelReq) (*CreateKnowledgePublicLabelReply, error)
	CreateKnowledgePublicResource(context.Context, *CreateKnowledgePublicResourceReq) (*CreateKnowledgePublicResourceReply, error)
	CreateKnowledgePrivateLabel(context.Context, *CreateKnowledgePrivateLabelReq) (*CreateKnowledgePrivateLabelReply, error)
	CreateKnowledgePrivateResource(context.Context, *CreateKnowledgePrivateResourceReq) (*CreateKnowledgePrivateResourceReply, error)
	mustEmbedUnimplementedWorkSpaceServer()
}

// UnimplementedWorkSpaceServer must be embedded to have forward compatible implementations.
type UnimplementedWorkSpaceServer struct {
}

func (UnimplementedWorkSpaceServer) CreateFault(context.Context, *CreateFaultReq) (*CreateFaultReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFault not implemented")
}
func (UnimplementedWorkSpaceServer) ListFault(context.Context, *ListFaultReq) (*ListFaultReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFault not implemented")
}
func (UnimplementedWorkSpaceServer) DelFault(context.Context, *DelFaultReq) (*DelFaultReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelFault not implemented")
}
func (UnimplementedWorkSpaceServer) CreateFaultStream(context.Context, *CreateFaultStreamReq) (*CreateFaultStreamReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFaultStream not implemented")
}
func (UnimplementedWorkSpaceServer) ListFaultStream(context.Context, *ListFaultStreamReq) (*ListFaultStreamReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFaultStream not implemented")
}
func (UnimplementedWorkSpaceServer) DelFaultStream(context.Context, *DelFaultStreamReq) (*DelFaultStreamReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelFaultStream not implemented")
}
func (UnimplementedWorkSpaceServer) CreateWorkOrderType(context.Context, *CreateWorkOrderTypeReq) (*CreateWorkOrderTypeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkOrderType not implemented")
}
func (UnimplementedWorkSpaceServer) ListWorkOrderType(context.Context, *ListWorkOrderTypeReq) (*ListWorkOrderTypeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkOrderType not implemented")
}
func (UnimplementedWorkSpaceServer) DelWorkOrderType(context.Context, *DelWorkOrderTypeReq) (*DelWorkOrderTypeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelWorkOrderType not implemented")
}
func (UnimplementedWorkSpaceServer) CreateWorkOrder(context.Context, *CreateWorkOrderReq) (*CreateWorkOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkOrder not implemented")
}
func (UnimplementedWorkSpaceServer) ListWorkOrder(context.Context, *ListWorkOrderReq) (*ListWorkOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkOrder not implemented")
}
func (UnimplementedWorkSpaceServer) CloseWorkOrder(context.Context, *CloseWorkOrderReq) (*CloseWorkOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseWorkOrder not implemented")
}
func (UnimplementedWorkSpaceServer) AddWorkOrderStep(context.Context, *AddWorkOrderStepReq) (*AddWorkOrderStepReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWorkOrderStep not implemented")
}
func (UnimplementedWorkSpaceServer) ListWorkOrderStep(context.Context, *ListWorkOrderStepReq) (*ListWorkOrderStepReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkOrderStep not implemented")
}
func (UnimplementedWorkSpaceServer) CreateOnDuty(context.Context, *CreateOnDutyReq) (*CreateOnDutyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOnDuty not implemented")
}
func (UnimplementedWorkSpaceServer) ListOnDuty(context.Context, *ListOnDutyReq) (*ListOnDutyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOnDuty not implemented")
}
func (UnimplementedWorkSpaceServer) DelOnDuty(context.Context, *DelOnDutyReq) (*DelOnDutyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelOnDuty not implemented")
}
func (UnimplementedWorkSpaceServer) CreateTodo(context.Context, *CreateTodoReq) (*CreateTodoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTodo not implemented")
}
func (UnimplementedWorkSpaceServer) ListTodo(context.Context, *ListTodoReq) (*ListTodoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTodo not implemented")
}
func (UnimplementedWorkSpaceServer) CloseTodo(context.Context, *CloseTodoReq) (*CloseTodoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseTodo not implemented")
}
func (UnimplementedWorkSpaceServer) DelTodo(context.Context, *DelTodoReq) (*DelTodoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelTodo not implemented")
}
func (UnimplementedWorkSpaceServer) CreateTask(context.Context, *CreateTaskReq) (*CreateTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedWorkSpaceServer) ListSelfDistTask(context.Context, *ListTaskReq) (*ListTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSelfDistTask not implemented")
}
func (UnimplementedWorkSpaceServer) ListSelfTask(context.Context, *ListTaskReq) (*ListTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSelfTask not implemented")
}
func (UnimplementedWorkSpaceServer) CloseSelfDistTask(context.Context, *CloseTaskReq) (*CloseTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseSelfDistTask not implemented")
}
func (UnimplementedWorkSpaceServer) CloseSelfTask(context.Context, *CloseTaskReq) (*CloseTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseSelfTask not implemented")
}
func (UnimplementedWorkSpaceServer) CreateKnowledgePublicLabel(context.Context, *CreateKnowledgePublicLabelReq) (*CreateKnowledgePublicLabelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKnowledgePublicLabel not implemented")
}
func (UnimplementedWorkSpaceServer) CreateKnowledgePublicResource(context.Context, *CreateKnowledgePublicResourceReq) (*CreateKnowledgePublicResourceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKnowledgePublicResource not implemented")
}
func (UnimplementedWorkSpaceServer) CreateKnowledgePrivateLabel(context.Context, *CreateKnowledgePrivateLabelReq) (*CreateKnowledgePrivateLabelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKnowledgePrivateLabel not implemented")
}
func (UnimplementedWorkSpaceServer) CreateKnowledgePrivateResource(context.Context, *CreateKnowledgePrivateResourceReq) (*CreateKnowledgePrivateResourceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKnowledgePrivateResource not implemented")
}
func (UnimplementedWorkSpaceServer) mustEmbedUnimplementedWorkSpaceServer() {}

// UnsafeWorkSpaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkSpaceServer will
// result in compilation errors.
type UnsafeWorkSpaceServer interface {
	mustEmbedUnimplementedWorkSpaceServer()
}

func RegisterWorkSpaceServer(s grpc.ServiceRegistrar, srv WorkSpaceServer) {
	s.RegisterService(&WorkSpace_ServiceDesc, srv)
}

func _WorkSpace_CreateFault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFaultReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkSpaceServer).CreateFault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkSpace_CreateFault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkSpaceServer).CreateFault(ctx, req.(*CreateFaultReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkSpace_ListFault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFaultReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkSpaceServer).ListFault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkSpace_ListFault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkSpaceServer).ListFault(ctx, req.(*ListFaultReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkSpace_DelFault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelFaultReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkSpaceServer).DelFault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkSpace_DelFault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkSpaceServer).DelFault(ctx, req.(*DelFaultReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkSpace_CreateFaultStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFaultStreamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkSpaceServer).CreateFaultStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkSpace_CreateFaultStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkSpaceServer).CreateFaultStream(ctx, req.(*CreateFaultStreamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkSpace_ListFaultStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFaultStreamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkSpaceServer).ListFaultStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkSpace_ListFaultStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkSpaceServer).ListFaultStream(ctx, req.(*ListFaultStreamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkSpace_DelFaultStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelFaultStreamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkSpaceServer).DelFaultStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkSpace_DelFaultStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkSpaceServer).DelFaultStream(ctx, req.(*DelFaultStreamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkSpace_CreateWorkOrderType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkOrderTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkSpaceServer).CreateWorkOrderType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkSpace_CreateWorkOrderType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkSpaceServer).CreateWorkOrderType(ctx, req.(*CreateWorkOrderTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkSpace_ListWorkOrderType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkOrderTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkSpaceServer).ListWorkOrderType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkSpace_ListWorkOrderType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkSpaceServer).ListWorkOrderType(ctx, req.(*ListWorkOrderTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkSpace_DelWorkOrderType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelWorkOrderTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkSpaceServer).DelWorkOrderType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkSpace_DelWorkOrderType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkSpaceServer).DelWorkOrderType(ctx, req.(*DelWorkOrderTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkSpace_CreateWorkOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkSpaceServer).CreateWorkOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkSpace_CreateWorkOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkSpaceServer).CreateWorkOrder(ctx, req.(*CreateWorkOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkSpace_ListWorkOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkSpaceServer).ListWorkOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkSpace_ListWorkOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkSpaceServer).ListWorkOrder(ctx, req.(*ListWorkOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkSpace_CloseWorkOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseWorkOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkSpaceServer).CloseWorkOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkSpace_CloseWorkOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkSpaceServer).CloseWorkOrder(ctx, req.(*CloseWorkOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkSpace_AddWorkOrderStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWorkOrderStepReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkSpaceServer).AddWorkOrderStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkSpace_AddWorkOrderStep_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkSpaceServer).AddWorkOrderStep(ctx, req.(*AddWorkOrderStepReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkSpace_ListWorkOrderStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkOrderStepReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkSpaceServer).ListWorkOrderStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkSpace_ListWorkOrderStep_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkSpaceServer).ListWorkOrderStep(ctx, req.(*ListWorkOrderStepReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkSpace_CreateOnDuty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOnDutyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkSpaceServer).CreateOnDuty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkSpace_CreateOnDuty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkSpaceServer).CreateOnDuty(ctx, req.(*CreateOnDutyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkSpace_ListOnDuty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOnDutyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkSpaceServer).ListOnDuty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkSpace_ListOnDuty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkSpaceServer).ListOnDuty(ctx, req.(*ListOnDutyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkSpace_DelOnDuty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelOnDutyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkSpaceServer).DelOnDuty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkSpace_DelOnDuty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkSpaceServer).DelOnDuty(ctx, req.(*DelOnDutyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkSpace_CreateTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTodoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkSpaceServer).CreateTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkSpace_CreateTodo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkSpaceServer).CreateTodo(ctx, req.(*CreateTodoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkSpace_ListTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTodoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkSpaceServer).ListTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkSpace_ListTodo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkSpaceServer).ListTodo(ctx, req.(*ListTodoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkSpace_CloseTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseTodoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkSpaceServer).CloseTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkSpace_CloseTodo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkSpaceServer).CloseTodo(ctx, req.(*CloseTodoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkSpace_DelTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelTodoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkSpaceServer).DelTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkSpace_DelTodo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkSpaceServer).DelTodo(ctx, req.(*DelTodoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkSpace_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkSpaceServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkSpace_CreateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkSpaceServer).CreateTask(ctx, req.(*CreateTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkSpace_ListSelfDistTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkSpaceServer).ListSelfDistTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkSpace_ListSelfDistTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkSpaceServer).ListSelfDistTask(ctx, req.(*ListTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkSpace_ListSelfTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkSpaceServer).ListSelfTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkSpace_ListSelfTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkSpaceServer).ListSelfTask(ctx, req.(*ListTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkSpace_CloseSelfDistTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkSpaceServer).CloseSelfDistTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkSpace_CloseSelfDistTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkSpaceServer).CloseSelfDistTask(ctx, req.(*CloseTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkSpace_CloseSelfTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkSpaceServer).CloseSelfTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkSpace_CloseSelfTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkSpaceServer).CloseSelfTask(ctx, req.(*CloseTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkSpace_CreateKnowledgePublicLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKnowledgePublicLabelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkSpaceServer).CreateKnowledgePublicLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkSpace_CreateKnowledgePublicLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkSpaceServer).CreateKnowledgePublicLabel(ctx, req.(*CreateKnowledgePublicLabelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkSpace_CreateKnowledgePublicResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKnowledgePublicResourceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkSpaceServer).CreateKnowledgePublicResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkSpace_CreateKnowledgePublicResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkSpaceServer).CreateKnowledgePublicResource(ctx, req.(*CreateKnowledgePublicResourceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkSpace_CreateKnowledgePrivateLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKnowledgePrivateLabelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkSpaceServer).CreateKnowledgePrivateLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkSpace_CreateKnowledgePrivateLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkSpaceServer).CreateKnowledgePrivateLabel(ctx, req.(*CreateKnowledgePrivateLabelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkSpace_CreateKnowledgePrivateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKnowledgePrivateResourceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkSpaceServer).CreateKnowledgePrivateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkSpace_CreateKnowledgePrivateResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkSpaceServer).CreateKnowledgePrivateResource(ctx, req.(*CreateKnowledgePrivateResourceReq))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkSpace_ServiceDesc is the grpc.ServiceDesc for WorkSpace service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkSpace_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "workSpace.v1.WorkSpace",
	HandlerType: (*WorkSpaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFault",
			Handler:    _WorkSpace_CreateFault_Handler,
		},
		{
			MethodName: "ListFault",
			Handler:    _WorkSpace_ListFault_Handler,
		},
		{
			MethodName: "DelFault",
			Handler:    _WorkSpace_DelFault_Handler,
		},
		{
			MethodName: "CreateFaultStream",
			Handler:    _WorkSpace_CreateFaultStream_Handler,
		},
		{
			MethodName: "ListFaultStream",
			Handler:    _WorkSpace_ListFaultStream_Handler,
		},
		{
			MethodName: "DelFaultStream",
			Handler:    _WorkSpace_DelFaultStream_Handler,
		},
		{
			MethodName: "CreateWorkOrderType",
			Handler:    _WorkSpace_CreateWorkOrderType_Handler,
		},
		{
			MethodName: "ListWorkOrderType",
			Handler:    _WorkSpace_ListWorkOrderType_Handler,
		},
		{
			MethodName: "DelWorkOrderType",
			Handler:    _WorkSpace_DelWorkOrderType_Handler,
		},
		{
			MethodName: "CreateWorkOrder",
			Handler:    _WorkSpace_CreateWorkOrder_Handler,
		},
		{
			MethodName: "ListWorkOrder",
			Handler:    _WorkSpace_ListWorkOrder_Handler,
		},
		{
			MethodName: "CloseWorkOrder",
			Handler:    _WorkSpace_CloseWorkOrder_Handler,
		},
		{
			MethodName: "AddWorkOrderStep",
			Handler:    _WorkSpace_AddWorkOrderStep_Handler,
		},
		{
			MethodName: "ListWorkOrderStep",
			Handler:    _WorkSpace_ListWorkOrderStep_Handler,
		},
		{
			MethodName: "CreateOnDuty",
			Handler:    _WorkSpace_CreateOnDuty_Handler,
		},
		{
			MethodName: "ListOnDuty",
			Handler:    _WorkSpace_ListOnDuty_Handler,
		},
		{
			MethodName: "DelOnDuty",
			Handler:    _WorkSpace_DelOnDuty_Handler,
		},
		{
			MethodName: "CreateTodo",
			Handler:    _WorkSpace_CreateTodo_Handler,
		},
		{
			MethodName: "ListTodo",
			Handler:    _WorkSpace_ListTodo_Handler,
		},
		{
			MethodName: "CloseTodo",
			Handler:    _WorkSpace_CloseTodo_Handler,
		},
		{
			MethodName: "DelTodo",
			Handler:    _WorkSpace_DelTodo_Handler,
		},
		{
			MethodName: "CreateTask",
			Handler:    _WorkSpace_CreateTask_Handler,
		},
		{
			MethodName: "ListSelfDistTask",
			Handler:    _WorkSpace_ListSelfDistTask_Handler,
		},
		{
			MethodName: "ListSelfTask",
			Handler:    _WorkSpace_ListSelfTask_Handler,
		},
		{
			MethodName: "CloseSelfDistTask",
			Handler:    _WorkSpace_CloseSelfDistTask_Handler,
		},
		{
			MethodName: "CloseSelfTask",
			Handler:    _WorkSpace_CloseSelfTask_Handler,
		},
		{
			MethodName: "CreateKnowledgePublicLabel",
			Handler:    _WorkSpace_CreateKnowledgePublicLabel_Handler,
		},
		{
			MethodName: "CreateKnowledgePublicResource",
			Handler:    _WorkSpace_CreateKnowledgePublicResource_Handler,
		},
		{
			MethodName: "CreateKnowledgePrivateLabel",
			Handler:    _WorkSpace_CreateKnowledgePrivateLabel_Handler,
		},
		{
			MethodName: "CreateKnowledgePrivateResource",
			Handler:    _WorkSpace_CreateKnowledgePrivateResource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "workSpace/v1/workSpace.proto",
}
