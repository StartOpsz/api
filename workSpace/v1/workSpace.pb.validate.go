// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/workSpace/v1/workSpace.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateFaultReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateFaultReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFaultReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateFaultReqMultiError,
// or nil if none found.
func (m *CreateFaultReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFaultReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := CreateFaultReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := CreateFaultReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := CreateFaultReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTitle()) < 1 {
		err := CreateFaultReqValidationError{
			field:  "Title",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CreateFaultReq_Level_InLookup[m.GetLevel()]; !ok {
		err := CreateFaultReqValidationError{
			field:  "Level",
			reason: "value must be in list [1 2 3 4 5]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for StartTime

	// no validation rules for EndTime

	if utf8.RuneCountInString(m.GetSummary()) < 1 {
		err := CreateFaultReqValidationError{
			field:  "Summary",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetReason()) < 1 {
		err := CreateFaultReqValidationError{
			field:  "Reason",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Optimize

	if len(errors) > 0 {
		return CreateFaultReqMultiError(errors)
	}

	return nil
}

// CreateFaultReqMultiError is an error wrapping multiple validation errors
// returned by CreateFaultReq.ValidateAll() if the designated constraints
// aren't met.
type CreateFaultReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFaultReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFaultReqMultiError) AllErrors() []error { return m }

// CreateFaultReqValidationError is the validation error returned by
// CreateFaultReq.Validate if the designated constraints aren't met.
type CreateFaultReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFaultReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFaultReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFaultReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFaultReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFaultReqValidationError) ErrorName() string { return "CreateFaultReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateFaultReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFaultReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFaultReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFaultReqValidationError{}

var _CreateFaultReq_Level_InLookup = map[int32]struct{}{
	1: {},
	2: {},
	3: {},
	4: {},
	5: {},
}

// Validate checks the field values on CreateFaultReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateFaultReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFaultReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateFaultReplyMultiError, or nil if none found.
func (m *CreateFaultReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFaultReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return CreateFaultReplyMultiError(errors)
	}

	return nil
}

// CreateFaultReplyMultiError is an error wrapping multiple validation errors
// returned by CreateFaultReply.ValidateAll() if the designated constraints
// aren't met.
type CreateFaultReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFaultReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFaultReplyMultiError) AllErrors() []error { return m }

// CreateFaultReplyValidationError is the validation error returned by
// CreateFaultReply.Validate if the designated constraints aren't met.
type CreateFaultReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFaultReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFaultReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFaultReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFaultReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFaultReplyValidationError) ErrorName() string { return "CreateFaultReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateFaultReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFaultReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFaultReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFaultReplyValidationError{}

// Validate checks the field values on ListFaultReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListFaultReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFaultReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListFaultReqMultiError, or
// nil if none found.
func (m *ListFaultReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFaultReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ListFaultReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ListFaultReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ListFaultReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for TitleKeyword

	// no validation rules for SearchStartTime

	// no validation rules for SearchEndTime

	if len(errors) > 0 {
		return ListFaultReqMultiError(errors)
	}

	return nil
}

// ListFaultReqMultiError is an error wrapping multiple validation errors
// returned by ListFaultReq.ValidateAll() if the designated constraints aren't met.
type ListFaultReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFaultReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFaultReqMultiError) AllErrors() []error { return m }

// ListFaultReqValidationError is the validation error returned by
// ListFaultReq.Validate if the designated constraints aren't met.
type ListFaultReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFaultReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFaultReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFaultReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFaultReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFaultReqValidationError) ErrorName() string { return "ListFaultReqValidationError" }

// Error satisfies the builtin error interface
func (e ListFaultReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFaultReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFaultReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFaultReqValidationError{}

// Validate checks the field values on ListFaultReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListFaultReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFaultReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListFaultReplyMultiError,
// or nil if none found.
func (m *ListFaultReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFaultReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFaults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListFaultReplyValidationError{
						field:  fmt.Sprintf("Faults[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListFaultReplyValidationError{
						field:  fmt.Sprintf("Faults[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListFaultReplyValidationError{
					field:  fmt.Sprintf("Faults[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListFaultReplyMultiError(errors)
	}

	return nil
}

// ListFaultReplyMultiError is an error wrapping multiple validation errors
// returned by ListFaultReply.ValidateAll() if the designated constraints
// aren't met.
type ListFaultReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFaultReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFaultReplyMultiError) AllErrors() []error { return m }

// ListFaultReplyValidationError is the validation error returned by
// ListFaultReply.Validate if the designated constraints aren't met.
type ListFaultReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFaultReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFaultReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFaultReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFaultReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFaultReplyValidationError) ErrorName() string { return "ListFaultReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListFaultReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFaultReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFaultReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFaultReplyValidationError{}

// Validate checks the field values on DelFaultReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelFaultReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelFaultReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelFaultReqMultiError, or
// nil if none found.
func (m *DelFaultReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelFaultReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := DelFaultReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := DelFaultReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := DelFaultReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetFaultUuid()) < 1 {
		err := DelFaultReqValidationError{
			field:  "FaultUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelFaultReqMultiError(errors)
	}

	return nil
}

// DelFaultReqMultiError is an error wrapping multiple validation errors
// returned by DelFaultReq.ValidateAll() if the designated constraints aren't met.
type DelFaultReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelFaultReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelFaultReqMultiError) AllErrors() []error { return m }

// DelFaultReqValidationError is the validation error returned by
// DelFaultReq.Validate if the designated constraints aren't met.
type DelFaultReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelFaultReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelFaultReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelFaultReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelFaultReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelFaultReqValidationError) ErrorName() string { return "DelFaultReqValidationError" }

// Error satisfies the builtin error interface
func (e DelFaultReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelFaultReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelFaultReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelFaultReqValidationError{}

// Validate checks the field values on DelFaultReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelFaultReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelFaultReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelFaultReplyMultiError, or
// nil if none found.
func (m *DelFaultReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DelFaultReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return DelFaultReplyMultiError(errors)
	}

	return nil
}

// DelFaultReplyMultiError is an error wrapping multiple validation errors
// returned by DelFaultReply.ValidateAll() if the designated constraints
// aren't met.
type DelFaultReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelFaultReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelFaultReplyMultiError) AllErrors() []error { return m }

// DelFaultReplyValidationError is the validation error returned by
// DelFaultReply.Validate if the designated constraints aren't met.
type DelFaultReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelFaultReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelFaultReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelFaultReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelFaultReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelFaultReplyValidationError) ErrorName() string { return "DelFaultReplyValidationError" }

// Error satisfies the builtin error interface
func (e DelFaultReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelFaultReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelFaultReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelFaultReplyValidationError{}

// Validate checks the field values on CreateFaultStreamReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateFaultStreamReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFaultStreamReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateFaultStreamReqMultiError, or nil if none found.
func (m *CreateFaultStreamReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFaultStreamReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := CreateFaultStreamReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := CreateFaultStreamReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := CreateFaultStreamReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetFaultUuid()) < 1 {
		err := CreateFaultStreamReqValidationError{
			field:  "FaultUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for StartTime

	// no validation rules for EndTime

	if utf8.RuneCountInString(m.GetDo()) < 1 {
		err := CreateFaultStreamReqValidationError{
			field:  "Do",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateFaultStreamReqMultiError(errors)
	}

	return nil
}

// CreateFaultStreamReqMultiError is an error wrapping multiple validation
// errors returned by CreateFaultStreamReq.ValidateAll() if the designated
// constraints aren't met.
type CreateFaultStreamReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFaultStreamReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFaultStreamReqMultiError) AllErrors() []error { return m }

// CreateFaultStreamReqValidationError is the validation error returned by
// CreateFaultStreamReq.Validate if the designated constraints aren't met.
type CreateFaultStreamReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFaultStreamReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFaultStreamReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFaultStreamReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFaultStreamReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFaultStreamReqValidationError) ErrorName() string {
	return "CreateFaultStreamReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFaultStreamReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFaultStreamReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFaultStreamReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFaultStreamReqValidationError{}

// Validate checks the field values on CreateFaultStreamReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateFaultStreamReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFaultStreamReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateFaultStreamReplyMultiError, or nil if none found.
func (m *CreateFaultStreamReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFaultStreamReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return CreateFaultStreamReplyMultiError(errors)
	}

	return nil
}

// CreateFaultStreamReplyMultiError is an error wrapping multiple validation
// errors returned by CreateFaultStreamReply.ValidateAll() if the designated
// constraints aren't met.
type CreateFaultStreamReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFaultStreamReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFaultStreamReplyMultiError) AllErrors() []error { return m }

// CreateFaultStreamReplyValidationError is the validation error returned by
// CreateFaultStreamReply.Validate if the designated constraints aren't met.
type CreateFaultStreamReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFaultStreamReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFaultStreamReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFaultStreamReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFaultStreamReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFaultStreamReplyValidationError) ErrorName() string {
	return "CreateFaultStreamReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFaultStreamReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFaultStreamReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFaultStreamReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFaultStreamReplyValidationError{}

// Validate checks the field values on ListFaultStreamReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFaultStreamReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFaultStreamReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFaultStreamReqMultiError, or nil if none found.
func (m *ListFaultStreamReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFaultStreamReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ListFaultStreamReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ListFaultStreamReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ListFaultStreamReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetFaultUuid()) < 1 {
		err := ListFaultStreamReqValidationError{
			field:  "FaultUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListFaultStreamReqMultiError(errors)
	}

	return nil
}

// ListFaultStreamReqMultiError is an error wrapping multiple validation errors
// returned by ListFaultStreamReq.ValidateAll() if the designated constraints
// aren't met.
type ListFaultStreamReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFaultStreamReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFaultStreamReqMultiError) AllErrors() []error { return m }

// ListFaultStreamReqValidationError is the validation error returned by
// ListFaultStreamReq.Validate if the designated constraints aren't met.
type ListFaultStreamReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFaultStreamReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFaultStreamReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFaultStreamReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFaultStreamReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFaultStreamReqValidationError) ErrorName() string {
	return "ListFaultStreamReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListFaultStreamReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFaultStreamReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFaultStreamReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFaultStreamReqValidationError{}

// Validate checks the field values on ListFaultStreamReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFaultStreamReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFaultStreamReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFaultStreamReplyMultiError, or nil if none found.
func (m *ListFaultStreamReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFaultStreamReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FaultUuid

	for idx, item := range m.GetFaultStream() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListFaultStreamReplyValidationError{
						field:  fmt.Sprintf("FaultStream[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListFaultStreamReplyValidationError{
						field:  fmt.Sprintf("FaultStream[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListFaultStreamReplyValidationError{
					field:  fmt.Sprintf("FaultStream[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListFaultStreamReplyMultiError(errors)
	}

	return nil
}

// ListFaultStreamReplyMultiError is an error wrapping multiple validation
// errors returned by ListFaultStreamReply.ValidateAll() if the designated
// constraints aren't met.
type ListFaultStreamReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFaultStreamReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFaultStreamReplyMultiError) AllErrors() []error { return m }

// ListFaultStreamReplyValidationError is the validation error returned by
// ListFaultStreamReply.Validate if the designated constraints aren't met.
type ListFaultStreamReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFaultStreamReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFaultStreamReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFaultStreamReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFaultStreamReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFaultStreamReplyValidationError) ErrorName() string {
	return "ListFaultStreamReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListFaultStreamReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFaultStreamReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFaultStreamReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFaultStreamReplyValidationError{}

// Validate checks the field values on DelFaultStreamReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DelFaultStreamReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelFaultStreamReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelFaultStreamReqMultiError, or nil if none found.
func (m *DelFaultStreamReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelFaultStreamReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := DelFaultStreamReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := DelFaultStreamReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := DelFaultStreamReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetFaultUuid()) < 1 {
		err := DelFaultStreamReqValidationError{
			field:  "FaultUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetFaultStreamUuid()) < 1 {
		err := DelFaultStreamReqValidationError{
			field:  "FaultStreamUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelFaultStreamReqMultiError(errors)
	}

	return nil
}

// DelFaultStreamReqMultiError is an error wrapping multiple validation errors
// returned by DelFaultStreamReq.ValidateAll() if the designated constraints
// aren't met.
type DelFaultStreamReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelFaultStreamReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelFaultStreamReqMultiError) AllErrors() []error { return m }

// DelFaultStreamReqValidationError is the validation error returned by
// DelFaultStreamReq.Validate if the designated constraints aren't met.
type DelFaultStreamReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelFaultStreamReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelFaultStreamReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelFaultStreamReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelFaultStreamReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelFaultStreamReqValidationError) ErrorName() string {
	return "DelFaultStreamReqValidationError"
}

// Error satisfies the builtin error interface
func (e DelFaultStreamReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelFaultStreamReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelFaultStreamReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelFaultStreamReqValidationError{}

// Validate checks the field values on DelFaultStreamReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelFaultStreamReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelFaultStreamReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelFaultStreamReplyMultiError, or nil if none found.
func (m *DelFaultStreamReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DelFaultStreamReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return DelFaultStreamReplyMultiError(errors)
	}

	return nil
}

// DelFaultStreamReplyMultiError is an error wrapping multiple validation
// errors returned by DelFaultStreamReply.ValidateAll() if the designated
// constraints aren't met.
type DelFaultStreamReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelFaultStreamReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelFaultStreamReplyMultiError) AllErrors() []error { return m }

// DelFaultStreamReplyValidationError is the validation error returned by
// DelFaultStreamReply.Validate if the designated constraints aren't met.
type DelFaultStreamReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelFaultStreamReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelFaultStreamReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelFaultStreamReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelFaultStreamReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelFaultStreamReplyValidationError) ErrorName() string {
	return "DelFaultStreamReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DelFaultStreamReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelFaultStreamReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelFaultStreamReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelFaultStreamReplyValidationError{}

// Validate checks the field values on CreateWorkOrderTypeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWorkOrderTypeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWorkOrderTypeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWorkOrderTypeReqMultiError, or nil if none found.
func (m *CreateWorkOrderTypeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWorkOrderTypeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := CreateWorkOrderTypeReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := CreateWorkOrderTypeReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := CreateWorkOrderTypeReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateWorkOrderTypeReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescribe()) < 1 {
		err := CreateWorkOrderTypeReqValidationError{
			field:  "Describe",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateWorkOrderTypeReqMultiError(errors)
	}

	return nil
}

// CreateWorkOrderTypeReqMultiError is an error wrapping multiple validation
// errors returned by CreateWorkOrderTypeReq.ValidateAll() if the designated
// constraints aren't met.
type CreateWorkOrderTypeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWorkOrderTypeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWorkOrderTypeReqMultiError) AllErrors() []error { return m }

// CreateWorkOrderTypeReqValidationError is the validation error returned by
// CreateWorkOrderTypeReq.Validate if the designated constraints aren't met.
type CreateWorkOrderTypeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWorkOrderTypeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWorkOrderTypeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWorkOrderTypeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWorkOrderTypeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWorkOrderTypeReqValidationError) ErrorName() string {
	return "CreateWorkOrderTypeReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWorkOrderTypeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWorkOrderTypeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWorkOrderTypeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWorkOrderTypeReqValidationError{}

// Validate checks the field values on CreateWorkOrderTypeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWorkOrderTypeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWorkOrderTypeReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWorkOrderTypeReplyMultiError, or nil if none found.
func (m *CreateWorkOrderTypeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWorkOrderTypeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return CreateWorkOrderTypeReplyMultiError(errors)
	}

	return nil
}

// CreateWorkOrderTypeReplyMultiError is an error wrapping multiple validation
// errors returned by CreateWorkOrderTypeReply.ValidateAll() if the designated
// constraints aren't met.
type CreateWorkOrderTypeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWorkOrderTypeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWorkOrderTypeReplyMultiError) AllErrors() []error { return m }

// CreateWorkOrderTypeReplyValidationError is the validation error returned by
// CreateWorkOrderTypeReply.Validate if the designated constraints aren't met.
type CreateWorkOrderTypeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWorkOrderTypeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWorkOrderTypeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWorkOrderTypeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWorkOrderTypeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWorkOrderTypeReplyValidationError) ErrorName() string {
	return "CreateWorkOrderTypeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWorkOrderTypeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWorkOrderTypeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWorkOrderTypeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWorkOrderTypeReplyValidationError{}

// Validate checks the field values on ListWorkOrderTypeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWorkOrderTypeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWorkOrderTypeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWorkOrderTypeReqMultiError, or nil if none found.
func (m *ListWorkOrderTypeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkOrderTypeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ListWorkOrderTypeReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ListWorkOrderTypeReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ListWorkOrderTypeReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListWorkOrderTypeReqMultiError(errors)
	}

	return nil
}

// ListWorkOrderTypeReqMultiError is an error wrapping multiple validation
// errors returned by ListWorkOrderTypeReq.ValidateAll() if the designated
// constraints aren't met.
type ListWorkOrderTypeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkOrderTypeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkOrderTypeReqMultiError) AllErrors() []error { return m }

// ListWorkOrderTypeReqValidationError is the validation error returned by
// ListWorkOrderTypeReq.Validate if the designated constraints aren't met.
type ListWorkOrderTypeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkOrderTypeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkOrderTypeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkOrderTypeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkOrderTypeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkOrderTypeReqValidationError) ErrorName() string {
	return "ListWorkOrderTypeReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkOrderTypeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkOrderTypeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkOrderTypeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkOrderTypeReqValidationError{}

// Validate checks the field values on ListWorkOrderTypeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWorkOrderTypeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWorkOrderTypeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWorkOrderTypeReplyMultiError, or nil if none found.
func (m *ListWorkOrderTypeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkOrderTypeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetWorkOrderTypeList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWorkOrderTypeReplyValidationError{
						field:  fmt.Sprintf("WorkOrderTypeList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWorkOrderTypeReplyValidationError{
						field:  fmt.Sprintf("WorkOrderTypeList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWorkOrderTypeReplyValidationError{
					field:  fmt.Sprintf("WorkOrderTypeList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListWorkOrderTypeReplyMultiError(errors)
	}

	return nil
}

// ListWorkOrderTypeReplyMultiError is an error wrapping multiple validation
// errors returned by ListWorkOrderTypeReply.ValidateAll() if the designated
// constraints aren't met.
type ListWorkOrderTypeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkOrderTypeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkOrderTypeReplyMultiError) AllErrors() []error { return m }

// ListWorkOrderTypeReplyValidationError is the validation error returned by
// ListWorkOrderTypeReply.Validate if the designated constraints aren't met.
type ListWorkOrderTypeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkOrderTypeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkOrderTypeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkOrderTypeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkOrderTypeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkOrderTypeReplyValidationError) ErrorName() string {
	return "ListWorkOrderTypeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkOrderTypeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkOrderTypeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkOrderTypeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkOrderTypeReplyValidationError{}

// Validate checks the field values on DelWorkOrderTypeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelWorkOrderTypeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelWorkOrderTypeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelWorkOrderTypeReqMultiError, or nil if none found.
func (m *DelWorkOrderTypeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelWorkOrderTypeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := DelWorkOrderTypeReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := DelWorkOrderTypeReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := DelWorkOrderTypeReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetWorkOrderTypeUuid()) < 1 {
		err := DelWorkOrderTypeReqValidationError{
			field:  "WorkOrderTypeUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelWorkOrderTypeReqMultiError(errors)
	}

	return nil
}

// DelWorkOrderTypeReqMultiError is an error wrapping multiple validation
// errors returned by DelWorkOrderTypeReq.ValidateAll() if the designated
// constraints aren't met.
type DelWorkOrderTypeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelWorkOrderTypeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelWorkOrderTypeReqMultiError) AllErrors() []error { return m }

// DelWorkOrderTypeReqValidationError is the validation error returned by
// DelWorkOrderTypeReq.Validate if the designated constraints aren't met.
type DelWorkOrderTypeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelWorkOrderTypeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelWorkOrderTypeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelWorkOrderTypeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelWorkOrderTypeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelWorkOrderTypeReqValidationError) ErrorName() string {
	return "DelWorkOrderTypeReqValidationError"
}

// Error satisfies the builtin error interface
func (e DelWorkOrderTypeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelWorkOrderTypeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelWorkOrderTypeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelWorkOrderTypeReqValidationError{}

// Validate checks the field values on DelWorkOrderTypeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelWorkOrderTypeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelWorkOrderTypeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelWorkOrderTypeReplyMultiError, or nil if none found.
func (m *DelWorkOrderTypeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DelWorkOrderTypeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return DelWorkOrderTypeReplyMultiError(errors)
	}

	return nil
}

// DelWorkOrderTypeReplyMultiError is an error wrapping multiple validation
// errors returned by DelWorkOrderTypeReply.ValidateAll() if the designated
// constraints aren't met.
type DelWorkOrderTypeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelWorkOrderTypeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelWorkOrderTypeReplyMultiError) AllErrors() []error { return m }

// DelWorkOrderTypeReplyValidationError is the validation error returned by
// DelWorkOrderTypeReply.Validate if the designated constraints aren't met.
type DelWorkOrderTypeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelWorkOrderTypeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelWorkOrderTypeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelWorkOrderTypeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelWorkOrderTypeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelWorkOrderTypeReplyValidationError) ErrorName() string {
	return "DelWorkOrderTypeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DelWorkOrderTypeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelWorkOrderTypeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelWorkOrderTypeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelWorkOrderTypeReplyValidationError{}

// Validate checks the field values on CreateWorkOrderReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWorkOrderReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWorkOrderReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWorkOrderReqMultiError, or nil if none found.
func (m *CreateWorkOrderReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWorkOrderReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := CreateWorkOrderReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := CreateWorkOrderReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := CreateWorkOrderReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetWorkOrderTypeUuid()) < 1 {
		err := CreateWorkOrderReqValidationError{
			field:  "WorkOrderTypeUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetContent()) < 1 {
		err := CreateWorkOrderReqValidationError{
			field:  "Content",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateWorkOrderReqMultiError(errors)
	}

	return nil
}

// CreateWorkOrderReqMultiError is an error wrapping multiple validation errors
// returned by CreateWorkOrderReq.ValidateAll() if the designated constraints
// aren't met.
type CreateWorkOrderReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWorkOrderReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWorkOrderReqMultiError) AllErrors() []error { return m }

// CreateWorkOrderReqValidationError is the validation error returned by
// CreateWorkOrderReq.Validate if the designated constraints aren't met.
type CreateWorkOrderReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWorkOrderReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWorkOrderReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWorkOrderReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWorkOrderReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWorkOrderReqValidationError) ErrorName() string {
	return "CreateWorkOrderReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWorkOrderReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWorkOrderReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWorkOrderReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWorkOrderReqValidationError{}

// Validate checks the field values on CreateWorkOrderReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWorkOrderReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWorkOrderReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWorkOrderReplyMultiError, or nil if none found.
func (m *CreateWorkOrderReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWorkOrderReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return CreateWorkOrderReplyMultiError(errors)
	}

	return nil
}

// CreateWorkOrderReplyMultiError is an error wrapping multiple validation
// errors returned by CreateWorkOrderReply.ValidateAll() if the designated
// constraints aren't met.
type CreateWorkOrderReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWorkOrderReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWorkOrderReplyMultiError) AllErrors() []error { return m }

// CreateWorkOrderReplyValidationError is the validation error returned by
// CreateWorkOrderReply.Validate if the designated constraints aren't met.
type CreateWorkOrderReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWorkOrderReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWorkOrderReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWorkOrderReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWorkOrderReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWorkOrderReplyValidationError) ErrorName() string {
	return "CreateWorkOrderReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWorkOrderReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWorkOrderReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWorkOrderReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWorkOrderReplyValidationError{}

// Validate checks the field values on ListWorkOrderReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListWorkOrderReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWorkOrderReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWorkOrderReqMultiError, or nil if none found.
func (m *ListWorkOrderReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkOrderReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ListWorkOrderReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ListWorkOrderReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ListWorkOrderReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return ListWorkOrderReqMultiError(errors)
	}

	return nil
}

// ListWorkOrderReqMultiError is an error wrapping multiple validation errors
// returned by ListWorkOrderReq.ValidateAll() if the designated constraints
// aren't met.
type ListWorkOrderReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkOrderReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkOrderReqMultiError) AllErrors() []error { return m }

// ListWorkOrderReqValidationError is the validation error returned by
// ListWorkOrderReq.Validate if the designated constraints aren't met.
type ListWorkOrderReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkOrderReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkOrderReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkOrderReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkOrderReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkOrderReqValidationError) ErrorName() string { return "ListWorkOrderReqValidationError" }

// Error satisfies the builtin error interface
func (e ListWorkOrderReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkOrderReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkOrderReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkOrderReqValidationError{}

// Validate checks the field values on ListWorkOrderReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWorkOrderReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWorkOrderReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWorkOrderReplyMultiError, or nil if none found.
func (m *ListWorkOrderReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkOrderReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetWorkOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWorkOrderReplyValidationError{
						field:  fmt.Sprintf("WorkOrders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWorkOrderReplyValidationError{
						field:  fmt.Sprintf("WorkOrders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWorkOrderReplyValidationError{
					field:  fmt.Sprintf("WorkOrders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListWorkOrderReplyMultiError(errors)
	}

	return nil
}

// ListWorkOrderReplyMultiError is an error wrapping multiple validation errors
// returned by ListWorkOrderReply.ValidateAll() if the designated constraints
// aren't met.
type ListWorkOrderReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkOrderReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkOrderReplyMultiError) AllErrors() []error { return m }

// ListWorkOrderReplyValidationError is the validation error returned by
// ListWorkOrderReply.Validate if the designated constraints aren't met.
type ListWorkOrderReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkOrderReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkOrderReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkOrderReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkOrderReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkOrderReplyValidationError) ErrorName() string {
	return "ListWorkOrderReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkOrderReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkOrderReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkOrderReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkOrderReplyValidationError{}

// Validate checks the field values on CloseWorkOrderReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CloseWorkOrderReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloseWorkOrderReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloseWorkOrderReqMultiError, or nil if none found.
func (m *CloseWorkOrderReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CloseWorkOrderReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := CloseWorkOrderReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := CloseWorkOrderReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := CloseWorkOrderReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetWorkOrderUuid()) < 1 {
		err := CloseWorkOrderReqValidationError{
			field:  "WorkOrderUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CloseWorkOrderReqMultiError(errors)
	}

	return nil
}

// CloseWorkOrderReqMultiError is an error wrapping multiple validation errors
// returned by CloseWorkOrderReq.ValidateAll() if the designated constraints
// aren't met.
type CloseWorkOrderReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloseWorkOrderReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloseWorkOrderReqMultiError) AllErrors() []error { return m }

// CloseWorkOrderReqValidationError is the validation error returned by
// CloseWorkOrderReq.Validate if the designated constraints aren't met.
type CloseWorkOrderReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloseWorkOrderReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloseWorkOrderReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloseWorkOrderReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloseWorkOrderReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloseWorkOrderReqValidationError) ErrorName() string {
	return "CloseWorkOrderReqValidationError"
}

// Error satisfies the builtin error interface
func (e CloseWorkOrderReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloseWorkOrderReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloseWorkOrderReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloseWorkOrderReqValidationError{}

// Validate checks the field values on CloseWorkOrderReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloseWorkOrderReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloseWorkOrderReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloseWorkOrderReplyMultiError, or nil if none found.
func (m *CloseWorkOrderReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CloseWorkOrderReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return CloseWorkOrderReplyMultiError(errors)
	}

	return nil
}

// CloseWorkOrderReplyMultiError is an error wrapping multiple validation
// errors returned by CloseWorkOrderReply.ValidateAll() if the designated
// constraints aren't met.
type CloseWorkOrderReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloseWorkOrderReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloseWorkOrderReplyMultiError) AllErrors() []error { return m }

// CloseWorkOrderReplyValidationError is the validation error returned by
// CloseWorkOrderReply.Validate if the designated constraints aren't met.
type CloseWorkOrderReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloseWorkOrderReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloseWorkOrderReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloseWorkOrderReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloseWorkOrderReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloseWorkOrderReplyValidationError) ErrorName() string {
	return "CloseWorkOrderReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CloseWorkOrderReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloseWorkOrderReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloseWorkOrderReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloseWorkOrderReplyValidationError{}

// Validate checks the field values on AddWorkOrderStepReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddWorkOrderStepReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddWorkOrderStepReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddWorkOrderStepReqMultiError, or nil if none found.
func (m *AddWorkOrderStepReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddWorkOrderStepReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := AddWorkOrderStepReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := AddWorkOrderStepReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := AddWorkOrderStepReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetWorkOrderUuid()) < 1 {
		err := AddWorkOrderStepReqValidationError{
			field:  "WorkOrderUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetContent()) < 1 {
		err := AddWorkOrderStepReqValidationError{
			field:  "Content",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddWorkOrderStepReqMultiError(errors)
	}

	return nil
}

// AddWorkOrderStepReqMultiError is an error wrapping multiple validation
// errors returned by AddWorkOrderStepReq.ValidateAll() if the designated
// constraints aren't met.
type AddWorkOrderStepReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddWorkOrderStepReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddWorkOrderStepReqMultiError) AllErrors() []error { return m }

// AddWorkOrderStepReqValidationError is the validation error returned by
// AddWorkOrderStepReq.Validate if the designated constraints aren't met.
type AddWorkOrderStepReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddWorkOrderStepReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddWorkOrderStepReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddWorkOrderStepReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddWorkOrderStepReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddWorkOrderStepReqValidationError) ErrorName() string {
	return "AddWorkOrderStepReqValidationError"
}

// Error satisfies the builtin error interface
func (e AddWorkOrderStepReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddWorkOrderStepReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddWorkOrderStepReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddWorkOrderStepReqValidationError{}

// Validate checks the field values on AddWorkOrderStepReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddWorkOrderStepReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddWorkOrderStepReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddWorkOrderStepReplyMultiError, or nil if none found.
func (m *AddWorkOrderStepReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddWorkOrderStepReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return AddWorkOrderStepReplyMultiError(errors)
	}

	return nil
}

// AddWorkOrderStepReplyMultiError is an error wrapping multiple validation
// errors returned by AddWorkOrderStepReply.ValidateAll() if the designated
// constraints aren't met.
type AddWorkOrderStepReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddWorkOrderStepReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddWorkOrderStepReplyMultiError) AllErrors() []error { return m }

// AddWorkOrderStepReplyValidationError is the validation error returned by
// AddWorkOrderStepReply.Validate if the designated constraints aren't met.
type AddWorkOrderStepReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddWorkOrderStepReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddWorkOrderStepReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddWorkOrderStepReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddWorkOrderStepReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddWorkOrderStepReplyValidationError) ErrorName() string {
	return "AddWorkOrderStepReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AddWorkOrderStepReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddWorkOrderStepReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddWorkOrderStepReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddWorkOrderStepReplyValidationError{}

// Validate checks the field values on ListWorkOrderStepReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWorkOrderStepReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWorkOrderStepReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWorkOrderStepReqMultiError, or nil if none found.
func (m *ListWorkOrderStepReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkOrderStepReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ListWorkOrderStepReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ListWorkOrderStepReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ListWorkOrderStepReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetWorkOrderUuid()) < 1 {
		err := ListWorkOrderStepReqValidationError{
			field:  "WorkOrderUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListWorkOrderStepReqMultiError(errors)
	}

	return nil
}

// ListWorkOrderStepReqMultiError is an error wrapping multiple validation
// errors returned by ListWorkOrderStepReq.ValidateAll() if the designated
// constraints aren't met.
type ListWorkOrderStepReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkOrderStepReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkOrderStepReqMultiError) AllErrors() []error { return m }

// ListWorkOrderStepReqValidationError is the validation error returned by
// ListWorkOrderStepReq.Validate if the designated constraints aren't met.
type ListWorkOrderStepReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkOrderStepReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkOrderStepReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkOrderStepReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkOrderStepReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkOrderStepReqValidationError) ErrorName() string {
	return "ListWorkOrderStepReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkOrderStepReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkOrderStepReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkOrderStepReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkOrderStepReqValidationError{}

// Validate checks the field values on ListWorkOrderStepReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWorkOrderStepReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWorkOrderStepReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWorkOrderStepReplyMultiError, or nil if none found.
func (m *ListWorkOrderStepReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkOrderStepReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetWorkOrderStep() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWorkOrderStepReplyValidationError{
						field:  fmt.Sprintf("WorkOrderStep[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWorkOrderStepReplyValidationError{
						field:  fmt.Sprintf("WorkOrderStep[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWorkOrderStepReplyValidationError{
					field:  fmt.Sprintf("WorkOrderStep[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListWorkOrderStepReplyMultiError(errors)
	}

	return nil
}

// ListWorkOrderStepReplyMultiError is an error wrapping multiple validation
// errors returned by ListWorkOrderStepReply.ValidateAll() if the designated
// constraints aren't met.
type ListWorkOrderStepReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkOrderStepReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkOrderStepReplyMultiError) AllErrors() []error { return m }

// ListWorkOrderStepReplyValidationError is the validation error returned by
// ListWorkOrderStepReply.Validate if the designated constraints aren't met.
type ListWorkOrderStepReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkOrderStepReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkOrderStepReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkOrderStepReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkOrderStepReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkOrderStepReplyValidationError) ErrorName() string {
	return "ListWorkOrderStepReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkOrderStepReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkOrderStepReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkOrderStepReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkOrderStepReplyValidationError{}

// Validate checks the field values on CreateOnDutyReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateOnDutyReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOnDutyReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOnDutyReqMultiError, or nil if none found.
func (m *CreateOnDutyReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOnDutyReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := CreateOnDutyReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := CreateOnDutyReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := CreateOnDutyReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOnDutyUserUuid()) < 1 {
		err := CreateOnDutyReqValidationError{
			field:  "OnDutyUserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOnDutyTime() <= 1 {
		err := CreateOnDutyReqValidationError{
			field:  "OnDutyTime",
			reason: "value must be greater than 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateOnDutyReqMultiError(errors)
	}

	return nil
}

// CreateOnDutyReqMultiError is an error wrapping multiple validation errors
// returned by CreateOnDutyReq.ValidateAll() if the designated constraints
// aren't met.
type CreateOnDutyReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOnDutyReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOnDutyReqMultiError) AllErrors() []error { return m }

// CreateOnDutyReqValidationError is the validation error returned by
// CreateOnDutyReq.Validate if the designated constraints aren't met.
type CreateOnDutyReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOnDutyReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOnDutyReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOnDutyReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOnDutyReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOnDutyReqValidationError) ErrorName() string { return "CreateOnDutyReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateOnDutyReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOnDutyReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOnDutyReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOnDutyReqValidationError{}

// Validate checks the field values on CreateOnDutyReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateOnDutyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOnDutyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOnDutyReplyMultiError, or nil if none found.
func (m *CreateOnDutyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOnDutyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return CreateOnDutyReplyMultiError(errors)
	}

	return nil
}

// CreateOnDutyReplyMultiError is an error wrapping multiple validation errors
// returned by CreateOnDutyReply.ValidateAll() if the designated constraints
// aren't met.
type CreateOnDutyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOnDutyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOnDutyReplyMultiError) AllErrors() []error { return m }

// CreateOnDutyReplyValidationError is the validation error returned by
// CreateOnDutyReply.Validate if the designated constraints aren't met.
type CreateOnDutyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOnDutyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOnDutyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOnDutyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOnDutyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOnDutyReplyValidationError) ErrorName() string {
	return "CreateOnDutyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOnDutyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOnDutyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOnDutyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOnDutyReplyValidationError{}

// Validate checks the field values on ListOnDutyReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListOnDutyReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOnDutyReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListOnDutyReqMultiError, or
// nil if none found.
func (m *ListOnDutyReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOnDutyReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ListOnDutyReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ListOnDutyReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ListOnDutyReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for OnDutyUserUuid

	// no validation rules for OnDutyTime

	if len(errors) > 0 {
		return ListOnDutyReqMultiError(errors)
	}

	return nil
}

// ListOnDutyReqMultiError is an error wrapping multiple validation errors
// returned by ListOnDutyReq.ValidateAll() if the designated constraints
// aren't met.
type ListOnDutyReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOnDutyReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOnDutyReqMultiError) AllErrors() []error { return m }

// ListOnDutyReqValidationError is the validation error returned by
// ListOnDutyReq.Validate if the designated constraints aren't met.
type ListOnDutyReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOnDutyReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOnDutyReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOnDutyReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOnDutyReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOnDutyReqValidationError) ErrorName() string { return "ListOnDutyReqValidationError" }

// Error satisfies the builtin error interface
func (e ListOnDutyReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOnDutyReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOnDutyReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOnDutyReqValidationError{}

// Validate checks the field values on ListOnDutyReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListOnDutyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOnDutyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOnDutyReplyMultiError, or nil if none found.
func (m *ListOnDutyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOnDutyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOnDuty() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOnDutyReplyValidationError{
						field:  fmt.Sprintf("OnDuty[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOnDutyReplyValidationError{
						field:  fmt.Sprintf("OnDuty[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOnDutyReplyValidationError{
					field:  fmt.Sprintf("OnDuty[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOnDutyReplyMultiError(errors)
	}

	return nil
}

// ListOnDutyReplyMultiError is an error wrapping multiple validation errors
// returned by ListOnDutyReply.ValidateAll() if the designated constraints
// aren't met.
type ListOnDutyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOnDutyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOnDutyReplyMultiError) AllErrors() []error { return m }

// ListOnDutyReplyValidationError is the validation error returned by
// ListOnDutyReply.Validate if the designated constraints aren't met.
type ListOnDutyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOnDutyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOnDutyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOnDutyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOnDutyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOnDutyReplyValidationError) ErrorName() string { return "ListOnDutyReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListOnDutyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOnDutyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOnDutyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOnDutyReplyValidationError{}

// Validate checks the field values on DelOnDutyReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelOnDutyReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelOnDutyReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelOnDutyReqMultiError, or
// nil if none found.
func (m *DelOnDutyReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelOnDutyReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := DelOnDutyReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := DelOnDutyReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := DelOnDutyReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOnDutyUuid()) < 1 {
		err := DelOnDutyReqValidationError{
			field:  "OnDutyUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelOnDutyReqMultiError(errors)
	}

	return nil
}

// DelOnDutyReqMultiError is an error wrapping multiple validation errors
// returned by DelOnDutyReq.ValidateAll() if the designated constraints aren't met.
type DelOnDutyReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelOnDutyReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelOnDutyReqMultiError) AllErrors() []error { return m }

// DelOnDutyReqValidationError is the validation error returned by
// DelOnDutyReq.Validate if the designated constraints aren't met.
type DelOnDutyReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelOnDutyReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelOnDutyReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelOnDutyReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelOnDutyReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelOnDutyReqValidationError) ErrorName() string { return "DelOnDutyReqValidationError" }

// Error satisfies the builtin error interface
func (e DelOnDutyReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelOnDutyReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelOnDutyReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelOnDutyReqValidationError{}

// Validate checks the field values on DelOnDutyReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelOnDutyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelOnDutyReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelOnDutyReplyMultiError,
// or nil if none found.
func (m *DelOnDutyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DelOnDutyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return DelOnDutyReplyMultiError(errors)
	}

	return nil
}

// DelOnDutyReplyMultiError is an error wrapping multiple validation errors
// returned by DelOnDutyReply.ValidateAll() if the designated constraints
// aren't met.
type DelOnDutyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelOnDutyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelOnDutyReplyMultiError) AllErrors() []error { return m }

// DelOnDutyReplyValidationError is the validation error returned by
// DelOnDutyReply.Validate if the designated constraints aren't met.
type DelOnDutyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelOnDutyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelOnDutyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelOnDutyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelOnDutyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelOnDutyReplyValidationError) ErrorName() string { return "DelOnDutyReplyValidationError" }

// Error satisfies the builtin error interface
func (e DelOnDutyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelOnDutyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelOnDutyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelOnDutyReplyValidationError{}

// Validate checks the field values on CreateTodoReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateTodoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTodoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateTodoReqMultiError, or
// nil if none found.
func (m *CreateTodoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTodoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := CreateTodoReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := CreateTodoReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := CreateTodoReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CreateTodoReq_Priority_InLookup[m.GetPriority()]; !ok {
		err := CreateTodoReqValidationError{
			field:  "Priority",
			reason: "value must be in list [1 2 3 4 5]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for OverTime

	// no validation rules for Content

	if len(errors) > 0 {
		return CreateTodoReqMultiError(errors)
	}

	return nil
}

// CreateTodoReqMultiError is an error wrapping multiple validation errors
// returned by CreateTodoReq.ValidateAll() if the designated constraints
// aren't met.
type CreateTodoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTodoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTodoReqMultiError) AllErrors() []error { return m }

// CreateTodoReqValidationError is the validation error returned by
// CreateTodoReq.Validate if the designated constraints aren't met.
type CreateTodoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTodoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTodoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTodoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTodoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTodoReqValidationError) ErrorName() string { return "CreateTodoReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateTodoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTodoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTodoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTodoReqValidationError{}

var _CreateTodoReq_Priority_InLookup = map[int32]struct{}{
	1: {},
	2: {},
	3: {},
	4: {},
	5: {},
}

// Validate checks the field values on CreateTodoReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateTodoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTodoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTodoReplyMultiError, or nil if none found.
func (m *CreateTodoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTodoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return CreateTodoReplyMultiError(errors)
	}

	return nil
}

// CreateTodoReplyMultiError is an error wrapping multiple validation errors
// returned by CreateTodoReply.ValidateAll() if the designated constraints
// aren't met.
type CreateTodoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTodoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTodoReplyMultiError) AllErrors() []error { return m }

// CreateTodoReplyValidationError is the validation error returned by
// CreateTodoReply.Validate if the designated constraints aren't met.
type CreateTodoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTodoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTodoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTodoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTodoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTodoReplyValidationError) ErrorName() string { return "CreateTodoReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateTodoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTodoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTodoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTodoReplyValidationError{}

// Validate checks the field values on ListTodoReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListTodoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTodoReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListTodoReqMultiError, or
// nil if none found.
func (m *ListTodoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTodoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ListTodoReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ListTodoReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ListTodoReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return ListTodoReqMultiError(errors)
	}

	return nil
}

// ListTodoReqMultiError is an error wrapping multiple validation errors
// returned by ListTodoReq.ValidateAll() if the designated constraints aren't met.
type ListTodoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTodoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTodoReqMultiError) AllErrors() []error { return m }

// ListTodoReqValidationError is the validation error returned by
// ListTodoReq.Validate if the designated constraints aren't met.
type ListTodoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTodoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTodoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTodoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTodoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTodoReqValidationError) ErrorName() string { return "ListTodoReqValidationError" }

// Error satisfies the builtin error interface
func (e ListTodoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTodoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTodoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTodoReqValidationError{}

// Validate checks the field values on ListTodoReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListTodoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTodoReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListTodoReplyMultiError, or
// nil if none found.
func (m *ListTodoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTodoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTodo() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTodoReplyValidationError{
						field:  fmt.Sprintf("Todo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTodoReplyValidationError{
						field:  fmt.Sprintf("Todo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTodoReplyValidationError{
					field:  fmt.Sprintf("Todo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTodoReplyMultiError(errors)
	}

	return nil
}

// ListTodoReplyMultiError is an error wrapping multiple validation errors
// returned by ListTodoReply.ValidateAll() if the designated constraints
// aren't met.
type ListTodoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTodoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTodoReplyMultiError) AllErrors() []error { return m }

// ListTodoReplyValidationError is the validation error returned by
// ListTodoReply.Validate if the designated constraints aren't met.
type ListTodoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTodoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTodoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTodoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTodoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTodoReplyValidationError) ErrorName() string { return "ListTodoReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListTodoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTodoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTodoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTodoReplyValidationError{}

// Validate checks the field values on CloseTodoReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CloseTodoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloseTodoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CloseTodoReqMultiError, or
// nil if none found.
func (m *CloseTodoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CloseTodoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := CloseTodoReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := CloseTodoReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := CloseTodoReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTodoUuid()) < 1 {
		err := CloseTodoReqValidationError{
			field:  "TodoUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Describe

	if len(errors) > 0 {
		return CloseTodoReqMultiError(errors)
	}

	return nil
}

// CloseTodoReqMultiError is an error wrapping multiple validation errors
// returned by CloseTodoReq.ValidateAll() if the designated constraints aren't met.
type CloseTodoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloseTodoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloseTodoReqMultiError) AllErrors() []error { return m }

// CloseTodoReqValidationError is the validation error returned by
// CloseTodoReq.Validate if the designated constraints aren't met.
type CloseTodoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloseTodoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloseTodoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloseTodoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloseTodoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloseTodoReqValidationError) ErrorName() string { return "CloseTodoReqValidationError" }

// Error satisfies the builtin error interface
func (e CloseTodoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloseTodoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloseTodoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloseTodoReqValidationError{}

// Validate checks the field values on CloseTodoReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CloseTodoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloseTodoReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CloseTodoReplyMultiError,
// or nil if none found.
func (m *CloseTodoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CloseTodoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return CloseTodoReplyMultiError(errors)
	}

	return nil
}

// CloseTodoReplyMultiError is an error wrapping multiple validation errors
// returned by CloseTodoReply.ValidateAll() if the designated constraints
// aren't met.
type CloseTodoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloseTodoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloseTodoReplyMultiError) AllErrors() []error { return m }

// CloseTodoReplyValidationError is the validation error returned by
// CloseTodoReply.Validate if the designated constraints aren't met.
type CloseTodoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloseTodoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloseTodoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloseTodoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloseTodoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloseTodoReplyValidationError) ErrorName() string { return "CloseTodoReplyValidationError" }

// Error satisfies the builtin error interface
func (e CloseTodoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloseTodoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloseTodoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloseTodoReplyValidationError{}

// Validate checks the field values on DelTodoReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelTodoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelTodoReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelTodoReqMultiError, or
// nil if none found.
func (m *DelTodoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelTodoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := DelTodoReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := DelTodoReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := DelTodoReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTodoUuid()) < 1 {
		err := DelTodoReqValidationError{
			field:  "TodoUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelTodoReqMultiError(errors)
	}

	return nil
}

// DelTodoReqMultiError is an error wrapping multiple validation errors
// returned by DelTodoReq.ValidateAll() if the designated constraints aren't met.
type DelTodoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelTodoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelTodoReqMultiError) AllErrors() []error { return m }

// DelTodoReqValidationError is the validation error returned by
// DelTodoReq.Validate if the designated constraints aren't met.
type DelTodoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelTodoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelTodoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelTodoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelTodoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelTodoReqValidationError) ErrorName() string { return "DelTodoReqValidationError" }

// Error satisfies the builtin error interface
func (e DelTodoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelTodoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelTodoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelTodoReqValidationError{}

// Validate checks the field values on DelTodoReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelTodoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelTodoReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelTodoReplyMultiError, or
// nil if none found.
func (m *DelTodoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DelTodoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return DelTodoReplyMultiError(errors)
	}

	return nil
}

// DelTodoReplyMultiError is an error wrapping multiple validation errors
// returned by DelTodoReply.ValidateAll() if the designated constraints aren't met.
type DelTodoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelTodoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelTodoReplyMultiError) AllErrors() []error { return m }

// DelTodoReplyValidationError is the validation error returned by
// DelTodoReply.Validate if the designated constraints aren't met.
type DelTodoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelTodoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelTodoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelTodoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelTodoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelTodoReplyValidationError) ErrorName() string { return "DelTodoReplyValidationError" }

// Error satisfies the builtin error interface
func (e DelTodoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelTodoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelTodoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelTodoReplyValidationError{}

// Validate checks the field values on CreateTaskReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateTaskReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTaskReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateTaskReqMultiError, or
// nil if none found.
func (m *CreateTaskReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTaskReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := CreateTaskReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := CreateTaskReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := CreateTaskReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetExecutorUuid()) < 1 {
		err := CreateTaskReqValidationError{
			field:  "ExecutorUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CreateTaskReq_Priority_InLookup[m.GetPriority()]; !ok {
		err := CreateTaskReqValidationError{
			field:  "Priority",
			reason: "value must be in list [1 2 3 4 5]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for OverTime

	// no validation rules for Content

	if len(errors) > 0 {
		return CreateTaskReqMultiError(errors)
	}

	return nil
}

// CreateTaskReqMultiError is an error wrapping multiple validation errors
// returned by CreateTaskReq.ValidateAll() if the designated constraints
// aren't met.
type CreateTaskReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTaskReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTaskReqMultiError) AllErrors() []error { return m }

// CreateTaskReqValidationError is the validation error returned by
// CreateTaskReq.Validate if the designated constraints aren't met.
type CreateTaskReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTaskReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTaskReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTaskReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTaskReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTaskReqValidationError) ErrorName() string { return "CreateTaskReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateTaskReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTaskReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTaskReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTaskReqValidationError{}

var _CreateTaskReq_Priority_InLookup = map[int32]struct{}{
	1: {},
	2: {},
	3: {},
	4: {},
	5: {},
}

// Validate checks the field values on CreateTaskReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateTaskReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTaskReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTaskReplyMultiError, or nil if none found.
func (m *CreateTaskReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTaskReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return CreateTaskReplyMultiError(errors)
	}

	return nil
}

// CreateTaskReplyMultiError is an error wrapping multiple validation errors
// returned by CreateTaskReply.ValidateAll() if the designated constraints
// aren't met.
type CreateTaskReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTaskReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTaskReplyMultiError) AllErrors() []error { return m }

// CreateTaskReplyValidationError is the validation error returned by
// CreateTaskReply.Validate if the designated constraints aren't met.
type CreateTaskReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTaskReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTaskReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTaskReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTaskReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTaskReplyValidationError) ErrorName() string { return "CreateTaskReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateTaskReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTaskReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTaskReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTaskReplyValidationError{}

// Validate checks the field values on ListTaskReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListTaskReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTaskReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListTaskReqMultiError, or
// nil if none found.
func (m *ListTaskReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTaskReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ListTaskReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ListTaskReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ListTaskReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return ListTaskReqMultiError(errors)
	}

	return nil
}

// ListTaskReqMultiError is an error wrapping multiple validation errors
// returned by ListTaskReq.ValidateAll() if the designated constraints aren't met.
type ListTaskReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTaskReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTaskReqMultiError) AllErrors() []error { return m }

// ListTaskReqValidationError is the validation error returned by
// ListTaskReq.Validate if the designated constraints aren't met.
type ListTaskReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTaskReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTaskReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTaskReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTaskReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTaskReqValidationError) ErrorName() string { return "ListTaskReqValidationError" }

// Error satisfies the builtin error interface
func (e ListTaskReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTaskReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTaskReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTaskReqValidationError{}

// Validate checks the field values on ListTaskReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListTaskReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTaskReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListTaskReplyMultiError, or
// nil if none found.
func (m *ListTaskReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTaskReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTask() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTaskReplyValidationError{
						field:  fmt.Sprintf("Task[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTaskReplyValidationError{
						field:  fmt.Sprintf("Task[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTaskReplyValidationError{
					field:  fmt.Sprintf("Task[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTaskReplyMultiError(errors)
	}

	return nil
}

// ListTaskReplyMultiError is an error wrapping multiple validation errors
// returned by ListTaskReply.ValidateAll() if the designated constraints
// aren't met.
type ListTaskReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTaskReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTaskReplyMultiError) AllErrors() []error { return m }

// ListTaskReplyValidationError is the validation error returned by
// ListTaskReply.Validate if the designated constraints aren't met.
type ListTaskReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTaskReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTaskReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTaskReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTaskReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTaskReplyValidationError) ErrorName() string { return "ListTaskReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListTaskReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTaskReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTaskReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTaskReplyValidationError{}

// Validate checks the field values on CloseTaskReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CloseTaskReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloseTaskReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CloseTaskReqMultiError, or
// nil if none found.
func (m *CloseTaskReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CloseTaskReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := CloseTaskReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := CloseTaskReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := CloseTaskReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTaskUuid()) < 1 {
		err := CloseTaskReqValidationError{
			field:  "TaskUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetResult()) < 1 {
		err := CloseTaskReqValidationError{
			field:  "Result",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CloseTaskReqMultiError(errors)
	}

	return nil
}

// CloseTaskReqMultiError is an error wrapping multiple validation errors
// returned by CloseTaskReq.ValidateAll() if the designated constraints aren't met.
type CloseTaskReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloseTaskReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloseTaskReqMultiError) AllErrors() []error { return m }

// CloseTaskReqValidationError is the validation error returned by
// CloseTaskReq.Validate if the designated constraints aren't met.
type CloseTaskReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloseTaskReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloseTaskReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloseTaskReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloseTaskReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloseTaskReqValidationError) ErrorName() string { return "CloseTaskReqValidationError" }

// Error satisfies the builtin error interface
func (e CloseTaskReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloseTaskReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloseTaskReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloseTaskReqValidationError{}

// Validate checks the field values on CloseTaskReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CloseTaskReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloseTaskReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CloseTaskReplyMultiError,
// or nil if none found.
func (m *CloseTaskReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CloseTaskReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return CloseTaskReplyMultiError(errors)
	}

	return nil
}

// CloseTaskReplyMultiError is an error wrapping multiple validation errors
// returned by CloseTaskReply.ValidateAll() if the designated constraints
// aren't met.
type CloseTaskReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloseTaskReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloseTaskReplyMultiError) AllErrors() []error { return m }

// CloseTaskReplyValidationError is the validation error returned by
// CloseTaskReply.Validate if the designated constraints aren't met.
type CloseTaskReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloseTaskReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloseTaskReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloseTaskReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloseTaskReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloseTaskReplyValidationError) ErrorName() string { return "CloseTaskReplyValidationError" }

// Error satisfies the builtin error interface
func (e CloseTaskReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloseTaskReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloseTaskReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloseTaskReplyValidationError{}

// Validate checks the field values on CreateKnowledgePublicLabelReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateKnowledgePublicLabelReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateKnowledgePublicLabelReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateKnowledgePublicLabelReqMultiError, or nil if none found.
func (m *CreateKnowledgePublicLabelReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateKnowledgePublicLabelReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := CreateKnowledgePublicLabelReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateKnowledgePublicLabelReqMultiError(errors)
	}

	return nil
}

// CreateKnowledgePublicLabelReqMultiError is an error wrapping multiple
// validation errors returned by CreateKnowledgePublicLabelReq.ValidateAll()
// if the designated constraints aren't met.
type CreateKnowledgePublicLabelReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateKnowledgePublicLabelReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateKnowledgePublicLabelReqMultiError) AllErrors() []error { return m }

// CreateKnowledgePublicLabelReqValidationError is the validation error
// returned by CreateKnowledgePublicLabelReq.Validate if the designated
// constraints aren't met.
type CreateKnowledgePublicLabelReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateKnowledgePublicLabelReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateKnowledgePublicLabelReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateKnowledgePublicLabelReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateKnowledgePublicLabelReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateKnowledgePublicLabelReqValidationError) ErrorName() string {
	return "CreateKnowledgePublicLabelReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateKnowledgePublicLabelReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateKnowledgePublicLabelReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateKnowledgePublicLabelReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateKnowledgePublicLabelReqValidationError{}

// Validate checks the field values on CreateKnowledgePublicLabelReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateKnowledgePublicLabelReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateKnowledgePublicLabelReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateKnowledgePublicLabelReplyMultiError, or nil if none found.
func (m *CreateKnowledgePublicLabelReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateKnowledgePublicLabelReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return CreateKnowledgePublicLabelReplyMultiError(errors)
	}

	return nil
}

// CreateKnowledgePublicLabelReplyMultiError is an error wrapping multiple
// validation errors returned by CreateKnowledgePublicLabelReply.ValidateAll()
// if the designated constraints aren't met.
type CreateKnowledgePublicLabelReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateKnowledgePublicLabelReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateKnowledgePublicLabelReplyMultiError) AllErrors() []error { return m }

// CreateKnowledgePublicLabelReplyValidationError is the validation error
// returned by CreateKnowledgePublicLabelReply.Validate if the designated
// constraints aren't met.
type CreateKnowledgePublicLabelReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateKnowledgePublicLabelReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateKnowledgePublicLabelReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateKnowledgePublicLabelReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateKnowledgePublicLabelReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateKnowledgePublicLabelReplyValidationError) ErrorName() string {
	return "CreateKnowledgePublicLabelReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateKnowledgePublicLabelReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateKnowledgePublicLabelReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateKnowledgePublicLabelReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateKnowledgePublicLabelReplyValidationError{}

// Validate checks the field values on CreateKnowledgePublicResourceReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateKnowledgePublicResourceReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateKnowledgePublicResourceReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateKnowledgePublicResourceReqMultiError, or nil if none found.
func (m *CreateKnowledgePublicResourceReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateKnowledgePublicResourceReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := CreateKnowledgePublicResourceReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateKnowledgePublicResourceReqMultiError(errors)
	}

	return nil
}

// CreateKnowledgePublicResourceReqMultiError is an error wrapping multiple
// validation errors returned by
// CreateKnowledgePublicResourceReq.ValidateAll() if the designated
// constraints aren't met.
type CreateKnowledgePublicResourceReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateKnowledgePublicResourceReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateKnowledgePublicResourceReqMultiError) AllErrors() []error { return m }

// CreateKnowledgePublicResourceReqValidationError is the validation error
// returned by CreateKnowledgePublicResourceReq.Validate if the designated
// constraints aren't met.
type CreateKnowledgePublicResourceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateKnowledgePublicResourceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateKnowledgePublicResourceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateKnowledgePublicResourceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateKnowledgePublicResourceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateKnowledgePublicResourceReqValidationError) ErrorName() string {
	return "CreateKnowledgePublicResourceReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateKnowledgePublicResourceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateKnowledgePublicResourceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateKnowledgePublicResourceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateKnowledgePublicResourceReqValidationError{}

// Validate checks the field values on CreateKnowledgePublicResourceReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateKnowledgePublicResourceReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateKnowledgePublicResourceReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateKnowledgePublicResourceReplyMultiError, or nil if none found.
func (m *CreateKnowledgePublicResourceReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateKnowledgePublicResourceReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateKnowledgePublicResourceReplyMultiError(errors)
	}

	return nil
}

// CreateKnowledgePublicResourceReplyMultiError is an error wrapping multiple
// validation errors returned by
// CreateKnowledgePublicResourceReply.ValidateAll() if the designated
// constraints aren't met.
type CreateKnowledgePublicResourceReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateKnowledgePublicResourceReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateKnowledgePublicResourceReplyMultiError) AllErrors() []error { return m }

// CreateKnowledgePublicResourceReplyValidationError is the validation error
// returned by CreateKnowledgePublicResourceReply.Validate if the designated
// constraints aren't met.
type CreateKnowledgePublicResourceReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateKnowledgePublicResourceReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateKnowledgePublicResourceReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateKnowledgePublicResourceReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateKnowledgePublicResourceReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateKnowledgePublicResourceReplyValidationError) ErrorName() string {
	return "CreateKnowledgePublicResourceReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateKnowledgePublicResourceReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateKnowledgePublicResourceReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateKnowledgePublicResourceReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateKnowledgePublicResourceReplyValidationError{}

// Validate checks the field values on CreateKnowledgePrivateLabelReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateKnowledgePrivateLabelReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateKnowledgePrivateLabelReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateKnowledgePrivateLabelReqMultiError, or nil if none found.
func (m *CreateKnowledgePrivateLabelReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateKnowledgePrivateLabelReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := CreateKnowledgePrivateLabelReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateKnowledgePrivateLabelReqMultiError(errors)
	}

	return nil
}

// CreateKnowledgePrivateLabelReqMultiError is an error wrapping multiple
// validation errors returned by CreateKnowledgePrivateLabelReq.ValidateAll()
// if the designated constraints aren't met.
type CreateKnowledgePrivateLabelReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateKnowledgePrivateLabelReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateKnowledgePrivateLabelReqMultiError) AllErrors() []error { return m }

// CreateKnowledgePrivateLabelReqValidationError is the validation error
// returned by CreateKnowledgePrivateLabelReq.Validate if the designated
// constraints aren't met.
type CreateKnowledgePrivateLabelReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateKnowledgePrivateLabelReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateKnowledgePrivateLabelReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateKnowledgePrivateLabelReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateKnowledgePrivateLabelReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateKnowledgePrivateLabelReqValidationError) ErrorName() string {
	return "CreateKnowledgePrivateLabelReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateKnowledgePrivateLabelReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateKnowledgePrivateLabelReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateKnowledgePrivateLabelReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateKnowledgePrivateLabelReqValidationError{}

// Validate checks the field values on CreateKnowledgePrivateLabelReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateKnowledgePrivateLabelReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateKnowledgePrivateLabelReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateKnowledgePrivateLabelReplyMultiError, or nil if none found.
func (m *CreateKnowledgePrivateLabelReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateKnowledgePrivateLabelReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateKnowledgePrivateLabelReplyMultiError(errors)
	}

	return nil
}

// CreateKnowledgePrivateLabelReplyMultiError is an error wrapping multiple
// validation errors returned by
// CreateKnowledgePrivateLabelReply.ValidateAll() if the designated
// constraints aren't met.
type CreateKnowledgePrivateLabelReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateKnowledgePrivateLabelReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateKnowledgePrivateLabelReplyMultiError) AllErrors() []error { return m }

// CreateKnowledgePrivateLabelReplyValidationError is the validation error
// returned by CreateKnowledgePrivateLabelReply.Validate if the designated
// constraints aren't met.
type CreateKnowledgePrivateLabelReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateKnowledgePrivateLabelReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateKnowledgePrivateLabelReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateKnowledgePrivateLabelReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateKnowledgePrivateLabelReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateKnowledgePrivateLabelReplyValidationError) ErrorName() string {
	return "CreateKnowledgePrivateLabelReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateKnowledgePrivateLabelReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateKnowledgePrivateLabelReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateKnowledgePrivateLabelReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateKnowledgePrivateLabelReplyValidationError{}

// Validate checks the field values on CreateKnowledgePrivateResourceReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateKnowledgePrivateResourceReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateKnowledgePrivateResourceReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateKnowledgePrivateResourceReqMultiError, or nil if none found.
func (m *CreateKnowledgePrivateResourceReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateKnowledgePrivateResourceReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := CreateKnowledgePrivateResourceReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateKnowledgePrivateResourceReqMultiError(errors)
	}

	return nil
}

// CreateKnowledgePrivateResourceReqMultiError is an error wrapping multiple
// validation errors returned by
// CreateKnowledgePrivateResourceReq.ValidateAll() if the designated
// constraints aren't met.
type CreateKnowledgePrivateResourceReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateKnowledgePrivateResourceReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateKnowledgePrivateResourceReqMultiError) AllErrors() []error { return m }

// CreateKnowledgePrivateResourceReqValidationError is the validation error
// returned by CreateKnowledgePrivateResourceReq.Validate if the designated
// constraints aren't met.
type CreateKnowledgePrivateResourceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateKnowledgePrivateResourceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateKnowledgePrivateResourceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateKnowledgePrivateResourceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateKnowledgePrivateResourceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateKnowledgePrivateResourceReqValidationError) ErrorName() string {
	return "CreateKnowledgePrivateResourceReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateKnowledgePrivateResourceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateKnowledgePrivateResourceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateKnowledgePrivateResourceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateKnowledgePrivateResourceReqValidationError{}

// Validate checks the field values on CreateKnowledgePrivateResourceReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateKnowledgePrivateResourceReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateKnowledgePrivateResourceReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateKnowledgePrivateResourceReplyMultiError, or nil if none found.
func (m *CreateKnowledgePrivateResourceReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateKnowledgePrivateResourceReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateKnowledgePrivateResourceReplyMultiError(errors)
	}

	return nil
}

// CreateKnowledgePrivateResourceReplyMultiError is an error wrapping multiple
// validation errors returned by
// CreateKnowledgePrivateResourceReply.ValidateAll() if the designated
// constraints aren't met.
type CreateKnowledgePrivateResourceReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateKnowledgePrivateResourceReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateKnowledgePrivateResourceReplyMultiError) AllErrors() []error { return m }

// CreateKnowledgePrivateResourceReplyValidationError is the validation error
// returned by CreateKnowledgePrivateResourceReply.Validate if the designated
// constraints aren't met.
type CreateKnowledgePrivateResourceReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateKnowledgePrivateResourceReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateKnowledgePrivateResourceReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateKnowledgePrivateResourceReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateKnowledgePrivateResourceReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateKnowledgePrivateResourceReplyValidationError) ErrorName() string {
	return "CreateKnowledgePrivateResourceReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateKnowledgePrivateResourceReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateKnowledgePrivateResourceReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateKnowledgePrivateResourceReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateKnowledgePrivateResourceReplyValidationError{}

// Validate checks the field values on ListFaultReply_Fault with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFaultReply_Fault) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFaultReply_Fault with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFaultReply_FaultMultiError, or nil if none found.
func (m *ListFaultReply_Fault) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFaultReply_Fault) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgUuid

	// no validation rules for ProductUuid

	// no validation rules for Uuid

	// no validation rules for Title

	// no validation rules for Level

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for Summary

	// no validation rules for Reason

	// no validation rules for Optimize

	if len(errors) > 0 {
		return ListFaultReply_FaultMultiError(errors)
	}

	return nil
}

// ListFaultReply_FaultMultiError is an error wrapping multiple validation
// errors returned by ListFaultReply_Fault.ValidateAll() if the designated
// constraints aren't met.
type ListFaultReply_FaultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFaultReply_FaultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFaultReply_FaultMultiError) AllErrors() []error { return m }

// ListFaultReply_FaultValidationError is the validation error returned by
// ListFaultReply_Fault.Validate if the designated constraints aren't met.
type ListFaultReply_FaultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFaultReply_FaultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFaultReply_FaultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFaultReply_FaultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFaultReply_FaultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFaultReply_FaultValidationError) ErrorName() string {
	return "ListFaultReply_FaultValidationError"
}

// Error satisfies the builtin error interface
func (e ListFaultReply_FaultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFaultReply_Fault.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFaultReply_FaultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFaultReply_FaultValidationError{}

// Validate checks the field values on ListFaultStreamReply_FaultStream with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListFaultStreamReply_FaultStream) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFaultStreamReply_FaultStream with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListFaultStreamReply_FaultStreamMultiError, or nil if none found.
func (m *ListFaultStreamReply_FaultStream) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFaultStreamReply_FaultStream) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for Do

	if len(errors) > 0 {
		return ListFaultStreamReply_FaultStreamMultiError(errors)
	}

	return nil
}

// ListFaultStreamReply_FaultStreamMultiError is an error wrapping multiple
// validation errors returned by
// ListFaultStreamReply_FaultStream.ValidateAll() if the designated
// constraints aren't met.
type ListFaultStreamReply_FaultStreamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFaultStreamReply_FaultStreamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFaultStreamReply_FaultStreamMultiError) AllErrors() []error { return m }

// ListFaultStreamReply_FaultStreamValidationError is the validation error
// returned by ListFaultStreamReply_FaultStream.Validate if the designated
// constraints aren't met.
type ListFaultStreamReply_FaultStreamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFaultStreamReply_FaultStreamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFaultStreamReply_FaultStreamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFaultStreamReply_FaultStreamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFaultStreamReply_FaultStreamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFaultStreamReply_FaultStreamValidationError) ErrorName() string {
	return "ListFaultStreamReply_FaultStreamValidationError"
}

// Error satisfies the builtin error interface
func (e ListFaultStreamReply_FaultStreamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFaultStreamReply_FaultStream.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFaultStreamReply_FaultStreamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFaultStreamReply_FaultStreamValidationError{}

// Validate checks the field values on ListWorkOrderTypeReply_WorkOrderType
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListWorkOrderTypeReply_WorkOrderType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWorkOrderTypeReply_WorkOrderType
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListWorkOrderTypeReply_WorkOrderTypeMultiError, or nil if none found.
func (m *ListWorkOrderTypeReply_WorkOrderType) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkOrderTypeReply_WorkOrderType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for Name

	// no validation rules for Describe

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return ListWorkOrderTypeReply_WorkOrderTypeMultiError(errors)
	}

	return nil
}

// ListWorkOrderTypeReply_WorkOrderTypeMultiError is an error wrapping multiple
// validation errors returned by
// ListWorkOrderTypeReply_WorkOrderType.ValidateAll() if the designated
// constraints aren't met.
type ListWorkOrderTypeReply_WorkOrderTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkOrderTypeReply_WorkOrderTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkOrderTypeReply_WorkOrderTypeMultiError) AllErrors() []error { return m }

// ListWorkOrderTypeReply_WorkOrderTypeValidationError is the validation error
// returned by ListWorkOrderTypeReply_WorkOrderType.Validate if the designated
// constraints aren't met.
type ListWorkOrderTypeReply_WorkOrderTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkOrderTypeReply_WorkOrderTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkOrderTypeReply_WorkOrderTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkOrderTypeReply_WorkOrderTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkOrderTypeReply_WorkOrderTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkOrderTypeReply_WorkOrderTypeValidationError) ErrorName() string {
	return "ListWorkOrderTypeReply_WorkOrderTypeValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkOrderTypeReply_WorkOrderTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkOrderTypeReply_WorkOrderType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkOrderTypeReply_WorkOrderTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkOrderTypeReply_WorkOrderTypeValidationError{}

// Validate checks the field values on ListWorkOrderReply_WorkOrder with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWorkOrderReply_WorkOrder) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWorkOrderReply_WorkOrder with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWorkOrderReply_WorkOrderMultiError, or nil if none found.
func (m *ListWorkOrderReply_WorkOrder) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkOrderReply_WorkOrder) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for Content

	// no validation rules for Status

	// no validation rules for Author

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return ListWorkOrderReply_WorkOrderMultiError(errors)
	}

	return nil
}

// ListWorkOrderReply_WorkOrderMultiError is an error wrapping multiple
// validation errors returned by ListWorkOrderReply_WorkOrder.ValidateAll() if
// the designated constraints aren't met.
type ListWorkOrderReply_WorkOrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkOrderReply_WorkOrderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkOrderReply_WorkOrderMultiError) AllErrors() []error { return m }

// ListWorkOrderReply_WorkOrderValidationError is the validation error returned
// by ListWorkOrderReply_WorkOrder.Validate if the designated constraints
// aren't met.
type ListWorkOrderReply_WorkOrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkOrderReply_WorkOrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkOrderReply_WorkOrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkOrderReply_WorkOrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkOrderReply_WorkOrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkOrderReply_WorkOrderValidationError) ErrorName() string {
	return "ListWorkOrderReply_WorkOrderValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkOrderReply_WorkOrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkOrderReply_WorkOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkOrderReply_WorkOrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkOrderReply_WorkOrderValidationError{}

// Validate checks the field values on ListWorkOrderStepReply_WorkOrderStep
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListWorkOrderStepReply_WorkOrderStep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWorkOrderStepReply_WorkOrderStep
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListWorkOrderStepReply_WorkOrderStepMultiError, or nil if none found.
func (m *ListWorkOrderStepReply_WorkOrderStep) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkOrderStepReply_WorkOrderStep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for Content

	// no validation rules for Author

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return ListWorkOrderStepReply_WorkOrderStepMultiError(errors)
	}

	return nil
}

// ListWorkOrderStepReply_WorkOrderStepMultiError is an error wrapping multiple
// validation errors returned by
// ListWorkOrderStepReply_WorkOrderStep.ValidateAll() if the designated
// constraints aren't met.
type ListWorkOrderStepReply_WorkOrderStepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkOrderStepReply_WorkOrderStepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkOrderStepReply_WorkOrderStepMultiError) AllErrors() []error { return m }

// ListWorkOrderStepReply_WorkOrderStepValidationError is the validation error
// returned by ListWorkOrderStepReply_WorkOrderStep.Validate if the designated
// constraints aren't met.
type ListWorkOrderStepReply_WorkOrderStepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkOrderStepReply_WorkOrderStepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkOrderStepReply_WorkOrderStepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkOrderStepReply_WorkOrderStepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkOrderStepReply_WorkOrderStepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkOrderStepReply_WorkOrderStepValidationError) ErrorName() string {
	return "ListWorkOrderStepReply_WorkOrderStepValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkOrderStepReply_WorkOrderStepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkOrderStepReply_WorkOrderStep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkOrderStepReply_WorkOrderStepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkOrderStepReply_WorkOrderStepValidationError{}

// Validate checks the field values on ListOnDutyReply_OnDuty with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOnDutyReply_OnDuty) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOnDutyReply_OnDuty with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOnDutyReply_OnDutyMultiError, or nil if none found.
func (m *ListOnDutyReply_OnDuty) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOnDutyReply_OnDuty) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for OnDutyUserUuid

	// no validation rules for Time

	// no validation rules for AuthorUuid

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return ListOnDutyReply_OnDutyMultiError(errors)
	}

	return nil
}

// ListOnDutyReply_OnDutyMultiError is an error wrapping multiple validation
// errors returned by ListOnDutyReply_OnDuty.ValidateAll() if the designated
// constraints aren't met.
type ListOnDutyReply_OnDutyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOnDutyReply_OnDutyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOnDutyReply_OnDutyMultiError) AllErrors() []error { return m }

// ListOnDutyReply_OnDutyValidationError is the validation error returned by
// ListOnDutyReply_OnDuty.Validate if the designated constraints aren't met.
type ListOnDutyReply_OnDutyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOnDutyReply_OnDutyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOnDutyReply_OnDutyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOnDutyReply_OnDutyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOnDutyReply_OnDutyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOnDutyReply_OnDutyValidationError) ErrorName() string {
	return "ListOnDutyReply_OnDutyValidationError"
}

// Error satisfies the builtin error interface
func (e ListOnDutyReply_OnDutyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOnDutyReply_OnDuty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOnDutyReply_OnDutyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOnDutyReply_OnDutyValidationError{}

// Validate checks the field values on ListTodoReply_Todo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTodoReply_Todo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTodoReply_Todo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTodoReply_TodoMultiError, or nil if none found.
func (m *ListTodoReply_Todo) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTodoReply_Todo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	if _, ok := _ListTodoReply_Todo_Priority_InLookup[m.GetPriority()]; !ok {
		err := ListTodoReply_TodoValidationError{
			field:  "Priority",
			reason: "value must be in list [1 2 3 4 5]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for OverTime

	// no validation rules for Content

	// no validation rules for Status

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return ListTodoReply_TodoMultiError(errors)
	}

	return nil
}

// ListTodoReply_TodoMultiError is an error wrapping multiple validation errors
// returned by ListTodoReply_Todo.ValidateAll() if the designated constraints
// aren't met.
type ListTodoReply_TodoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTodoReply_TodoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTodoReply_TodoMultiError) AllErrors() []error { return m }

// ListTodoReply_TodoValidationError is the validation error returned by
// ListTodoReply_Todo.Validate if the designated constraints aren't met.
type ListTodoReply_TodoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTodoReply_TodoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTodoReply_TodoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTodoReply_TodoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTodoReply_TodoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTodoReply_TodoValidationError) ErrorName() string {
	return "ListTodoReply_TodoValidationError"
}

// Error satisfies the builtin error interface
func (e ListTodoReply_TodoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTodoReply_Todo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTodoReply_TodoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTodoReply_TodoValidationError{}

var _ListTodoReply_Todo_Priority_InLookup = map[int32]struct{}{
	1: {},
	2: {},
	3: {},
	4: {},
	5: {},
}

// Validate checks the field values on ListTaskReply_Task with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTaskReply_Task) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTaskReply_Task with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTaskReply_TaskMultiError, or nil if none found.
func (m *ListTaskReply_Task) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTaskReply_Task) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for OrgUuid

	// no validation rules for ProductUuid

	// no validation rules for ExecutorUuid

	// no validation rules for Priority

	// no validation rules for OverTime

	// no validation rules for Content

	// no validation rules for Status

	// no validation rules for Result

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return ListTaskReply_TaskMultiError(errors)
	}

	return nil
}

// ListTaskReply_TaskMultiError is an error wrapping multiple validation errors
// returned by ListTaskReply_Task.ValidateAll() if the designated constraints
// aren't met.
type ListTaskReply_TaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTaskReply_TaskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTaskReply_TaskMultiError) AllErrors() []error { return m }

// ListTaskReply_TaskValidationError is the validation error returned by
// ListTaskReply_Task.Validate if the designated constraints aren't met.
type ListTaskReply_TaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTaskReply_TaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTaskReply_TaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTaskReply_TaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTaskReply_TaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTaskReply_TaskValidationError) ErrorName() string {
	return "ListTaskReply_TaskValidationError"
}

// Error satisfies the builtin error interface
func (e ListTaskReply_TaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTaskReply_Task.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTaskReply_TaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTaskReply_TaskValidationError{}
