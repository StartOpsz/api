// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/hook/v1/hook.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PrometheusAlertReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PrometheusAlertReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PrometheusAlertReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PrometheusAlertReqMultiError, or nil if none found.
func (m *PrometheusAlertReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PrometheusAlertReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := PrometheusAlertReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := PrometheusAlertReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := PrometheusAlertReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMonitorToken()) < 1 {
		err := PrometheusAlertReqValidationError{
			field:  "MonitorToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetReceiver()) < 1 {
		err := PrometheusAlertReqValidationError{
			field:  "Receiver",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetAlerts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PrometheusAlertReqValidationError{
						field:  fmt.Sprintf("Alerts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PrometheusAlertReqValidationError{
						field:  fmt.Sprintf("Alerts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PrometheusAlertReqValidationError{
					field:  fmt.Sprintf("Alerts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PrometheusAlertReqMultiError(errors)
	}

	return nil
}

// PrometheusAlertReqMultiError is an error wrapping multiple validation errors
// returned by PrometheusAlertReq.ValidateAll() if the designated constraints
// aren't met.
type PrometheusAlertReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrometheusAlertReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrometheusAlertReqMultiError) AllErrors() []error { return m }

// PrometheusAlertReqValidationError is the validation error returned by
// PrometheusAlertReq.Validate if the designated constraints aren't met.
type PrometheusAlertReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrometheusAlertReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrometheusAlertReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrometheusAlertReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrometheusAlertReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrometheusAlertReqValidationError) ErrorName() string {
	return "PrometheusAlertReqValidationError"
}

// Error satisfies the builtin error interface
func (e PrometheusAlertReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrometheusAlertReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrometheusAlertReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrometheusAlertReqValidationError{}

// Validate checks the field values on PrometheusAlertReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PrometheusAlertReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PrometheusAlertReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PrometheusAlertReplyMultiError, or nil if none found.
func (m *PrometheusAlertReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PrometheusAlertReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return PrometheusAlertReplyMultiError(errors)
	}

	return nil
}

// PrometheusAlertReplyMultiError is an error wrapping multiple validation
// errors returned by PrometheusAlertReply.ValidateAll() if the designated
// constraints aren't met.
type PrometheusAlertReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrometheusAlertReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrometheusAlertReplyMultiError) AllErrors() []error { return m }

// PrometheusAlertReplyValidationError is the validation error returned by
// PrometheusAlertReply.Validate if the designated constraints aren't met.
type PrometheusAlertReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrometheusAlertReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrometheusAlertReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrometheusAlertReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrometheusAlertReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrometheusAlertReplyValidationError) ErrorName() string {
	return "PrometheusAlertReplyValidationError"
}

// Error satisfies the builtin error interface
func (e PrometheusAlertReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrometheusAlertReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrometheusAlertReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrometheusAlertReplyValidationError{}

// Validate checks the field values on PrometheusAlertHisReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PrometheusAlertHisReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PrometheusAlertHisReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PrometheusAlertHisReqMultiError, or nil if none found.
func (m *PrometheusAlertHisReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PrometheusAlertHisReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := PrometheusAlertHisReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := PrometheusAlertHisReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := PrometheusAlertHisReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ProductEnvUuid

	// no validation rules for MonitorToken

	// no validation rules for Receiver

	// no validation rules for Status

	// no validation rules for Fingerprint

	// no validation rules for StartSearchTime

	// no validation rules for EndSearchTime

	if len(errors) > 0 {
		return PrometheusAlertHisReqMultiError(errors)
	}

	return nil
}

// PrometheusAlertHisReqMultiError is an error wrapping multiple validation
// errors returned by PrometheusAlertHisReq.ValidateAll() if the designated
// constraints aren't met.
type PrometheusAlertHisReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrometheusAlertHisReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrometheusAlertHisReqMultiError) AllErrors() []error { return m }

// PrometheusAlertHisReqValidationError is the validation error returned by
// PrometheusAlertHisReq.Validate if the designated constraints aren't met.
type PrometheusAlertHisReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrometheusAlertHisReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrometheusAlertHisReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrometheusAlertHisReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrometheusAlertHisReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrometheusAlertHisReqValidationError) ErrorName() string {
	return "PrometheusAlertHisReqValidationError"
}

// Error satisfies the builtin error interface
func (e PrometheusAlertHisReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrometheusAlertHisReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrometheusAlertHisReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrometheusAlertHisReqValidationError{}

// Validate checks the field values on PrometheusAlertHisReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PrometheusAlertHisReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PrometheusAlertHisReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PrometheusAlertHisReplyMultiError, or nil if none found.
func (m *PrometheusAlertHisReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PrometheusAlertHisReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAlert() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PrometheusAlertHisReplyValidationError{
						field:  fmt.Sprintf("Alert[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PrometheusAlertHisReplyValidationError{
						field:  fmt.Sprintf("Alert[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PrometheusAlertHisReplyValidationError{
					field:  fmt.Sprintf("Alert[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PrometheusAlertHisReplyMultiError(errors)
	}

	return nil
}

// PrometheusAlertHisReplyMultiError is an error wrapping multiple validation
// errors returned by PrometheusAlertHisReply.ValidateAll() if the designated
// constraints aren't met.
type PrometheusAlertHisReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrometheusAlertHisReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrometheusAlertHisReplyMultiError) AllErrors() []error { return m }

// PrometheusAlertHisReplyValidationError is the validation error returned by
// PrometheusAlertHisReply.Validate if the designated constraints aren't met.
type PrometheusAlertHisReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrometheusAlertHisReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrometheusAlertHisReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrometheusAlertHisReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrometheusAlertHisReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrometheusAlertHisReplyValidationError) ErrorName() string {
	return "PrometheusAlertHisReplyValidationError"
}

// Error satisfies the builtin error interface
func (e PrometheusAlertHisReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrometheusAlertHisReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrometheusAlertHisReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrometheusAlertHisReplyValidationError{}

// Validate checks the field values on PrometheusAlertFingerprintReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PrometheusAlertFingerprintReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PrometheusAlertFingerprintReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PrometheusAlertFingerprintReqMultiError, or nil if none found.
func (m *PrometheusAlertFingerprintReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PrometheusAlertFingerprintReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := PrometheusAlertFingerprintReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := PrometheusAlertFingerprintReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := PrometheusAlertFingerprintReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetFingerprint()) < 1 {
		err := PrometheusAlertFingerprintReqValidationError{
			field:  "Fingerprint",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PrometheusAlertFingerprintReqMultiError(errors)
	}

	return nil
}

// PrometheusAlertFingerprintReqMultiError is an error wrapping multiple
// validation errors returned by PrometheusAlertFingerprintReq.ValidateAll()
// if the designated constraints aren't met.
type PrometheusAlertFingerprintReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrometheusAlertFingerprintReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrometheusAlertFingerprintReqMultiError) AllErrors() []error { return m }

// PrometheusAlertFingerprintReqValidationError is the validation error
// returned by PrometheusAlertFingerprintReq.Validate if the designated
// constraints aren't met.
type PrometheusAlertFingerprintReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrometheusAlertFingerprintReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrometheusAlertFingerprintReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrometheusAlertFingerprintReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrometheusAlertFingerprintReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrometheusAlertFingerprintReqValidationError) ErrorName() string {
	return "PrometheusAlertFingerprintReqValidationError"
}

// Error satisfies the builtin error interface
func (e PrometheusAlertFingerprintReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrometheusAlertFingerprintReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrometheusAlertFingerprintReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrometheusAlertFingerprintReqValidationError{}

// Validate checks the field values on PrometheusAlertFingerprintReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PrometheusAlertFingerprintReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PrometheusAlertFingerprintReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PrometheusAlertFingerprintReplyMultiError, or nil if none found.
func (m *PrometheusAlertFingerprintReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PrometheusAlertFingerprintReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AlertName

	// no validation rules for Instance

	// no validation rules for Job

	// no validation rules for Product

	// no validation rules for Level

	// no validation rules for Receiver

	// no validation rules for Status

	// no validation rules for Lables

	// no validation rules for Annotations

	// no validation rules for StartAt

	// no validation rules for EndAt

	// no validation rules for GeneratorUrl

	// no validation rules for Fingerprint

	// no validation rules for Ack

	// no validation rules for AckMessage

	// no validation rules for AckUserUuid

	if len(errors) > 0 {
		return PrometheusAlertFingerprintReplyMultiError(errors)
	}

	return nil
}

// PrometheusAlertFingerprintReplyMultiError is an error wrapping multiple
// validation errors returned by PrometheusAlertFingerprintReply.ValidateAll()
// if the designated constraints aren't met.
type PrometheusAlertFingerprintReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrometheusAlertFingerprintReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrometheusAlertFingerprintReplyMultiError) AllErrors() []error { return m }

// PrometheusAlertFingerprintReplyValidationError is the validation error
// returned by PrometheusAlertFingerprintReply.Validate if the designated
// constraints aren't met.
type PrometheusAlertFingerprintReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrometheusAlertFingerprintReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrometheusAlertFingerprintReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrometheusAlertFingerprintReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrometheusAlertFingerprintReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrometheusAlertFingerprintReplyValidationError) ErrorName() string {
	return "PrometheusAlertFingerprintReplyValidationError"
}

// Error satisfies the builtin error interface
func (e PrometheusAlertFingerprintReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrometheusAlertFingerprintReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrometheusAlertFingerprintReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrometheusAlertFingerprintReplyValidationError{}

// Validate checks the field values on PrometheusAlertAckReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PrometheusAlertAckReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PrometheusAlertAckReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PrometheusAlertAckReqMultiError, or nil if none found.
func (m *PrometheusAlertAckReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PrometheusAlertAckReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := PrometheusAlertAckReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := PrometheusAlertAckReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := PrometheusAlertAckReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetFingerprint()) < 1 {
		err := PrometheusAlertAckReqValidationError{
			field:  "Fingerprint",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAckMessage()) < 1 {
		err := PrometheusAlertAckReqValidationError{
			field:  "AckMessage",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAckUserUuid()) < 1 {
		err := PrometheusAlertAckReqValidationError{
			field:  "AckUserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PrometheusAlertAckReqMultiError(errors)
	}

	return nil
}

// PrometheusAlertAckReqMultiError is an error wrapping multiple validation
// errors returned by PrometheusAlertAckReq.ValidateAll() if the designated
// constraints aren't met.
type PrometheusAlertAckReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrometheusAlertAckReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrometheusAlertAckReqMultiError) AllErrors() []error { return m }

// PrometheusAlertAckReqValidationError is the validation error returned by
// PrometheusAlertAckReq.Validate if the designated constraints aren't met.
type PrometheusAlertAckReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrometheusAlertAckReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrometheusAlertAckReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrometheusAlertAckReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrometheusAlertAckReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrometheusAlertAckReqValidationError) ErrorName() string {
	return "PrometheusAlertAckReqValidationError"
}

// Error satisfies the builtin error interface
func (e PrometheusAlertAckReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrometheusAlertAckReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrometheusAlertAckReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrometheusAlertAckReqValidationError{}

// Validate checks the field values on PrometheusAlertAckReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PrometheusAlertAckReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PrometheusAlertAckReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PrometheusAlertAckReplyMultiError, or nil if none found.
func (m *PrometheusAlertAckReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PrometheusAlertAckReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return PrometheusAlertAckReplyMultiError(errors)
	}

	return nil
}

// PrometheusAlertAckReplyMultiError is an error wrapping multiple validation
// errors returned by PrometheusAlertAckReply.ValidateAll() if the designated
// constraints aren't met.
type PrometheusAlertAckReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrometheusAlertAckReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrometheusAlertAckReplyMultiError) AllErrors() []error { return m }

// PrometheusAlertAckReplyValidationError is the validation error returned by
// PrometheusAlertAckReply.Validate if the designated constraints aren't met.
type PrometheusAlertAckReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrometheusAlertAckReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrometheusAlertAckReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrometheusAlertAckReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrometheusAlertAckReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrometheusAlertAckReplyValidationError) ErrorName() string {
	return "PrometheusAlertAckReplyValidationError"
}

// Error satisfies the builtin error interface
func (e PrometheusAlertAckReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrometheusAlertAckReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrometheusAlertAckReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrometheusAlertAckReplyValidationError{}

// Validate checks the field values on KubernetesEventReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *KubernetesEventReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KubernetesEventReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// KubernetesEventReqMultiError, or nil if none found.
func (m *KubernetesEventReq) ValidateAll() error {
	return m.validate(true)
}

func (m *KubernetesEventReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := KubernetesEventReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := KubernetesEventReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := KubernetesEventReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := KubernetesEventReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetToken()) < 1 {
		err := KubernetesEventReqValidationError{
			field:  "Token",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetApiVersion()) < 1 {
		err := KubernetesEventReqValidationError{
			field:  "ApiVersion",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKind()) < 1 {
		err := KubernetesEventReqValidationError{
			field:  "Kind",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := KubernetesEventReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := KubernetesEventReqValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Type

	// no validation rules for Action

	// no validation rules for Reason

	// no validation rules for Note

	// no validation rules for EventTime

	// no validation rules for CreateTime

	// no validation rules for Annotations

	// no validation rules for ResourceVersion

	// no validation rules for RegardingKind

	// no validation rules for RegardingNamespace

	// no validation rules for RegardingName

	// no validation rules for RegardingUid

	// no validation rules for RegardingAPIVersion

	// no validation rules for RegardingResourceVersion

	// no validation rules for RegardingFieldPath

	if len(errors) > 0 {
		return KubernetesEventReqMultiError(errors)
	}

	return nil
}

// KubernetesEventReqMultiError is an error wrapping multiple validation errors
// returned by KubernetesEventReq.ValidateAll() if the designated constraints
// aren't met.
type KubernetesEventReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KubernetesEventReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KubernetesEventReqMultiError) AllErrors() []error { return m }

// KubernetesEventReqValidationError is the validation error returned by
// KubernetesEventReq.Validate if the designated constraints aren't met.
type KubernetesEventReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KubernetesEventReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KubernetesEventReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KubernetesEventReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KubernetesEventReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KubernetesEventReqValidationError) ErrorName() string {
	return "KubernetesEventReqValidationError"
}

// Error satisfies the builtin error interface
func (e KubernetesEventReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKubernetesEventReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KubernetesEventReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KubernetesEventReqValidationError{}

// Validate checks the field values on KubernetesEventReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *KubernetesEventReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KubernetesEventReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// KubernetesEventReplyMultiError, or nil if none found.
func (m *KubernetesEventReply) ValidateAll() error {
	return m.validate(true)
}

func (m *KubernetesEventReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return KubernetesEventReplyMultiError(errors)
	}

	return nil
}

// KubernetesEventReplyMultiError is an error wrapping multiple validation
// errors returned by KubernetesEventReply.ValidateAll() if the designated
// constraints aren't met.
type KubernetesEventReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KubernetesEventReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KubernetesEventReplyMultiError) AllErrors() []error { return m }

// KubernetesEventReplyValidationError is the validation error returned by
// KubernetesEventReply.Validate if the designated constraints aren't met.
type KubernetesEventReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KubernetesEventReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KubernetesEventReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KubernetesEventReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KubernetesEventReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KubernetesEventReplyValidationError) ErrorName() string {
	return "KubernetesEventReplyValidationError"
}

// Error satisfies the builtin error interface
func (e KubernetesEventReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKubernetesEventReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KubernetesEventReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KubernetesEventReplyValidationError{}

// Validate checks the field values on GetKubernetesEventReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetKubernetesEventReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetKubernetesEventReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetKubernetesEventReqMultiError, or nil if none found.
func (m *GetKubernetesEventReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetKubernetesEventReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := GetKubernetesEventReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := GetKubernetesEventReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := GetKubernetesEventReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ProductEnvUuid

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := GetKubernetesEventReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Namespace

	// no validation rules for Type

	// no validation rules for CreateTime

	// no validation rules for RegardingKind

	// no validation rules for RegardingName

	// no validation rules for RegardingUid

	if len(errors) > 0 {
		return GetKubernetesEventReqMultiError(errors)
	}

	return nil
}

// GetKubernetesEventReqMultiError is an error wrapping multiple validation
// errors returned by GetKubernetesEventReq.ValidateAll() if the designated
// constraints aren't met.
type GetKubernetesEventReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetKubernetesEventReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetKubernetesEventReqMultiError) AllErrors() []error { return m }

// GetKubernetesEventReqValidationError is the validation error returned by
// GetKubernetesEventReq.Validate if the designated constraints aren't met.
type GetKubernetesEventReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetKubernetesEventReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetKubernetesEventReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetKubernetesEventReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetKubernetesEventReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetKubernetesEventReqValidationError) ErrorName() string {
	return "GetKubernetesEventReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetKubernetesEventReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetKubernetesEventReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetKubernetesEventReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetKubernetesEventReqValidationError{}

// Validate checks the field values on GetKubernetesEventReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetKubernetesEventReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetKubernetesEventReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetKubernetesEventReplyMultiError, or nil if none found.
func (m *GetKubernetesEventReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetKubernetesEventReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEvents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetKubernetesEventReplyValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetKubernetesEventReplyValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetKubernetesEventReplyValidationError{
					field:  fmt.Sprintf("Events[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetKubernetesEventReplyMultiError(errors)
	}

	return nil
}

// GetKubernetesEventReplyMultiError is an error wrapping multiple validation
// errors returned by GetKubernetesEventReply.ValidateAll() if the designated
// constraints aren't met.
type GetKubernetesEventReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetKubernetesEventReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetKubernetesEventReplyMultiError) AllErrors() []error { return m }

// GetKubernetesEventReplyValidationError is the validation error returned by
// GetKubernetesEventReply.Validate if the designated constraints aren't met.
type GetKubernetesEventReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetKubernetesEventReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetKubernetesEventReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetKubernetesEventReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetKubernetesEventReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetKubernetesEventReplyValidationError) ErrorName() string {
	return "GetKubernetesEventReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetKubernetesEventReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetKubernetesEventReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetKubernetesEventReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetKubernetesEventReplyValidationError{}

// Validate checks the field values on CreateMonitorReceiverReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMonitorReceiverReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMonitorReceiverReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMonitorReceiverReqMultiError, or nil if none found.
func (m *CreateMonitorReceiverReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMonitorReceiverReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := CreateMonitorReceiverReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := CreateMonitorReceiverReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := CreateMonitorReceiverReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetReceiver()) < 1 {
		err := CreateMonitorReceiverReqValidationError{
			field:  "Receiver",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMessageGroupUuid()) < 1 {
		err := CreateMonitorReceiverReqValidationError{
			field:  "MessageGroupUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateMonitorReceiverReqMultiError(errors)
	}

	return nil
}

// CreateMonitorReceiverReqMultiError is an error wrapping multiple validation
// errors returned by CreateMonitorReceiverReq.ValidateAll() if the designated
// constraints aren't met.
type CreateMonitorReceiverReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMonitorReceiverReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMonitorReceiverReqMultiError) AllErrors() []error { return m }

// CreateMonitorReceiverReqValidationError is the validation error returned by
// CreateMonitorReceiverReq.Validate if the designated constraints aren't met.
type CreateMonitorReceiverReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMonitorReceiverReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMonitorReceiverReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMonitorReceiverReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMonitorReceiverReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMonitorReceiverReqValidationError) ErrorName() string {
	return "CreateMonitorReceiverReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMonitorReceiverReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMonitorReceiverReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMonitorReceiverReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMonitorReceiverReqValidationError{}

// Validate checks the field values on CreateMonitorReceiverReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMonitorReceiverReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMonitorReceiverReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMonitorReceiverReplyMultiError, or nil if none found.
func (m *CreateMonitorReceiverReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMonitorReceiverReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return CreateMonitorReceiverReplyMultiError(errors)
	}

	return nil
}

// CreateMonitorReceiverReplyMultiError is an error wrapping multiple
// validation errors returned by CreateMonitorReceiverReply.ValidateAll() if
// the designated constraints aren't met.
type CreateMonitorReceiverReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMonitorReceiverReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMonitorReceiverReplyMultiError) AllErrors() []error { return m }

// CreateMonitorReceiverReplyValidationError is the validation error returned
// by CreateMonitorReceiverReply.Validate if the designated constraints aren't met.
type CreateMonitorReceiverReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMonitorReceiverReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMonitorReceiverReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMonitorReceiverReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMonitorReceiverReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMonitorReceiverReplyValidationError) ErrorName() string {
	return "CreateMonitorReceiverReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMonitorReceiverReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMonitorReceiverReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMonitorReceiverReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMonitorReceiverReplyValidationError{}

// Validate checks the field values on ListMonitorReceiverReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMonitorReceiverReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMonitorReceiverReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMonitorReceiverReqMultiError, or nil if none found.
func (m *ListMonitorReceiverReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMonitorReceiverReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ListMonitorReceiverReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ListMonitorReceiverReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ListMonitorReceiverReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListMonitorReceiverReqMultiError(errors)
	}

	return nil
}

// ListMonitorReceiverReqMultiError is an error wrapping multiple validation
// errors returned by ListMonitorReceiverReq.ValidateAll() if the designated
// constraints aren't met.
type ListMonitorReceiverReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMonitorReceiverReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMonitorReceiverReqMultiError) AllErrors() []error { return m }

// ListMonitorReceiverReqValidationError is the validation error returned by
// ListMonitorReceiverReq.Validate if the designated constraints aren't met.
type ListMonitorReceiverReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMonitorReceiverReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMonitorReceiverReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMonitorReceiverReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMonitorReceiverReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMonitorReceiverReqValidationError) ErrorName() string {
	return "ListMonitorReceiverReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListMonitorReceiverReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMonitorReceiverReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMonitorReceiverReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMonitorReceiverReqValidationError{}

// Validate checks the field values on ListMonitorReceiverReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMonitorReceiverReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMonitorReceiverReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMonitorReceiverReplyMultiError, or nil if none found.
func (m *ListMonitorReceiverReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMonitorReceiverReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMonitorReceiver() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMonitorReceiverReplyValidationError{
						field:  fmt.Sprintf("MonitorReceiver[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMonitorReceiverReplyValidationError{
						field:  fmt.Sprintf("MonitorReceiver[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMonitorReceiverReplyValidationError{
					field:  fmt.Sprintf("MonitorReceiver[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListMonitorReceiverReplyMultiError(errors)
	}

	return nil
}

// ListMonitorReceiverReplyMultiError is an error wrapping multiple validation
// errors returned by ListMonitorReceiverReply.ValidateAll() if the designated
// constraints aren't met.
type ListMonitorReceiverReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMonitorReceiverReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMonitorReceiverReplyMultiError) AllErrors() []error { return m }

// ListMonitorReceiverReplyValidationError is the validation error returned by
// ListMonitorReceiverReply.Validate if the designated constraints aren't met.
type ListMonitorReceiverReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMonitorReceiverReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMonitorReceiverReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMonitorReceiverReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMonitorReceiverReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMonitorReceiverReplyValidationError) ErrorName() string {
	return "ListMonitorReceiverReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListMonitorReceiverReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMonitorReceiverReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMonitorReceiverReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMonitorReceiverReplyValidationError{}

// Validate checks the field values on DelMonitorReceiverReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelMonitorReceiverReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelMonitorReceiverReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelMonitorReceiverReqMultiError, or nil if none found.
func (m *DelMonitorReceiverReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelMonitorReceiverReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := DelMonitorReceiverReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := DelMonitorReceiverReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := DelMonitorReceiverReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetReceiverUuid()) < 1 {
		err := DelMonitorReceiverReqValidationError{
			field:  "ReceiverUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelMonitorReceiverReqMultiError(errors)
	}

	return nil
}

// DelMonitorReceiverReqMultiError is an error wrapping multiple validation
// errors returned by DelMonitorReceiverReq.ValidateAll() if the designated
// constraints aren't met.
type DelMonitorReceiverReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelMonitorReceiverReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelMonitorReceiverReqMultiError) AllErrors() []error { return m }

// DelMonitorReceiverReqValidationError is the validation error returned by
// DelMonitorReceiverReq.Validate if the designated constraints aren't met.
type DelMonitorReceiverReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelMonitorReceiverReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelMonitorReceiverReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelMonitorReceiverReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelMonitorReceiverReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelMonitorReceiverReqValidationError) ErrorName() string {
	return "DelMonitorReceiverReqValidationError"
}

// Error satisfies the builtin error interface
func (e DelMonitorReceiverReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelMonitorReceiverReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelMonitorReceiverReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelMonitorReceiverReqValidationError{}

// Validate checks the field values on DelMonitorReceiverReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelMonitorReceiverReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelMonitorReceiverReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelMonitorReceiverReplyMultiError, or nil if none found.
func (m *DelMonitorReceiverReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DelMonitorReceiverReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return DelMonitorReceiverReplyMultiError(errors)
	}

	return nil
}

// DelMonitorReceiverReplyMultiError is an error wrapping multiple validation
// errors returned by DelMonitorReceiverReply.ValidateAll() if the designated
// constraints aren't met.
type DelMonitorReceiverReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelMonitorReceiverReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelMonitorReceiverReplyMultiError) AllErrors() []error { return m }

// DelMonitorReceiverReplyValidationError is the validation error returned by
// DelMonitorReceiverReply.Validate if the designated constraints aren't met.
type DelMonitorReceiverReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelMonitorReceiverReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelMonitorReceiverReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelMonitorReceiverReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelMonitorReceiverReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelMonitorReceiverReplyValidationError) ErrorName() string {
	return "DelMonitorReceiverReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DelMonitorReceiverReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelMonitorReceiverReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelMonitorReceiverReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelMonitorReceiverReplyValidationError{}

// Validate checks the field values on CreateKubernetesEventReceiverReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateKubernetesEventReceiverReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateKubernetesEventReceiverReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateKubernetesEventReceiverReqMultiError, or nil if none found.
func (m *CreateKubernetesEventReceiverReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateKubernetesEventReceiverReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := CreateKubernetesEventReceiverReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := CreateKubernetesEventReceiverReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := CreateKubernetesEventReceiverReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := CreateKubernetesEventReceiverReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMessageGroupUuid()) < 1 {
		err := CreateKubernetesEventReceiverReqValidationError{
			field:  "MessageGroupUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateKubernetesEventReceiverReqMultiError(errors)
	}

	return nil
}

// CreateKubernetesEventReceiverReqMultiError is an error wrapping multiple
// validation errors returned by
// CreateKubernetesEventReceiverReq.ValidateAll() if the designated
// constraints aren't met.
type CreateKubernetesEventReceiverReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateKubernetesEventReceiverReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateKubernetesEventReceiverReqMultiError) AllErrors() []error { return m }

// CreateKubernetesEventReceiverReqValidationError is the validation error
// returned by CreateKubernetesEventReceiverReq.Validate if the designated
// constraints aren't met.
type CreateKubernetesEventReceiverReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateKubernetesEventReceiverReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateKubernetesEventReceiverReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateKubernetesEventReceiverReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateKubernetesEventReceiverReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateKubernetesEventReceiverReqValidationError) ErrorName() string {
	return "CreateKubernetesEventReceiverReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateKubernetesEventReceiverReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateKubernetesEventReceiverReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateKubernetesEventReceiverReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateKubernetesEventReceiverReqValidationError{}

// Validate checks the field values on CreateKubernetesEventReceiverReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateKubernetesEventReceiverReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateKubernetesEventReceiverReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateKubernetesEventReceiverReplyMultiError, or nil if none found.
func (m *CreateKubernetesEventReceiverReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateKubernetesEventReceiverReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return CreateKubernetesEventReceiverReplyMultiError(errors)
	}

	return nil
}

// CreateKubernetesEventReceiverReplyMultiError is an error wrapping multiple
// validation errors returned by
// CreateKubernetesEventReceiverReply.ValidateAll() if the designated
// constraints aren't met.
type CreateKubernetesEventReceiverReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateKubernetesEventReceiverReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateKubernetesEventReceiverReplyMultiError) AllErrors() []error { return m }

// CreateKubernetesEventReceiverReplyValidationError is the validation error
// returned by CreateKubernetesEventReceiverReply.Validate if the designated
// constraints aren't met.
type CreateKubernetesEventReceiverReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateKubernetesEventReceiverReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateKubernetesEventReceiverReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateKubernetesEventReceiverReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateKubernetesEventReceiverReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateKubernetesEventReceiverReplyValidationError) ErrorName() string {
	return "CreateKubernetesEventReceiverReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateKubernetesEventReceiverReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateKubernetesEventReceiverReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateKubernetesEventReceiverReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateKubernetesEventReceiverReplyValidationError{}

// Validate checks the field values on GetKubernetesEventReceiverReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetKubernetesEventReceiverReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetKubernetesEventReceiverReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetKubernetesEventReceiverReqMultiError, or nil if none found.
func (m *GetKubernetesEventReceiverReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetKubernetesEventReceiverReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := GetKubernetesEventReceiverReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := GetKubernetesEventReceiverReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := GetKubernetesEventReceiverReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := GetKubernetesEventReceiverReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetKubernetesEventReceiverReqMultiError(errors)
	}

	return nil
}

// GetKubernetesEventReceiverReqMultiError is an error wrapping multiple
// validation errors returned by GetKubernetesEventReceiverReq.ValidateAll()
// if the designated constraints aren't met.
type GetKubernetesEventReceiverReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetKubernetesEventReceiverReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetKubernetesEventReceiverReqMultiError) AllErrors() []error { return m }

// GetKubernetesEventReceiverReqValidationError is the validation error
// returned by GetKubernetesEventReceiverReq.Validate if the designated
// constraints aren't met.
type GetKubernetesEventReceiverReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetKubernetesEventReceiverReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetKubernetesEventReceiverReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetKubernetesEventReceiverReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetKubernetesEventReceiverReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetKubernetesEventReceiverReqValidationError) ErrorName() string {
	return "GetKubernetesEventReceiverReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetKubernetesEventReceiverReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetKubernetesEventReceiverReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetKubernetesEventReceiverReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetKubernetesEventReceiverReqValidationError{}

// Validate checks the field values on GetKubernetesEventReceiverReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetKubernetesEventReceiverReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetKubernetesEventReceiverReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetKubernetesEventReceiverReplyMultiError, or nil if none found.
func (m *GetKubernetesEventReceiverReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetKubernetesEventReceiverReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetKubernetesEventReceiver() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetKubernetesEventReceiverReplyValidationError{
						field:  fmt.Sprintf("KubernetesEventReceiver[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetKubernetesEventReceiverReplyValidationError{
						field:  fmt.Sprintf("KubernetesEventReceiver[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetKubernetesEventReceiverReplyValidationError{
					field:  fmt.Sprintf("KubernetesEventReceiver[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetKubernetesEventReceiverReplyMultiError(errors)
	}

	return nil
}

// GetKubernetesEventReceiverReplyMultiError is an error wrapping multiple
// validation errors returned by GetKubernetesEventReceiverReply.ValidateAll()
// if the designated constraints aren't met.
type GetKubernetesEventReceiverReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetKubernetesEventReceiverReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetKubernetesEventReceiverReplyMultiError) AllErrors() []error { return m }

// GetKubernetesEventReceiverReplyValidationError is the validation error
// returned by GetKubernetesEventReceiverReply.Validate if the designated
// constraints aren't met.
type GetKubernetesEventReceiverReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetKubernetesEventReceiverReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetKubernetesEventReceiverReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetKubernetesEventReceiverReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetKubernetesEventReceiverReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetKubernetesEventReceiverReplyValidationError) ErrorName() string {
	return "GetKubernetesEventReceiverReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetKubernetesEventReceiverReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetKubernetesEventReceiverReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetKubernetesEventReceiverReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetKubernetesEventReceiverReplyValidationError{}

// Validate checks the field values on DelKubernetesEventReceiverReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelKubernetesEventReceiverReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelKubernetesEventReceiverReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DelKubernetesEventReceiverReqMultiError, or nil if none found.
func (m *DelKubernetesEventReceiverReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelKubernetesEventReceiverReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := DelKubernetesEventReceiverReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := DelKubernetesEventReceiverReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := DelKubernetesEventReceiverReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := DelKubernetesEventReceiverReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetReceiverUuid()) < 1 {
		err := DelKubernetesEventReceiverReqValidationError{
			field:  "ReceiverUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelKubernetesEventReceiverReqMultiError(errors)
	}

	return nil
}

// DelKubernetesEventReceiverReqMultiError is an error wrapping multiple
// validation errors returned by DelKubernetesEventReceiverReq.ValidateAll()
// if the designated constraints aren't met.
type DelKubernetesEventReceiverReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelKubernetesEventReceiverReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelKubernetesEventReceiverReqMultiError) AllErrors() []error { return m }

// DelKubernetesEventReceiverReqValidationError is the validation error
// returned by DelKubernetesEventReceiverReq.Validate if the designated
// constraints aren't met.
type DelKubernetesEventReceiverReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelKubernetesEventReceiverReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelKubernetesEventReceiverReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelKubernetesEventReceiverReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelKubernetesEventReceiverReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelKubernetesEventReceiverReqValidationError) ErrorName() string {
	return "DelKubernetesEventReceiverReqValidationError"
}

// Error satisfies the builtin error interface
func (e DelKubernetesEventReceiverReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelKubernetesEventReceiverReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelKubernetesEventReceiverReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelKubernetesEventReceiverReqValidationError{}

// Validate checks the field values on DelKubernetesEventReceiverReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelKubernetesEventReceiverReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelKubernetesEventReceiverReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DelKubernetesEventReceiverReplyMultiError, or nil if none found.
func (m *DelKubernetesEventReceiverReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DelKubernetesEventReceiverReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return DelKubernetesEventReceiverReplyMultiError(errors)
	}

	return nil
}

// DelKubernetesEventReceiverReplyMultiError is an error wrapping multiple
// validation errors returned by DelKubernetesEventReceiverReply.ValidateAll()
// if the designated constraints aren't met.
type DelKubernetesEventReceiverReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelKubernetesEventReceiverReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelKubernetesEventReceiverReplyMultiError) AllErrors() []error { return m }

// DelKubernetesEventReceiverReplyValidationError is the validation error
// returned by DelKubernetesEventReceiverReply.Validate if the designated
// constraints aren't met.
type DelKubernetesEventReceiverReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelKubernetesEventReceiverReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelKubernetesEventReceiverReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelKubernetesEventReceiverReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelKubernetesEventReceiverReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelKubernetesEventReceiverReplyValidationError) ErrorName() string {
	return "DelKubernetesEventReceiverReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DelKubernetesEventReceiverReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelKubernetesEventReceiverReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelKubernetesEventReceiverReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelKubernetesEventReceiverReplyValidationError{}

// Validate checks the field values on SkywalkingAlertReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SkywalkingAlertReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SkywalkingAlertReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SkywalkingAlertReqMultiError, or nil if none found.
func (m *SkywalkingAlertReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SkywalkingAlertReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := SkywalkingAlertReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SkywalkingAlertReqMultiError(errors)
	}

	return nil
}

// SkywalkingAlertReqMultiError is an error wrapping multiple validation errors
// returned by SkywalkingAlertReq.ValidateAll() if the designated constraints
// aren't met.
type SkywalkingAlertReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SkywalkingAlertReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SkywalkingAlertReqMultiError) AllErrors() []error { return m }

// SkywalkingAlertReqValidationError is the validation error returned by
// SkywalkingAlertReq.Validate if the designated constraints aren't met.
type SkywalkingAlertReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SkywalkingAlertReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SkywalkingAlertReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SkywalkingAlertReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SkywalkingAlertReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SkywalkingAlertReqValidationError) ErrorName() string {
	return "SkywalkingAlertReqValidationError"
}

// Error satisfies the builtin error interface
func (e SkywalkingAlertReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSkywalkingAlertReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SkywalkingAlertReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SkywalkingAlertReqValidationError{}

// Validate checks the field values on SkywalkingAlertReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SkywalkingAlertReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SkywalkingAlertReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SkywalkingAlertReplyMultiError, or nil if none found.
func (m *SkywalkingAlertReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SkywalkingAlertReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SkywalkingAlertReplyMultiError(errors)
	}

	return nil
}

// SkywalkingAlertReplyMultiError is an error wrapping multiple validation
// errors returned by SkywalkingAlertReply.ValidateAll() if the designated
// constraints aren't met.
type SkywalkingAlertReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SkywalkingAlertReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SkywalkingAlertReplyMultiError) AllErrors() []error { return m }

// SkywalkingAlertReplyValidationError is the validation error returned by
// SkywalkingAlertReply.Validate if the designated constraints aren't met.
type SkywalkingAlertReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SkywalkingAlertReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SkywalkingAlertReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SkywalkingAlertReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SkywalkingAlertReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SkywalkingAlertReplyValidationError) ErrorName() string {
	return "SkywalkingAlertReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SkywalkingAlertReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSkywalkingAlertReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SkywalkingAlertReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SkywalkingAlertReplyValidationError{}

// Validate checks the field values on SystemAuditReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SystemAuditReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SystemAuditReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SystemAuditReqMultiError,
// or nil if none found.
func (m *SystemAuditReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SystemAuditReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := SystemAuditReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SystemAuditReqMultiError(errors)
	}

	return nil
}

// SystemAuditReqMultiError is an error wrapping multiple validation errors
// returned by SystemAuditReq.ValidateAll() if the designated constraints
// aren't met.
type SystemAuditReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SystemAuditReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SystemAuditReqMultiError) AllErrors() []error { return m }

// SystemAuditReqValidationError is the validation error returned by
// SystemAuditReq.Validate if the designated constraints aren't met.
type SystemAuditReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SystemAuditReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SystemAuditReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SystemAuditReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SystemAuditReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SystemAuditReqValidationError) ErrorName() string { return "SystemAuditReqValidationError" }

// Error satisfies the builtin error interface
func (e SystemAuditReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSystemAuditReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SystemAuditReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SystemAuditReqValidationError{}

// Validate checks the field values on SystemAuditReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SystemAuditReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SystemAuditReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SystemAuditReplyMultiError, or nil if none found.
func (m *SystemAuditReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SystemAuditReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SystemAuditReplyMultiError(errors)
	}

	return nil
}

// SystemAuditReplyMultiError is an error wrapping multiple validation errors
// returned by SystemAuditReply.ValidateAll() if the designated constraints
// aren't met.
type SystemAuditReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SystemAuditReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SystemAuditReplyMultiError) AllErrors() []error { return m }

// SystemAuditReplyValidationError is the validation error returned by
// SystemAuditReply.Validate if the designated constraints aren't met.
type SystemAuditReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SystemAuditReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SystemAuditReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SystemAuditReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SystemAuditReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SystemAuditReplyValidationError) ErrorName() string { return "SystemAuditReplyValidationError" }

// Error satisfies the builtin error interface
func (e SystemAuditReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSystemAuditReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SystemAuditReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SystemAuditReplyValidationError{}

// Validate checks the field values on DatabaseDDLSQLAuditReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DatabaseDDLSQLAuditReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DatabaseDDLSQLAuditReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DatabaseDDLSQLAuditReqMultiError, or nil if none found.
func (m *DatabaseDDLSQLAuditReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DatabaseDDLSQLAuditReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := DatabaseDDLSQLAuditReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Sql

	// no validation rules for User

	// no validation rules for Jdbc

	if len(errors) > 0 {
		return DatabaseDDLSQLAuditReqMultiError(errors)
	}

	return nil
}

// DatabaseDDLSQLAuditReqMultiError is an error wrapping multiple validation
// errors returned by DatabaseDDLSQLAuditReq.ValidateAll() if the designated
// constraints aren't met.
type DatabaseDDLSQLAuditReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DatabaseDDLSQLAuditReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DatabaseDDLSQLAuditReqMultiError) AllErrors() []error { return m }

// DatabaseDDLSQLAuditReqValidationError is the validation error returned by
// DatabaseDDLSQLAuditReq.Validate if the designated constraints aren't met.
type DatabaseDDLSQLAuditReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DatabaseDDLSQLAuditReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DatabaseDDLSQLAuditReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DatabaseDDLSQLAuditReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DatabaseDDLSQLAuditReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DatabaseDDLSQLAuditReqValidationError) ErrorName() string {
	return "DatabaseDDLSQLAuditReqValidationError"
}

// Error satisfies the builtin error interface
func (e DatabaseDDLSQLAuditReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDatabaseDDLSQLAuditReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DatabaseDDLSQLAuditReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DatabaseDDLSQLAuditReqValidationError{}

// Validate checks the field values on DatabaseDDLSQLAuditReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DatabaseDDLSQLAuditReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DatabaseDDLSQLAuditReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DatabaseDDLSQLAuditReplyMultiError, or nil if none found.
func (m *DatabaseDDLSQLAuditReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DatabaseDDLSQLAuditReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DatabaseDDLSQLAuditReplyMultiError(errors)
	}

	return nil
}

// DatabaseDDLSQLAuditReplyMultiError is an error wrapping multiple validation
// errors returned by DatabaseDDLSQLAuditReply.ValidateAll() if the designated
// constraints aren't met.
type DatabaseDDLSQLAuditReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DatabaseDDLSQLAuditReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DatabaseDDLSQLAuditReplyMultiError) AllErrors() []error { return m }

// DatabaseDDLSQLAuditReplyValidationError is the validation error returned by
// DatabaseDDLSQLAuditReply.Validate if the designated constraints aren't met.
type DatabaseDDLSQLAuditReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DatabaseDDLSQLAuditReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DatabaseDDLSQLAuditReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DatabaseDDLSQLAuditReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DatabaseDDLSQLAuditReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DatabaseDDLSQLAuditReplyValidationError) ErrorName() string {
	return "DatabaseDDLSQLAuditReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DatabaseDDLSQLAuditReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDatabaseDDLSQLAuditReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DatabaseDDLSQLAuditReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DatabaseDDLSQLAuditReplyValidationError{}

// Validate checks the field values on CloudSubScribeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CloudSubScribeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudSubScribeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudSubScribeReqMultiError, or nil if none found.
func (m *CloudSubScribeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudSubScribeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := CloudSubScribeReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CloudSubScribeReqMultiError(errors)
	}

	return nil
}

// CloudSubScribeReqMultiError is an error wrapping multiple validation errors
// returned by CloudSubScribeReq.ValidateAll() if the designated constraints
// aren't met.
type CloudSubScribeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudSubScribeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudSubScribeReqMultiError) AllErrors() []error { return m }

// CloudSubScribeReqValidationError is the validation error returned by
// CloudSubScribeReq.Validate if the designated constraints aren't met.
type CloudSubScribeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudSubScribeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudSubScribeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudSubScribeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudSubScribeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudSubScribeReqValidationError) ErrorName() string {
	return "CloudSubScribeReqValidationError"
}

// Error satisfies the builtin error interface
func (e CloudSubScribeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudSubScribeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudSubScribeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudSubScribeReqValidationError{}

// Validate checks the field values on CloudSubScribeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudSubScribeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudSubScribeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudSubScribeReplyMultiError, or nil if none found.
func (m *CloudSubScribeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudSubScribeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CloudSubScribeReplyMultiError(errors)
	}

	return nil
}

// CloudSubScribeReplyMultiError is an error wrapping multiple validation
// errors returned by CloudSubScribeReply.ValidateAll() if the designated
// constraints aren't met.
type CloudSubScribeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudSubScribeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudSubScribeReplyMultiError) AllErrors() []error { return m }

// CloudSubScribeReplyValidationError is the validation error returned by
// CloudSubScribeReply.Validate if the designated constraints aren't met.
type CloudSubScribeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudSubScribeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudSubScribeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudSubScribeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudSubScribeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudSubScribeReplyValidationError) ErrorName() string {
	return "CloudSubScribeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CloudSubScribeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudSubScribeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudSubScribeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudSubScribeReplyValidationError{}

// Validate checks the field values on PrometheusAlertReq_PrometheusAlert with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PrometheusAlertReq_PrometheusAlert) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PrometheusAlertReq_PrometheusAlert
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PrometheusAlertReq_PrometheusAlertMultiError, or nil if none found.
func (m *PrometheusAlertReq_PrometheusAlert) ValidateAll() error {
	return m.validate(true)
}

func (m *PrometheusAlertReq_PrometheusAlert) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Labels

	// no validation rules for Annotations

	// no validation rules for StartsAt

	// no validation rules for EndsAt

	// no validation rules for GeneratorURL

	// no validation rules for Fingerprint

	if len(errors) > 0 {
		return PrometheusAlertReq_PrometheusAlertMultiError(errors)
	}

	return nil
}

// PrometheusAlertReq_PrometheusAlertMultiError is an error wrapping multiple
// validation errors returned by
// PrometheusAlertReq_PrometheusAlert.ValidateAll() if the designated
// constraints aren't met.
type PrometheusAlertReq_PrometheusAlertMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrometheusAlertReq_PrometheusAlertMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrometheusAlertReq_PrometheusAlertMultiError) AllErrors() []error { return m }

// PrometheusAlertReq_PrometheusAlertValidationError is the validation error
// returned by PrometheusAlertReq_PrometheusAlert.Validate if the designated
// constraints aren't met.
type PrometheusAlertReq_PrometheusAlertValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrometheusAlertReq_PrometheusAlertValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrometheusAlertReq_PrometheusAlertValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrometheusAlertReq_PrometheusAlertValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrometheusAlertReq_PrometheusAlertValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrometheusAlertReq_PrometheusAlertValidationError) ErrorName() string {
	return "PrometheusAlertReq_PrometheusAlertValidationError"
}

// Error satisfies the builtin error interface
func (e PrometheusAlertReq_PrometheusAlertValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrometheusAlertReq_PrometheusAlert.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrometheusAlertReq_PrometheusAlertValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrometheusAlertReq_PrometheusAlertValidationError{}

// Validate checks the field values on
// PrometheusAlertHisReply_PrometheusAlertHis with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PrometheusAlertHisReply_PrometheusAlertHis) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// PrometheusAlertHisReply_PrometheusAlertHis with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// PrometheusAlertHisReply_PrometheusAlertHisMultiError, or nil if none found.
func (m *PrometheusAlertHisReply_PrometheusAlertHis) ValidateAll() error {
	return m.validate(true)
}

func (m *PrometheusAlertHisReply_PrometheusAlertHis) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AlertName

	// no validation rules for Instance

	// no validation rules for Job

	// no validation rules for Product

	// no validation rules for Level

	// no validation rules for Receiver

	// no validation rules for Status

	// no validation rules for Lables

	// no validation rules for Annotations

	// no validation rules for StartAt

	// no validation rules for EndAt

	// no validation rules for GeneratorUrl

	// no validation rules for Fingerprint

	// no validation rules for Ack

	// no validation rules for AckMessage

	// no validation rules for AckUserUuid

	if len(errors) > 0 {
		return PrometheusAlertHisReply_PrometheusAlertHisMultiError(errors)
	}

	return nil
}

// PrometheusAlertHisReply_PrometheusAlertHisMultiError is an error wrapping
// multiple validation errors returned by
// PrometheusAlertHisReply_PrometheusAlertHis.ValidateAll() if the designated
// constraints aren't met.
type PrometheusAlertHisReply_PrometheusAlertHisMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrometheusAlertHisReply_PrometheusAlertHisMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrometheusAlertHisReply_PrometheusAlertHisMultiError) AllErrors() []error { return m }

// PrometheusAlertHisReply_PrometheusAlertHisValidationError is the validation
// error returned by PrometheusAlertHisReply_PrometheusAlertHis.Validate if
// the designated constraints aren't met.
type PrometheusAlertHisReply_PrometheusAlertHisValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrometheusAlertHisReply_PrometheusAlertHisValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrometheusAlertHisReply_PrometheusAlertHisValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrometheusAlertHisReply_PrometheusAlertHisValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrometheusAlertHisReply_PrometheusAlertHisValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrometheusAlertHisReply_PrometheusAlertHisValidationError) ErrorName() string {
	return "PrometheusAlertHisReply_PrometheusAlertHisValidationError"
}

// Error satisfies the builtin error interface
func (e PrometheusAlertHisReply_PrometheusAlertHisValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrometheusAlertHisReply_PrometheusAlertHis.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrometheusAlertHisReply_PrometheusAlertHisValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrometheusAlertHisReply_PrometheusAlertHisValidationError{}

// Validate checks the field values on GetKubernetesEventReply_KubernetesEvent
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetKubernetesEventReply_KubernetesEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetKubernetesEventReply_KubernetesEvent with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetKubernetesEventReply_KubernetesEventMultiError, or nil if none found.
func (m *GetKubernetesEventReply_KubernetesEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *GetKubernetesEventReply_KubernetesEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for K8SClusterUuid

	// no validation rules for ApiVersion

	// no validation rules for Kind

	// no validation rules for Name

	// no validation rules for Namespace

	// no validation rules for Type

	// no validation rules for Action

	// no validation rules for Reason

	// no validation rules for Note

	// no validation rules for EventTime

	// no validation rules for CreateTime

	// no validation rules for Annotations

	// no validation rules for ResourceVersion

	// no validation rules for RegardingKind

	// no validation rules for RegardingNamespace

	// no validation rules for RegardingName

	// no validation rules for RegardingUid

	// no validation rules for RegardingAPIVersion

	// no validation rules for RegardingResourceVersion

	// no validation rules for RegardingFieldPath

	if len(errors) > 0 {
		return GetKubernetesEventReply_KubernetesEventMultiError(errors)
	}

	return nil
}

// GetKubernetesEventReply_KubernetesEventMultiError is an error wrapping
// multiple validation errors returned by
// GetKubernetesEventReply_KubernetesEvent.ValidateAll() if the designated
// constraints aren't met.
type GetKubernetesEventReply_KubernetesEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetKubernetesEventReply_KubernetesEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetKubernetesEventReply_KubernetesEventMultiError) AllErrors() []error { return m }

// GetKubernetesEventReply_KubernetesEventValidationError is the validation
// error returned by GetKubernetesEventReply_KubernetesEvent.Validate if the
// designated constraints aren't met.
type GetKubernetesEventReply_KubernetesEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetKubernetesEventReply_KubernetesEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetKubernetesEventReply_KubernetesEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetKubernetesEventReply_KubernetesEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetKubernetesEventReply_KubernetesEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetKubernetesEventReply_KubernetesEventValidationError) ErrorName() string {
	return "GetKubernetesEventReply_KubernetesEventValidationError"
}

// Error satisfies the builtin error interface
func (e GetKubernetesEventReply_KubernetesEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetKubernetesEventReply_KubernetesEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetKubernetesEventReply_KubernetesEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetKubernetesEventReply_KubernetesEventValidationError{}

// Validate checks the field values on ListMonitorReceiverReply_MonitorReceiver
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListMonitorReceiverReply_MonitorReceiver) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListMonitorReceiverReply_MonitorReceiver with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListMonitorReceiverReply_MonitorReceiverMultiError, or nil if none found.
func (m *ListMonitorReceiverReply_MonitorReceiver) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMonitorReceiverReply_MonitorReceiver) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for OrgUuid

	// no validation rules for ProductUuid

	// no validation rules for Receiver

	// no validation rules for MessageGroupUuid

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return ListMonitorReceiverReply_MonitorReceiverMultiError(errors)
	}

	return nil
}

// ListMonitorReceiverReply_MonitorReceiverMultiError is an error wrapping
// multiple validation errors returned by
// ListMonitorReceiverReply_MonitorReceiver.ValidateAll() if the designated
// constraints aren't met.
type ListMonitorReceiverReply_MonitorReceiverMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMonitorReceiverReply_MonitorReceiverMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMonitorReceiverReply_MonitorReceiverMultiError) AllErrors() []error { return m }

// ListMonitorReceiverReply_MonitorReceiverValidationError is the validation
// error returned by ListMonitorReceiverReply_MonitorReceiver.Validate if the
// designated constraints aren't met.
type ListMonitorReceiverReply_MonitorReceiverValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMonitorReceiverReply_MonitorReceiverValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMonitorReceiverReply_MonitorReceiverValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMonitorReceiverReply_MonitorReceiverValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMonitorReceiverReply_MonitorReceiverValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMonitorReceiverReply_MonitorReceiverValidationError) ErrorName() string {
	return "ListMonitorReceiverReply_MonitorReceiverValidationError"
}

// Error satisfies the builtin error interface
func (e ListMonitorReceiverReply_MonitorReceiverValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMonitorReceiverReply_MonitorReceiver.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMonitorReceiverReply_MonitorReceiverValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMonitorReceiverReply_MonitorReceiverValidationError{}

// Validate checks the field values on
// GetKubernetesEventReceiverReply_KubernetesEventReceiver with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetKubernetesEventReceiverReply_KubernetesEventReceiver) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetKubernetesEventReceiverReply_KubernetesEventReceiver with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetKubernetesEventReceiverReply_KubernetesEventReceiverMultiError, or nil
// if none found.
func (m *GetKubernetesEventReceiverReply_KubernetesEventReceiver) ValidateAll() error {
	return m.validate(true)
}

func (m *GetKubernetesEventReceiverReply_KubernetesEventReceiver) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for K8SClusterUuid

	// no validation rules for MessageGroupUuid

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return GetKubernetesEventReceiverReply_KubernetesEventReceiverMultiError(errors)
	}

	return nil
}

// GetKubernetesEventReceiverReply_KubernetesEventReceiverMultiError is an
// error wrapping multiple validation errors returned by
// GetKubernetesEventReceiverReply_KubernetesEventReceiver.ValidateAll() if
// the designated constraints aren't met.
type GetKubernetesEventReceiverReply_KubernetesEventReceiverMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetKubernetesEventReceiverReply_KubernetesEventReceiverMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetKubernetesEventReceiverReply_KubernetesEventReceiverMultiError) AllErrors() []error {
	return m
}

// GetKubernetesEventReceiverReply_KubernetesEventReceiverValidationError is
// the validation error returned by
// GetKubernetesEventReceiverReply_KubernetesEventReceiver.Validate if the
// designated constraints aren't met.
type GetKubernetesEventReceiverReply_KubernetesEventReceiverValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetKubernetesEventReceiverReply_KubernetesEventReceiverValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetKubernetesEventReceiverReply_KubernetesEventReceiverValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetKubernetesEventReceiverReply_KubernetesEventReceiverValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetKubernetesEventReceiverReply_KubernetesEventReceiverValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e GetKubernetesEventReceiverReply_KubernetesEventReceiverValidationError) ErrorName() string {
	return "GetKubernetesEventReceiverReply_KubernetesEventReceiverValidationError"
}

// Error satisfies the builtin error interface
func (e GetKubernetesEventReceiverReply_KubernetesEventReceiverValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetKubernetesEventReceiverReply_KubernetesEventReceiver.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetKubernetesEventReceiverReply_KubernetesEventReceiverValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetKubernetesEventReceiverReply_KubernetesEventReceiverValidationError{}
