// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.14.0
// source: oneHook/v1/hook.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OneHook_PrometheusAlert_FullMethodName               = "/oneHook.v1.OneHook/PrometheusAlert"
	OneHook_PrometheusAlertHis_FullMethodName            = "/oneHook.v1.OneHook/PrometheusAlertHis"
	OneHook_PrometheusAlertAck_FullMethodName            = "/oneHook.v1.OneHook/PrometheusAlertAck"
	OneHook_PrometheusAlertFingerprint_FullMethodName    = "/oneHook.v1.OneHook/PrometheusAlertFingerprint"
	OneHook_KubernetesEvent_FullMethodName               = "/oneHook.v1.OneHook/KubernetesEvent"
	OneHook_GetKubernetesEvent_FullMethodName            = "/oneHook.v1.OneHook/GetKubernetesEvent"
	OneHook_CreateMonitorReceiver_FullMethodName         = "/oneHook.v1.OneHook/CreateMonitorReceiver"
	OneHook_ListMonitorReceiver_FullMethodName           = "/oneHook.v1.OneHook/ListMonitorReceiver"
	OneHook_DelMonitorReceiver_FullMethodName            = "/oneHook.v1.OneHook/DelMonitorReceiver"
	OneHook_CreateKubernetesEventReceiver_FullMethodName = "/oneHook.v1.OneHook/CreateKubernetesEventReceiver"
	OneHook_GetKubernetesEventReceiver_FullMethodName    = "/oneHook.v1.OneHook/GetKubernetesEventReceiver"
	OneHook_DelKubernetesEventReceiver_FullMethodName    = "/oneHook.v1.OneHook/DelKubernetesEventReceiver"
	OneHook_SkywalkingAlert_FullMethodName               = "/oneHook.v1.OneHook/SkywalkingAlert"
	OneHook_SystemAudit_FullMethodName                   = "/oneHook.v1.OneHook/SystemAudit"
	OneHook_CloudSubScribe_FullMethodName                = "/oneHook.v1.OneHook/CloudSubScribe"
	OneHook_GenerateWebDiagUrl_FullMethodName            = "/oneHook.v1.OneHook/GenerateWebDiagUrl"
	OneHook_WebDiag_FullMethodName                       = "/oneHook.v1.OneHook/WebDiag"
)

// OneHookClient is the client API for OneHook service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OneHookClient interface {
	// prometheus
	PrometheusAlert(ctx context.Context, in *PrometheusAlertReq, opts ...grpc.CallOption) (*PrometheusAlertReply, error)
	PrometheusAlertHis(ctx context.Context, in *PrometheusAlertHisReq, opts ...grpc.CallOption) (*PrometheusAlertHisReply, error)
	PrometheusAlertAck(ctx context.Context, in *PrometheusAlertAckReq, opts ...grpc.CallOption) (*PrometheusAlertAckReply, error)
	PrometheusAlertFingerprint(ctx context.Context, in *PrometheusAlertFingerprintReq, opts ...grpc.CallOption) (*PrometheusAlertFingerprintReply, error)
	// Kubernetes Event
	KubernetesEvent(ctx context.Context, in *KubernetesEventReq, opts ...grpc.CallOption) (*KubernetesEventReply, error)
	GetKubernetesEvent(ctx context.Context, in *GetKubernetesEventReq, opts ...grpc.CallOption) (*GetKubernetesEventReply, error)
	CreateMonitorReceiver(ctx context.Context, in *CreateMonitorReceiverReq, opts ...grpc.CallOption) (*CreateMonitorReceiverReply, error)
	ListMonitorReceiver(ctx context.Context, in *ListMonitorReceiverReq, opts ...grpc.CallOption) (*ListMonitorReceiverReply, error)
	DelMonitorReceiver(ctx context.Context, in *DelMonitorReceiverReq, opts ...grpc.CallOption) (*DelMonitorReceiverReply, error)
	CreateKubernetesEventReceiver(ctx context.Context, in *CreateKubernetesEventReceiverReq, opts ...grpc.CallOption) (*CreateKubernetesEventReceiverReply, error)
	GetKubernetesEventReceiver(ctx context.Context, in *GetKubernetesEventReceiverReq, opts ...grpc.CallOption) (*GetKubernetesEventReceiverReply, error)
	DelKubernetesEventReceiver(ctx context.Context, in *DelKubernetesEventReceiverReq, opts ...grpc.CallOption) (*DelKubernetesEventReceiverReply, error)
	SkywalkingAlert(ctx context.Context, in *SkywalkingAlertReq, opts ...grpc.CallOption) (*SkywalkingAlertReply, error)
	SystemAudit(ctx context.Context, in *SystemAuditReq, opts ...grpc.CallOption) (*SystemAuditReply, error)
	CloudSubScribe(ctx context.Context, in *CloudSubScribeReq, opts ...grpc.CallOption) (*CloudSubScribeReply, error)
	// Diag
	GenerateWebDiagUrl(ctx context.Context, in *GenerateWebDiagUrlReq, opts ...grpc.CallOption) (*GenerateWebDiagUrlReply, error)
	WebDiag(ctx context.Context, in *WebDiagReq, opts ...grpc.CallOption) (*WebDiagReply, error)
}

type oneHookClient struct {
	cc grpc.ClientConnInterface
}

func NewOneHookClient(cc grpc.ClientConnInterface) OneHookClient {
	return &oneHookClient{cc}
}

func (c *oneHookClient) PrometheusAlert(ctx context.Context, in *PrometheusAlertReq, opts ...grpc.CallOption) (*PrometheusAlertReply, error) {
	out := new(PrometheusAlertReply)
	err := c.cc.Invoke(ctx, OneHook_PrometheusAlert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneHookClient) PrometheusAlertHis(ctx context.Context, in *PrometheusAlertHisReq, opts ...grpc.CallOption) (*PrometheusAlertHisReply, error) {
	out := new(PrometheusAlertHisReply)
	err := c.cc.Invoke(ctx, OneHook_PrometheusAlertHis_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneHookClient) PrometheusAlertAck(ctx context.Context, in *PrometheusAlertAckReq, opts ...grpc.CallOption) (*PrometheusAlertAckReply, error) {
	out := new(PrometheusAlertAckReply)
	err := c.cc.Invoke(ctx, OneHook_PrometheusAlertAck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneHookClient) PrometheusAlertFingerprint(ctx context.Context, in *PrometheusAlertFingerprintReq, opts ...grpc.CallOption) (*PrometheusAlertFingerprintReply, error) {
	out := new(PrometheusAlertFingerprintReply)
	err := c.cc.Invoke(ctx, OneHook_PrometheusAlertFingerprint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneHookClient) KubernetesEvent(ctx context.Context, in *KubernetesEventReq, opts ...grpc.CallOption) (*KubernetesEventReply, error) {
	out := new(KubernetesEventReply)
	err := c.cc.Invoke(ctx, OneHook_KubernetesEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneHookClient) GetKubernetesEvent(ctx context.Context, in *GetKubernetesEventReq, opts ...grpc.CallOption) (*GetKubernetesEventReply, error) {
	out := new(GetKubernetesEventReply)
	err := c.cc.Invoke(ctx, OneHook_GetKubernetesEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneHookClient) CreateMonitorReceiver(ctx context.Context, in *CreateMonitorReceiverReq, opts ...grpc.CallOption) (*CreateMonitorReceiverReply, error) {
	out := new(CreateMonitorReceiverReply)
	err := c.cc.Invoke(ctx, OneHook_CreateMonitorReceiver_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneHookClient) ListMonitorReceiver(ctx context.Context, in *ListMonitorReceiverReq, opts ...grpc.CallOption) (*ListMonitorReceiverReply, error) {
	out := new(ListMonitorReceiverReply)
	err := c.cc.Invoke(ctx, OneHook_ListMonitorReceiver_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneHookClient) DelMonitorReceiver(ctx context.Context, in *DelMonitorReceiverReq, opts ...grpc.CallOption) (*DelMonitorReceiverReply, error) {
	out := new(DelMonitorReceiverReply)
	err := c.cc.Invoke(ctx, OneHook_DelMonitorReceiver_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneHookClient) CreateKubernetesEventReceiver(ctx context.Context, in *CreateKubernetesEventReceiverReq, opts ...grpc.CallOption) (*CreateKubernetesEventReceiverReply, error) {
	out := new(CreateKubernetesEventReceiverReply)
	err := c.cc.Invoke(ctx, OneHook_CreateKubernetesEventReceiver_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneHookClient) GetKubernetesEventReceiver(ctx context.Context, in *GetKubernetesEventReceiverReq, opts ...grpc.CallOption) (*GetKubernetesEventReceiverReply, error) {
	out := new(GetKubernetesEventReceiverReply)
	err := c.cc.Invoke(ctx, OneHook_GetKubernetesEventReceiver_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneHookClient) DelKubernetesEventReceiver(ctx context.Context, in *DelKubernetesEventReceiverReq, opts ...grpc.CallOption) (*DelKubernetesEventReceiverReply, error) {
	out := new(DelKubernetesEventReceiverReply)
	err := c.cc.Invoke(ctx, OneHook_DelKubernetesEventReceiver_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneHookClient) SkywalkingAlert(ctx context.Context, in *SkywalkingAlertReq, opts ...grpc.CallOption) (*SkywalkingAlertReply, error) {
	out := new(SkywalkingAlertReply)
	err := c.cc.Invoke(ctx, OneHook_SkywalkingAlert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneHookClient) SystemAudit(ctx context.Context, in *SystemAuditReq, opts ...grpc.CallOption) (*SystemAuditReply, error) {
	out := new(SystemAuditReply)
	err := c.cc.Invoke(ctx, OneHook_SystemAudit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneHookClient) CloudSubScribe(ctx context.Context, in *CloudSubScribeReq, opts ...grpc.CallOption) (*CloudSubScribeReply, error) {
	out := new(CloudSubScribeReply)
	err := c.cc.Invoke(ctx, OneHook_CloudSubScribe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneHookClient) GenerateWebDiagUrl(ctx context.Context, in *GenerateWebDiagUrlReq, opts ...grpc.CallOption) (*GenerateWebDiagUrlReply, error) {
	out := new(GenerateWebDiagUrlReply)
	err := c.cc.Invoke(ctx, OneHook_GenerateWebDiagUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneHookClient) WebDiag(ctx context.Context, in *WebDiagReq, opts ...grpc.CallOption) (*WebDiagReply, error) {
	out := new(WebDiagReply)
	err := c.cc.Invoke(ctx, OneHook_WebDiag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OneHookServer is the server API for OneHook service.
// All implementations must embed UnimplementedOneHookServer
// for forward compatibility
type OneHookServer interface {
	// prometheus
	PrometheusAlert(context.Context, *PrometheusAlertReq) (*PrometheusAlertReply, error)
	PrometheusAlertHis(context.Context, *PrometheusAlertHisReq) (*PrometheusAlertHisReply, error)
	PrometheusAlertAck(context.Context, *PrometheusAlertAckReq) (*PrometheusAlertAckReply, error)
	PrometheusAlertFingerprint(context.Context, *PrometheusAlertFingerprintReq) (*PrometheusAlertFingerprintReply, error)
	// Kubernetes Event
	KubernetesEvent(context.Context, *KubernetesEventReq) (*KubernetesEventReply, error)
	GetKubernetesEvent(context.Context, *GetKubernetesEventReq) (*GetKubernetesEventReply, error)
	CreateMonitorReceiver(context.Context, *CreateMonitorReceiverReq) (*CreateMonitorReceiverReply, error)
	ListMonitorReceiver(context.Context, *ListMonitorReceiverReq) (*ListMonitorReceiverReply, error)
	DelMonitorReceiver(context.Context, *DelMonitorReceiverReq) (*DelMonitorReceiverReply, error)
	CreateKubernetesEventReceiver(context.Context, *CreateKubernetesEventReceiverReq) (*CreateKubernetesEventReceiverReply, error)
	GetKubernetesEventReceiver(context.Context, *GetKubernetesEventReceiverReq) (*GetKubernetesEventReceiverReply, error)
	DelKubernetesEventReceiver(context.Context, *DelKubernetesEventReceiverReq) (*DelKubernetesEventReceiverReply, error)
	SkywalkingAlert(context.Context, *SkywalkingAlertReq) (*SkywalkingAlertReply, error)
	SystemAudit(context.Context, *SystemAuditReq) (*SystemAuditReply, error)
	CloudSubScribe(context.Context, *CloudSubScribeReq) (*CloudSubScribeReply, error)
	// Diag
	GenerateWebDiagUrl(context.Context, *GenerateWebDiagUrlReq) (*GenerateWebDiagUrlReply, error)
	WebDiag(context.Context, *WebDiagReq) (*WebDiagReply, error)
	mustEmbedUnimplementedOneHookServer()
}

// UnimplementedOneHookServer must be embedded to have forward compatible implementations.
type UnimplementedOneHookServer struct {
}

func (UnimplementedOneHookServer) PrometheusAlert(context.Context, *PrometheusAlertReq) (*PrometheusAlertReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrometheusAlert not implemented")
}
func (UnimplementedOneHookServer) PrometheusAlertHis(context.Context, *PrometheusAlertHisReq) (*PrometheusAlertHisReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrometheusAlertHis not implemented")
}
func (UnimplementedOneHookServer) PrometheusAlertAck(context.Context, *PrometheusAlertAckReq) (*PrometheusAlertAckReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrometheusAlertAck not implemented")
}
func (UnimplementedOneHookServer) PrometheusAlertFingerprint(context.Context, *PrometheusAlertFingerprintReq) (*PrometheusAlertFingerprintReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrometheusAlertFingerprint not implemented")
}
func (UnimplementedOneHookServer) KubernetesEvent(context.Context, *KubernetesEventReq) (*KubernetesEventReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KubernetesEvent not implemented")
}
func (UnimplementedOneHookServer) GetKubernetesEvent(context.Context, *GetKubernetesEventReq) (*GetKubernetesEventReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKubernetesEvent not implemented")
}
func (UnimplementedOneHookServer) CreateMonitorReceiver(context.Context, *CreateMonitorReceiverReq) (*CreateMonitorReceiverReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMonitorReceiver not implemented")
}
func (UnimplementedOneHookServer) ListMonitorReceiver(context.Context, *ListMonitorReceiverReq) (*ListMonitorReceiverReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMonitorReceiver not implemented")
}
func (UnimplementedOneHookServer) DelMonitorReceiver(context.Context, *DelMonitorReceiverReq) (*DelMonitorReceiverReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelMonitorReceiver not implemented")
}
func (UnimplementedOneHookServer) CreateKubernetesEventReceiver(context.Context, *CreateKubernetesEventReceiverReq) (*CreateKubernetesEventReceiverReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKubernetesEventReceiver not implemented")
}
func (UnimplementedOneHookServer) GetKubernetesEventReceiver(context.Context, *GetKubernetesEventReceiverReq) (*GetKubernetesEventReceiverReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKubernetesEventReceiver not implemented")
}
func (UnimplementedOneHookServer) DelKubernetesEventReceiver(context.Context, *DelKubernetesEventReceiverReq) (*DelKubernetesEventReceiverReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelKubernetesEventReceiver not implemented")
}
func (UnimplementedOneHookServer) SkywalkingAlert(context.Context, *SkywalkingAlertReq) (*SkywalkingAlertReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SkywalkingAlert not implemented")
}
func (UnimplementedOneHookServer) SystemAudit(context.Context, *SystemAuditReq) (*SystemAuditReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemAudit not implemented")
}
func (UnimplementedOneHookServer) CloudSubScribe(context.Context, *CloudSubScribeReq) (*CloudSubScribeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloudSubScribe not implemented")
}
func (UnimplementedOneHookServer) GenerateWebDiagUrl(context.Context, *GenerateWebDiagUrlReq) (*GenerateWebDiagUrlReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateWebDiagUrl not implemented")
}
func (UnimplementedOneHookServer) WebDiag(context.Context, *WebDiagReq) (*WebDiagReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebDiag not implemented")
}
func (UnimplementedOneHookServer) mustEmbedUnimplementedOneHookServer() {}

// UnsafeOneHookServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OneHookServer will
// result in compilation errors.
type UnsafeOneHookServer interface {
	mustEmbedUnimplementedOneHookServer()
}

func RegisterOneHookServer(s grpc.ServiceRegistrar, srv OneHookServer) {
	s.RegisterService(&OneHook_ServiceDesc, srv)
}

func _OneHook_PrometheusAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrometheusAlertReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneHookServer).PrometheusAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneHook_PrometheusAlert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneHookServer).PrometheusAlert(ctx, req.(*PrometheusAlertReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneHook_PrometheusAlertHis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrometheusAlertHisReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneHookServer).PrometheusAlertHis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneHook_PrometheusAlertHis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneHookServer).PrometheusAlertHis(ctx, req.(*PrometheusAlertHisReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneHook_PrometheusAlertAck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrometheusAlertAckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneHookServer).PrometheusAlertAck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneHook_PrometheusAlertAck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneHookServer).PrometheusAlertAck(ctx, req.(*PrometheusAlertAckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneHook_PrometheusAlertFingerprint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrometheusAlertFingerprintReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneHookServer).PrometheusAlertFingerprint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneHook_PrometheusAlertFingerprint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneHookServer).PrometheusAlertFingerprint(ctx, req.(*PrometheusAlertFingerprintReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneHook_KubernetesEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KubernetesEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneHookServer).KubernetesEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneHook_KubernetesEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneHookServer).KubernetesEvent(ctx, req.(*KubernetesEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneHook_GetKubernetesEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKubernetesEventReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneHookServer).GetKubernetesEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneHook_GetKubernetesEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneHookServer).GetKubernetesEvent(ctx, req.(*GetKubernetesEventReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneHook_CreateMonitorReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMonitorReceiverReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneHookServer).CreateMonitorReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneHook_CreateMonitorReceiver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneHookServer).CreateMonitorReceiver(ctx, req.(*CreateMonitorReceiverReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneHook_ListMonitorReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMonitorReceiverReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneHookServer).ListMonitorReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneHook_ListMonitorReceiver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneHookServer).ListMonitorReceiver(ctx, req.(*ListMonitorReceiverReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneHook_DelMonitorReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelMonitorReceiverReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneHookServer).DelMonitorReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneHook_DelMonitorReceiver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneHookServer).DelMonitorReceiver(ctx, req.(*DelMonitorReceiverReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneHook_CreateKubernetesEventReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKubernetesEventReceiverReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneHookServer).CreateKubernetesEventReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneHook_CreateKubernetesEventReceiver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneHookServer).CreateKubernetesEventReceiver(ctx, req.(*CreateKubernetesEventReceiverReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneHook_GetKubernetesEventReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKubernetesEventReceiverReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneHookServer).GetKubernetesEventReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneHook_GetKubernetesEventReceiver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneHookServer).GetKubernetesEventReceiver(ctx, req.(*GetKubernetesEventReceiverReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneHook_DelKubernetesEventReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelKubernetesEventReceiverReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneHookServer).DelKubernetesEventReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneHook_DelKubernetesEventReceiver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneHookServer).DelKubernetesEventReceiver(ctx, req.(*DelKubernetesEventReceiverReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneHook_SkywalkingAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkywalkingAlertReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneHookServer).SkywalkingAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneHook_SkywalkingAlert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneHookServer).SkywalkingAlert(ctx, req.(*SkywalkingAlertReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneHook_SystemAudit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemAuditReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneHookServer).SystemAudit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneHook_SystemAudit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneHookServer).SystemAudit(ctx, req.(*SystemAuditReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneHook_CloudSubScribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudSubScribeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneHookServer).CloudSubScribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneHook_CloudSubScribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneHookServer).CloudSubScribe(ctx, req.(*CloudSubScribeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneHook_GenerateWebDiagUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateWebDiagUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneHookServer).GenerateWebDiagUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneHook_GenerateWebDiagUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneHookServer).GenerateWebDiagUrl(ctx, req.(*GenerateWebDiagUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneHook_WebDiag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebDiagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneHookServer).WebDiag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneHook_WebDiag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneHookServer).WebDiag(ctx, req.(*WebDiagReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OneHook_ServiceDesc is the grpc.ServiceDesc for OneHook service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OneHook_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "oneHook.v1.OneHook",
	HandlerType: (*OneHookServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PrometheusAlert",
			Handler:    _OneHook_PrometheusAlert_Handler,
		},
		{
			MethodName: "PrometheusAlertHis",
			Handler:    _OneHook_PrometheusAlertHis_Handler,
		},
		{
			MethodName: "PrometheusAlertAck",
			Handler:    _OneHook_PrometheusAlertAck_Handler,
		},
		{
			MethodName: "PrometheusAlertFingerprint",
			Handler:    _OneHook_PrometheusAlertFingerprint_Handler,
		},
		{
			MethodName: "KubernetesEvent",
			Handler:    _OneHook_KubernetesEvent_Handler,
		},
		{
			MethodName: "GetKubernetesEvent",
			Handler:    _OneHook_GetKubernetesEvent_Handler,
		},
		{
			MethodName: "CreateMonitorReceiver",
			Handler:    _OneHook_CreateMonitorReceiver_Handler,
		},
		{
			MethodName: "ListMonitorReceiver",
			Handler:    _OneHook_ListMonitorReceiver_Handler,
		},
		{
			MethodName: "DelMonitorReceiver",
			Handler:    _OneHook_DelMonitorReceiver_Handler,
		},
		{
			MethodName: "CreateKubernetesEventReceiver",
			Handler:    _OneHook_CreateKubernetesEventReceiver_Handler,
		},
		{
			MethodName: "GetKubernetesEventReceiver",
			Handler:    _OneHook_GetKubernetesEventReceiver_Handler,
		},
		{
			MethodName: "DelKubernetesEventReceiver",
			Handler:    _OneHook_DelKubernetesEventReceiver_Handler,
		},
		{
			MethodName: "SkywalkingAlert",
			Handler:    _OneHook_SkywalkingAlert_Handler,
		},
		{
			MethodName: "SystemAudit",
			Handler:    _OneHook_SystemAudit_Handler,
		},
		{
			MethodName: "CloudSubScribe",
			Handler:    _OneHook_CloudSubScribe_Handler,
		},
		{
			MethodName: "GenerateWebDiagUrl",
			Handler:    _OneHook_GenerateWebDiagUrl_Handler,
		},
		{
			MethodName: "WebDiag",
			Handler:    _OneHook_WebDiag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oneHook/v1/hook.proto",
}
