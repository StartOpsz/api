// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.14.0
// source: bitx/v1/bitx.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Ci_ListSymbol_FullMethodName      = "/bitx.v1.ci/ListSymbol"
	Ci_ListSymbolPrice_FullMethodName = "/bitx.v1.ci/ListSymbolPrice"
	Ci_GetDailyAsset_FullMethodName   = "/bitx.v1.ci/GetDailyAsset"
)

// CiClient is the client API for Ci service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CiClient interface {
	ListSymbol(ctx context.Context, in *ListSymbolReq, opts ...grpc.CallOption) (*ListSymbolReply, error)
	ListSymbolPrice(ctx context.Context, in *ListSymbolPriceReq, opts ...grpc.CallOption) (*ListSymbolPriceReply, error)
	GetDailyAsset(ctx context.Context, in *GetDailyAssetReq, opts ...grpc.CallOption) (*GetDailyAssetReply, error)
}

type ciClient struct {
	cc grpc.ClientConnInterface
}

func NewCiClient(cc grpc.ClientConnInterface) CiClient {
	return &ciClient{cc}
}

func (c *ciClient) ListSymbol(ctx context.Context, in *ListSymbolReq, opts ...grpc.CallOption) (*ListSymbolReply, error) {
	out := new(ListSymbolReply)
	err := c.cc.Invoke(ctx, Ci_ListSymbol_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) ListSymbolPrice(ctx context.Context, in *ListSymbolPriceReq, opts ...grpc.CallOption) (*ListSymbolPriceReply, error) {
	out := new(ListSymbolPriceReply)
	err := c.cc.Invoke(ctx, Ci_ListSymbolPrice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ciClient) GetDailyAsset(ctx context.Context, in *GetDailyAssetReq, opts ...grpc.CallOption) (*GetDailyAssetReply, error) {
	out := new(GetDailyAssetReply)
	err := c.cc.Invoke(ctx, Ci_GetDailyAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CiServer is the server API for Ci service.
// All implementations must embed UnimplementedCiServer
// for forward compatibility
type CiServer interface {
	ListSymbol(context.Context, *ListSymbolReq) (*ListSymbolReply, error)
	ListSymbolPrice(context.Context, *ListSymbolPriceReq) (*ListSymbolPriceReply, error)
	GetDailyAsset(context.Context, *GetDailyAssetReq) (*GetDailyAssetReply, error)
	mustEmbedUnimplementedCiServer()
}

// UnimplementedCiServer must be embedded to have forward compatible implementations.
type UnimplementedCiServer struct {
}

func (UnimplementedCiServer) ListSymbol(context.Context, *ListSymbolReq) (*ListSymbolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSymbol not implemented")
}
func (UnimplementedCiServer) ListSymbolPrice(context.Context, *ListSymbolPriceReq) (*ListSymbolPriceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSymbolPrice not implemented")
}
func (UnimplementedCiServer) GetDailyAsset(context.Context, *GetDailyAssetReq) (*GetDailyAssetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailyAsset not implemented")
}
func (UnimplementedCiServer) mustEmbedUnimplementedCiServer() {}

// UnsafeCiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CiServer will
// result in compilation errors.
type UnsafeCiServer interface {
	mustEmbedUnimplementedCiServer()
}

func RegisterCiServer(s grpc.ServiceRegistrar, srv CiServer) {
	s.RegisterService(&Ci_ServiceDesc, srv)
}

func _Ci_ListSymbol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSymbolReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).ListSymbol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_ListSymbol_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).ListSymbol(ctx, req.(*ListSymbolReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_ListSymbolPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSymbolPriceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).ListSymbolPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_ListSymbolPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).ListSymbolPrice(ctx, req.(*ListSymbolPriceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ci_GetDailyAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDailyAssetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CiServer).GetDailyAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ci_GetDailyAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CiServer).GetDailyAsset(ctx, req.(*GetDailyAssetReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Ci_ServiceDesc is the grpc.ServiceDesc for Ci service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ci_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bitx.v1.ci",
	HandlerType: (*CiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSymbol",
			Handler:    _Ci_ListSymbol_Handler,
		},
		{
			MethodName: "ListSymbolPrice",
			Handler:    _Ci_ListSymbolPrice_Handler,
		},
		{
			MethodName: "GetDailyAsset",
			Handler:    _Ci_GetDailyAsset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bitx/v1/bitx.proto",
}
