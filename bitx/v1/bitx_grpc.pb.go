// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.14.0
// source: bitx/v1/bitx.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Bitx_ListSymbol_FullMethodName      = "/bitx.v1.bitx/ListSymbol"
	Bitx_ListSymbolPrice_FullMethodName = "/bitx.v1.bitx/ListSymbolPrice"
	Bitx_GetDailyAsset_FullMethodName   = "/bitx.v1.bitx/GetDailyAsset"
)

// BitxClient is the client API for Bitx service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BitxClient interface {
	ListSymbol(ctx context.Context, in *ListSymbolReq, opts ...grpc.CallOption) (*ListSymbolReply, error)
	ListSymbolPrice(ctx context.Context, in *ListSymbolPriceReq, opts ...grpc.CallOption) (*ListSymbolPriceReply, error)
	GetDailyAsset(ctx context.Context, in *GetDailyAssetReq, opts ...grpc.CallOption) (*GetDailyAssetReply, error)
}

type bitxClient struct {
	cc grpc.ClientConnInterface
}

func NewBitxClient(cc grpc.ClientConnInterface) BitxClient {
	return &bitxClient{cc}
}

func (c *bitxClient) ListSymbol(ctx context.Context, in *ListSymbolReq, opts ...grpc.CallOption) (*ListSymbolReply, error) {
	out := new(ListSymbolReply)
	err := c.cc.Invoke(ctx, Bitx_ListSymbol_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bitxClient) ListSymbolPrice(ctx context.Context, in *ListSymbolPriceReq, opts ...grpc.CallOption) (*ListSymbolPriceReply, error) {
	out := new(ListSymbolPriceReply)
	err := c.cc.Invoke(ctx, Bitx_ListSymbolPrice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bitxClient) GetDailyAsset(ctx context.Context, in *GetDailyAssetReq, opts ...grpc.CallOption) (*GetDailyAssetReply, error) {
	out := new(GetDailyAssetReply)
	err := c.cc.Invoke(ctx, Bitx_GetDailyAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BitxServer is the server API for Bitx service.
// All implementations must embed UnimplementedBitxServer
// for forward compatibility
type BitxServer interface {
	ListSymbol(context.Context, *ListSymbolReq) (*ListSymbolReply, error)
	ListSymbolPrice(context.Context, *ListSymbolPriceReq) (*ListSymbolPriceReply, error)
	GetDailyAsset(context.Context, *GetDailyAssetReq) (*GetDailyAssetReply, error)
	mustEmbedUnimplementedBitxServer()
}

// UnimplementedBitxServer must be embedded to have forward compatible implementations.
type UnimplementedBitxServer struct {
}

func (UnimplementedBitxServer) ListSymbol(context.Context, *ListSymbolReq) (*ListSymbolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSymbol not implemented")
}
func (UnimplementedBitxServer) ListSymbolPrice(context.Context, *ListSymbolPriceReq) (*ListSymbolPriceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSymbolPrice not implemented")
}
func (UnimplementedBitxServer) GetDailyAsset(context.Context, *GetDailyAssetReq) (*GetDailyAssetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailyAsset not implemented")
}
func (UnimplementedBitxServer) mustEmbedUnimplementedBitxServer() {}

// UnsafeBitxServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BitxServer will
// result in compilation errors.
type UnsafeBitxServer interface {
	mustEmbedUnimplementedBitxServer()
}

func RegisterBitxServer(s grpc.ServiceRegistrar, srv BitxServer) {
	s.RegisterService(&Bitx_ServiceDesc, srv)
}

func _Bitx_ListSymbol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSymbolReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BitxServer).ListSymbol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bitx_ListSymbol_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BitxServer).ListSymbol(ctx, req.(*ListSymbolReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bitx_ListSymbolPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSymbolPriceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BitxServer).ListSymbolPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bitx_ListSymbolPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BitxServer).ListSymbolPrice(ctx, req.(*ListSymbolPriceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bitx_GetDailyAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDailyAssetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BitxServer).GetDailyAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bitx_GetDailyAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BitxServer).GetDailyAsset(ctx, req.(*GetDailyAssetReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Bitx_ServiceDesc is the grpc.ServiceDesc for Bitx service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bitx_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bitx.v1.bitx",
	HandlerType: (*BitxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSymbol",
			Handler:    _Bitx_ListSymbol_Handler,
		},
		{
			MethodName: "ListSymbolPrice",
			Handler:    _Bitx_ListSymbolPrice_Handler,
		},
		{
			MethodName: "GetDailyAsset",
			Handler:    _Bitx_GetDailyAsset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bitx/v1/bitx.proto",
}
