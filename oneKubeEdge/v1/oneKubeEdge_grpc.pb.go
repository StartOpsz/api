// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.14.0
// source: oneKubeEdge/v1/oneKubeEdge.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OneKubeEdge_GetClusterSummary_FullMethodName            = "/oneKubeEdge.v1.oneKubeEdge/GetClusterSummary"
	OneKubeEdge_CreateNameSpace_FullMethodName              = "/oneKubeEdge.v1.oneKubeEdge/CreateNameSpace"
	OneKubeEdge_ListNameSpace_FullMethodName                = "/oneKubeEdge.v1.oneKubeEdge/ListNameSpace"
	OneKubeEdge_DelNameSpace_FullMethodName                 = "/oneKubeEdge.v1.oneKubeEdge/DelNameSpace"
	OneKubeEdge_CreateConfigMap_FullMethodName              = "/oneKubeEdge.v1.oneKubeEdge/CreateConfigMap"
	OneKubeEdge_ListConfigMap_FullMethodName                = "/oneKubeEdge.v1.oneKubeEdge/ListConfigMap"
	OneKubeEdge_GetConfigMap_FullMethodName                 = "/oneKubeEdge.v1.oneKubeEdge/GetConfigMap"
	OneKubeEdge_DelConfigMap_FullMethodName                 = "/oneKubeEdge.v1.oneKubeEdge/DelConfigMap"
	OneKubeEdge_UpdateConfigMap_FullMethodName              = "/oneKubeEdge.v1.oneKubeEdge/UpdateConfigMap"
	OneKubeEdge_ListSecret_FullMethodName                   = "/oneKubeEdge.v1.oneKubeEdge/ListSecret"
	OneKubeEdge_GetSecret_FullMethodName                    = "/oneKubeEdge.v1.oneKubeEdge/GetSecret"
	OneKubeEdge_DelSecret_FullMethodName                    = "/oneKubeEdge.v1.oneKubeEdge/DelSecret"
	OneKubeEdge_GetExpiringSoonKubernetesTls_FullMethodName = "/oneKubeEdge.v1.oneKubeEdge/GetExpiringSoonKubernetesTls"
	OneKubeEdge_CreateTlsSecret_FullMethodName              = "/oneKubeEdge.v1.oneKubeEdge/CreateTlsSecret"
	OneKubeEdge_CreateOpaqueSecret_FullMethodName           = "/oneKubeEdge.v1.oneKubeEdge/CreateOpaqueSecret"
	OneKubeEdge_CreateDockerConfigJsonSecret_FullMethodName = "/oneKubeEdge.v1.oneKubeEdge/CreateDockerConfigJsonSecret"
	OneKubeEdge_CreateBasicAuthSecret_FullMethodName        = "/oneKubeEdge.v1.oneKubeEdge/CreateBasicAuthSecret"
	OneKubeEdge_CreateSshAuthSecret_FullMethodName          = "/oneKubeEdge.v1.oneKubeEdge/CreateSshAuthSecret"
	OneKubeEdge_UpdateTlsSecret_FullMethodName              = "/oneKubeEdge.v1.oneKubeEdge/UpdateTlsSecret"
	OneKubeEdge_UpdateOpaqueSecret_FullMethodName           = "/oneKubeEdge.v1.oneKubeEdge/UpdateOpaqueSecret"
	OneKubeEdge_UpdateDockerConfigJsonSecret_FullMethodName = "/oneKubeEdge.v1.oneKubeEdge/UpdateDockerConfigJsonSecret"
	OneKubeEdge_UpdateBasicAuthSecret_FullMethodName        = "/oneKubeEdge.v1.oneKubeEdge/UpdateBasicAuthSecret"
	OneKubeEdge_UpdateSshAuthSecret_FullMethodName          = "/oneKubeEdge.v1.oneKubeEdge/UpdateSshAuthSecret"
	OneKubeEdge_CreateDeployment_FullMethodName             = "/oneKubeEdge.v1.oneKubeEdge/CreateDeployment"
	OneKubeEdge_ListDeployment_FullMethodName               = "/oneKubeEdge.v1.oneKubeEdge/ListDeployment"
	OneKubeEdge_GetDeployment_FullMethodName                = "/oneKubeEdge.v1.oneKubeEdge/GetDeployment"
	OneKubeEdge_DelDeployment_FullMethodName                = "/oneKubeEdge.v1.oneKubeEdge/DelDeployment"
	OneKubeEdge_ListDeploymentStatus_FullMethodName         = "/oneKubeEdge.v1.oneKubeEdge/ListDeploymentStatus"
	OneKubeEdge_UpdateDeployment_FullMethodName             = "/oneKubeEdge.v1.oneKubeEdge/UpdateDeployment"
	OneKubeEdge_UpdateDeploymentReplaceSet_FullMethodName   = "/oneKubeEdge.v1.oneKubeEdge/UpdateDeploymentReplaceSet"
	OneKubeEdge_ListRolloutHis_FullMethodName               = "/oneKubeEdge.v1.oneKubeEdge/ListRolloutHis"
	OneKubeEdge_FilterDeployment_FullMethodName             = "/oneKubeEdge.v1.oneKubeEdge/FilterDeployment"
	OneKubeEdge_CreateJob_FullMethodName                    = "/oneKubeEdge.v1.oneKubeEdge/CreateJob"
	OneKubeEdge_ListJob_FullMethodName                      = "/oneKubeEdge.v1.oneKubeEdge/ListJob"
	OneKubeEdge_GetJob_FullMethodName                       = "/oneKubeEdge.v1.oneKubeEdge/GetJob"
	OneKubeEdge_DelJob_FullMethodName                       = "/oneKubeEdge.v1.oneKubeEdge/DelJob"
	OneKubeEdge_GetNodeMetrics_FullMethodName               = "/oneKubeEdge.v1.oneKubeEdge/GetNodeMetrics"
	OneKubeEdge_GetPodMetrics_FullMethodName                = "/oneKubeEdge.v1.oneKubeEdge/GetPodMetrics"
	OneKubeEdge_GetNode_FullMethodName                      = "/oneKubeEdge.v1.oneKubeEdge/GetNode"
	OneKubeEdge_ListNode_FullMethodName                     = "/oneKubeEdge.v1.oneKubeEdge/ListNode"
	OneKubeEdge_ListPod_FullMethodName                      = "/oneKubeEdge.v1.oneKubeEdge/ListPod"
	OneKubeEdge_GetPod_FullMethodName                       = "/oneKubeEdge.v1.oneKubeEdge/GetPod"
	OneKubeEdge_SearchPod_FullMethodName                    = "/oneKubeEdge.v1.oneKubeEdge/SearchPod"
	OneKubeEdge_DelPod_FullMethodName                       = "/oneKubeEdge.v1.oneKubeEdge/DelPod"
	OneKubeEdge_EvictPod_FullMethodName                     = "/oneKubeEdge.v1.oneKubeEdge/EvictPod"
	OneKubeEdge_DelEvictPod_FullMethodName                  = "/oneKubeEdge.v1.oneKubeEdge/DelEvictPod"
	OneKubeEdge_CreateService_FullMethodName                = "/oneKubeEdge.v1.oneKubeEdge/CreateService"
	OneKubeEdge_ListService_FullMethodName                  = "/oneKubeEdge.v1.oneKubeEdge/ListService"
	OneKubeEdge_GetService_FullMethodName                   = "/oneKubeEdge.v1.oneKubeEdge/GetService"
	OneKubeEdge_DelService_FullMethodName                   = "/oneKubeEdge.v1.oneKubeEdge/DelService"
	OneKubeEdge_CreateIngress_FullMethodName                = "/oneKubeEdge.v1.oneKubeEdge/CreateIngress"
	OneKubeEdge_UpdateIngress_FullMethodName                = "/oneKubeEdge.v1.oneKubeEdge/UpdateIngress"
	OneKubeEdge_ListIngress_FullMethodName                  = "/oneKubeEdge.v1.oneKubeEdge/ListIngress"
	OneKubeEdge_GetIngress_FullMethodName                   = "/oneKubeEdge.v1.oneKubeEdge/GetIngress"
	OneKubeEdge_DelIngress_FullMethodName                   = "/oneKubeEdge.v1.oneKubeEdge/DelIngress"
	OneKubeEdge_CreateLoadBalancer_FullMethodName           = "/oneKubeEdge.v1.oneKubeEdge/CreateLoadBalancer"
	OneKubeEdge_ListLoadBalancer_FullMethodName             = "/oneKubeEdge.v1.oneKubeEdge/ListLoadBalancer"
	OneKubeEdge_GetLoadBalancer_FullMethodName              = "/oneKubeEdge.v1.oneKubeEdge/GetLoadBalancer"
	OneKubeEdge_DelLoadBalancer_FullMethodName              = "/oneKubeEdge.v1.oneKubeEdge/DelLoadBalancer"
	OneKubeEdge_CreateStatefulSet_FullMethodName            = "/oneKubeEdge.v1.oneKubeEdge/CreateStatefulSet"
	OneKubeEdge_ListStatefulSet_FullMethodName              = "/oneKubeEdge.v1.oneKubeEdge/ListStatefulSet"
	OneKubeEdge_GetStatefulSet_FullMethodName               = "/oneKubeEdge.v1.oneKubeEdge/GetStatefulSet"
	OneKubeEdge_DelStatefulSet_FullMethodName               = "/oneKubeEdge.v1.oneKubeEdge/DelStatefulSet"
	OneKubeEdge_ListPersistentVolume_FullMethodName         = "/oneKubeEdge.v1.oneKubeEdge/ListPersistentVolume"
	OneKubeEdge_ListPersistentVolumeClaim_FullMethodName    = "/oneKubeEdge.v1.oneKubeEdge/ListPersistentVolumeClaim"
)

// OneKubeEdgeClient is the client API for OneKubeEdge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OneKubeEdgeClient interface {
	GetClusterSummary(ctx context.Context, in *GetClusterSummaryReq, opts ...grpc.CallOption) (*GetClusterSummaryReply, error)
	// nameSpace
	CreateNameSpace(ctx context.Context, in *CreateNameSpaceReq, opts ...grpc.CallOption) (*CreateNameSpaceReply, error)
	ListNameSpace(ctx context.Context, in *ListNameSpaceReq, opts ...grpc.CallOption) (*ListNameSpaceReply, error)
	// rpc GetNameSpace (GetNameSpaceReq) returns (GetNameSpaceReply) {};
	DelNameSpace(ctx context.Context, in *DelNameSpaceReq, opts ...grpc.CallOption) (*DelNameSpaceReply, error)
	// ConfigMap
	CreateConfigMap(ctx context.Context, in *CreateConfigMapReq, opts ...grpc.CallOption) (*CreateConfigMapReply, error)
	ListConfigMap(ctx context.Context, in *ListConfigMapReq, opts ...grpc.CallOption) (*ListConfigMapReply, error)
	GetConfigMap(ctx context.Context, in *GetConfigMapReq, opts ...grpc.CallOption) (*GetConfigMapReply, error)
	DelConfigMap(ctx context.Context, in *DelConfigMapReq, opts ...grpc.CallOption) (*DelConfigMapReply, error)
	UpdateConfigMap(ctx context.Context, in *UpdateConfigMapReq, opts ...grpc.CallOption) (*UpdateConfigMapReply, error)
	// Secret
	ListSecret(ctx context.Context, in *ListSecretReq, opts ...grpc.CallOption) (*ListSecretReply, error)
	GetSecret(ctx context.Context, in *GetSecretReq, opts ...grpc.CallOption) (*GetSecretReply, error)
	DelSecret(ctx context.Context, in *DelSecretReq, opts ...grpc.CallOption) (*DelSecretReply, error)
	GetExpiringSoonKubernetesTls(ctx context.Context, in *GetExpiringSoonKubernetesTlsReq, opts ...grpc.CallOption) (*GetExpiringSoonKubernetesTlsReply, error)
	CreateTlsSecret(ctx context.Context, in *CreateTlsSecretReq, opts ...grpc.CallOption) (*CreateTlsSecretReply, error)
	CreateOpaqueSecret(ctx context.Context, in *CreateOpaqueSecretReq, opts ...grpc.CallOption) (*CreateOpaqueSecretReply, error)
	CreateDockerConfigJsonSecret(ctx context.Context, in *CreateDockerConfigJsonSecretReq, opts ...grpc.CallOption) (*CreateDockerConfigJsonSecretReply, error)
	CreateBasicAuthSecret(ctx context.Context, in *CreateBasicAuthSecretReq, opts ...grpc.CallOption) (*CreateBasicAuthSecretReply, error)
	CreateSshAuthSecret(ctx context.Context, in *CreateSshAuthSecretReq, opts ...grpc.CallOption) (*CreateSshAuthSecretReply, error)
	// rpc CreateTokenSecret (CreateTokenSecretReq) returns (CreateTokenSecretReply) {};
	UpdateTlsSecret(ctx context.Context, in *UpdateTlsSecretReq, opts ...grpc.CallOption) (*UpdateTlsSecretReply, error)
	UpdateOpaqueSecret(ctx context.Context, in *UpdateOpaqueSecretReq, opts ...grpc.CallOption) (*UpdateOpaqueSecretReply, error)
	UpdateDockerConfigJsonSecret(ctx context.Context, in *UpdateDockerConfigJsonSecretReq, opts ...grpc.CallOption) (*UpdateDockerConfigJsonSecretReply, error)
	UpdateBasicAuthSecret(ctx context.Context, in *UpdateBasicAuthSecretReq, opts ...grpc.CallOption) (*UpdateBasicAuthSecretReply, error)
	UpdateSshAuthSecret(ctx context.Context, in *UpdateSshAuthSecretReq, opts ...grpc.CallOption) (*UpdateSshAuthSecretReply, error)
	// Deployment
	CreateDeployment(ctx context.Context, in *CreateDeploymentReq, opts ...grpc.CallOption) (*CreateDeploymentReply, error)
	ListDeployment(ctx context.Context, in *ListDeploymentReq, opts ...grpc.CallOption) (*ListDeploymentReply, error)
	GetDeployment(ctx context.Context, in *GetDeploymentReq, opts ...grpc.CallOption) (*GetDeploymentReply, error)
	DelDeployment(ctx context.Context, in *DelDeploymentReq, opts ...grpc.CallOption) (*DelDeploymentReply, error)
	ListDeploymentStatus(ctx context.Context, in *ListDeploymentStatusReq, opts ...grpc.CallOption) (*ListDeploymentStatusReply, error)
	UpdateDeployment(ctx context.Context, in *UpdateDeploymentReq, opts ...grpc.CallOption) (*UpdateDeploymentReply, error)
	UpdateDeploymentReplaceSet(ctx context.Context, in *UpdateDeploymentReplaceSetReq, opts ...grpc.CallOption) (*UpdateDeploymentReplaceSetReply, error)
	ListRolloutHis(ctx context.Context, in *ListRolloutHisReq, opts ...grpc.CallOption) (*ListRolloutHisReply, error)
	FilterDeployment(ctx context.Context, in *FilterDeploymentReq, opts ...grpc.CallOption) (*FilterDeploymentReply, error)
	// Job
	CreateJob(ctx context.Context, in *CreateJobReq, opts ...grpc.CallOption) (*CreateJobReply, error)
	ListJob(ctx context.Context, in *ListJobReq, opts ...grpc.CallOption) (*ListJobReply, error)
	GetJob(ctx context.Context, in *GetJobReq, opts ...grpc.CallOption) (*GetJobReply, error)
	DelJob(ctx context.Context, in *DelJobReq, opts ...grpc.CallOption) (*DelJobReply, error)
	// Metrics
	GetNodeMetrics(ctx context.Context, in *GetNodeMetricsReq, opts ...grpc.CallOption) (*GetNodeMetricsReply, error)
	GetPodMetrics(ctx context.Context, in *GetPodMetricsReq, opts ...grpc.CallOption) (*GetPodMetricsReply, error)
	// Node
	GetNode(ctx context.Context, in *GetNodeReq, opts ...grpc.CallOption) (*GetNodeReply, error)
	ListNode(ctx context.Context, in *ListNodeReq, opts ...grpc.CallOption) (*ListNodeReply, error)
	// Pod
	ListPod(ctx context.Context, in *ListPodReq, opts ...grpc.CallOption) (*ListPodReply, error)
	GetPod(ctx context.Context, in *GetPodReq, opts ...grpc.CallOption) (*GetPodReply, error)
	SearchPod(ctx context.Context, in *SearchPodReq, opts ...grpc.CallOption) (*SearchPodReply, error)
	DelPod(ctx context.Context, in *DelPodReq, opts ...grpc.CallOption) (*DelPodReply, error)
	EvictPod(ctx context.Context, in *EvictPodReq, opts ...grpc.CallOption) (*EvictPodReply, error)
	DelEvictPod(ctx context.Context, in *DelEvictPodReq, opts ...grpc.CallOption) (*DelEvictPodReply, error)
	// Service
	CreateService(ctx context.Context, in *CreateServiceReq, opts ...grpc.CallOption) (*CreateServiceReply, error)
	ListService(ctx context.Context, in *ListServiceReq, opts ...grpc.CallOption) (*ListServiceReply, error)
	GetService(ctx context.Context, in *GetServiceReq, opts ...grpc.CallOption) (*GetServiceReply, error)
	DelService(ctx context.Context, in *DelServiceReq, opts ...grpc.CallOption) (*DelServiceReply, error)
	CreateIngress(ctx context.Context, in *CreateIngressReq, opts ...grpc.CallOption) (*CreateIngressReply, error)
	UpdateIngress(ctx context.Context, in *UpdateIngressReq, opts ...grpc.CallOption) (*UpdateIngressReply, error)
	ListIngress(ctx context.Context, in *ListIngressReq, opts ...grpc.CallOption) (*ListIngressReply, error)
	GetIngress(ctx context.Context, in *GetIngressReq, opts ...grpc.CallOption) (*GetIngressReply, error)
	DelIngress(ctx context.Context, in *DelIngressReq, opts ...grpc.CallOption) (*DelIngressReply, error)
	CreateLoadBalancer(ctx context.Context, in *CreateLoadBalancerReq, opts ...grpc.CallOption) (*CreateLoadBalancerReply, error)
	ListLoadBalancer(ctx context.Context, in *ListLoadBalancerReq, opts ...grpc.CallOption) (*ListLoadBalancerReply, error)
	GetLoadBalancer(ctx context.Context, in *GetLoadBalancerReq, opts ...grpc.CallOption) (*GetLoadBalancerReply, error)
	DelLoadBalancer(ctx context.Context, in *DelLoadBalancerReq, opts ...grpc.CallOption) (*DelLoadBalancerReply, error)
	// StatefulSet
	CreateStatefulSet(ctx context.Context, in *CreateStatefulSetReq, opts ...grpc.CallOption) (*CreateStatefulSetReply, error)
	ListStatefulSet(ctx context.Context, in *ListStatefulSetReq, opts ...grpc.CallOption) (*ListStatefulSetReply, error)
	GetStatefulSet(ctx context.Context, in *GetStatefulSetReq, opts ...grpc.CallOption) (*GetStatefulSetReply, error)
	DelStatefulSet(ctx context.Context, in *DelStatefulSetReq, opts ...grpc.CallOption) (*DelStatefulSetReply, error)
	// Volume
	ListPersistentVolume(ctx context.Context, in *ListPersistentVolumeReq, opts ...grpc.CallOption) (*ListPersistentVolumeReply, error)
	ListPersistentVolumeClaim(ctx context.Context, in *ListPersistentVolumeClaimReq, opts ...grpc.CallOption) (*ListPersistentVolumeClaimReply, error)
}

type oneKubeEdgeClient struct {
	cc grpc.ClientConnInterface
}

func NewOneKubeEdgeClient(cc grpc.ClientConnInterface) OneKubeEdgeClient {
	return &oneKubeEdgeClient{cc}
}

func (c *oneKubeEdgeClient) GetClusterSummary(ctx context.Context, in *GetClusterSummaryReq, opts ...grpc.CallOption) (*GetClusterSummaryReply, error) {
	out := new(GetClusterSummaryReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_GetClusterSummary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) CreateNameSpace(ctx context.Context, in *CreateNameSpaceReq, opts ...grpc.CallOption) (*CreateNameSpaceReply, error) {
	out := new(CreateNameSpaceReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_CreateNameSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) ListNameSpace(ctx context.Context, in *ListNameSpaceReq, opts ...grpc.CallOption) (*ListNameSpaceReply, error) {
	out := new(ListNameSpaceReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_ListNameSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) DelNameSpace(ctx context.Context, in *DelNameSpaceReq, opts ...grpc.CallOption) (*DelNameSpaceReply, error) {
	out := new(DelNameSpaceReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_DelNameSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) CreateConfigMap(ctx context.Context, in *CreateConfigMapReq, opts ...grpc.CallOption) (*CreateConfigMapReply, error) {
	out := new(CreateConfigMapReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_CreateConfigMap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) ListConfigMap(ctx context.Context, in *ListConfigMapReq, opts ...grpc.CallOption) (*ListConfigMapReply, error) {
	out := new(ListConfigMapReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_ListConfigMap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) GetConfigMap(ctx context.Context, in *GetConfigMapReq, opts ...grpc.CallOption) (*GetConfigMapReply, error) {
	out := new(GetConfigMapReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_GetConfigMap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) DelConfigMap(ctx context.Context, in *DelConfigMapReq, opts ...grpc.CallOption) (*DelConfigMapReply, error) {
	out := new(DelConfigMapReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_DelConfigMap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) UpdateConfigMap(ctx context.Context, in *UpdateConfigMapReq, opts ...grpc.CallOption) (*UpdateConfigMapReply, error) {
	out := new(UpdateConfigMapReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_UpdateConfigMap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) ListSecret(ctx context.Context, in *ListSecretReq, opts ...grpc.CallOption) (*ListSecretReply, error) {
	out := new(ListSecretReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_ListSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) GetSecret(ctx context.Context, in *GetSecretReq, opts ...grpc.CallOption) (*GetSecretReply, error) {
	out := new(GetSecretReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_GetSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) DelSecret(ctx context.Context, in *DelSecretReq, opts ...grpc.CallOption) (*DelSecretReply, error) {
	out := new(DelSecretReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_DelSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) GetExpiringSoonKubernetesTls(ctx context.Context, in *GetExpiringSoonKubernetesTlsReq, opts ...grpc.CallOption) (*GetExpiringSoonKubernetesTlsReply, error) {
	out := new(GetExpiringSoonKubernetesTlsReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_GetExpiringSoonKubernetesTls_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) CreateTlsSecret(ctx context.Context, in *CreateTlsSecretReq, opts ...grpc.CallOption) (*CreateTlsSecretReply, error) {
	out := new(CreateTlsSecretReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_CreateTlsSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) CreateOpaqueSecret(ctx context.Context, in *CreateOpaqueSecretReq, opts ...grpc.CallOption) (*CreateOpaqueSecretReply, error) {
	out := new(CreateOpaqueSecretReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_CreateOpaqueSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) CreateDockerConfigJsonSecret(ctx context.Context, in *CreateDockerConfigJsonSecretReq, opts ...grpc.CallOption) (*CreateDockerConfigJsonSecretReply, error) {
	out := new(CreateDockerConfigJsonSecretReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_CreateDockerConfigJsonSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) CreateBasicAuthSecret(ctx context.Context, in *CreateBasicAuthSecretReq, opts ...grpc.CallOption) (*CreateBasicAuthSecretReply, error) {
	out := new(CreateBasicAuthSecretReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_CreateBasicAuthSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) CreateSshAuthSecret(ctx context.Context, in *CreateSshAuthSecretReq, opts ...grpc.CallOption) (*CreateSshAuthSecretReply, error) {
	out := new(CreateSshAuthSecretReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_CreateSshAuthSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) UpdateTlsSecret(ctx context.Context, in *UpdateTlsSecretReq, opts ...grpc.CallOption) (*UpdateTlsSecretReply, error) {
	out := new(UpdateTlsSecretReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_UpdateTlsSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) UpdateOpaqueSecret(ctx context.Context, in *UpdateOpaqueSecretReq, opts ...grpc.CallOption) (*UpdateOpaqueSecretReply, error) {
	out := new(UpdateOpaqueSecretReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_UpdateOpaqueSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) UpdateDockerConfigJsonSecret(ctx context.Context, in *UpdateDockerConfigJsonSecretReq, opts ...grpc.CallOption) (*UpdateDockerConfigJsonSecretReply, error) {
	out := new(UpdateDockerConfigJsonSecretReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_UpdateDockerConfigJsonSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) UpdateBasicAuthSecret(ctx context.Context, in *UpdateBasicAuthSecretReq, opts ...grpc.CallOption) (*UpdateBasicAuthSecretReply, error) {
	out := new(UpdateBasicAuthSecretReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_UpdateBasicAuthSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) UpdateSshAuthSecret(ctx context.Context, in *UpdateSshAuthSecretReq, opts ...grpc.CallOption) (*UpdateSshAuthSecretReply, error) {
	out := new(UpdateSshAuthSecretReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_UpdateSshAuthSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) CreateDeployment(ctx context.Context, in *CreateDeploymentReq, opts ...grpc.CallOption) (*CreateDeploymentReply, error) {
	out := new(CreateDeploymentReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_CreateDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) ListDeployment(ctx context.Context, in *ListDeploymentReq, opts ...grpc.CallOption) (*ListDeploymentReply, error) {
	out := new(ListDeploymentReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_ListDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) GetDeployment(ctx context.Context, in *GetDeploymentReq, opts ...grpc.CallOption) (*GetDeploymentReply, error) {
	out := new(GetDeploymentReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_GetDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) DelDeployment(ctx context.Context, in *DelDeploymentReq, opts ...grpc.CallOption) (*DelDeploymentReply, error) {
	out := new(DelDeploymentReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_DelDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) ListDeploymentStatus(ctx context.Context, in *ListDeploymentStatusReq, opts ...grpc.CallOption) (*ListDeploymentStatusReply, error) {
	out := new(ListDeploymentStatusReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_ListDeploymentStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) UpdateDeployment(ctx context.Context, in *UpdateDeploymentReq, opts ...grpc.CallOption) (*UpdateDeploymentReply, error) {
	out := new(UpdateDeploymentReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_UpdateDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) UpdateDeploymentReplaceSet(ctx context.Context, in *UpdateDeploymentReplaceSetReq, opts ...grpc.CallOption) (*UpdateDeploymentReplaceSetReply, error) {
	out := new(UpdateDeploymentReplaceSetReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_UpdateDeploymentReplaceSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) ListRolloutHis(ctx context.Context, in *ListRolloutHisReq, opts ...grpc.CallOption) (*ListRolloutHisReply, error) {
	out := new(ListRolloutHisReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_ListRolloutHis_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) FilterDeployment(ctx context.Context, in *FilterDeploymentReq, opts ...grpc.CallOption) (*FilterDeploymentReply, error) {
	out := new(FilterDeploymentReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_FilterDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) CreateJob(ctx context.Context, in *CreateJobReq, opts ...grpc.CallOption) (*CreateJobReply, error) {
	out := new(CreateJobReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_CreateJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) ListJob(ctx context.Context, in *ListJobReq, opts ...grpc.CallOption) (*ListJobReply, error) {
	out := new(ListJobReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_ListJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) GetJob(ctx context.Context, in *GetJobReq, opts ...grpc.CallOption) (*GetJobReply, error) {
	out := new(GetJobReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_GetJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) DelJob(ctx context.Context, in *DelJobReq, opts ...grpc.CallOption) (*DelJobReply, error) {
	out := new(DelJobReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_DelJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) GetNodeMetrics(ctx context.Context, in *GetNodeMetricsReq, opts ...grpc.CallOption) (*GetNodeMetricsReply, error) {
	out := new(GetNodeMetricsReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_GetNodeMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) GetPodMetrics(ctx context.Context, in *GetPodMetricsReq, opts ...grpc.CallOption) (*GetPodMetricsReply, error) {
	out := new(GetPodMetricsReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_GetPodMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) GetNode(ctx context.Context, in *GetNodeReq, opts ...grpc.CallOption) (*GetNodeReply, error) {
	out := new(GetNodeReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_GetNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) ListNode(ctx context.Context, in *ListNodeReq, opts ...grpc.CallOption) (*ListNodeReply, error) {
	out := new(ListNodeReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_ListNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) ListPod(ctx context.Context, in *ListPodReq, opts ...grpc.CallOption) (*ListPodReply, error) {
	out := new(ListPodReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_ListPod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) GetPod(ctx context.Context, in *GetPodReq, opts ...grpc.CallOption) (*GetPodReply, error) {
	out := new(GetPodReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_GetPod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) SearchPod(ctx context.Context, in *SearchPodReq, opts ...grpc.CallOption) (*SearchPodReply, error) {
	out := new(SearchPodReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_SearchPod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) DelPod(ctx context.Context, in *DelPodReq, opts ...grpc.CallOption) (*DelPodReply, error) {
	out := new(DelPodReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_DelPod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) EvictPod(ctx context.Context, in *EvictPodReq, opts ...grpc.CallOption) (*EvictPodReply, error) {
	out := new(EvictPodReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_EvictPod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) DelEvictPod(ctx context.Context, in *DelEvictPodReq, opts ...grpc.CallOption) (*DelEvictPodReply, error) {
	out := new(DelEvictPodReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_DelEvictPod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) CreateService(ctx context.Context, in *CreateServiceReq, opts ...grpc.CallOption) (*CreateServiceReply, error) {
	out := new(CreateServiceReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_CreateService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) ListService(ctx context.Context, in *ListServiceReq, opts ...grpc.CallOption) (*ListServiceReply, error) {
	out := new(ListServiceReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_ListService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) GetService(ctx context.Context, in *GetServiceReq, opts ...grpc.CallOption) (*GetServiceReply, error) {
	out := new(GetServiceReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_GetService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) DelService(ctx context.Context, in *DelServiceReq, opts ...grpc.CallOption) (*DelServiceReply, error) {
	out := new(DelServiceReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_DelService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) CreateIngress(ctx context.Context, in *CreateIngressReq, opts ...grpc.CallOption) (*CreateIngressReply, error) {
	out := new(CreateIngressReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_CreateIngress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) UpdateIngress(ctx context.Context, in *UpdateIngressReq, opts ...grpc.CallOption) (*UpdateIngressReply, error) {
	out := new(UpdateIngressReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_UpdateIngress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) ListIngress(ctx context.Context, in *ListIngressReq, opts ...grpc.CallOption) (*ListIngressReply, error) {
	out := new(ListIngressReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_ListIngress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) GetIngress(ctx context.Context, in *GetIngressReq, opts ...grpc.CallOption) (*GetIngressReply, error) {
	out := new(GetIngressReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_GetIngress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) DelIngress(ctx context.Context, in *DelIngressReq, opts ...grpc.CallOption) (*DelIngressReply, error) {
	out := new(DelIngressReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_DelIngress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) CreateLoadBalancer(ctx context.Context, in *CreateLoadBalancerReq, opts ...grpc.CallOption) (*CreateLoadBalancerReply, error) {
	out := new(CreateLoadBalancerReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_CreateLoadBalancer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) ListLoadBalancer(ctx context.Context, in *ListLoadBalancerReq, opts ...grpc.CallOption) (*ListLoadBalancerReply, error) {
	out := new(ListLoadBalancerReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_ListLoadBalancer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) GetLoadBalancer(ctx context.Context, in *GetLoadBalancerReq, opts ...grpc.CallOption) (*GetLoadBalancerReply, error) {
	out := new(GetLoadBalancerReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_GetLoadBalancer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) DelLoadBalancer(ctx context.Context, in *DelLoadBalancerReq, opts ...grpc.CallOption) (*DelLoadBalancerReply, error) {
	out := new(DelLoadBalancerReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_DelLoadBalancer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) CreateStatefulSet(ctx context.Context, in *CreateStatefulSetReq, opts ...grpc.CallOption) (*CreateStatefulSetReply, error) {
	out := new(CreateStatefulSetReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_CreateStatefulSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) ListStatefulSet(ctx context.Context, in *ListStatefulSetReq, opts ...grpc.CallOption) (*ListStatefulSetReply, error) {
	out := new(ListStatefulSetReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_ListStatefulSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) GetStatefulSet(ctx context.Context, in *GetStatefulSetReq, opts ...grpc.CallOption) (*GetStatefulSetReply, error) {
	out := new(GetStatefulSetReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_GetStatefulSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) DelStatefulSet(ctx context.Context, in *DelStatefulSetReq, opts ...grpc.CallOption) (*DelStatefulSetReply, error) {
	out := new(DelStatefulSetReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_DelStatefulSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) ListPersistentVolume(ctx context.Context, in *ListPersistentVolumeReq, opts ...grpc.CallOption) (*ListPersistentVolumeReply, error) {
	out := new(ListPersistentVolumeReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_ListPersistentVolume_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneKubeEdgeClient) ListPersistentVolumeClaim(ctx context.Context, in *ListPersistentVolumeClaimReq, opts ...grpc.CallOption) (*ListPersistentVolumeClaimReply, error) {
	out := new(ListPersistentVolumeClaimReply)
	err := c.cc.Invoke(ctx, OneKubeEdge_ListPersistentVolumeClaim_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OneKubeEdgeServer is the server API for OneKubeEdge service.
// All implementations must embed UnimplementedOneKubeEdgeServer
// for forward compatibility
type OneKubeEdgeServer interface {
	GetClusterSummary(context.Context, *GetClusterSummaryReq) (*GetClusterSummaryReply, error)
	// nameSpace
	CreateNameSpace(context.Context, *CreateNameSpaceReq) (*CreateNameSpaceReply, error)
	ListNameSpace(context.Context, *ListNameSpaceReq) (*ListNameSpaceReply, error)
	// rpc GetNameSpace (GetNameSpaceReq) returns (GetNameSpaceReply) {};
	DelNameSpace(context.Context, *DelNameSpaceReq) (*DelNameSpaceReply, error)
	// ConfigMap
	CreateConfigMap(context.Context, *CreateConfigMapReq) (*CreateConfigMapReply, error)
	ListConfigMap(context.Context, *ListConfigMapReq) (*ListConfigMapReply, error)
	GetConfigMap(context.Context, *GetConfigMapReq) (*GetConfigMapReply, error)
	DelConfigMap(context.Context, *DelConfigMapReq) (*DelConfigMapReply, error)
	UpdateConfigMap(context.Context, *UpdateConfigMapReq) (*UpdateConfigMapReply, error)
	// Secret
	ListSecret(context.Context, *ListSecretReq) (*ListSecretReply, error)
	GetSecret(context.Context, *GetSecretReq) (*GetSecretReply, error)
	DelSecret(context.Context, *DelSecretReq) (*DelSecretReply, error)
	GetExpiringSoonKubernetesTls(context.Context, *GetExpiringSoonKubernetesTlsReq) (*GetExpiringSoonKubernetesTlsReply, error)
	CreateTlsSecret(context.Context, *CreateTlsSecretReq) (*CreateTlsSecretReply, error)
	CreateOpaqueSecret(context.Context, *CreateOpaqueSecretReq) (*CreateOpaqueSecretReply, error)
	CreateDockerConfigJsonSecret(context.Context, *CreateDockerConfigJsonSecretReq) (*CreateDockerConfigJsonSecretReply, error)
	CreateBasicAuthSecret(context.Context, *CreateBasicAuthSecretReq) (*CreateBasicAuthSecretReply, error)
	CreateSshAuthSecret(context.Context, *CreateSshAuthSecretReq) (*CreateSshAuthSecretReply, error)
	// rpc CreateTokenSecret (CreateTokenSecretReq) returns (CreateTokenSecretReply) {};
	UpdateTlsSecret(context.Context, *UpdateTlsSecretReq) (*UpdateTlsSecretReply, error)
	UpdateOpaqueSecret(context.Context, *UpdateOpaqueSecretReq) (*UpdateOpaqueSecretReply, error)
	UpdateDockerConfigJsonSecret(context.Context, *UpdateDockerConfigJsonSecretReq) (*UpdateDockerConfigJsonSecretReply, error)
	UpdateBasicAuthSecret(context.Context, *UpdateBasicAuthSecretReq) (*UpdateBasicAuthSecretReply, error)
	UpdateSshAuthSecret(context.Context, *UpdateSshAuthSecretReq) (*UpdateSshAuthSecretReply, error)
	// Deployment
	CreateDeployment(context.Context, *CreateDeploymentReq) (*CreateDeploymentReply, error)
	ListDeployment(context.Context, *ListDeploymentReq) (*ListDeploymentReply, error)
	GetDeployment(context.Context, *GetDeploymentReq) (*GetDeploymentReply, error)
	DelDeployment(context.Context, *DelDeploymentReq) (*DelDeploymentReply, error)
	ListDeploymentStatus(context.Context, *ListDeploymentStatusReq) (*ListDeploymentStatusReply, error)
	UpdateDeployment(context.Context, *UpdateDeploymentReq) (*UpdateDeploymentReply, error)
	UpdateDeploymentReplaceSet(context.Context, *UpdateDeploymentReplaceSetReq) (*UpdateDeploymentReplaceSetReply, error)
	ListRolloutHis(context.Context, *ListRolloutHisReq) (*ListRolloutHisReply, error)
	FilterDeployment(context.Context, *FilterDeploymentReq) (*FilterDeploymentReply, error)
	// Job
	CreateJob(context.Context, *CreateJobReq) (*CreateJobReply, error)
	ListJob(context.Context, *ListJobReq) (*ListJobReply, error)
	GetJob(context.Context, *GetJobReq) (*GetJobReply, error)
	DelJob(context.Context, *DelJobReq) (*DelJobReply, error)
	// Metrics
	GetNodeMetrics(context.Context, *GetNodeMetricsReq) (*GetNodeMetricsReply, error)
	GetPodMetrics(context.Context, *GetPodMetricsReq) (*GetPodMetricsReply, error)
	// Node
	GetNode(context.Context, *GetNodeReq) (*GetNodeReply, error)
	ListNode(context.Context, *ListNodeReq) (*ListNodeReply, error)
	// Pod
	ListPod(context.Context, *ListPodReq) (*ListPodReply, error)
	GetPod(context.Context, *GetPodReq) (*GetPodReply, error)
	SearchPod(context.Context, *SearchPodReq) (*SearchPodReply, error)
	DelPod(context.Context, *DelPodReq) (*DelPodReply, error)
	EvictPod(context.Context, *EvictPodReq) (*EvictPodReply, error)
	DelEvictPod(context.Context, *DelEvictPodReq) (*DelEvictPodReply, error)
	// Service
	CreateService(context.Context, *CreateServiceReq) (*CreateServiceReply, error)
	ListService(context.Context, *ListServiceReq) (*ListServiceReply, error)
	GetService(context.Context, *GetServiceReq) (*GetServiceReply, error)
	DelService(context.Context, *DelServiceReq) (*DelServiceReply, error)
	CreateIngress(context.Context, *CreateIngressReq) (*CreateIngressReply, error)
	UpdateIngress(context.Context, *UpdateIngressReq) (*UpdateIngressReply, error)
	ListIngress(context.Context, *ListIngressReq) (*ListIngressReply, error)
	GetIngress(context.Context, *GetIngressReq) (*GetIngressReply, error)
	DelIngress(context.Context, *DelIngressReq) (*DelIngressReply, error)
	CreateLoadBalancer(context.Context, *CreateLoadBalancerReq) (*CreateLoadBalancerReply, error)
	ListLoadBalancer(context.Context, *ListLoadBalancerReq) (*ListLoadBalancerReply, error)
	GetLoadBalancer(context.Context, *GetLoadBalancerReq) (*GetLoadBalancerReply, error)
	DelLoadBalancer(context.Context, *DelLoadBalancerReq) (*DelLoadBalancerReply, error)
	// StatefulSet
	CreateStatefulSet(context.Context, *CreateStatefulSetReq) (*CreateStatefulSetReply, error)
	ListStatefulSet(context.Context, *ListStatefulSetReq) (*ListStatefulSetReply, error)
	GetStatefulSet(context.Context, *GetStatefulSetReq) (*GetStatefulSetReply, error)
	DelStatefulSet(context.Context, *DelStatefulSetReq) (*DelStatefulSetReply, error)
	// Volume
	ListPersistentVolume(context.Context, *ListPersistentVolumeReq) (*ListPersistentVolumeReply, error)
	ListPersistentVolumeClaim(context.Context, *ListPersistentVolumeClaimReq) (*ListPersistentVolumeClaimReply, error)
	mustEmbedUnimplementedOneKubeEdgeServer()
}

// UnimplementedOneKubeEdgeServer must be embedded to have forward compatible implementations.
type UnimplementedOneKubeEdgeServer struct {
}

func (UnimplementedOneKubeEdgeServer) GetClusterSummary(context.Context, *GetClusterSummaryReq) (*GetClusterSummaryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterSummary not implemented")
}
func (UnimplementedOneKubeEdgeServer) CreateNameSpace(context.Context, *CreateNameSpaceReq) (*CreateNameSpaceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNameSpace not implemented")
}
func (UnimplementedOneKubeEdgeServer) ListNameSpace(context.Context, *ListNameSpaceReq) (*ListNameSpaceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNameSpace not implemented")
}
func (UnimplementedOneKubeEdgeServer) DelNameSpace(context.Context, *DelNameSpaceReq) (*DelNameSpaceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelNameSpace not implemented")
}
func (UnimplementedOneKubeEdgeServer) CreateConfigMap(context.Context, *CreateConfigMapReq) (*CreateConfigMapReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConfigMap not implemented")
}
func (UnimplementedOneKubeEdgeServer) ListConfigMap(context.Context, *ListConfigMapReq) (*ListConfigMapReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConfigMap not implemented")
}
func (UnimplementedOneKubeEdgeServer) GetConfigMap(context.Context, *GetConfigMapReq) (*GetConfigMapReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigMap not implemented")
}
func (UnimplementedOneKubeEdgeServer) DelConfigMap(context.Context, *DelConfigMapReq) (*DelConfigMapReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelConfigMap not implemented")
}
func (UnimplementedOneKubeEdgeServer) UpdateConfigMap(context.Context, *UpdateConfigMapReq) (*UpdateConfigMapReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfigMap not implemented")
}
func (UnimplementedOneKubeEdgeServer) ListSecret(context.Context, *ListSecretReq) (*ListSecretReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecret not implemented")
}
func (UnimplementedOneKubeEdgeServer) GetSecret(context.Context, *GetSecretReq) (*GetSecretReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecret not implemented")
}
func (UnimplementedOneKubeEdgeServer) DelSecret(context.Context, *DelSecretReq) (*DelSecretReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelSecret not implemented")
}
func (UnimplementedOneKubeEdgeServer) GetExpiringSoonKubernetesTls(context.Context, *GetExpiringSoonKubernetesTlsReq) (*GetExpiringSoonKubernetesTlsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExpiringSoonKubernetesTls not implemented")
}
func (UnimplementedOneKubeEdgeServer) CreateTlsSecret(context.Context, *CreateTlsSecretReq) (*CreateTlsSecretReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTlsSecret not implemented")
}
func (UnimplementedOneKubeEdgeServer) CreateOpaqueSecret(context.Context, *CreateOpaqueSecretReq) (*CreateOpaqueSecretReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOpaqueSecret not implemented")
}
func (UnimplementedOneKubeEdgeServer) CreateDockerConfigJsonSecret(context.Context, *CreateDockerConfigJsonSecretReq) (*CreateDockerConfigJsonSecretReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDockerConfigJsonSecret not implemented")
}
func (UnimplementedOneKubeEdgeServer) CreateBasicAuthSecret(context.Context, *CreateBasicAuthSecretReq) (*CreateBasicAuthSecretReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBasicAuthSecret not implemented")
}
func (UnimplementedOneKubeEdgeServer) CreateSshAuthSecret(context.Context, *CreateSshAuthSecretReq) (*CreateSshAuthSecretReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSshAuthSecret not implemented")
}
func (UnimplementedOneKubeEdgeServer) UpdateTlsSecret(context.Context, *UpdateTlsSecretReq) (*UpdateTlsSecretReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTlsSecret not implemented")
}
func (UnimplementedOneKubeEdgeServer) UpdateOpaqueSecret(context.Context, *UpdateOpaqueSecretReq) (*UpdateOpaqueSecretReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOpaqueSecret not implemented")
}
func (UnimplementedOneKubeEdgeServer) UpdateDockerConfigJsonSecret(context.Context, *UpdateDockerConfigJsonSecretReq) (*UpdateDockerConfigJsonSecretReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDockerConfigJsonSecret not implemented")
}
func (UnimplementedOneKubeEdgeServer) UpdateBasicAuthSecret(context.Context, *UpdateBasicAuthSecretReq) (*UpdateBasicAuthSecretReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBasicAuthSecret not implemented")
}
func (UnimplementedOneKubeEdgeServer) UpdateSshAuthSecret(context.Context, *UpdateSshAuthSecretReq) (*UpdateSshAuthSecretReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSshAuthSecret not implemented")
}
func (UnimplementedOneKubeEdgeServer) CreateDeployment(context.Context, *CreateDeploymentReq) (*CreateDeploymentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeployment not implemented")
}
func (UnimplementedOneKubeEdgeServer) ListDeployment(context.Context, *ListDeploymentReq) (*ListDeploymentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeployment not implemented")
}
func (UnimplementedOneKubeEdgeServer) GetDeployment(context.Context, *GetDeploymentReq) (*GetDeploymentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeployment not implemented")
}
func (UnimplementedOneKubeEdgeServer) DelDeployment(context.Context, *DelDeploymentReq) (*DelDeploymentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelDeployment not implemented")
}
func (UnimplementedOneKubeEdgeServer) ListDeploymentStatus(context.Context, *ListDeploymentStatusReq) (*ListDeploymentStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeploymentStatus not implemented")
}
func (UnimplementedOneKubeEdgeServer) UpdateDeployment(context.Context, *UpdateDeploymentReq) (*UpdateDeploymentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeployment not implemented")
}
func (UnimplementedOneKubeEdgeServer) UpdateDeploymentReplaceSet(context.Context, *UpdateDeploymentReplaceSetReq) (*UpdateDeploymentReplaceSetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeploymentReplaceSet not implemented")
}
func (UnimplementedOneKubeEdgeServer) ListRolloutHis(context.Context, *ListRolloutHisReq) (*ListRolloutHisReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRolloutHis not implemented")
}
func (UnimplementedOneKubeEdgeServer) FilterDeployment(context.Context, *FilterDeploymentReq) (*FilterDeploymentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterDeployment not implemented")
}
func (UnimplementedOneKubeEdgeServer) CreateJob(context.Context, *CreateJobReq) (*CreateJobReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJob not implemented")
}
func (UnimplementedOneKubeEdgeServer) ListJob(context.Context, *ListJobReq) (*ListJobReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJob not implemented")
}
func (UnimplementedOneKubeEdgeServer) GetJob(context.Context, *GetJobReq) (*GetJobReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (UnimplementedOneKubeEdgeServer) DelJob(context.Context, *DelJobReq) (*DelJobReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelJob not implemented")
}
func (UnimplementedOneKubeEdgeServer) GetNodeMetrics(context.Context, *GetNodeMetricsReq) (*GetNodeMetricsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeMetrics not implemented")
}
func (UnimplementedOneKubeEdgeServer) GetPodMetrics(context.Context, *GetPodMetricsReq) (*GetPodMetricsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPodMetrics not implemented")
}
func (UnimplementedOneKubeEdgeServer) GetNode(context.Context, *GetNodeReq) (*GetNodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (UnimplementedOneKubeEdgeServer) ListNode(context.Context, *ListNodeReq) (*ListNodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNode not implemented")
}
func (UnimplementedOneKubeEdgeServer) ListPod(context.Context, *ListPodReq) (*ListPodReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPod not implemented")
}
func (UnimplementedOneKubeEdgeServer) GetPod(context.Context, *GetPodReq) (*GetPodReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPod not implemented")
}
func (UnimplementedOneKubeEdgeServer) SearchPod(context.Context, *SearchPodReq) (*SearchPodReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPod not implemented")
}
func (UnimplementedOneKubeEdgeServer) DelPod(context.Context, *DelPodReq) (*DelPodReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelPod not implemented")
}
func (UnimplementedOneKubeEdgeServer) EvictPod(context.Context, *EvictPodReq) (*EvictPodReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvictPod not implemented")
}
func (UnimplementedOneKubeEdgeServer) DelEvictPod(context.Context, *DelEvictPodReq) (*DelEvictPodReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelEvictPod not implemented")
}
func (UnimplementedOneKubeEdgeServer) CreateService(context.Context, *CreateServiceReq) (*CreateServiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateService not implemented")
}
func (UnimplementedOneKubeEdgeServer) ListService(context.Context, *ListServiceReq) (*ListServiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListService not implemented")
}
func (UnimplementedOneKubeEdgeServer) GetService(context.Context, *GetServiceReq) (*GetServiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetService not implemented")
}
func (UnimplementedOneKubeEdgeServer) DelService(context.Context, *DelServiceReq) (*DelServiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelService not implemented")
}
func (UnimplementedOneKubeEdgeServer) CreateIngress(context.Context, *CreateIngressReq) (*CreateIngressReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIngress not implemented")
}
func (UnimplementedOneKubeEdgeServer) UpdateIngress(context.Context, *UpdateIngressReq) (*UpdateIngressReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIngress not implemented")
}
func (UnimplementedOneKubeEdgeServer) ListIngress(context.Context, *ListIngressReq) (*ListIngressReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIngress not implemented")
}
func (UnimplementedOneKubeEdgeServer) GetIngress(context.Context, *GetIngressReq) (*GetIngressReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIngress not implemented")
}
func (UnimplementedOneKubeEdgeServer) DelIngress(context.Context, *DelIngressReq) (*DelIngressReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelIngress not implemented")
}
func (UnimplementedOneKubeEdgeServer) CreateLoadBalancer(context.Context, *CreateLoadBalancerReq) (*CreateLoadBalancerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLoadBalancer not implemented")
}
func (UnimplementedOneKubeEdgeServer) ListLoadBalancer(context.Context, *ListLoadBalancerReq) (*ListLoadBalancerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLoadBalancer not implemented")
}
func (UnimplementedOneKubeEdgeServer) GetLoadBalancer(context.Context, *GetLoadBalancerReq) (*GetLoadBalancerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoadBalancer not implemented")
}
func (UnimplementedOneKubeEdgeServer) DelLoadBalancer(context.Context, *DelLoadBalancerReq) (*DelLoadBalancerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelLoadBalancer not implemented")
}
func (UnimplementedOneKubeEdgeServer) CreateStatefulSet(context.Context, *CreateStatefulSetReq) (*CreateStatefulSetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStatefulSet not implemented")
}
func (UnimplementedOneKubeEdgeServer) ListStatefulSet(context.Context, *ListStatefulSetReq) (*ListStatefulSetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStatefulSet not implemented")
}
func (UnimplementedOneKubeEdgeServer) GetStatefulSet(context.Context, *GetStatefulSetReq) (*GetStatefulSetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatefulSet not implemented")
}
func (UnimplementedOneKubeEdgeServer) DelStatefulSet(context.Context, *DelStatefulSetReq) (*DelStatefulSetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelStatefulSet not implemented")
}
func (UnimplementedOneKubeEdgeServer) ListPersistentVolume(context.Context, *ListPersistentVolumeReq) (*ListPersistentVolumeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPersistentVolume not implemented")
}
func (UnimplementedOneKubeEdgeServer) ListPersistentVolumeClaim(context.Context, *ListPersistentVolumeClaimReq) (*ListPersistentVolumeClaimReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPersistentVolumeClaim not implemented")
}
func (UnimplementedOneKubeEdgeServer) mustEmbedUnimplementedOneKubeEdgeServer() {}

// UnsafeOneKubeEdgeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OneKubeEdgeServer will
// result in compilation errors.
type UnsafeOneKubeEdgeServer interface {
	mustEmbedUnimplementedOneKubeEdgeServer()
}

func RegisterOneKubeEdgeServer(s grpc.ServiceRegistrar, srv OneKubeEdgeServer) {
	s.RegisterService(&OneKubeEdge_ServiceDesc, srv)
}

func _OneKubeEdge_GetClusterSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterSummaryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).GetClusterSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_GetClusterSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).GetClusterSummary(ctx, req.(*GetClusterSummaryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_CreateNameSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNameSpaceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).CreateNameSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_CreateNameSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).CreateNameSpace(ctx, req.(*CreateNameSpaceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_ListNameSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNameSpaceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).ListNameSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_ListNameSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).ListNameSpace(ctx, req.(*ListNameSpaceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_DelNameSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelNameSpaceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).DelNameSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_DelNameSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).DelNameSpace(ctx, req.(*DelNameSpaceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_CreateConfigMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConfigMapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).CreateConfigMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_CreateConfigMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).CreateConfigMap(ctx, req.(*CreateConfigMapReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_ListConfigMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConfigMapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).ListConfigMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_ListConfigMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).ListConfigMap(ctx, req.(*ListConfigMapReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_GetConfigMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigMapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).GetConfigMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_GetConfigMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).GetConfigMap(ctx, req.(*GetConfigMapReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_DelConfigMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelConfigMapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).DelConfigMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_DelConfigMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).DelConfigMap(ctx, req.(*DelConfigMapReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_UpdateConfigMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigMapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).UpdateConfigMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_UpdateConfigMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).UpdateConfigMap(ctx, req.(*UpdateConfigMapReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_ListSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSecretReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).ListSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_ListSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).ListSecret(ctx, req.(*ListSecretReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_GetSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecretReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).GetSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_GetSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).GetSecret(ctx, req.(*GetSecretReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_DelSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelSecretReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).DelSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_DelSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).DelSecret(ctx, req.(*DelSecretReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_GetExpiringSoonKubernetesTls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExpiringSoonKubernetesTlsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).GetExpiringSoonKubernetesTls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_GetExpiringSoonKubernetesTls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).GetExpiringSoonKubernetesTls(ctx, req.(*GetExpiringSoonKubernetesTlsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_CreateTlsSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTlsSecretReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).CreateTlsSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_CreateTlsSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).CreateTlsSecret(ctx, req.(*CreateTlsSecretReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_CreateOpaqueSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOpaqueSecretReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).CreateOpaqueSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_CreateOpaqueSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).CreateOpaqueSecret(ctx, req.(*CreateOpaqueSecretReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_CreateDockerConfigJsonSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDockerConfigJsonSecretReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).CreateDockerConfigJsonSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_CreateDockerConfigJsonSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).CreateDockerConfigJsonSecret(ctx, req.(*CreateDockerConfigJsonSecretReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_CreateBasicAuthSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBasicAuthSecretReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).CreateBasicAuthSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_CreateBasicAuthSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).CreateBasicAuthSecret(ctx, req.(*CreateBasicAuthSecretReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_CreateSshAuthSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSshAuthSecretReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).CreateSshAuthSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_CreateSshAuthSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).CreateSshAuthSecret(ctx, req.(*CreateSshAuthSecretReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_UpdateTlsSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTlsSecretReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).UpdateTlsSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_UpdateTlsSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).UpdateTlsSecret(ctx, req.(*UpdateTlsSecretReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_UpdateOpaqueSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOpaqueSecretReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).UpdateOpaqueSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_UpdateOpaqueSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).UpdateOpaqueSecret(ctx, req.(*UpdateOpaqueSecretReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_UpdateDockerConfigJsonSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDockerConfigJsonSecretReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).UpdateDockerConfigJsonSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_UpdateDockerConfigJsonSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).UpdateDockerConfigJsonSecret(ctx, req.(*UpdateDockerConfigJsonSecretReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_UpdateBasicAuthSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBasicAuthSecretReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).UpdateBasicAuthSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_UpdateBasicAuthSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).UpdateBasicAuthSecret(ctx, req.(*UpdateBasicAuthSecretReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_UpdateSshAuthSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSshAuthSecretReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).UpdateSshAuthSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_UpdateSshAuthSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).UpdateSshAuthSecret(ctx, req.(*UpdateSshAuthSecretReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_CreateDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeploymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).CreateDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_CreateDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).CreateDeployment(ctx, req.(*CreateDeploymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_ListDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeploymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).ListDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_ListDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).ListDeployment(ctx, req.(*ListDeploymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_GetDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).GetDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_GetDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).GetDeployment(ctx, req.(*GetDeploymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_DelDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelDeploymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).DelDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_DelDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).DelDeployment(ctx, req.(*DelDeploymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_ListDeploymentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeploymentStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).ListDeploymentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_ListDeploymentStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).ListDeploymentStatus(ctx, req.(*ListDeploymentStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_UpdateDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeploymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).UpdateDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_UpdateDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).UpdateDeployment(ctx, req.(*UpdateDeploymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_UpdateDeploymentReplaceSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeploymentReplaceSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).UpdateDeploymentReplaceSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_UpdateDeploymentReplaceSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).UpdateDeploymentReplaceSet(ctx, req.(*UpdateDeploymentReplaceSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_ListRolloutHis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolloutHisReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).ListRolloutHis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_ListRolloutHis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).ListRolloutHis(ctx, req.(*ListRolloutHisReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_FilterDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterDeploymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).FilterDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_FilterDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).FilterDeployment(ctx, req.(*FilterDeploymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_CreateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).CreateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_CreateJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).CreateJob(ctx, req.(*CreateJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_ListJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).ListJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_ListJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).ListJob(ctx, req.(*ListJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_GetJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).GetJob(ctx, req.(*GetJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_DelJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).DelJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_DelJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).DelJob(ctx, req.(*DelJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_GetNodeMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeMetricsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).GetNodeMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_GetNodeMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).GetNodeMetrics(ctx, req.(*GetNodeMetricsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_GetPodMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPodMetricsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).GetPodMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_GetPodMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).GetPodMetrics(ctx, req.(*GetPodMetricsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_GetNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).GetNode(ctx, req.(*GetNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_ListNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).ListNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_ListNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).ListNode(ctx, req.(*ListNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_ListPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPodReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).ListPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_ListPod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).ListPod(ctx, req.(*ListPodReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_GetPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPodReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).GetPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_GetPod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).GetPod(ctx, req.(*GetPodReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_SearchPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchPodReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).SearchPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_SearchPod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).SearchPod(ctx, req.(*SearchPodReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_DelPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelPodReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).DelPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_DelPod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).DelPod(ctx, req.(*DelPodReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_EvictPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvictPodReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).EvictPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_EvictPod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).EvictPod(ctx, req.(*EvictPodReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_DelEvictPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelEvictPodReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).DelEvictPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_DelEvictPod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).DelEvictPod(ctx, req.(*DelEvictPodReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_CreateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).CreateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_CreateService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).CreateService(ctx, req.(*CreateServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_ListService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).ListService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_ListService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).ListService(ctx, req.(*ListServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_GetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).GetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_GetService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).GetService(ctx, req.(*GetServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_DelService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).DelService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_DelService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).DelService(ctx, req.(*DelServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_CreateIngress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIngressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).CreateIngress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_CreateIngress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).CreateIngress(ctx, req.(*CreateIngressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_UpdateIngress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIngressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).UpdateIngress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_UpdateIngress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).UpdateIngress(ctx, req.(*UpdateIngressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_ListIngress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIngressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).ListIngress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_ListIngress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).ListIngress(ctx, req.(*ListIngressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_GetIngress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIngressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).GetIngress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_GetIngress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).GetIngress(ctx, req.(*GetIngressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_DelIngress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelIngressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).DelIngress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_DelIngress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).DelIngress(ctx, req.(*DelIngressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_CreateLoadBalancer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLoadBalancerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).CreateLoadBalancer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_CreateLoadBalancer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).CreateLoadBalancer(ctx, req.(*CreateLoadBalancerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_ListLoadBalancer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLoadBalancerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).ListLoadBalancer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_ListLoadBalancer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).ListLoadBalancer(ctx, req.(*ListLoadBalancerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_GetLoadBalancer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoadBalancerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).GetLoadBalancer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_GetLoadBalancer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).GetLoadBalancer(ctx, req.(*GetLoadBalancerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_DelLoadBalancer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelLoadBalancerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).DelLoadBalancer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_DelLoadBalancer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).DelLoadBalancer(ctx, req.(*DelLoadBalancerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_CreateStatefulSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStatefulSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).CreateStatefulSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_CreateStatefulSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).CreateStatefulSet(ctx, req.(*CreateStatefulSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_ListStatefulSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStatefulSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).ListStatefulSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_ListStatefulSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).ListStatefulSet(ctx, req.(*ListStatefulSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_GetStatefulSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatefulSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).GetStatefulSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_GetStatefulSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).GetStatefulSet(ctx, req.(*GetStatefulSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_DelStatefulSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelStatefulSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).DelStatefulSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_DelStatefulSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).DelStatefulSet(ctx, req.(*DelStatefulSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_ListPersistentVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPersistentVolumeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).ListPersistentVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_ListPersistentVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).ListPersistentVolume(ctx, req.(*ListPersistentVolumeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneKubeEdge_ListPersistentVolumeClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPersistentVolumeClaimReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneKubeEdgeServer).ListPersistentVolumeClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneKubeEdge_ListPersistentVolumeClaim_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneKubeEdgeServer).ListPersistentVolumeClaim(ctx, req.(*ListPersistentVolumeClaimReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OneKubeEdge_ServiceDesc is the grpc.ServiceDesc for OneKubeEdge service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OneKubeEdge_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "oneKubeEdge.v1.oneKubeEdge",
	HandlerType: (*OneKubeEdgeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClusterSummary",
			Handler:    _OneKubeEdge_GetClusterSummary_Handler,
		},
		{
			MethodName: "CreateNameSpace",
			Handler:    _OneKubeEdge_CreateNameSpace_Handler,
		},
		{
			MethodName: "ListNameSpace",
			Handler:    _OneKubeEdge_ListNameSpace_Handler,
		},
		{
			MethodName: "DelNameSpace",
			Handler:    _OneKubeEdge_DelNameSpace_Handler,
		},
		{
			MethodName: "CreateConfigMap",
			Handler:    _OneKubeEdge_CreateConfigMap_Handler,
		},
		{
			MethodName: "ListConfigMap",
			Handler:    _OneKubeEdge_ListConfigMap_Handler,
		},
		{
			MethodName: "GetConfigMap",
			Handler:    _OneKubeEdge_GetConfigMap_Handler,
		},
		{
			MethodName: "DelConfigMap",
			Handler:    _OneKubeEdge_DelConfigMap_Handler,
		},
		{
			MethodName: "UpdateConfigMap",
			Handler:    _OneKubeEdge_UpdateConfigMap_Handler,
		},
		{
			MethodName: "ListSecret",
			Handler:    _OneKubeEdge_ListSecret_Handler,
		},
		{
			MethodName: "GetSecret",
			Handler:    _OneKubeEdge_GetSecret_Handler,
		},
		{
			MethodName: "DelSecret",
			Handler:    _OneKubeEdge_DelSecret_Handler,
		},
		{
			MethodName: "GetExpiringSoonKubernetesTls",
			Handler:    _OneKubeEdge_GetExpiringSoonKubernetesTls_Handler,
		},
		{
			MethodName: "CreateTlsSecret",
			Handler:    _OneKubeEdge_CreateTlsSecret_Handler,
		},
		{
			MethodName: "CreateOpaqueSecret",
			Handler:    _OneKubeEdge_CreateOpaqueSecret_Handler,
		},
		{
			MethodName: "CreateDockerConfigJsonSecret",
			Handler:    _OneKubeEdge_CreateDockerConfigJsonSecret_Handler,
		},
		{
			MethodName: "CreateBasicAuthSecret",
			Handler:    _OneKubeEdge_CreateBasicAuthSecret_Handler,
		},
		{
			MethodName: "CreateSshAuthSecret",
			Handler:    _OneKubeEdge_CreateSshAuthSecret_Handler,
		},
		{
			MethodName: "UpdateTlsSecret",
			Handler:    _OneKubeEdge_UpdateTlsSecret_Handler,
		},
		{
			MethodName: "UpdateOpaqueSecret",
			Handler:    _OneKubeEdge_UpdateOpaqueSecret_Handler,
		},
		{
			MethodName: "UpdateDockerConfigJsonSecret",
			Handler:    _OneKubeEdge_UpdateDockerConfigJsonSecret_Handler,
		},
		{
			MethodName: "UpdateBasicAuthSecret",
			Handler:    _OneKubeEdge_UpdateBasicAuthSecret_Handler,
		},
		{
			MethodName: "UpdateSshAuthSecret",
			Handler:    _OneKubeEdge_UpdateSshAuthSecret_Handler,
		},
		{
			MethodName: "CreateDeployment",
			Handler:    _OneKubeEdge_CreateDeployment_Handler,
		},
		{
			MethodName: "ListDeployment",
			Handler:    _OneKubeEdge_ListDeployment_Handler,
		},
		{
			MethodName: "GetDeployment",
			Handler:    _OneKubeEdge_GetDeployment_Handler,
		},
		{
			MethodName: "DelDeployment",
			Handler:    _OneKubeEdge_DelDeployment_Handler,
		},
		{
			MethodName: "ListDeploymentStatus",
			Handler:    _OneKubeEdge_ListDeploymentStatus_Handler,
		},
		{
			MethodName: "UpdateDeployment",
			Handler:    _OneKubeEdge_UpdateDeployment_Handler,
		},
		{
			MethodName: "UpdateDeploymentReplaceSet",
			Handler:    _OneKubeEdge_UpdateDeploymentReplaceSet_Handler,
		},
		{
			MethodName: "ListRolloutHis",
			Handler:    _OneKubeEdge_ListRolloutHis_Handler,
		},
		{
			MethodName: "FilterDeployment",
			Handler:    _OneKubeEdge_FilterDeployment_Handler,
		},
		{
			MethodName: "CreateJob",
			Handler:    _OneKubeEdge_CreateJob_Handler,
		},
		{
			MethodName: "ListJob",
			Handler:    _OneKubeEdge_ListJob_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _OneKubeEdge_GetJob_Handler,
		},
		{
			MethodName: "DelJob",
			Handler:    _OneKubeEdge_DelJob_Handler,
		},
		{
			MethodName: "GetNodeMetrics",
			Handler:    _OneKubeEdge_GetNodeMetrics_Handler,
		},
		{
			MethodName: "GetPodMetrics",
			Handler:    _OneKubeEdge_GetPodMetrics_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _OneKubeEdge_GetNode_Handler,
		},
		{
			MethodName: "ListNode",
			Handler:    _OneKubeEdge_ListNode_Handler,
		},
		{
			MethodName: "ListPod",
			Handler:    _OneKubeEdge_ListPod_Handler,
		},
		{
			MethodName: "GetPod",
			Handler:    _OneKubeEdge_GetPod_Handler,
		},
		{
			MethodName: "SearchPod",
			Handler:    _OneKubeEdge_SearchPod_Handler,
		},
		{
			MethodName: "DelPod",
			Handler:    _OneKubeEdge_DelPod_Handler,
		},
		{
			MethodName: "EvictPod",
			Handler:    _OneKubeEdge_EvictPod_Handler,
		},
		{
			MethodName: "DelEvictPod",
			Handler:    _OneKubeEdge_DelEvictPod_Handler,
		},
		{
			MethodName: "CreateService",
			Handler:    _OneKubeEdge_CreateService_Handler,
		},
		{
			MethodName: "ListService",
			Handler:    _OneKubeEdge_ListService_Handler,
		},
		{
			MethodName: "GetService",
			Handler:    _OneKubeEdge_GetService_Handler,
		},
		{
			MethodName: "DelService",
			Handler:    _OneKubeEdge_DelService_Handler,
		},
		{
			MethodName: "CreateIngress",
			Handler:    _OneKubeEdge_CreateIngress_Handler,
		},
		{
			MethodName: "UpdateIngress",
			Handler:    _OneKubeEdge_UpdateIngress_Handler,
		},
		{
			MethodName: "ListIngress",
			Handler:    _OneKubeEdge_ListIngress_Handler,
		},
		{
			MethodName: "GetIngress",
			Handler:    _OneKubeEdge_GetIngress_Handler,
		},
		{
			MethodName: "DelIngress",
			Handler:    _OneKubeEdge_DelIngress_Handler,
		},
		{
			MethodName: "CreateLoadBalancer",
			Handler:    _OneKubeEdge_CreateLoadBalancer_Handler,
		},
		{
			MethodName: "ListLoadBalancer",
			Handler:    _OneKubeEdge_ListLoadBalancer_Handler,
		},
		{
			MethodName: "GetLoadBalancer",
			Handler:    _OneKubeEdge_GetLoadBalancer_Handler,
		},
		{
			MethodName: "DelLoadBalancer",
			Handler:    _OneKubeEdge_DelLoadBalancer_Handler,
		},
		{
			MethodName: "CreateStatefulSet",
			Handler:    _OneKubeEdge_CreateStatefulSet_Handler,
		},
		{
			MethodName: "ListStatefulSet",
			Handler:    _OneKubeEdge_ListStatefulSet_Handler,
		},
		{
			MethodName: "GetStatefulSet",
			Handler:    _OneKubeEdge_GetStatefulSet_Handler,
		},
		{
			MethodName: "DelStatefulSet",
			Handler:    _OneKubeEdge_DelStatefulSet_Handler,
		},
		{
			MethodName: "ListPersistentVolume",
			Handler:    _OneKubeEdge_ListPersistentVolume_Handler,
		},
		{
			MethodName: "ListPersistentVolumeClaim",
			Handler:    _OneKubeEdge_ListPersistentVolumeClaim_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oneKubeEdge/v1/oneKubeEdge.proto",
}
