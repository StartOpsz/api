// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.14.0
// source: oneProduct/v1/product.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 创建组织产品
type CreateOrgProductReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductName string `protobuf:"bytes,3,opt,name=productName,proto3" json:"productName,omitempty"`
	Logo        string `protobuf:"bytes,4,opt,name=logo,proto3" json:"logo,omitempty"`
	Describe    string `protobuf:"bytes,5,opt,name=describe,proto3" json:"describe,omitempty"`
}

func (x *CreateOrgProductReq) Reset() {
	*x = CreateOrgProductReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrgProductReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrgProductReq) ProtoMessage() {}

func (x *CreateOrgProductReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrgProductReq.ProtoReflect.Descriptor instead.
func (*CreateOrgProductReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{0}
}

func (x *CreateOrgProductReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *CreateOrgProductReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *CreateOrgProductReq) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *CreateOrgProductReq) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *CreateOrgProductReq) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

type CreateOrgProductReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CreateOrgProductReply) Reset() {
	*x = CreateOrgProductReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrgProductReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrgProductReply) ProtoMessage() {}

func (x *CreateOrgProductReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrgProductReply.ProtoReflect.Descriptor instead.
func (*CreateOrgProductReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{1}
}

func (x *CreateOrgProductReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// 列出组织产品产品
type ListOrgProductReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid  string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
}

func (x *ListOrgProductReq) Reset() {
	*x = ListOrgProductReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrgProductReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrgProductReq) ProtoMessage() {}

func (x *ListOrgProductReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrgProductReq.ProtoReflect.Descriptor instead.
func (*ListOrgProductReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{2}
}

func (x *ListOrgProductReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListOrgProductReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

type ListOrgProductReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Product []*ListOrgProductReply_Product `protobuf:"bytes,1,rep,name=product,proto3" json:"product,omitempty"`
}

func (x *ListOrgProductReply) Reset() {
	*x = ListOrgProductReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrgProductReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrgProductReply) ProtoMessage() {}

func (x *ListOrgProductReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrgProductReply.ProtoReflect.Descriptor instead.
func (*ListOrgProductReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{3}
}

func (x *ListOrgProductReply) GetProduct() []*ListOrgProductReply_Product {
	if x != nil {
		return x.Product
	}
	return nil
}

// 删除产品
type DelOrgProductReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
}

func (x *DelOrgProductReq) Reset() {
	*x = DelOrgProductReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelOrgProductReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelOrgProductReq) ProtoMessage() {}

func (x *DelOrgProductReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelOrgProductReq.ProtoReflect.Descriptor instead.
func (*DelOrgProductReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{4}
}

func (x *DelOrgProductReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *DelOrgProductReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *DelOrgProductReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

type DelOrgProductReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *DelOrgProductReply) Reset() {
	*x = DelOrgProductReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelOrgProductReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelOrgProductReply) ProtoMessage() {}

func (x *DelOrgProductReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelOrgProductReply.ProtoReflect.Descriptor instead.
func (*DelOrgProductReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{5}
}

func (x *DelOrgProductReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

//
type GetOrgProductReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgUuid     string `protobuf:"bytes,1,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,2,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
}

func (x *GetOrgProductReq) Reset() {
	*x = GetOrgProductReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgProductReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgProductReq) ProtoMessage() {}

func (x *GetOrgProductReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgProductReq.ProtoReflect.Descriptor instead.
func (*GetOrgProductReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{6}
}

func (x *GetOrgProductReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *GetOrgProductReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

type GetOrgProductReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductName string `protobuf:"bytes,3,opt,name=productName,proto3" json:"productName,omitempty"`
	Logo        string `protobuf:"bytes,4,opt,name=logo,proto3" json:"logo,omitempty"`
	CreateTime  int64  `protobuf:"varint,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
	Describe    string `protobuf:"bytes,6,opt,name=describe,proto3" json:"describe,omitempty"`
}

func (x *GetOrgProductReply) Reset() {
	*x = GetOrgProductReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgProductReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgProductReply) ProtoMessage() {}

func (x *GetOrgProductReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgProductReply.ProtoReflect.Descriptor instead.
func (*GetOrgProductReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{7}
}

func (x *GetOrgProductReply) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *GetOrgProductReply) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *GetOrgProductReply) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *GetOrgProductReply) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *GetOrgProductReply) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *GetOrgProductReply) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

//
type CreateOrgProductGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	GroupName   string `protobuf:"bytes,4,opt,name=groupName,proto3" json:"groupName,omitempty"`
}

func (x *CreateOrgProductGroupReq) Reset() {
	*x = CreateOrgProductGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrgProductGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrgProductGroupReq) ProtoMessage() {}

func (x *CreateOrgProductGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrgProductGroupReq.ProtoReflect.Descriptor instead.
func (*CreateOrgProductGroupReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{8}
}

func (x *CreateOrgProductGroupReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *CreateOrgProductGroupReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *CreateOrgProductGroupReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *CreateOrgProductGroupReq) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

type CreateOrgProductGroupReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CreateOrgProductGroupReply) Reset() {
	*x = CreateOrgProductGroupReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrgProductGroupReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrgProductGroupReply) ProtoMessage() {}

func (x *CreateOrgProductGroupReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrgProductGroupReply.ProtoReflect.Descriptor instead.
func (*CreateOrgProductGroupReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{9}
}

func (x *CreateOrgProductGroupReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type ListOrgProductGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
}

func (x *ListOrgProductGroupReq) Reset() {
	*x = ListOrgProductGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrgProductGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrgProductGroupReq) ProtoMessage() {}

func (x *ListOrgProductGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrgProductGroupReq.ProtoReflect.Descriptor instead.
func (*ListOrgProductGroupReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{10}
}

func (x *ListOrgProductGroupReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListOrgProductGroupReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListOrgProductGroupReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

type ListOrgProductGroupReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name []string `protobuf:"bytes,1,rep,name=name,proto3" json:"name,omitempty"`
}

func (x *ListOrgProductGroupReply) Reset() {
	*x = ListOrgProductGroupReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrgProductGroupReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrgProductGroupReply) ProtoMessage() {}

func (x *ListOrgProductGroupReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrgProductGroupReply.ProtoReflect.Descriptor instead.
func (*ListOrgProductGroupReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{11}
}

func (x *ListOrgProductGroupReply) GetName() []string {
	if x != nil {
		return x.Name
	}
	return nil
}

type DelOrgProductGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	GroupUuid   string `protobuf:"bytes,4,opt,name=groupUuid,proto3" json:"groupUuid,omitempty"`
}

func (x *DelOrgProductGroupReq) Reset() {
	*x = DelOrgProductGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelOrgProductGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelOrgProductGroupReq) ProtoMessage() {}

func (x *DelOrgProductGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelOrgProductGroupReq.ProtoReflect.Descriptor instead.
func (*DelOrgProductGroupReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{12}
}

func (x *DelOrgProductGroupReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *DelOrgProductGroupReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *DelOrgProductGroupReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *DelOrgProductGroupReq) GetGroupUuid() string {
	if x != nil {
		return x.GroupUuid
	}
	return ""
}

type DelOrgProductGroupReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *DelOrgProductGroupReply) Reset() {
	*x = DelOrgProductGroupReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelOrgProductGroupReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelOrgProductGroupReply) ProtoMessage() {}

func (x *DelOrgProductGroupReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelOrgProductGroupReply.ProtoReflect.Descriptor instead.
func (*DelOrgProductGroupReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{13}
}

func (x *DelOrgProductGroupReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type AddOrgProductGroupMemberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid     string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid      string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid  string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	GroupUuid    string `protobuf:"bytes,4,opt,name=groupUuid,proto3" json:"groupUuid,omitempty"`
	JoinUserUuid string `protobuf:"bytes,5,opt,name=joinUserUuid,proto3" json:"joinUserUuid,omitempty"`
}

func (x *AddOrgProductGroupMemberReq) Reset() {
	*x = AddOrgProductGroupMemberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOrgProductGroupMemberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOrgProductGroupMemberReq) ProtoMessage() {}

func (x *AddOrgProductGroupMemberReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOrgProductGroupMemberReq.ProtoReflect.Descriptor instead.
func (*AddOrgProductGroupMemberReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{14}
}

func (x *AddOrgProductGroupMemberReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *AddOrgProductGroupMemberReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *AddOrgProductGroupMemberReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *AddOrgProductGroupMemberReq) GetGroupUuid() string {
	if x != nil {
		return x.GroupUuid
	}
	return ""
}

func (x *AddOrgProductGroupMemberReq) GetJoinUserUuid() string {
	if x != nil {
		return x.JoinUserUuid
	}
	return ""
}

type AddOrgProductGroupMemberReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *AddOrgProductGroupMemberReply) Reset() {
	*x = AddOrgProductGroupMemberReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOrgProductGroupMemberReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOrgProductGroupMemberReply) ProtoMessage() {}

func (x *AddOrgProductGroupMemberReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOrgProductGroupMemberReply.ProtoReflect.Descriptor instead.
func (*AddOrgProductGroupMemberReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{15}
}

func (x *AddOrgProductGroupMemberReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type ListOrgProductGroupMemberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	GroupUuid   string `protobuf:"bytes,4,opt,name=groupUuid,proto3" json:"groupUuid,omitempty"`
}

func (x *ListOrgProductGroupMemberReq) Reset() {
	*x = ListOrgProductGroupMemberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrgProductGroupMemberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrgProductGroupMemberReq) ProtoMessage() {}

func (x *ListOrgProductGroupMemberReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrgProductGroupMemberReq.ProtoReflect.Descriptor instead.
func (*ListOrgProductGroupMemberReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{16}
}

func (x *ListOrgProductGroupMemberReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListOrgProductGroupMemberReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListOrgProductGroupMemberReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ListOrgProductGroupMemberReq) GetGroupUuid() string {
	if x != nil {
		return x.GroupUuid
	}
	return ""
}

type ListOrgProductGroupMemberReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductGroupMember []*ListOrgProductGroupMemberReply_ProductGroupMember `protobuf:"bytes,1,rep,name=productGroupMember,proto3" json:"productGroupMember,omitempty"`
}

func (x *ListOrgProductGroupMemberReply) Reset() {
	*x = ListOrgProductGroupMemberReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrgProductGroupMemberReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrgProductGroupMemberReply) ProtoMessage() {}

func (x *ListOrgProductGroupMemberReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrgProductGroupMemberReply.ProtoReflect.Descriptor instead.
func (*ListOrgProductGroupMemberReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{17}
}

func (x *ListOrgProductGroupMemberReply) GetProductGroupMember() []*ListOrgProductGroupMemberReply_ProductGroupMember {
	if x != nil {
		return x.ProductGroupMember
	}
	return nil
}

type EvictOrgProductGroupMemberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid      string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid       string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid   string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	GroupUuid     string `protobuf:"bytes,4,opt,name=groupUuid,proto3" json:"groupUuid,omitempty"`
	EvictUserUuid string `protobuf:"bytes,5,opt,name=evictUserUuid,proto3" json:"evictUserUuid,omitempty"`
}

func (x *EvictOrgProductGroupMemberReq) Reset() {
	*x = EvictOrgProductGroupMemberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvictOrgProductGroupMemberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvictOrgProductGroupMemberReq) ProtoMessage() {}

func (x *EvictOrgProductGroupMemberReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvictOrgProductGroupMemberReq.ProtoReflect.Descriptor instead.
func (*EvictOrgProductGroupMemberReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{18}
}

func (x *EvictOrgProductGroupMemberReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *EvictOrgProductGroupMemberReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *EvictOrgProductGroupMemberReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *EvictOrgProductGroupMemberReq) GetGroupUuid() string {
	if x != nil {
		return x.GroupUuid
	}
	return ""
}

func (x *EvictOrgProductGroupMemberReq) GetEvictUserUuid() string {
	if x != nil {
		return x.EvictUserUuid
	}
	return ""
}

type EvictOrgProductGroupMemberReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *EvictOrgProductGroupMemberReply) Reset() {
	*x = EvictOrgProductGroupMemberReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvictOrgProductGroupMemberReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvictOrgProductGroupMemberReply) ProtoMessage() {}

func (x *EvictOrgProductGroupMemberReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvictOrgProductGroupMemberReply.ProtoReflect.Descriptor instead.
func (*EvictOrgProductGroupMemberReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{19}
}

func (x *EvictOrgProductGroupMemberReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type LeaveOrgProductGroupMemberReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	GroupUuid   string `protobuf:"bytes,4,opt,name=groupUuid,proto3" json:"groupUuid,omitempty"`
}

func (x *LeaveOrgProductGroupMemberReq) Reset() {
	*x = LeaveOrgProductGroupMemberReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaveOrgProductGroupMemberReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveOrgProductGroupMemberReq) ProtoMessage() {}

func (x *LeaveOrgProductGroupMemberReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveOrgProductGroupMemberReq.ProtoReflect.Descriptor instead.
func (*LeaveOrgProductGroupMemberReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{20}
}

func (x *LeaveOrgProductGroupMemberReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *LeaveOrgProductGroupMemberReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *LeaveOrgProductGroupMemberReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *LeaveOrgProductGroupMemberReq) GetGroupUuid() string {
	if x != nil {
		return x.GroupUuid
	}
	return ""
}

type LeaveOrgProductGroupMemberReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *LeaveOrgProductGroupMemberReply) Reset() {
	*x = LeaveOrgProductGroupMemberReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaveOrgProductGroupMemberReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveOrgProductGroupMemberReply) ProtoMessage() {}

func (x *LeaveOrgProductGroupMemberReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveOrgProductGroupMemberReply.ProtoReflect.Descriptor instead.
func (*LeaveOrgProductGroupMemberReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{21}
}

func (x *LeaveOrgProductGroupMemberReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// 添加产品环境
type AddOrgProductEnvReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	EnvName     string `protobuf:"bytes,4,opt,name=envName,proto3" json:"envName,omitempty"`
	Priority    int32  `protobuf:"varint,5,opt,name=priority,proto3" json:"priority,omitempty"`
	Describe    string `protobuf:"bytes,6,opt,name=describe,proto3" json:"describe,omitempty"`
}

func (x *AddOrgProductEnvReq) Reset() {
	*x = AddOrgProductEnvReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOrgProductEnvReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOrgProductEnvReq) ProtoMessage() {}

func (x *AddOrgProductEnvReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOrgProductEnvReq.ProtoReflect.Descriptor instead.
func (*AddOrgProductEnvReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{22}
}

func (x *AddOrgProductEnvReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *AddOrgProductEnvReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *AddOrgProductEnvReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *AddOrgProductEnvReq) GetEnvName() string {
	if x != nil {
		return x.EnvName
	}
	return ""
}

func (x *AddOrgProductEnvReq) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *AddOrgProductEnvReq) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

type AddOrgProductEnvReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *AddOrgProductEnvReply) Reset() {
	*x = AddOrgProductEnvReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOrgProductEnvReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOrgProductEnvReply) ProtoMessage() {}

func (x *AddOrgProductEnvReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOrgProductEnvReply.ProtoReflect.Descriptor instead.
func (*AddOrgProductEnvReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{23}
}

func (x *AddOrgProductEnvReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// 获取产品环境
type ListOrgProductEnvReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
}

func (x *ListOrgProductEnvReq) Reset() {
	*x = ListOrgProductEnvReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrgProductEnvReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrgProductEnvReq) ProtoMessage() {}

func (x *ListOrgProductEnvReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrgProductEnvReq.ProtoReflect.Descriptor instead.
func (*ListOrgProductEnvReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{24}
}

func (x *ListOrgProductEnvReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListOrgProductEnvReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListOrgProductEnvReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

type ListOrgProductEnvReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Env []*ListOrgProductEnvReply_Env `protobuf:"bytes,1,rep,name=env,proto3" json:"env,omitempty"`
}

func (x *ListOrgProductEnvReply) Reset() {
	*x = ListOrgProductEnvReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrgProductEnvReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrgProductEnvReply) ProtoMessage() {}

func (x *ListOrgProductEnvReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrgProductEnvReply.ProtoReflect.Descriptor instead.
func (*ListOrgProductEnvReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{25}
}

func (x *ListOrgProductEnvReply) GetEnv() []*ListOrgProductEnvReply_Env {
	if x != nil {
		return x.Env
	}
	return nil
}

// 删除产品环境
type DelOrgProductEnvReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
}

func (x *DelOrgProductEnvReq) Reset() {
	*x = DelOrgProductEnvReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelOrgProductEnvReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelOrgProductEnvReq) ProtoMessage() {}

func (x *DelOrgProductEnvReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelOrgProductEnvReq.ProtoReflect.Descriptor instead.
func (*DelOrgProductEnvReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{26}
}

func (x *DelOrgProductEnvReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *DelOrgProductEnvReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *DelOrgProductEnvReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *DelOrgProductEnvReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

type DelOrgProductEnvReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *DelOrgProductEnvReply) Reset() {
	*x = DelOrgProductEnvReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelOrgProductEnvReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelOrgProductEnvReply) ProtoMessage() {}

func (x *DelOrgProductEnvReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelOrgProductEnvReply.ProtoReflect.Descriptor instead.
func (*DelOrgProductEnvReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{27}
}

func (x *DelOrgProductEnvReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// 获取组织产品环境
type GetOrgProductEnvReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductUuid    string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
}

func (x *GetOrgProductEnvReq) Reset() {
	*x = GetOrgProductEnvReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgProductEnvReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgProductEnvReq) ProtoMessage() {}

func (x *GetOrgProductEnvReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgProductEnvReq.ProtoReflect.Descriptor instead.
func (*GetOrgProductEnvReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{28}
}

func (x *GetOrgProductEnvReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *GetOrgProductEnvReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

type GetOrgProductEnvReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	ProductUuid string `protobuf:"bytes,2,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	EnvName     string `protobuf:"bytes,3,opt,name=envName,proto3" json:"envName,omitempty"`
	Priority    int32  `protobuf:"varint,4,opt,name=priority,proto3" json:"priority,omitempty"`
	Describe    string `protobuf:"bytes,5,opt,name=describe,proto3" json:"describe,omitempty"`
	CreateTime  int64  `protobuf:"varint,6,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *GetOrgProductEnvReply) Reset() {
	*x = GetOrgProductEnvReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgProductEnvReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgProductEnvReply) ProtoMessage() {}

func (x *GetOrgProductEnvReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgProductEnvReply.ProtoReflect.Descriptor instead.
func (*GetOrgProductEnvReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{29}
}

func (x *GetOrgProductEnvReply) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *GetOrgProductEnvReply) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *GetOrgProductEnvReply) GetEnvName() string {
	if x != nil {
		return x.EnvName
	}
	return ""
}

func (x *GetOrgProductEnvReply) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *GetOrgProductEnvReply) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *GetOrgProductEnvReply) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

// 验证产品是否属于组织
type VerifyProductInOrgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgUuid     string `protobuf:"bytes,1,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,2,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
}

func (x *VerifyProductInOrgReq) Reset() {
	*x = VerifyProductInOrgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyProductInOrgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyProductInOrgReq) ProtoMessage() {}

func (x *VerifyProductInOrgReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyProductInOrgReq.ProtoReflect.Descriptor instead.
func (*VerifyProductInOrgReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{30}
}

func (x *VerifyProductInOrgReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *VerifyProductInOrgReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

type VerifyProductInOrgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *VerifyProductInOrgReply) Reset() {
	*x = VerifyProductInOrgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyProductInOrgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyProductInOrgReply) ProtoMessage() {}

func (x *VerifyProductInOrgReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyProductInOrgReply.ProtoReflect.Descriptor instead.
func (*VerifyProductInOrgReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{31}
}

func (x *VerifyProductInOrgReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

//
type K8SCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid           string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	OrgUuid        string `protobuf:"bytes,3,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string `protobuf:"bytes,4,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string `protobuf:"bytes,5,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	UpToken        string `protobuf:"bytes,6,opt,name=upToken,proto3" json:"upToken,omitempty"`
	ApiService     string `protobuf:"bytes,7,opt,name=apiService,proto3" json:"apiService,omitempty"`
	Describe       string `protobuf:"bytes,8,opt,name=describe,proto3" json:"describe,omitempty"`
	KubeEdgeGrpc   string `protobuf:"bytes,9,opt,name=kubeEdgeGrpc,proto3" json:"kubeEdgeGrpc,omitempty"`
	Token          string `protobuf:"bytes,10,opt,name=token,proto3" json:"token,omitempty"`
	CreateTime     int64  `protobuf:"varint,11,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *K8SCluster) Reset() {
	*x = K8SCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *K8SCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*K8SCluster) ProtoMessage() {}

func (x *K8SCluster) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use K8SCluster.ProtoReflect.Descriptor instead.
func (*K8SCluster) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{32}
}

func (x *K8SCluster) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *K8SCluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *K8SCluster) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *K8SCluster) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *K8SCluster) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *K8SCluster) GetUpToken() string {
	if x != nil {
		return x.UpToken
	}
	return ""
}

func (x *K8SCluster) GetApiService() string {
	if x != nil {
		return x.ApiService
	}
	return ""
}

func (x *K8SCluster) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *K8SCluster) GetKubeEdgeGrpc() string {
	if x != nil {
		return x.KubeEdgeGrpc
	}
	return ""
}

func (x *K8SCluster) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *K8SCluster) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type AddK8SClusterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	Name           string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ProductUuid    string `protobuf:"bytes,4,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string `protobuf:"bytes,5,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	ApiService     string `protobuf:"bytes,7,opt,name=apiService,proto3" json:"apiService,omitempty"`
	Describe       string `protobuf:"bytes,8,opt,name=describe,proto3" json:"describe,omitempty"`
}

func (x *AddK8SClusterReq) Reset() {
	*x = AddK8SClusterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddK8SClusterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddK8SClusterReq) ProtoMessage() {}

func (x *AddK8SClusterReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddK8SClusterReq.ProtoReflect.Descriptor instead.
func (*AddK8SClusterReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{33}
}

func (x *AddK8SClusterReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *AddK8SClusterReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *AddK8SClusterReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddK8SClusterReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *AddK8SClusterReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *AddK8SClusterReq) GetApiService() string {
	if x != nil {
		return x.ApiService
	}
	return ""
}

func (x *AddK8SClusterReq) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

type AddK8SClusterReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *AddK8SClusterReply) Reset() {
	*x = AddK8SClusterReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddK8SClusterReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddK8SClusterReply) ProtoMessage() {}

func (x *AddK8SClusterReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddK8SClusterReply.ProtoReflect.Descriptor instead.
func (*AddK8SClusterReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{34}
}

func (x *AddK8SClusterReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// 验证 K8S 集群是否存在 - 内部 (返回集群信息)
type ExistK8SClusterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgUuid        string `protobuf:"bytes,1,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string `protobuf:"bytes,2,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string `protobuf:"bytes,3,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	ClusterUuid    string `protobuf:"bytes,4,opt,name=clusterUuid,proto3" json:"clusterUuid,omitempty"`
	UpToken        string `protobuf:"bytes,5,opt,name=upToken,proto3" json:"upToken,omitempty"`
}

func (x *ExistK8SClusterReq) Reset() {
	*x = ExistK8SClusterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistK8SClusterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistK8SClusterReq) ProtoMessage() {}

func (x *ExistK8SClusterReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistK8SClusterReq.ProtoReflect.Descriptor instead.
func (*ExistK8SClusterReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{35}
}

func (x *ExistK8SClusterReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ExistK8SClusterReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ExistK8SClusterReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *ExistK8SClusterReq) GetClusterUuid() string {
	if x != nil {
		return x.ClusterUuid
	}
	return ""
}

func (x *ExistK8SClusterReq) GetUpToken() string {
	if x != nil {
		return x.UpToken
	}
	return ""
}

type ExistK8SClusterReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid           string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	OrgUuid        string `protobuf:"bytes,3,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string `protobuf:"bytes,4,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string `protobuf:"bytes,5,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	UpToken        string `protobuf:"bytes,6,opt,name=upToken,proto3" json:"upToken,omitempty"`
	ApiService     string `protobuf:"bytes,7,opt,name=apiService,proto3" json:"apiService,omitempty"`
	Describe       string `protobuf:"bytes,8,opt,name=describe,proto3" json:"describe,omitempty"`
	CreateTime     int64  `protobuf:"varint,9,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *ExistK8SClusterReply) Reset() {
	*x = ExistK8SClusterReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistK8SClusterReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistK8SClusterReply) ProtoMessage() {}

func (x *ExistK8SClusterReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistK8SClusterReply.ProtoReflect.Descriptor instead.
func (*ExistK8SClusterReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{36}
}

func (x *ExistK8SClusterReply) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ExistK8SClusterReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExistK8SClusterReply) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ExistK8SClusterReply) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ExistK8SClusterReply) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *ExistK8SClusterReply) GetUpToken() string {
	if x != nil {
		return x.UpToken
	}
	return ""
}

func (x *ExistK8SClusterReply) GetApiService() string {
	if x != nil {
		return x.ApiService
	}
	return ""
}

func (x *ExistK8SClusterReply) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *ExistK8SClusterReply) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type ListK8SClusterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
}

func (x *ListK8SClusterReq) Reset() {
	*x = ListK8SClusterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListK8SClusterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListK8SClusterReq) ProtoMessage() {}

func (x *ListK8SClusterReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListK8SClusterReq.ProtoReflect.Descriptor instead.
func (*ListK8SClusterReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{37}
}

func (x *ListK8SClusterReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListK8SClusterReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListK8SClusterReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ListK8SClusterReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

type ListK8SClusterReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	K8SCluster []*K8SCluster `protobuf:"bytes,1,rep,name=k8sCluster,proto3" json:"k8sCluster,omitempty"`
}

func (x *ListK8SClusterReply) Reset() {
	*x = ListK8SClusterReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListK8SClusterReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListK8SClusterReply) ProtoMessage() {}

func (x *ListK8SClusterReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListK8SClusterReply.ProtoReflect.Descriptor instead.
func (*ListK8SClusterReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{38}
}

func (x *ListK8SClusterReply) GetK8SCluster() []*K8SCluster {
	if x != nil {
		return x.K8SCluster
	}
	return nil
}

type DelK8SClusterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	ClusterUuid    string `protobuf:"bytes,5,opt,name=clusterUuid,proto3" json:"clusterUuid,omitempty"`
}

func (x *DelK8SClusterReq) Reset() {
	*x = DelK8SClusterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelK8SClusterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelK8SClusterReq) ProtoMessage() {}

func (x *DelK8SClusterReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelK8SClusterReq.ProtoReflect.Descriptor instead.
func (*DelK8SClusterReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{39}
}

func (x *DelK8SClusterReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *DelK8SClusterReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *DelK8SClusterReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *DelK8SClusterReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *DelK8SClusterReq) GetClusterUuid() string {
	if x != nil {
		return x.ClusterUuid
	}
	return ""
}

type DelK8SClusterReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *DelK8SClusterReply) Reset() {
	*x = DelK8SClusterReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelK8SClusterReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelK8SClusterReply) ProtoMessage() {}

func (x *DelK8SClusterReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelK8SClusterReply.ProtoReflect.Descriptor instead.
func (*DelK8SClusterReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{40}
}

func (x *DelK8SClusterReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

//
type AddK8SClusterEdgeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	K8SClusterUuid string `protobuf:"bytes,5,opt,name=k8sClusterUuid,proto3" json:"k8sClusterUuid,omitempty"`
	KubeEdgeGrpc   string `protobuf:"bytes,6,opt,name=kubeEdgeGrpc,proto3" json:"kubeEdgeGrpc,omitempty"`
	Token          string `protobuf:"bytes,7,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *AddK8SClusterEdgeReq) Reset() {
	*x = AddK8SClusterEdgeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddK8SClusterEdgeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddK8SClusterEdgeReq) ProtoMessage() {}

func (x *AddK8SClusterEdgeReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddK8SClusterEdgeReq.ProtoReflect.Descriptor instead.
func (*AddK8SClusterEdgeReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{41}
}

func (x *AddK8SClusterEdgeReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *AddK8SClusterEdgeReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *AddK8SClusterEdgeReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *AddK8SClusterEdgeReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *AddK8SClusterEdgeReq) GetK8SClusterUuid() string {
	if x != nil {
		return x.K8SClusterUuid
	}
	return ""
}

func (x *AddK8SClusterEdgeReq) GetKubeEdgeGrpc() string {
	if x != nil {
		return x.KubeEdgeGrpc
	}
	return ""
}

func (x *AddK8SClusterEdgeReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type AddK8SClusterEdgeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *AddK8SClusterEdgeReply) Reset() {
	*x = AddK8SClusterEdgeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddK8SClusterEdgeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddK8SClusterEdgeReply) ProtoMessage() {}

func (x *AddK8SClusterEdgeReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddK8SClusterEdgeReply.ProtoReflect.Descriptor instead.
func (*AddK8SClusterEdgeReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{42}
}

func (x *AddK8SClusterEdgeReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type GetK8SClusterEdgeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	K8SClusterUuid string `protobuf:"bytes,5,opt,name=k8sClusterUuid,proto3" json:"k8sClusterUuid,omitempty"`
}

func (x *GetK8SClusterEdgeReq) Reset() {
	*x = GetK8SClusterEdgeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetK8SClusterEdgeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetK8SClusterEdgeReq) ProtoMessage() {}

func (x *GetK8SClusterEdgeReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetK8SClusterEdgeReq.ProtoReflect.Descriptor instead.
func (*GetK8SClusterEdgeReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{43}
}

func (x *GetK8SClusterEdgeReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *GetK8SClusterEdgeReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *GetK8SClusterEdgeReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *GetK8SClusterEdgeReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *GetK8SClusterEdgeReq) GetK8SClusterUuid() string {
	if x != nil {
		return x.K8SClusterUuid
	}
	return ""
}

type GetK8SClusterEdgeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KubeEdgeGrpc string `protobuf:"bytes,1,opt,name=kubeEdgeGrpc,proto3" json:"kubeEdgeGrpc,omitempty"`
	Token        string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	CreateTime   int64  `protobuf:"varint,3,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *GetK8SClusterEdgeReply) Reset() {
	*x = GetK8SClusterEdgeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetK8SClusterEdgeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetK8SClusterEdgeReply) ProtoMessage() {}

func (x *GetK8SClusterEdgeReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetK8SClusterEdgeReply.ProtoReflect.Descriptor instead.
func (*GetK8SClusterEdgeReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{44}
}

func (x *GetK8SClusterEdgeReply) GetKubeEdgeGrpc() string {
	if x != nil {
		return x.KubeEdgeGrpc
	}
	return ""
}

func (x *GetK8SClusterEdgeReply) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *GetK8SClusterEdgeReply) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type DelK8SClusterEdgeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	K8SClusterUuid string `protobuf:"bytes,5,opt,name=k8sClusterUuid,proto3" json:"k8sClusterUuid,omitempty"`
}

func (x *DelK8SClusterEdgeReq) Reset() {
	*x = DelK8SClusterEdgeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelK8SClusterEdgeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelK8SClusterEdgeReq) ProtoMessage() {}

func (x *DelK8SClusterEdgeReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelK8SClusterEdgeReq.ProtoReflect.Descriptor instead.
func (*DelK8SClusterEdgeReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{45}
}

func (x *DelK8SClusterEdgeReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *DelK8SClusterEdgeReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *DelK8SClusterEdgeReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *DelK8SClusterEdgeReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *DelK8SClusterEdgeReq) GetK8SClusterUuid() string {
	if x != nil {
		return x.K8SClusterUuid
	}
	return ""
}

type DelK8SClusterEdgeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *DelK8SClusterEdgeReply) Reset() {
	*x = DelK8SClusterEdgeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelK8SClusterEdgeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelK8SClusterEdgeReply) ProtoMessage() {}

func (x *DelK8SClusterEdgeReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelK8SClusterEdgeReply.ProtoReflect.Descriptor instead.
func (*DelK8SClusterEdgeReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{46}
}

func (x *DelK8SClusterEdgeReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// K8S Object
type GetK8SClusterNodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	K8SClusterUuid string `protobuf:"bytes,5,opt,name=k8sClusterUuid,proto3" json:"k8sClusterUuid,omitempty"`
	NodeName       string `protobuf:"bytes,6,opt,name=nodeName,proto3" json:"nodeName,omitempty"`
}

func (x *GetK8SClusterNodeReq) Reset() {
	*x = GetK8SClusterNodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetK8SClusterNodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetK8SClusterNodeReq) ProtoMessage() {}

func (x *GetK8SClusterNodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetK8SClusterNodeReq.ProtoReflect.Descriptor instead.
func (*GetK8SClusterNodeReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{47}
}

func (x *GetK8SClusterNodeReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *GetK8SClusterNodeReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *GetK8SClusterNodeReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *GetK8SClusterNodeReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *GetK8SClusterNodeReq) GetK8SClusterUuid() string {
	if x != nil {
		return x.K8SClusterUuid
	}
	return ""
}

func (x *GetK8SClusterNodeReq) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

type GetK8SClusterNodeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                    string                              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CreationTimestamp       int64                               `protobuf:"varint,2,opt,name=creationTimestamp,proto3" json:"creationTimestamp,omitempty"`
	ContainerRuntimeVersion string                              `protobuf:"bytes,3,opt,name=containerRuntimeVersion,proto3" json:"containerRuntimeVersion,omitempty"`
	KernelVersion           string                              `protobuf:"bytes,4,opt,name=kernelVersion,proto3" json:"kernelVersion,omitempty"`
	KubeProxyVersion        string                              `protobuf:"bytes,5,opt,name=kubeProxyVersion,proto3" json:"kubeProxyVersion,omitempty"`
	KubeletVersion          string                              `protobuf:"bytes,6,opt,name=kubeletVersion,proto3" json:"kubeletVersion,omitempty"`
	KubeletEndpoint         string                              `protobuf:"bytes,7,opt,name=kubeletEndpoint,proto3" json:"kubeletEndpoint,omitempty"`
	OsImage                 string                              `protobuf:"bytes,8,opt,name=osImage,proto3" json:"osImage,omitempty"`
	Labels                  map[string]string                   `protobuf:"bytes,9,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Annotations             map[string]string                   `protobuf:"bytes,10,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Capacity                *GetK8SClusterNodeReply_Capacity    `protobuf:"bytes,11,opt,name=capacity,proto3" json:"capacity,omitempty"`
	Allocatable             *GetK8SClusterNodeReply_Allocatable `protobuf:"bytes,12,opt,name=allocatable,proto3" json:"allocatable,omitempty"`
}

func (x *GetK8SClusterNodeReply) Reset() {
	*x = GetK8SClusterNodeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetK8SClusterNodeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetK8SClusterNodeReply) ProtoMessage() {}

func (x *GetK8SClusterNodeReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetK8SClusterNodeReply.ProtoReflect.Descriptor instead.
func (*GetK8SClusterNodeReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{48}
}

func (x *GetK8SClusterNodeReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetK8SClusterNodeReply) GetCreationTimestamp() int64 {
	if x != nil {
		return x.CreationTimestamp
	}
	return 0
}

func (x *GetK8SClusterNodeReply) GetContainerRuntimeVersion() string {
	if x != nil {
		return x.ContainerRuntimeVersion
	}
	return ""
}

func (x *GetK8SClusterNodeReply) GetKernelVersion() string {
	if x != nil {
		return x.KernelVersion
	}
	return ""
}

func (x *GetK8SClusterNodeReply) GetKubeProxyVersion() string {
	if x != nil {
		return x.KubeProxyVersion
	}
	return ""
}

func (x *GetK8SClusterNodeReply) GetKubeletVersion() string {
	if x != nil {
		return x.KubeletVersion
	}
	return ""
}

func (x *GetK8SClusterNodeReply) GetKubeletEndpoint() string {
	if x != nil {
		return x.KubeletEndpoint
	}
	return ""
}

func (x *GetK8SClusterNodeReply) GetOsImage() string {
	if x != nil {
		return x.OsImage
	}
	return ""
}

func (x *GetK8SClusterNodeReply) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *GetK8SClusterNodeReply) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *GetK8SClusterNodeReply) GetCapacity() *GetK8SClusterNodeReply_Capacity {
	if x != nil {
		return x.Capacity
	}
	return nil
}

func (x *GetK8SClusterNodeReply) GetAllocatable() *GetK8SClusterNodeReply_Allocatable {
	if x != nil {
		return x.Allocatable
	}
	return nil
}

type ListK8SClusterNodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	K8SClusterUuid string `protobuf:"bytes,5,opt,name=k8sClusterUuid,proto3" json:"k8sClusterUuid,omitempty"`
}

func (x *ListK8SClusterNodeReq) Reset() {
	*x = ListK8SClusterNodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListK8SClusterNodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListK8SClusterNodeReq) ProtoMessage() {}

func (x *ListK8SClusterNodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListK8SClusterNodeReq.ProtoReflect.Descriptor instead.
func (*ListK8SClusterNodeReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{49}
}

func (x *ListK8SClusterNodeReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListK8SClusterNodeReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListK8SClusterNodeReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ListK8SClusterNodeReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *ListK8SClusterNodeReq) GetK8SClusterUuid() string {
	if x != nil {
		return x.K8SClusterUuid
	}
	return ""
}

type ListK8SClusterNodeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node []*ListK8SClusterNodeReply_Node `protobuf:"bytes,1,rep,name=node,proto3" json:"node,omitempty"`
}

func (x *ListK8SClusterNodeReply) Reset() {
	*x = ListK8SClusterNodeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListK8SClusterNodeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListK8SClusterNodeReply) ProtoMessage() {}

func (x *ListK8SClusterNodeReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListK8SClusterNodeReply.ProtoReflect.Descriptor instead.
func (*ListK8SClusterNodeReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{50}
}

func (x *ListK8SClusterNodeReply) GetNode() []*ListK8SClusterNodeReply_Node {
	if x != nil {
		return x.Node
	}
	return nil
}

type ListK8SPodReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	K8SClusterUuid string `protobuf:"bytes,5,opt,name=k8sClusterUuid,proto3" json:"k8sClusterUuid,omitempty"`
	Namespace      string `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Limit          int64  `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	Continue       string `protobuf:"bytes,8,opt,name=continue,proto3" json:"continue,omitempty"`
	LabelSelector  string `protobuf:"bytes,9,opt,name=labelSelector,proto3" json:"labelSelector,omitempty"`
}

func (x *ListK8SPodReq) Reset() {
	*x = ListK8SPodReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListK8SPodReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListK8SPodReq) ProtoMessage() {}

func (x *ListK8SPodReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListK8SPodReq.ProtoReflect.Descriptor instead.
func (*ListK8SPodReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{51}
}

func (x *ListK8SPodReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListK8SPodReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListK8SPodReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ListK8SPodReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *ListK8SPodReq) GetK8SClusterUuid() string {
	if x != nil {
		return x.K8SClusterUuid
	}
	return ""
}

func (x *ListK8SPodReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListK8SPodReq) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListK8SPodReq) GetContinue() string {
	if x != nil {
		return x.Continue
	}
	return ""
}

func (x *ListK8SPodReq) GetLabelSelector() string {
	if x != nil {
		return x.LabelSelector
	}
	return ""
}

type ListK8SPodReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Continue string                 `protobuf:"bytes,1,opt,name=continue,proto3" json:"continue,omitempty"`
	Pod      []*ListK8SPodReply_Pod `protobuf:"bytes,2,rep,name=pod,proto3" json:"pod,omitempty"`
}

func (x *ListK8SPodReply) Reset() {
	*x = ListK8SPodReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListK8SPodReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListK8SPodReply) ProtoMessage() {}

func (x *ListK8SPodReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListK8SPodReply.ProtoReflect.Descriptor instead.
func (*ListK8SPodReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{52}
}

func (x *ListK8SPodReply) GetContinue() string {
	if x != nil {
		return x.Continue
	}
	return ""
}

func (x *ListK8SPodReply) GetPod() []*ListK8SPodReply_Pod {
	if x != nil {
		return x.Pod
	}
	return nil
}

type EvictK8SPodReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	K8SClusterUuid string `protobuf:"bytes,5,opt,name=k8sClusterUuid,proto3" json:"k8sClusterUuid,omitempty"`
	Namespace      string `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name           string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *EvictK8SPodReq) Reset() {
	*x = EvictK8SPodReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvictK8SPodReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvictK8SPodReq) ProtoMessage() {}

func (x *EvictK8SPodReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvictK8SPodReq.ProtoReflect.Descriptor instead.
func (*EvictK8SPodReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{53}
}

func (x *EvictK8SPodReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *EvictK8SPodReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *EvictK8SPodReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *EvictK8SPodReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *EvictK8SPodReq) GetK8SClusterUuid() string {
	if x != nil {
		return x.K8SClusterUuid
	}
	return ""
}

func (x *EvictK8SPodReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *EvictK8SPodReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type EvictK8SPodReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *EvictK8SPodReply) Reset() {
	*x = EvictK8SPodReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvictK8SPodReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvictK8SPodReply) ProtoMessage() {}

func (x *EvictK8SPodReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvictK8SPodReply.ProtoReflect.Descriptor instead.
func (*EvictK8SPodReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{54}
}

func (x *EvictK8SPodReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type GetK8SPodReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	K8SClusterUuid string `protobuf:"bytes,5,opt,name=k8sClusterUuid,proto3" json:"k8sClusterUuid,omitempty"`
	Namespace      string `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name           string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetK8SPodReq) Reset() {
	*x = GetK8SPodReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetK8SPodReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetK8SPodReq) ProtoMessage() {}

func (x *GetK8SPodReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetK8SPodReq.ProtoReflect.Descriptor instead.
func (*GetK8SPodReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{55}
}

func (x *GetK8SPodReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *GetK8SPodReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *GetK8SPodReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *GetK8SPodReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *GetK8SPodReq) GetK8SClusterUuid() string {
	if x != nil {
		return x.K8SClusterUuid
	}
	return ""
}

func (x *GetK8SPodReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetK8SPodReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetK8SPodReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace         string                      `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name              string                      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CreationTimestamp int64                       `protobuf:"varint,3,opt,name=creationTimestamp,proto3" json:"creationTimestamp,omitempty"`
	Reason            string                      `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	Phase             string                      `protobuf:"bytes,5,opt,name=phase,proto3" json:"phase,omitempty"`
	HostIP            string                      `protobuf:"bytes,6,opt,name=hostIP,proto3" json:"hostIP,omitempty"`
	PodIP             string                      `protobuf:"bytes,7,opt,name=podIP,proto3" json:"podIP,omitempty"`
	Labels            map[string]string           `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Envs              map[string]string           `protobuf:"bytes,9,rep,name=envs,proto3" json:"envs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Container         []*GetK8SPodReply_Container `protobuf:"bytes,10,rep,name=container,proto3" json:"container,omitempty"`
}

func (x *GetK8SPodReply) Reset() {
	*x = GetK8SPodReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetK8SPodReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetK8SPodReply) ProtoMessage() {}

func (x *GetK8SPodReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetK8SPodReply.ProtoReflect.Descriptor instead.
func (*GetK8SPodReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{56}
}

func (x *GetK8SPodReply) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetK8SPodReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetK8SPodReply) GetCreationTimestamp() int64 {
	if x != nil {
		return x.CreationTimestamp
	}
	return 0
}

func (x *GetK8SPodReply) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *GetK8SPodReply) GetPhase() string {
	if x != nil {
		return x.Phase
	}
	return ""
}

func (x *GetK8SPodReply) GetHostIP() string {
	if x != nil {
		return x.HostIP
	}
	return ""
}

func (x *GetK8SPodReply) GetPodIP() string {
	if x != nil {
		return x.PodIP
	}
	return ""
}

func (x *GetK8SPodReply) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *GetK8SPodReply) GetEnvs() map[string]string {
	if x != nil {
		return x.Envs
	}
	return nil
}

func (x *GetK8SPodReply) GetContainer() []*GetK8SPodReply_Container {
	if x != nil {
		return x.Container
	}
	return nil
}

type DelK8SPodReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	K8SClusterUuid string `protobuf:"bytes,5,opt,name=k8sClusterUuid,proto3" json:"k8sClusterUuid,omitempty"`
	Namespace      string `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name           string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DelK8SPodReq) Reset() {
	*x = DelK8SPodReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelK8SPodReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelK8SPodReq) ProtoMessage() {}

func (x *DelK8SPodReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelK8SPodReq.ProtoReflect.Descriptor instead.
func (*DelK8SPodReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{57}
}

func (x *DelK8SPodReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *DelK8SPodReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *DelK8SPodReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *DelK8SPodReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *DelK8SPodReq) GetK8SClusterUuid() string {
	if x != nil {
		return x.K8SClusterUuid
	}
	return ""
}

func (x *DelK8SPodReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DelK8SPodReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DelK8SPodReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *DelK8SPodReply) Reset() {
	*x = DelK8SPodReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelK8SPodReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelK8SPodReply) ProtoMessage() {}

func (x *DelK8SPodReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelK8SPodReply.ProtoReflect.Descriptor instead.
func (*DelK8SPodReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{58}
}

func (x *DelK8SPodReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type CleanEvictK8SPodReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	K8SClusterUuid string `protobuf:"bytes,5,opt,name=k8sClusterUuid,proto3" json:"k8sClusterUuid,omitempty"`
	Namespace      string `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *CleanEvictK8SPodReq) Reset() {
	*x = CleanEvictK8SPodReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CleanEvictK8SPodReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanEvictK8SPodReq) ProtoMessage() {}

func (x *CleanEvictK8SPodReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanEvictK8SPodReq.ProtoReflect.Descriptor instead.
func (*CleanEvictK8SPodReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{59}
}

func (x *CleanEvictK8SPodReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *CleanEvictK8SPodReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *CleanEvictK8SPodReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *CleanEvictK8SPodReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *CleanEvictK8SPodReq) GetK8SClusterUuid() string {
	if x != nil {
		return x.K8SClusterUuid
	}
	return ""
}

func (x *CleanEvictK8SPodReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type CleanEvictK8SPodReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *CleanEvictK8SPodReply) Reset() {
	*x = CleanEvictK8SPodReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CleanEvictK8SPodReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanEvictK8SPodReply) ProtoMessage() {}

func (x *CleanEvictK8SPodReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanEvictK8SPodReply.ProtoReflect.Descriptor instead.
func (*CleanEvictK8SPodReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{60}
}

func (x *CleanEvictK8SPodReply) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type SearchK8SPodReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	K8SClusterUuid string `protobuf:"bytes,5,opt,name=k8sClusterUuid,proto3" json:"k8sClusterUuid,omitempty"`
	Namespace      string `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Keyword        string `protobuf:"bytes,7,opt,name=keyword,proto3" json:"keyword,omitempty"`
}

func (x *SearchK8SPodReq) Reset() {
	*x = SearchK8SPodReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchK8SPodReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchK8SPodReq) ProtoMessage() {}

func (x *SearchK8SPodReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchK8SPodReq.ProtoReflect.Descriptor instead.
func (*SearchK8SPodReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{61}
}

func (x *SearchK8SPodReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *SearchK8SPodReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *SearchK8SPodReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *SearchK8SPodReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *SearchK8SPodReq) GetK8SClusterUuid() string {
	if x != nil {
		return x.K8SClusterUuid
	}
	return ""
}

func (x *SearchK8SPodReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *SearchK8SPodReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

type SearchK8SPodReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pod []*SearchK8SPodReply_Pod `protobuf:"bytes,1,rep,name=pod,proto3" json:"pod,omitempty"`
}

func (x *SearchK8SPodReply) Reset() {
	*x = SearchK8SPodReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchK8SPodReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchK8SPodReply) ProtoMessage() {}

func (x *SearchK8SPodReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchK8SPodReply.ProtoReflect.Descriptor instead.
func (*SearchK8SPodReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{62}
}

func (x *SearchK8SPodReply) GetPod() []*SearchK8SPodReply_Pod {
	if x != nil {
		return x.Pod
	}
	return nil
}

//
type ConfigMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string            `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Data      map[string]string `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Immutable bool              `protobuf:"varint,4,opt,name=immutable,proto3" json:"immutable,omitempty"`
}

func (x *ConfigMap) Reset() {
	*x = ConfigMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigMap) ProtoMessage() {}

func (x *ConfigMap) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigMap.ProtoReflect.Descriptor instead.
func (*ConfigMap) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{63}
}

func (x *ConfigMap) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ConfigMap) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConfigMap) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ConfigMap) GetImmutable() bool {
	if x != nil {
		return x.Immutable
	}
	return false
}

type CreateK8SClusterConfigMapReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string            `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string            `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string            `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string            `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	K8SClusterUuid string            `protobuf:"bytes,5,opt,name=k8sClusterUuid,proto3" json:"k8sClusterUuid,omitempty"`
	Namespace      string            `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name           string            `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Data           map[string]string `protobuf:"bytes,8,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Immutable      bool              `protobuf:"varint,9,opt,name=immutable,proto3" json:"immutable,omitempty"`
}

func (x *CreateK8SClusterConfigMapReq) Reset() {
	*x = CreateK8SClusterConfigMapReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateK8SClusterConfigMapReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateK8SClusterConfigMapReq) ProtoMessage() {}

func (x *CreateK8SClusterConfigMapReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateK8SClusterConfigMapReq.ProtoReflect.Descriptor instead.
func (*CreateK8SClusterConfigMapReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{64}
}

func (x *CreateK8SClusterConfigMapReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *CreateK8SClusterConfigMapReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *CreateK8SClusterConfigMapReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *CreateK8SClusterConfigMapReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *CreateK8SClusterConfigMapReq) GetK8SClusterUuid() string {
	if x != nil {
		return x.K8SClusterUuid
	}
	return ""
}

func (x *CreateK8SClusterConfigMapReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CreateK8SClusterConfigMapReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateK8SClusterConfigMapReq) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CreateK8SClusterConfigMapReq) GetImmutable() bool {
	if x != nil {
		return x.Immutable
	}
	return false
}

type CreateK8SClusterConfigMapReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CreateK8SClusterConfigMapReply) Reset() {
	*x = CreateK8SClusterConfigMapReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateK8SClusterConfigMapReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateK8SClusterConfigMapReply) ProtoMessage() {}

func (x *CreateK8SClusterConfigMapReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateK8SClusterConfigMapReply.ProtoReflect.Descriptor instead.
func (*CreateK8SClusterConfigMapReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{65}
}

func (x *CreateK8SClusterConfigMapReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type ListK8SClusterConfigMapReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	K8SClusterUuid string `protobuf:"bytes,5,opt,name=k8sClusterUuid,proto3" json:"k8sClusterUuid,omitempty"`
	Namespace      string `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *ListK8SClusterConfigMapReq) Reset() {
	*x = ListK8SClusterConfigMapReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListK8SClusterConfigMapReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListK8SClusterConfigMapReq) ProtoMessage() {}

func (x *ListK8SClusterConfigMapReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListK8SClusterConfigMapReq.ProtoReflect.Descriptor instead.
func (*ListK8SClusterConfigMapReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{66}
}

func (x *ListK8SClusterConfigMapReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListK8SClusterConfigMapReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListK8SClusterConfigMapReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ListK8SClusterConfigMapReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *ListK8SClusterConfigMapReq) GetK8SClusterUuid() string {
	if x != nil {
		return x.K8SClusterUuid
	}
	return ""
}

func (x *ListK8SClusterConfigMapReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type ListK8SClusterConfigMapReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigMap []*ConfigMap `protobuf:"bytes,1,rep,name=configMap,proto3" json:"configMap,omitempty"`
}

func (x *ListK8SClusterConfigMapReply) Reset() {
	*x = ListK8SClusterConfigMapReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListK8SClusterConfigMapReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListK8SClusterConfigMapReply) ProtoMessage() {}

func (x *ListK8SClusterConfigMapReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListK8SClusterConfigMapReply.ProtoReflect.Descriptor instead.
func (*ListK8SClusterConfigMapReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{67}
}

func (x *ListK8SClusterConfigMapReply) GetConfigMap() []*ConfigMap {
	if x != nil {
		return x.ConfigMap
	}
	return nil
}

type GetK8SClusterConfigMapReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	K8SClusterUuid string `protobuf:"bytes,5,opt,name=k8sClusterUuid,proto3" json:"k8sClusterUuid,omitempty"`
	Namespace      string `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name           string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetK8SClusterConfigMapReq) Reset() {
	*x = GetK8SClusterConfigMapReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetK8SClusterConfigMapReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetK8SClusterConfigMapReq) ProtoMessage() {}

func (x *GetK8SClusterConfigMapReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetK8SClusterConfigMapReq.ProtoReflect.Descriptor instead.
func (*GetK8SClusterConfigMapReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{68}
}

func (x *GetK8SClusterConfigMapReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *GetK8SClusterConfigMapReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *GetK8SClusterConfigMapReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *GetK8SClusterConfigMapReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *GetK8SClusterConfigMapReq) GetK8SClusterUuid() string {
	if x != nil {
		return x.K8SClusterUuid
	}
	return ""
}

func (x *GetK8SClusterConfigMapReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetK8SClusterConfigMapReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetK8SClusterConfigMapReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string            `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Data      map[string]string `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Immutable bool              `protobuf:"varint,4,opt,name=immutable,proto3" json:"immutable,omitempty"`
}

func (x *GetK8SClusterConfigMapReply) Reset() {
	*x = GetK8SClusterConfigMapReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetK8SClusterConfigMapReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetK8SClusterConfigMapReply) ProtoMessage() {}

func (x *GetK8SClusterConfigMapReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetK8SClusterConfigMapReply.ProtoReflect.Descriptor instead.
func (*GetK8SClusterConfigMapReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{69}
}

func (x *GetK8SClusterConfigMapReply) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetK8SClusterConfigMapReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetK8SClusterConfigMapReply) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetK8SClusterConfigMapReply) GetImmutable() bool {
	if x != nil {
		return x.Immutable
	}
	return false
}

type UpdateK8SClusterConfigMapReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string            `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string            `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string            `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string            `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	K8SClusterUuid string            `protobuf:"bytes,5,opt,name=k8sClusterUuid,proto3" json:"k8sClusterUuid,omitempty"`
	Namespace      string            `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name           string            `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Data           map[string]string `protobuf:"bytes,8,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Immutable      bool              `protobuf:"varint,9,opt,name=immutable,proto3" json:"immutable,omitempty"`
}

func (x *UpdateK8SClusterConfigMapReq) Reset() {
	*x = UpdateK8SClusterConfigMapReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateK8SClusterConfigMapReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateK8SClusterConfigMapReq) ProtoMessage() {}

func (x *UpdateK8SClusterConfigMapReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateK8SClusterConfigMapReq.ProtoReflect.Descriptor instead.
func (*UpdateK8SClusterConfigMapReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{70}
}

func (x *UpdateK8SClusterConfigMapReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *UpdateK8SClusterConfigMapReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *UpdateK8SClusterConfigMapReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *UpdateK8SClusterConfigMapReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *UpdateK8SClusterConfigMapReq) GetK8SClusterUuid() string {
	if x != nil {
		return x.K8SClusterUuid
	}
	return ""
}

func (x *UpdateK8SClusterConfigMapReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *UpdateK8SClusterConfigMapReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateK8SClusterConfigMapReq) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UpdateK8SClusterConfigMapReq) GetImmutable() bool {
	if x != nil {
		return x.Immutable
	}
	return false
}

type UpdateK8SClusterConfigMapReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *UpdateK8SClusterConfigMapReply) Reset() {
	*x = UpdateK8SClusterConfigMapReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateK8SClusterConfigMapReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateK8SClusterConfigMapReply) ProtoMessage() {}

func (x *UpdateK8SClusterConfigMapReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateK8SClusterConfigMapReply.ProtoReflect.Descriptor instead.
func (*UpdateK8SClusterConfigMapReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{71}
}

func (x *UpdateK8SClusterConfigMapReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type DelK8SClusterConfigMapReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	K8SClusterUuid string `protobuf:"bytes,5,opt,name=k8sClusterUuid,proto3" json:"k8sClusterUuid,omitempty"`
	Namespace      string `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name           string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DelK8SClusterConfigMapReq) Reset() {
	*x = DelK8SClusterConfigMapReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelK8SClusterConfigMapReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelK8SClusterConfigMapReq) ProtoMessage() {}

func (x *DelK8SClusterConfigMapReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelK8SClusterConfigMapReq.ProtoReflect.Descriptor instead.
func (*DelK8SClusterConfigMapReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{72}
}

func (x *DelK8SClusterConfigMapReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *DelK8SClusterConfigMapReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *DelK8SClusterConfigMapReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *DelK8SClusterConfigMapReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *DelK8SClusterConfigMapReq) GetK8SClusterUuid() string {
	if x != nil {
		return x.K8SClusterUuid
	}
	return ""
}

func (x *DelK8SClusterConfigMapReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DelK8SClusterConfigMapReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DelK8SClusterConfigMapReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *DelK8SClusterConfigMapReply) Reset() {
	*x = DelK8SClusterConfigMapReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelK8SClusterConfigMapReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelK8SClusterConfigMapReply) ProtoMessage() {}

func (x *DelK8SClusterConfigMapReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelK8SClusterConfigMapReply.ProtoReflect.Descriptor instead.
func (*DelK8SClusterConfigMapReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{73}
}

func (x *DelK8SClusterConfigMapReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

//
type ListSecretReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	K8SClusterUuid string `protobuf:"bytes,5,opt,name=k8sClusterUuid,proto3" json:"k8sClusterUuid,omitempty"`
	Namespace      string `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *ListSecretReq) Reset() {
	*x = ListSecretReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSecretReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSecretReq) ProtoMessage() {}

func (x *ListSecretReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSecretReq.ProtoReflect.Descriptor instead.
func (*ListSecretReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{74}
}

func (x *ListSecretReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListSecretReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListSecretReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ListSecretReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *ListSecretReq) GetK8SClusterUuid() string {
	if x != nil {
		return x.K8SClusterUuid
	}
	return ""
}

func (x *ListSecretReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type ListSecretReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Secrets []*ListSecretReply_Secret `protobuf:"bytes,1,rep,name=secrets,proto3" json:"secrets,omitempty"`
}

func (x *ListSecretReply) Reset() {
	*x = ListSecretReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSecretReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSecretReply) ProtoMessage() {}

func (x *ListSecretReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSecretReply.ProtoReflect.Descriptor instead.
func (*ListSecretReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{75}
}

func (x *ListSecretReply) GetSecrets() []*ListSecretReply_Secret {
	if x != nil {
		return x.Secrets
	}
	return nil
}

type GetSecretReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	K8SClusterUuid string `protobuf:"bytes,5,opt,name=k8sClusterUuid,proto3" json:"k8sClusterUuid,omitempty"`
	Namespace      string `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name           string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetSecretReq) Reset() {
	*x = GetSecretReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSecretReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSecretReq) ProtoMessage() {}

func (x *GetSecretReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSecretReq.ProtoReflect.Descriptor instead.
func (*GetSecretReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{76}
}

func (x *GetSecretReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *GetSecretReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *GetSecretReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *GetSecretReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *GetSecretReq) GetK8SClusterUuid() string {
	if x != nil {
		return x.K8SClusterUuid
	}
	return ""
}

func (x *GetSecretReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetSecretReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetSecretReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace         string            `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name              string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Annotations       map[string]string `protobuf:"bytes,3,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Labels            map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Immutable         bool              `protobuf:"varint,5,opt,name=immutable,proto3" json:"immutable,omitempty"`
	Type              string            `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	CreationTimestamp int64             `protobuf:"varint,7,opt,name=creationTimestamp,proto3" json:"creationTimestamp,omitempty"`
	StringData        map[string]string `protobuf:"bytes,8,rep,name=stringData,proto3" json:"stringData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Data              map[string][]byte `protobuf:"bytes,9,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetSecretReply) Reset() {
	*x = GetSecretReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSecretReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSecretReply) ProtoMessage() {}

func (x *GetSecretReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSecretReply.ProtoReflect.Descriptor instead.
func (*GetSecretReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{77}
}

func (x *GetSecretReply) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetSecretReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetSecretReply) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *GetSecretReply) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *GetSecretReply) GetImmutable() bool {
	if x != nil {
		return x.Immutable
	}
	return false
}

func (x *GetSecretReply) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetSecretReply) GetCreationTimestamp() int64 {
	if x != nil {
		return x.CreationTimestamp
	}
	return 0
}

func (x *GetSecretReply) GetStringData() map[string]string {
	if x != nil {
		return x.StringData
	}
	return nil
}

func (x *GetSecretReply) GetData() map[string][]byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type DelSecretReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	K8SClusterUuid string `protobuf:"bytes,5,opt,name=k8sClusterUuid,proto3" json:"k8sClusterUuid,omitempty"`
	Namespace      string `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name           string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DelSecretReq) Reset() {
	*x = DelSecretReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelSecretReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelSecretReq) ProtoMessage() {}

func (x *DelSecretReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelSecretReq.ProtoReflect.Descriptor instead.
func (*DelSecretReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{78}
}

func (x *DelSecretReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *DelSecretReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *DelSecretReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *DelSecretReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *DelSecretReq) GetK8SClusterUuid() string {
	if x != nil {
		return x.K8SClusterUuid
	}
	return ""
}

func (x *DelSecretReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DelSecretReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DelSecretReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *DelSecretReply) Reset() {
	*x = DelSecretReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelSecretReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelSecretReply) ProtoMessage() {}

func (x *DelSecretReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelSecretReply.ProtoReflect.Descriptor instead.
func (*DelSecretReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{79}
}

func (x *DelSecretReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type CreateDockerSecretReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string            `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string            `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string            `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string            `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	K8SClusterUuid string            `protobuf:"bytes,5,opt,name=k8sClusterUuid,proto3" json:"k8sClusterUuid,omitempty"`
	Namespace      string            `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name           string            `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Username       string            `protobuf:"bytes,8,opt,name=username,proto3" json:"username,omitempty"`
	Password       string            `protobuf:"bytes,9,opt,name=password,proto3" json:"password,omitempty"`
	Email          string            `protobuf:"bytes,10,opt,name=email,proto3" json:"email,omitempty"`
	Url            string            `protobuf:"bytes,11,opt,name=url,proto3" json:"url,omitempty"`
	Annotations    map[string]string `protobuf:"bytes,12,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Labels         map[string]string `protobuf:"bytes,13,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateDockerSecretReq) Reset() {
	*x = CreateDockerSecretReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDockerSecretReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDockerSecretReq) ProtoMessage() {}

func (x *CreateDockerSecretReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDockerSecretReq.ProtoReflect.Descriptor instead.
func (*CreateDockerSecretReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{80}
}

func (x *CreateDockerSecretReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *CreateDockerSecretReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *CreateDockerSecretReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *CreateDockerSecretReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *CreateDockerSecretReq) GetK8SClusterUuid() string {
	if x != nil {
		return x.K8SClusterUuid
	}
	return ""
}

func (x *CreateDockerSecretReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CreateDockerSecretReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateDockerSecretReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *CreateDockerSecretReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CreateDockerSecretReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CreateDockerSecretReq) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *CreateDockerSecretReq) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *CreateDockerSecretReq) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type CreateDockerSecretReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CreateDockerSecretReply) Reset() {
	*x = CreateDockerSecretReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDockerSecretReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDockerSecretReply) ProtoMessage() {}

func (x *CreateDockerSecretReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDockerSecretReply.ProtoReflect.Descriptor instead.
func (*CreateDockerSecretReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{81}
}

func (x *CreateDockerSecretReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type UpdateDockerSecretReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string            `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string            `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string            `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string            `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	K8SClusterUuid string            `protobuf:"bytes,5,opt,name=k8sClusterUuid,proto3" json:"k8sClusterUuid,omitempty"`
	Namespace      string            `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name           string            `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Username       string            `protobuf:"bytes,8,opt,name=username,proto3" json:"username,omitempty"`
	Password       string            `protobuf:"bytes,9,opt,name=password,proto3" json:"password,omitempty"`
	Email          string            `protobuf:"bytes,10,opt,name=email,proto3" json:"email,omitempty"`
	Url            string            `protobuf:"bytes,11,opt,name=url,proto3" json:"url,omitempty"`
	Annotations    map[string]string `protobuf:"bytes,12,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Labels         map[string]string `protobuf:"bytes,13,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateDockerSecretReq) Reset() {
	*x = UpdateDockerSecretReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDockerSecretReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDockerSecretReq) ProtoMessage() {}

func (x *UpdateDockerSecretReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDockerSecretReq.ProtoReflect.Descriptor instead.
func (*UpdateDockerSecretReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{82}
}

func (x *UpdateDockerSecretReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *UpdateDockerSecretReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *UpdateDockerSecretReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *UpdateDockerSecretReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *UpdateDockerSecretReq) GetK8SClusterUuid() string {
	if x != nil {
		return x.K8SClusterUuid
	}
	return ""
}

func (x *UpdateDockerSecretReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *UpdateDockerSecretReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateDockerSecretReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UpdateDockerSecretReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UpdateDockerSecretReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UpdateDockerSecretReq) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *UpdateDockerSecretReq) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *UpdateDockerSecretReq) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type UpdateDockerSecretReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *UpdateDockerSecretReply) Reset() {
	*x = UpdateDockerSecretReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDockerSecretReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDockerSecretReply) ProtoMessage() {}

func (x *UpdateDockerSecretReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDockerSecretReply.ProtoReflect.Descriptor instead.
func (*UpdateDockerSecretReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{83}
}

func (x *UpdateDockerSecretReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type CreateTlsSecretReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string            `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string            `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string            `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string            `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	K8SClusterUuid string            `protobuf:"bytes,5,opt,name=k8sClusterUuid,proto3" json:"k8sClusterUuid,omitempty"`
	Namespace      string            `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name           string            `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	TlsCrt         string            `protobuf:"bytes,8,opt,name=tlsCrt,proto3" json:"tlsCrt,omitempty"`
	TlsKey         string            `protobuf:"bytes,9,opt,name=tlsKey,proto3" json:"tlsKey,omitempty"`
	Annotations    map[string]string `protobuf:"bytes,10,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Labels         map[string]string `protobuf:"bytes,11,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateTlsSecretReq) Reset() {
	*x = CreateTlsSecretReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTlsSecretReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTlsSecretReq) ProtoMessage() {}

func (x *CreateTlsSecretReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTlsSecretReq.ProtoReflect.Descriptor instead.
func (*CreateTlsSecretReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{84}
}

func (x *CreateTlsSecretReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *CreateTlsSecretReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *CreateTlsSecretReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *CreateTlsSecretReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *CreateTlsSecretReq) GetK8SClusterUuid() string {
	if x != nil {
		return x.K8SClusterUuid
	}
	return ""
}

func (x *CreateTlsSecretReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CreateTlsSecretReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateTlsSecretReq) GetTlsCrt() string {
	if x != nil {
		return x.TlsCrt
	}
	return ""
}

func (x *CreateTlsSecretReq) GetTlsKey() string {
	if x != nil {
		return x.TlsKey
	}
	return ""
}

func (x *CreateTlsSecretReq) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *CreateTlsSecretReq) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type CreateTlsSecretReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CreateTlsSecretReply) Reset() {
	*x = CreateTlsSecretReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTlsSecretReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTlsSecretReply) ProtoMessage() {}

func (x *CreateTlsSecretReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTlsSecretReply.ProtoReflect.Descriptor instead.
func (*CreateTlsSecretReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{85}
}

func (x *CreateTlsSecretReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type UpdateTlsSecretReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string            `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string            `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string            `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string            `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	K8SClusterUuid string            `protobuf:"bytes,5,opt,name=k8sClusterUuid,proto3" json:"k8sClusterUuid,omitempty"`
	Namespace      string            `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name           string            `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	TlsCrt         string            `protobuf:"bytes,8,opt,name=tlsCrt,proto3" json:"tlsCrt,omitempty"`
	TlsKey         string            `protobuf:"bytes,9,opt,name=tlsKey,proto3" json:"tlsKey,omitempty"`
	Annotations    map[string]string `protobuf:"bytes,10,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Labels         map[string]string `protobuf:"bytes,11,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateTlsSecretReq) Reset() {
	*x = UpdateTlsSecretReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTlsSecretReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTlsSecretReq) ProtoMessage() {}

func (x *UpdateTlsSecretReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTlsSecretReq.ProtoReflect.Descriptor instead.
func (*UpdateTlsSecretReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{86}
}

func (x *UpdateTlsSecretReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *UpdateTlsSecretReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *UpdateTlsSecretReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *UpdateTlsSecretReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *UpdateTlsSecretReq) GetK8SClusterUuid() string {
	if x != nil {
		return x.K8SClusterUuid
	}
	return ""
}

func (x *UpdateTlsSecretReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *UpdateTlsSecretReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateTlsSecretReq) GetTlsCrt() string {
	if x != nil {
		return x.TlsCrt
	}
	return ""
}

func (x *UpdateTlsSecretReq) GetTlsKey() string {
	if x != nil {
		return x.TlsKey
	}
	return ""
}

func (x *UpdateTlsSecretReq) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *UpdateTlsSecretReq) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type UpdateTlsSecretReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *UpdateTlsSecretReply) Reset() {
	*x = UpdateTlsSecretReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTlsSecretReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTlsSecretReply) ProtoMessage() {}

func (x *UpdateTlsSecretReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTlsSecretReply.ProtoReflect.Descriptor instead.
func (*UpdateTlsSecretReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{87}
}

func (x *UpdateTlsSecretReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type CreateOpaqueSecretReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string            `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string            `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string            `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string            `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	K8SClusterUuid string            `protobuf:"bytes,5,opt,name=k8sClusterUuid,proto3" json:"k8sClusterUuid,omitempty"`
	Namespace      string            `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name           string            `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Data           map[string]string `protobuf:"bytes,8,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Annotations    map[string]string `protobuf:"bytes,9,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Labels         map[string]string `protobuf:"bytes,10,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateOpaqueSecretReq) Reset() {
	*x = CreateOpaqueSecretReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOpaqueSecretReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOpaqueSecretReq) ProtoMessage() {}

func (x *CreateOpaqueSecretReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOpaqueSecretReq.ProtoReflect.Descriptor instead.
func (*CreateOpaqueSecretReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{88}
}

func (x *CreateOpaqueSecretReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *CreateOpaqueSecretReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *CreateOpaqueSecretReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *CreateOpaqueSecretReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *CreateOpaqueSecretReq) GetK8SClusterUuid() string {
	if x != nil {
		return x.K8SClusterUuid
	}
	return ""
}

func (x *CreateOpaqueSecretReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CreateOpaqueSecretReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateOpaqueSecretReq) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CreateOpaqueSecretReq) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *CreateOpaqueSecretReq) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type CreateOpaqueSecretReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CreateOpaqueSecretReply) Reset() {
	*x = CreateOpaqueSecretReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOpaqueSecretReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOpaqueSecretReply) ProtoMessage() {}

func (x *CreateOpaqueSecretReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOpaqueSecretReply.ProtoReflect.Descriptor instead.
func (*CreateOpaqueSecretReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{89}
}

func (x *CreateOpaqueSecretReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type UpdateOpaqueSecretReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string            `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string            `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string            `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string            `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	K8SClusterUuid string            `protobuf:"bytes,5,opt,name=k8sClusterUuid,proto3" json:"k8sClusterUuid,omitempty"`
	Namespace      string            `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name           string            `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Data           map[string]string `protobuf:"bytes,8,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Annotations    map[string]string `protobuf:"bytes,9,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Labels         map[string]string `protobuf:"bytes,10,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateOpaqueSecretReq) Reset() {
	*x = UpdateOpaqueSecretReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOpaqueSecretReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOpaqueSecretReq) ProtoMessage() {}

func (x *UpdateOpaqueSecretReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOpaqueSecretReq.ProtoReflect.Descriptor instead.
func (*UpdateOpaqueSecretReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{90}
}

func (x *UpdateOpaqueSecretReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *UpdateOpaqueSecretReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *UpdateOpaqueSecretReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *UpdateOpaqueSecretReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *UpdateOpaqueSecretReq) GetK8SClusterUuid() string {
	if x != nil {
		return x.K8SClusterUuid
	}
	return ""
}

func (x *UpdateOpaqueSecretReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *UpdateOpaqueSecretReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateOpaqueSecretReq) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UpdateOpaqueSecretReq) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *UpdateOpaqueSecretReq) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type UpdateOpaqueSecretReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *UpdateOpaqueSecretReply) Reset() {
	*x = UpdateOpaqueSecretReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOpaqueSecretReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOpaqueSecretReply) ProtoMessage() {}

func (x *UpdateOpaqueSecretReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOpaqueSecretReply.ProtoReflect.Descriptor instead.
func (*UpdateOpaqueSecretReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{91}
}

func (x *UpdateOpaqueSecretReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type CreateSSHAuthSecretReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string            `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string            `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string            `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string            `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	K8SClusterUuid string            `protobuf:"bytes,5,opt,name=k8sClusterUuid,proto3" json:"k8sClusterUuid,omitempty"`
	Namespace      string            `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name           string            `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	PrivateKey     string            `protobuf:"bytes,8,opt,name=privateKey,proto3" json:"privateKey,omitempty"`
	Immutable      bool              `protobuf:"varint,9,opt,name=immutable,proto3" json:"immutable,omitempty"`
	Annotations    map[string]string `protobuf:"bytes,10,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Labels         map[string]string `protobuf:"bytes,11,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateSSHAuthSecretReq) Reset() {
	*x = CreateSSHAuthSecretReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSSHAuthSecretReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSSHAuthSecretReq) ProtoMessage() {}

func (x *CreateSSHAuthSecretReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSSHAuthSecretReq.ProtoReflect.Descriptor instead.
func (*CreateSSHAuthSecretReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{92}
}

func (x *CreateSSHAuthSecretReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *CreateSSHAuthSecretReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *CreateSSHAuthSecretReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *CreateSSHAuthSecretReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *CreateSSHAuthSecretReq) GetK8SClusterUuid() string {
	if x != nil {
		return x.K8SClusterUuid
	}
	return ""
}

func (x *CreateSSHAuthSecretReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CreateSSHAuthSecretReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateSSHAuthSecretReq) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *CreateSSHAuthSecretReq) GetImmutable() bool {
	if x != nil {
		return x.Immutable
	}
	return false
}

func (x *CreateSSHAuthSecretReq) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *CreateSSHAuthSecretReq) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type CreateSSHAuthSecretReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CreateSSHAuthSecretReply) Reset() {
	*x = CreateSSHAuthSecretReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSSHAuthSecretReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSSHAuthSecretReply) ProtoMessage() {}

func (x *CreateSSHAuthSecretReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSSHAuthSecretReply.ProtoReflect.Descriptor instead.
func (*CreateSSHAuthSecretReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{93}
}

func (x *CreateSSHAuthSecretReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type UpdateSSHAuthSecretReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string            `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string            `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string            `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string            `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	K8SClusterUuid string            `protobuf:"bytes,5,opt,name=k8sClusterUuid,proto3" json:"k8sClusterUuid,omitempty"`
	Namespace      string            `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name           string            `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	PrivateKey     string            `protobuf:"bytes,8,opt,name=privateKey,proto3" json:"privateKey,omitempty"`
	Immutable      bool              `protobuf:"varint,9,opt,name=immutable,proto3" json:"immutable,omitempty"`
	Annotations    map[string]string `protobuf:"bytes,10,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Labels         map[string]string `protobuf:"bytes,11,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateSSHAuthSecretReq) Reset() {
	*x = UpdateSSHAuthSecretReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSSHAuthSecretReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSSHAuthSecretReq) ProtoMessage() {}

func (x *UpdateSSHAuthSecretReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSSHAuthSecretReq.ProtoReflect.Descriptor instead.
func (*UpdateSSHAuthSecretReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{94}
}

func (x *UpdateSSHAuthSecretReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *UpdateSSHAuthSecretReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *UpdateSSHAuthSecretReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *UpdateSSHAuthSecretReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *UpdateSSHAuthSecretReq) GetK8SClusterUuid() string {
	if x != nil {
		return x.K8SClusterUuid
	}
	return ""
}

func (x *UpdateSSHAuthSecretReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *UpdateSSHAuthSecretReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateSSHAuthSecretReq) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *UpdateSSHAuthSecretReq) GetImmutable() bool {
	if x != nil {
		return x.Immutable
	}
	return false
}

func (x *UpdateSSHAuthSecretReq) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *UpdateSSHAuthSecretReq) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type UpdateSSHAuthSecretReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *UpdateSSHAuthSecretReply) Reset() {
	*x = UpdateSSHAuthSecretReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSSHAuthSecretReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSSHAuthSecretReply) ProtoMessage() {}

func (x *UpdateSSHAuthSecretReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSSHAuthSecretReply.ProtoReflect.Descriptor instead.
func (*UpdateSSHAuthSecretReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{95}
}

func (x *UpdateSSHAuthSecretReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

//
type CreateBasicAuthSecretReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string            `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string            `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string            `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string            `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	K8SClusterUuid string            `protobuf:"bytes,5,opt,name=k8sClusterUuid,proto3" json:"k8sClusterUuid,omitempty"`
	Namespace      string            `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name           string            `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Username       string            `protobuf:"bytes,8,opt,name=username,proto3" json:"username,omitempty"`
	Password       string            `protobuf:"bytes,9,opt,name=password,proto3" json:"password,omitempty"`
	Immutable      bool              `protobuf:"varint,10,opt,name=immutable,proto3" json:"immutable,omitempty"`
	Annotations    map[string]string `protobuf:"bytes,11,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Labels         map[string]string `protobuf:"bytes,12,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateBasicAuthSecretReq) Reset() {
	*x = CreateBasicAuthSecretReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBasicAuthSecretReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBasicAuthSecretReq) ProtoMessage() {}

func (x *CreateBasicAuthSecretReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBasicAuthSecretReq.ProtoReflect.Descriptor instead.
func (*CreateBasicAuthSecretReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{96}
}

func (x *CreateBasicAuthSecretReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *CreateBasicAuthSecretReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *CreateBasicAuthSecretReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *CreateBasicAuthSecretReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *CreateBasicAuthSecretReq) GetK8SClusterUuid() string {
	if x != nil {
		return x.K8SClusterUuid
	}
	return ""
}

func (x *CreateBasicAuthSecretReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CreateBasicAuthSecretReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateBasicAuthSecretReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *CreateBasicAuthSecretReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CreateBasicAuthSecretReq) GetImmutable() bool {
	if x != nil {
		return x.Immutable
	}
	return false
}

func (x *CreateBasicAuthSecretReq) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *CreateBasicAuthSecretReq) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type CreateBasicAuthSecretReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CreateBasicAuthSecretReply) Reset() {
	*x = CreateBasicAuthSecretReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBasicAuthSecretReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBasicAuthSecretReply) ProtoMessage() {}

func (x *CreateBasicAuthSecretReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBasicAuthSecretReply.ProtoReflect.Descriptor instead.
func (*CreateBasicAuthSecretReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{97}
}

func (x *CreateBasicAuthSecretReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

//
type UpdateBasicAuthSecretReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string            `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string            `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string            `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string            `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	K8SClusterUuid string            `protobuf:"bytes,5,opt,name=k8sClusterUuid,proto3" json:"k8sClusterUuid,omitempty"`
	Namespace      string            `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name           string            `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Username       string            `protobuf:"bytes,8,opt,name=username,proto3" json:"username,omitempty"`
	Password       string            `protobuf:"bytes,9,opt,name=password,proto3" json:"password,omitempty"`
	Immutable      bool              `protobuf:"varint,10,opt,name=immutable,proto3" json:"immutable,omitempty"`
	Annotations    map[string]string `protobuf:"bytes,11,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Labels         map[string]string `protobuf:"bytes,12,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateBasicAuthSecretReq) Reset() {
	*x = UpdateBasicAuthSecretReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBasicAuthSecretReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBasicAuthSecretReq) ProtoMessage() {}

func (x *UpdateBasicAuthSecretReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBasicAuthSecretReq.ProtoReflect.Descriptor instead.
func (*UpdateBasicAuthSecretReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{98}
}

func (x *UpdateBasicAuthSecretReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *UpdateBasicAuthSecretReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *UpdateBasicAuthSecretReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *UpdateBasicAuthSecretReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *UpdateBasicAuthSecretReq) GetK8SClusterUuid() string {
	if x != nil {
		return x.K8SClusterUuid
	}
	return ""
}

func (x *UpdateBasicAuthSecretReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *UpdateBasicAuthSecretReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateBasicAuthSecretReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UpdateBasicAuthSecretReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UpdateBasicAuthSecretReq) GetImmutable() bool {
	if x != nil {
		return x.Immutable
	}
	return false
}

func (x *UpdateBasicAuthSecretReq) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *UpdateBasicAuthSecretReq) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type UpdateBasicAuthSecretReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *UpdateBasicAuthSecretReply) Reset() {
	*x = UpdateBasicAuthSecretReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBasicAuthSecretReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBasicAuthSecretReply) ProtoMessage() {}

func (x *UpdateBasicAuthSecretReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBasicAuthSecretReply.ProtoReflect.Descriptor instead.
func (*UpdateBasicAuthSecretReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{99}
}

func (x *UpdateBasicAuthSecretReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

//
type ListK8SClusterNameSpaceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	K8SClusterUuid string `protobuf:"bytes,5,opt,name=k8sClusterUuid,proto3" json:"k8sClusterUuid,omitempty"`
}

func (x *ListK8SClusterNameSpaceReq) Reset() {
	*x = ListK8SClusterNameSpaceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListK8SClusterNameSpaceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListK8SClusterNameSpaceReq) ProtoMessage() {}

func (x *ListK8SClusterNameSpaceReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListK8SClusterNameSpaceReq.ProtoReflect.Descriptor instead.
func (*ListK8SClusterNameSpaceReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{100}
}

func (x *ListK8SClusterNameSpaceReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListK8SClusterNameSpaceReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListK8SClusterNameSpaceReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ListK8SClusterNameSpaceReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *ListK8SClusterNameSpaceReq) GetK8SClusterUuid() string {
	if x != nil {
		return x.K8SClusterUuid
	}
	return ""
}

type ListK8SClusterNameSpaceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NameSpace []*ListK8SClusterNameSpaceReply_NameSpace `protobuf:"bytes,1,rep,name=nameSpace,proto3" json:"nameSpace,omitempty"`
}

func (x *ListK8SClusterNameSpaceReply) Reset() {
	*x = ListK8SClusterNameSpaceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListK8SClusterNameSpaceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListK8SClusterNameSpaceReply) ProtoMessage() {}

func (x *ListK8SClusterNameSpaceReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListK8SClusterNameSpaceReply.ProtoReflect.Descriptor instead.
func (*ListK8SClusterNameSpaceReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{101}
}

func (x *ListK8SClusterNameSpaceReply) GetNameSpace() []*ListK8SClusterNameSpaceReply_NameSpace {
	if x != nil {
		return x.NameSpace
	}
	return nil
}

type DelK8SClusterNameSpaceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	K8SClusterUuid string `protobuf:"bytes,5,opt,name=k8sClusterUuid,proto3" json:"k8sClusterUuid,omitempty"`
	Namespace      string `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *DelK8SClusterNameSpaceReq) Reset() {
	*x = DelK8SClusterNameSpaceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelK8SClusterNameSpaceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelK8SClusterNameSpaceReq) ProtoMessage() {}

func (x *DelK8SClusterNameSpaceReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelK8SClusterNameSpaceReq.ProtoReflect.Descriptor instead.
func (*DelK8SClusterNameSpaceReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{102}
}

func (x *DelK8SClusterNameSpaceReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *DelK8SClusterNameSpaceReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *DelK8SClusterNameSpaceReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *DelK8SClusterNameSpaceReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *DelK8SClusterNameSpaceReq) GetK8SClusterUuid() string {
	if x != nil {
		return x.K8SClusterUuid
	}
	return ""
}

func (x *DelK8SClusterNameSpaceReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type DelK8SClusterNameSpaceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *DelK8SClusterNameSpaceReply) Reset() {
	*x = DelK8SClusterNameSpaceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelK8SClusterNameSpaceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelK8SClusterNameSpaceReply) ProtoMessage() {}

func (x *DelK8SClusterNameSpaceReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelK8SClusterNameSpaceReply.ProtoReflect.Descriptor instead.
func (*DelK8SClusterNameSpaceReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{103}
}

func (x *DelK8SClusterNameSpaceReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type CreateK8SClusterNameSpaceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	K8SClusterUuid string `protobuf:"bytes,5,opt,name=k8sClusterUuid,proto3" json:"k8sClusterUuid,omitempty"`
	Namespace      string `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *CreateK8SClusterNameSpaceReq) Reset() {
	*x = CreateK8SClusterNameSpaceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateK8SClusterNameSpaceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateK8SClusterNameSpaceReq) ProtoMessage() {}

func (x *CreateK8SClusterNameSpaceReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateK8SClusterNameSpaceReq.ProtoReflect.Descriptor instead.
func (*CreateK8SClusterNameSpaceReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{104}
}

func (x *CreateK8SClusterNameSpaceReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *CreateK8SClusterNameSpaceReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *CreateK8SClusterNameSpaceReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *CreateK8SClusterNameSpaceReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *CreateK8SClusterNameSpaceReq) GetK8SClusterUuid() string {
	if x != nil {
		return x.K8SClusterUuid
	}
	return ""
}

func (x *CreateK8SClusterNameSpaceReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type CreateK8SClusterNameSpaceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CreateK8SClusterNameSpaceReply) Reset() {
	*x = CreateK8SClusterNameSpaceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateK8SClusterNameSpaceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateK8SClusterNameSpaceReply) ProtoMessage() {}

func (x *CreateK8SClusterNameSpaceReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateK8SClusterNameSpaceReply.ProtoReflect.Descriptor instead.
func (*CreateK8SClusterNameSpaceReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{105}
}

func (x *CreateK8SClusterNameSpaceReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type ListK8SClusterDeploymentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	K8SClusterUuid string `protobuf:"bytes,5,opt,name=k8sClusterUuid,proto3" json:"k8sClusterUuid,omitempty"`
	Namespace      string `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Limit          int64  `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	Continue       string `protobuf:"bytes,8,opt,name=continue,proto3" json:"continue,omitempty"`
	LabelSelector  string `protobuf:"bytes,9,opt,name=labelSelector,proto3" json:"labelSelector,omitempty"`
}

func (x *ListK8SClusterDeploymentReq) Reset() {
	*x = ListK8SClusterDeploymentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListK8SClusterDeploymentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListK8SClusterDeploymentReq) ProtoMessage() {}

func (x *ListK8SClusterDeploymentReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListK8SClusterDeploymentReq.ProtoReflect.Descriptor instead.
func (*ListK8SClusterDeploymentReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{106}
}

func (x *ListK8SClusterDeploymentReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListK8SClusterDeploymentReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListK8SClusterDeploymentReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ListK8SClusterDeploymentReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *ListK8SClusterDeploymentReq) GetK8SClusterUuid() string {
	if x != nil {
		return x.K8SClusterUuid
	}
	return ""
}

func (x *ListK8SClusterDeploymentReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListK8SClusterDeploymentReq) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListK8SClusterDeploymentReq) GetContinue() string {
	if x != nil {
		return x.Continue
	}
	return ""
}

func (x *ListK8SClusterDeploymentReq) GetLabelSelector() string {
	if x != nil {
		return x.LabelSelector
	}
	return ""
}

type ListK8SClusterDeploymentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Continue   string                                            `protobuf:"bytes,1,opt,name=continue,proto3" json:"continue,omitempty"`
	Deployment []*ListK8SClusterDeploymentReply_DeploymentStatus `protobuf:"bytes,2,rep,name=deployment,proto3" json:"deployment,omitempty"`
}

func (x *ListK8SClusterDeploymentReply) Reset() {
	*x = ListK8SClusterDeploymentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListK8SClusterDeploymentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListK8SClusterDeploymentReply) ProtoMessage() {}

func (x *ListK8SClusterDeploymentReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListK8SClusterDeploymentReply.ProtoReflect.Descriptor instead.
func (*ListK8SClusterDeploymentReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{107}
}

func (x *ListK8SClusterDeploymentReply) GetContinue() string {
	if x != nil {
		return x.Continue
	}
	return ""
}

func (x *ListK8SClusterDeploymentReply) GetDeployment() []*ListK8SClusterDeploymentReply_DeploymentStatus {
	if x != nil {
		return x.Deployment
	}
	return nil
}

type GetK8SClusterDeploymentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	K8SClusterUuid string `protobuf:"bytes,5,opt,name=k8sClusterUuid,proto3" json:"k8sClusterUuid,omitempty"`
	Namespace      string `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Deployment     string `protobuf:"bytes,7,opt,name=deployment,proto3" json:"deployment,omitempty"`
}

func (x *GetK8SClusterDeploymentReq) Reset() {
	*x = GetK8SClusterDeploymentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetK8SClusterDeploymentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetK8SClusterDeploymentReq) ProtoMessage() {}

func (x *GetK8SClusterDeploymentReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetK8SClusterDeploymentReq.ProtoReflect.Descriptor instead.
func (*GetK8SClusterDeploymentReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{108}
}

func (x *GetK8SClusterDeploymentReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *GetK8SClusterDeploymentReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *GetK8SClusterDeploymentReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *GetK8SClusterDeploymentReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *GetK8SClusterDeploymentReq) GetK8SClusterUuid() string {
	if x != nil {
		return x.K8SClusterUuid
	}
	return ""
}

func (x *GetK8SClusterDeploymentReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetK8SClusterDeploymentReq) GetDeployment() string {
	if x != nil {
		return x.Deployment
	}
	return ""
}

type GetK8SClusterDeploymentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deployments string `protobuf:"bytes,1,opt,name=deployments,proto3" json:"deployments,omitempty"`
}

func (x *GetK8SClusterDeploymentReply) Reset() {
	*x = GetK8SClusterDeploymentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetK8SClusterDeploymentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetK8SClusterDeploymentReply) ProtoMessage() {}

func (x *GetK8SClusterDeploymentReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetK8SClusterDeploymentReply.ProtoReflect.Descriptor instead.
func (*GetK8SClusterDeploymentReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{109}
}

func (x *GetK8SClusterDeploymentReply) GetDeployments() string {
	if x != nil {
		return x.Deployments
	}
	return ""
}

type UpdateK8SClusterDeploymentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateK8SClusterDeploymentReq) Reset() {
	*x = UpdateK8SClusterDeploymentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateK8SClusterDeploymentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateK8SClusterDeploymentReq) ProtoMessage() {}

func (x *UpdateK8SClusterDeploymentReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateK8SClusterDeploymentReq.ProtoReflect.Descriptor instead.
func (*UpdateK8SClusterDeploymentReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{110}
}

type UpdateK8SClusterDeploymentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateK8SClusterDeploymentReply) Reset() {
	*x = UpdateK8SClusterDeploymentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateK8SClusterDeploymentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateK8SClusterDeploymentReply) ProtoMessage() {}

func (x *UpdateK8SClusterDeploymentReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateK8SClusterDeploymentReply.ProtoReflect.Descriptor instead.
func (*UpdateK8SClusterDeploymentReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{111}
}

type DelK8SClusterDeploymentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	K8SClusterUuid string `protobuf:"bytes,5,opt,name=k8sClusterUuid,proto3" json:"k8sClusterUuid,omitempty"`
	Namespace      string `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Deployment     string `protobuf:"bytes,7,opt,name=deployment,proto3" json:"deployment,omitempty"`
}

func (x *DelK8SClusterDeploymentReq) Reset() {
	*x = DelK8SClusterDeploymentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelK8SClusterDeploymentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelK8SClusterDeploymentReq) ProtoMessage() {}

func (x *DelK8SClusterDeploymentReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelK8SClusterDeploymentReq.ProtoReflect.Descriptor instead.
func (*DelK8SClusterDeploymentReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{112}
}

func (x *DelK8SClusterDeploymentReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *DelK8SClusterDeploymentReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *DelK8SClusterDeploymentReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *DelK8SClusterDeploymentReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *DelK8SClusterDeploymentReq) GetK8SClusterUuid() string {
	if x != nil {
		return x.K8SClusterUuid
	}
	return ""
}

func (x *DelK8SClusterDeploymentReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DelK8SClusterDeploymentReq) GetDeployment() string {
	if x != nil {
		return x.Deployment
	}
	return ""
}

type DelK8SClusterDeploymentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *DelK8SClusterDeploymentReply) Reset() {
	*x = DelK8SClusterDeploymentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelK8SClusterDeploymentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelK8SClusterDeploymentReply) ProtoMessage() {}

func (x *DelK8SClusterDeploymentReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelK8SClusterDeploymentReply.ProtoReflect.Descriptor instead.
func (*DelK8SClusterDeploymentReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{113}
}

func (x *DelK8SClusterDeploymentReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type UpdateK8SClusterDeploymentReplicaSetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	K8SClusterUuid string `protobuf:"bytes,5,opt,name=k8sClusterUuid,proto3" json:"k8sClusterUuid,omitempty"`
	Namespace      string `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name           string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Replicas       int32  `protobuf:"varint,8,opt,name=replicas,proto3" json:"replicas,omitempty"`
}

func (x *UpdateK8SClusterDeploymentReplicaSetReq) Reset() {
	*x = UpdateK8SClusterDeploymentReplicaSetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateK8SClusterDeploymentReplicaSetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateK8SClusterDeploymentReplicaSetReq) ProtoMessage() {}

func (x *UpdateK8SClusterDeploymentReplicaSetReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateK8SClusterDeploymentReplicaSetReq.ProtoReflect.Descriptor instead.
func (*UpdateK8SClusterDeploymentReplicaSetReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{114}
}

func (x *UpdateK8SClusterDeploymentReplicaSetReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *UpdateK8SClusterDeploymentReplicaSetReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *UpdateK8SClusterDeploymentReplicaSetReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *UpdateK8SClusterDeploymentReplicaSetReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *UpdateK8SClusterDeploymentReplicaSetReq) GetK8SClusterUuid() string {
	if x != nil {
		return x.K8SClusterUuid
	}
	return ""
}

func (x *UpdateK8SClusterDeploymentReplicaSetReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *UpdateK8SClusterDeploymentReplicaSetReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateK8SClusterDeploymentReplicaSetReq) GetReplicas() int32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

type UpdateK8SClusterDeploymentReplicaSetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *UpdateK8SClusterDeploymentReplicaSetReply) Reset() {
	*x = UpdateK8SClusterDeploymentReplicaSetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateK8SClusterDeploymentReplicaSetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateK8SClusterDeploymentReplicaSetReply) ProtoMessage() {}

func (x *UpdateK8SClusterDeploymentReplicaSetReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateK8SClusterDeploymentReplicaSetReply.ProtoReflect.Descriptor instead.
func (*UpdateK8SClusterDeploymentReplicaSetReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{115}
}

func (x *UpdateK8SClusterDeploymentReplicaSetReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

//
type ServicePort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Protocol   string `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Port       int32  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	TargetPort int32  `protobuf:"varint,4,opt,name=targetPort,proto3" json:"targetPort,omitempty"`
}

func (x *ServicePort) Reset() {
	*x = ServicePort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServicePort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServicePort) ProtoMessage() {}

func (x *ServicePort) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServicePort.ProtoReflect.Descriptor instead.
func (*ServicePort) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{116}
}

func (x *ServicePort) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServicePort) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *ServicePort) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ServicePort) GetTargetPort() int32 {
	if x != nil {
		return x.TargetPort
	}
	return 0
}

type CreateK8SServiceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string            `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string            `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string            `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string            `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	K8SClusterUuid string            `protobuf:"bytes,5,opt,name=k8sClusterUuid,proto3" json:"k8sClusterUuid,omitempty"`
	Namespace      string            `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name           string            `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	ServiceType    string            `protobuf:"bytes,8,opt,name=serviceType,proto3" json:"serviceType,omitempty"`
	Selector       map[string]string `protobuf:"bytes,9,rep,name=selector,proto3" json:"selector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Ports          []*ServicePort    `protobuf:"bytes,10,rep,name=ports,proto3" json:"ports,omitempty"`
	Annotations    map[string]string `protobuf:"bytes,11,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateK8SServiceReq) Reset() {
	*x = CreateK8SServiceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateK8SServiceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateK8SServiceReq) ProtoMessage() {}

func (x *CreateK8SServiceReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateK8SServiceReq.ProtoReflect.Descriptor instead.
func (*CreateK8SServiceReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{117}
}

func (x *CreateK8SServiceReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *CreateK8SServiceReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *CreateK8SServiceReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *CreateK8SServiceReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *CreateK8SServiceReq) GetK8SClusterUuid() string {
	if x != nil {
		return x.K8SClusterUuid
	}
	return ""
}

func (x *CreateK8SServiceReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CreateK8SServiceReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateK8SServiceReq) GetServiceType() string {
	if x != nil {
		return x.ServiceType
	}
	return ""
}

func (x *CreateK8SServiceReq) GetSelector() map[string]string {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *CreateK8SServiceReq) GetPorts() []*ServicePort {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *CreateK8SServiceReq) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type CreateK8SServiceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CreateK8SServiceReply) Reset() {
	*x = CreateK8SServiceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateK8SServiceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateK8SServiceReply) ProtoMessage() {}

func (x *CreateK8SServiceReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateK8SServiceReply.ProtoReflect.Descriptor instead.
func (*CreateK8SServiceReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{118}
}

func (x *CreateK8SServiceReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type ListK8SServiceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	K8SClusterUuid string `protobuf:"bytes,5,opt,name=k8sClusterUuid,proto3" json:"k8sClusterUuid,omitempty"`
	Namespace      string `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *ListK8SServiceReq) Reset() {
	*x = ListK8SServiceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListK8SServiceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListK8SServiceReq) ProtoMessage() {}

func (x *ListK8SServiceReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListK8SServiceReq.ProtoReflect.Descriptor instead.
func (*ListK8SServiceReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{119}
}

func (x *ListK8SServiceReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListK8SServiceReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListK8SServiceReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ListK8SServiceReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *ListK8SServiceReq) GetK8SClusterUuid() string {
	if x != nil {
		return x.K8SClusterUuid
	}
	return ""
}

func (x *ListK8SServiceReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type ListK8SServiceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service []*ListK8SServiceReply_Service `protobuf:"bytes,1,rep,name=service,proto3" json:"service,omitempty"`
}

func (x *ListK8SServiceReply) Reset() {
	*x = ListK8SServiceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListK8SServiceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListK8SServiceReply) ProtoMessage() {}

func (x *ListK8SServiceReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListK8SServiceReply.ProtoReflect.Descriptor instead.
func (*ListK8SServiceReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{120}
}

func (x *ListK8SServiceReply) GetService() []*ListK8SServiceReply_Service {
	if x != nil {
		return x.Service
	}
	return nil
}

type GetK8SServiceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	K8SClusterUuid string `protobuf:"bytes,5,opt,name=k8sClusterUuid,proto3" json:"k8sClusterUuid,omitempty"`
	Namespace      string `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name           string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetK8SServiceReq) Reset() {
	*x = GetK8SServiceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetK8SServiceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetK8SServiceReq) ProtoMessage() {}

func (x *GetK8SServiceReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetK8SServiceReq.ProtoReflect.Descriptor instead.
func (*GetK8SServiceReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{121}
}

func (x *GetK8SServiceReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *GetK8SServiceReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *GetK8SServiceReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *GetK8SServiceReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *GetK8SServiceReq) GetK8SClusterUuid() string {
	if x != nil {
		return x.K8SClusterUuid
	}
	return ""
}

func (x *GetK8SServiceReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetK8SServiceReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetK8SServiceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace       string            `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ResourceVersion string            `protobuf:"bytes,3,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
	ClusterIP       string            `protobuf:"bytes,4,opt,name=clusterIP,proto3" json:"clusterIP,omitempty"`
	SessionAffinity string            `protobuf:"bytes,5,opt,name=sessionAffinity,proto3" json:"sessionAffinity,omitempty"`
	Type            string            `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	Labels          map[string]string `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Annotations     map[string]string `protobuf:"bytes,8,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Ports           []*ServicePort    `protobuf:"bytes,9,rep,name=ports,proto3" json:"ports,omitempty"`
	ExternalIPs     []string          `protobuf:"bytes,10,rep,name=ExternalIPs,proto3" json:"ExternalIPs,omitempty"`
}

func (x *GetK8SServiceReply) Reset() {
	*x = GetK8SServiceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetK8SServiceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetK8SServiceReply) ProtoMessage() {}

func (x *GetK8SServiceReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetK8SServiceReply.ProtoReflect.Descriptor instead.
func (*GetK8SServiceReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{122}
}

func (x *GetK8SServiceReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetK8SServiceReply) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetK8SServiceReply) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

func (x *GetK8SServiceReply) GetClusterIP() string {
	if x != nil {
		return x.ClusterIP
	}
	return ""
}

func (x *GetK8SServiceReply) GetSessionAffinity() string {
	if x != nil {
		return x.SessionAffinity
	}
	return ""
}

func (x *GetK8SServiceReply) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetK8SServiceReply) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *GetK8SServiceReply) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *GetK8SServiceReply) GetPorts() []*ServicePort {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *GetK8SServiceReply) GetExternalIPs() []string {
	if x != nil {
		return x.ExternalIPs
	}
	return nil
}

type DelK8SServiceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	K8SClusterUuid string `protobuf:"bytes,5,opt,name=k8sClusterUuid,proto3" json:"k8sClusterUuid,omitempty"`
	Namespace      string `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name           string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DelK8SServiceReq) Reset() {
	*x = DelK8SServiceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelK8SServiceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelK8SServiceReq) ProtoMessage() {}

func (x *DelK8SServiceReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelK8SServiceReq.ProtoReflect.Descriptor instead.
func (*DelK8SServiceReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{123}
}

func (x *DelK8SServiceReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *DelK8SServiceReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *DelK8SServiceReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *DelK8SServiceReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *DelK8SServiceReq) GetK8SClusterUuid() string {
	if x != nil {
		return x.K8SClusterUuid
	}
	return ""
}

func (x *DelK8SServiceReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DelK8SServiceReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DelK8SServiceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *DelK8SServiceReply) Reset() {
	*x = DelK8SServiceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelK8SServiceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelK8SServiceReply) ProtoMessage() {}

func (x *DelK8SServiceReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelK8SServiceReply.ProtoReflect.Descriptor instead.
func (*DelK8SServiceReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{124}
}

func (x *DelK8SServiceReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// Ingress
type CreateK8SIngressReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string                                  `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string                                  `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string                                  `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string                                  `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	K8SClusterUuid string                                  `protobuf:"bytes,5,opt,name=k8sClusterUuid,proto3" json:"k8sClusterUuid,omitempty"`
	Namespace      string                                  `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name           string                                  `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Annotations    map[string]string                       `protobuf:"bytes,8,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Labels         map[string]string                       `protobuf:"bytes,9,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Service        map[string]*CreateK8SIngressReq_Service `protobuf:"bytes,10,rep,name=service,proto3" json:"service,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateK8SIngressReq) Reset() {
	*x = CreateK8SIngressReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateK8SIngressReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateK8SIngressReq) ProtoMessage() {}

func (x *CreateK8SIngressReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateK8SIngressReq.ProtoReflect.Descriptor instead.
func (*CreateK8SIngressReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{125}
}

func (x *CreateK8SIngressReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *CreateK8SIngressReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *CreateK8SIngressReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *CreateK8SIngressReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *CreateK8SIngressReq) GetK8SClusterUuid() string {
	if x != nil {
		return x.K8SClusterUuid
	}
	return ""
}

func (x *CreateK8SIngressReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CreateK8SIngressReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateK8SIngressReq) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *CreateK8SIngressReq) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateK8SIngressReq) GetService() map[string]*CreateK8SIngressReq_Service {
	if x != nil {
		return x.Service
	}
	return nil
}

type CreateK8SIngressReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CreateK8SIngressReply) Reset() {
	*x = CreateK8SIngressReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateK8SIngressReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateK8SIngressReply) ProtoMessage() {}

func (x *CreateK8SIngressReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateK8SIngressReply.ProtoReflect.Descriptor instead.
func (*CreateK8SIngressReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{126}
}

func (x *CreateK8SIngressReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type ListK8SIngressReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	K8SClusterUuid string `protobuf:"bytes,5,opt,name=k8sClusterUuid,proto3" json:"k8sClusterUuid,omitempty"`
	Namespace      string `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *ListK8SIngressReq) Reset() {
	*x = ListK8SIngressReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListK8SIngressReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListK8SIngressReq) ProtoMessage() {}

func (x *ListK8SIngressReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListK8SIngressReq.ProtoReflect.Descriptor instead.
func (*ListK8SIngressReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{127}
}

func (x *ListK8SIngressReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListK8SIngressReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListK8SIngressReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ListK8SIngressReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *ListK8SIngressReq) GetK8SClusterUuid() string {
	if x != nil {
		return x.K8SClusterUuid
	}
	return ""
}

func (x *ListK8SIngressReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type ListK8SIngressReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ingress []*ListK8SIngressReply_Ingress `protobuf:"bytes,1,rep,name=ingress,proto3" json:"ingress,omitempty"`
}

func (x *ListK8SIngressReply) Reset() {
	*x = ListK8SIngressReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListK8SIngressReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListK8SIngressReply) ProtoMessage() {}

func (x *ListK8SIngressReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListK8SIngressReply.ProtoReflect.Descriptor instead.
func (*ListK8SIngressReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{128}
}

func (x *ListK8SIngressReply) GetIngress() []*ListK8SIngressReply_Ingress {
	if x != nil {
		return x.Ingress
	}
	return nil
}

type GetK8SIngressReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	K8SClusterUuid string `protobuf:"bytes,5,opt,name=k8sClusterUuid,proto3" json:"k8sClusterUuid,omitempty"`
	Namespace      string `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name           string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetK8SIngressReq) Reset() {
	*x = GetK8SIngressReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetK8SIngressReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetK8SIngressReq) ProtoMessage() {}

func (x *GetK8SIngressReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetK8SIngressReq.ProtoReflect.Descriptor instead.
func (*GetK8SIngressReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{129}
}

func (x *GetK8SIngressReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *GetK8SIngressReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *GetK8SIngressReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *GetK8SIngressReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *GetK8SIngressReq) GetK8SClusterUuid() string {
	if x != nil {
		return x.K8SClusterUuid
	}
	return ""
}

func (x *GetK8SIngressReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetK8SIngressReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetK8SIngressReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string                                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace string                                        `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Labels    map[string]string                             `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Service   map[string]*GetK8SIngressReply_IngressService `protobuf:"bytes,4,rep,name=service,proto3" json:"service,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetK8SIngressReply) Reset() {
	*x = GetK8SIngressReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetK8SIngressReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetK8SIngressReply) ProtoMessage() {}

func (x *GetK8SIngressReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetK8SIngressReply.ProtoReflect.Descriptor instead.
func (*GetK8SIngressReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{130}
}

func (x *GetK8SIngressReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetK8SIngressReply) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetK8SIngressReply) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *GetK8SIngressReply) GetService() map[string]*GetK8SIngressReply_IngressService {
	if x != nil {
		return x.Service
	}
	return nil
}

type DelK8SIngressReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	K8SClusterUuid string `protobuf:"bytes,5,opt,name=k8sClusterUuid,proto3" json:"k8sClusterUuid,omitempty"`
	Namespace      string `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name           string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DelK8SIngressReq) Reset() {
	*x = DelK8SIngressReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelK8SIngressReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelK8SIngressReq) ProtoMessage() {}

func (x *DelK8SIngressReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelK8SIngressReq.ProtoReflect.Descriptor instead.
func (*DelK8SIngressReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{131}
}

func (x *DelK8SIngressReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *DelK8SIngressReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *DelK8SIngressReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *DelK8SIngressReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *DelK8SIngressReq) GetK8SClusterUuid() string {
	if x != nil {
		return x.K8SClusterUuid
	}
	return ""
}

func (x *DelK8SIngressReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DelK8SIngressReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DelK8SIngressReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *DelK8SIngressReply) Reset() {
	*x = DelK8SIngressReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelK8SIngressReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelK8SIngressReply) ProtoMessage() {}

func (x *DelK8SIngressReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelK8SIngressReply.ProtoReflect.Descriptor instead.
func (*DelK8SIngressReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{132}
}

func (x *DelK8SIngressReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type UpdateK8SIngressReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string                                  `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string                                  `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string                                  `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string                                  `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	K8SClusterUuid string                                  `protobuf:"bytes,5,opt,name=k8sClusterUuid,proto3" json:"k8sClusterUuid,omitempty"`
	Namespace      string                                  `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name           string                                  `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Annotations    map[string]string                       `protobuf:"bytes,8,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Labels         map[string]string                       `protobuf:"bytes,9,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Service        map[string]*UpdateK8SIngressReq_Service `protobuf:"bytes,10,rep,name=service,proto3" json:"service,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateK8SIngressReq) Reset() {
	*x = UpdateK8SIngressReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateK8SIngressReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateK8SIngressReq) ProtoMessage() {}

func (x *UpdateK8SIngressReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateK8SIngressReq.ProtoReflect.Descriptor instead.
func (*UpdateK8SIngressReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{133}
}

func (x *UpdateK8SIngressReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *UpdateK8SIngressReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *UpdateK8SIngressReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *UpdateK8SIngressReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *UpdateK8SIngressReq) GetK8SClusterUuid() string {
	if x != nil {
		return x.K8SClusterUuid
	}
	return ""
}

func (x *UpdateK8SIngressReq) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *UpdateK8SIngressReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateK8SIngressReq) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *UpdateK8SIngressReq) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UpdateK8SIngressReq) GetService() map[string]*UpdateK8SIngressReq_Service {
	if x != nil {
		return x.Service
	}
	return nil
}

type UpdateK8SIngressReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *UpdateK8SIngressReply) Reset() {
	*x = UpdateK8SIngressReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateK8SIngressReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateK8SIngressReply) ProtoMessage() {}

func (x *UpdateK8SIngressReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateK8SIngressReply.ProtoReflect.Descriptor instead.
func (*UpdateK8SIngressReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{134}
}

func (x *UpdateK8SIngressReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// Program
type Program struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        string     `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name        string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	RepoType    int32      `protobuf:"varint,3,opt,name=repoType,proto3" json:"repoType,omitempty"`
	RepoUuid    string     `protobuf:"bytes,4,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	Branch      string     `protobuf:"bytes,5,opt,name=branch,proto3" json:"branch,omitempty"`
	CommitId    string     `protobuf:"bytes,6,opt,name=commitId,proto3" json:"commitId,omitempty"`
	ProductUuid string     `protobuf:"bytes,7,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	CiUuid      string     `protobuf:"bytes,8,opt,name=ciUuid,proto3" json:"ciUuid,omitempty"`
	Publisher   string     `protobuf:"bytes,9,opt,name=publisher,proto3" json:"publisher,omitempty"`
	Release     []*Release `protobuf:"bytes,10,rep,name=release,proto3" json:"release,omitempty"`
}

func (x *Program) Reset() {
	*x = Program{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Program) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Program) ProtoMessage() {}

func (x *Program) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Program.ProtoReflect.Descriptor instead.
func (*Program) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{135}
}

func (x *Program) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Program) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Program) GetRepoType() int32 {
	if x != nil {
		return x.RepoType
	}
	return 0
}

func (x *Program) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *Program) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *Program) GetCommitId() string {
	if x != nil {
		return x.CommitId
	}
	return ""
}

func (x *Program) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *Program) GetCiUuid() string {
	if x != nil {
		return x.CiUuid
	}
	return ""
}

func (x *Program) GetPublisher() string {
	if x != nil {
		return x.Publisher
	}
	return ""
}

func (x *Program) GetRelease() []*Release {
	if x != nil {
		return x.Release
	}
	return nil
}

type CreateProgramReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	RepoType    int32  `protobuf:"varint,3,opt,name=repoType,proto3" json:"repoType,omitempty"`
	RepoUuid    string `protobuf:"bytes,4,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	Branch      string `protobuf:"bytes,5,opt,name=branch,proto3" json:"branch,omitempty"`
	CommitId    string `protobuf:"bytes,6,opt,name=commitId,proto3" json:"commitId,omitempty"`
	ProductUuid string `protobuf:"bytes,7,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	CiUuid      string `protobuf:"bytes,8,opt,name=ciUuid,proto3" json:"ciUuid,omitempty"`
}

func (x *CreateProgramReq) Reset() {
	*x = CreateProgramReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProgramReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProgramReq) ProtoMessage() {}

func (x *CreateProgramReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProgramReq.ProtoReflect.Descriptor instead.
func (*CreateProgramReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{136}
}

func (x *CreateProgramReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *CreateProgramReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateProgramReq) GetRepoType() int32 {
	if x != nil {
		return x.RepoType
	}
	return 0
}

func (x *CreateProgramReq) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *CreateProgramReq) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *CreateProgramReq) GetCommitId() string {
	if x != nil {
		return x.CommitId
	}
	return ""
}

func (x *CreateProgramReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *CreateProgramReq) GetCiUuid() string {
	if x != nil {
		return x.CiUuid
	}
	return ""
}

type CreateProgramReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CreateProgramReply) Reset() {
	*x = CreateProgramReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProgramReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProgramReply) ProtoMessage() {}

func (x *CreateProgramReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProgramReply.ProtoReflect.Descriptor instead.
func (*CreateProgramReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{137}
}

func (x *CreateProgramReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type GetProgramByUuidReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,2,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	Uuid        string `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *GetProgramByUuidReq) Reset() {
	*x = GetProgramByUuidReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProgramByUuidReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProgramByUuidReq) ProtoMessage() {}

func (x *GetProgramByUuidReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProgramByUuidReq.ProtoReflect.Descriptor instead.
func (*GetProgramByUuidReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{138}
}

func (x *GetProgramByUuidReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *GetProgramByUuidReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *GetProgramByUuidReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type GetProgramByUuidReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Program *Program `protobuf:"bytes,1,opt,name=program,proto3" json:"program,omitempty"`
}

func (x *GetProgramByUuidReply) Reset() {
	*x = GetProgramByUuidReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProgramByUuidReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProgramByUuidReply) ProtoMessage() {}

func (x *GetProgramByUuidReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProgramByUuidReply.ProtoReflect.Descriptor instead.
func (*GetProgramByUuidReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{139}
}

func (x *GetProgramByUuidReply) GetProgram() *Program {
	if x != nil {
		return x.Program
	}
	return nil
}

type GetSelfProgramReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,2,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
}

func (x *GetSelfProgramReq) Reset() {
	*x = GetSelfProgramReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSelfProgramReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSelfProgramReq) ProtoMessage() {}

func (x *GetSelfProgramReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSelfProgramReq.ProtoReflect.Descriptor instead.
func (*GetSelfProgramReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{140}
}

func (x *GetSelfProgramReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *GetSelfProgramReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

type GetSelfProgramReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Program []*Program `protobuf:"bytes,1,rep,name=program,proto3" json:"program,omitempty"`
}

func (x *GetSelfProgramReply) Reset() {
	*x = GetSelfProgramReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSelfProgramReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSelfProgramReply) ProtoMessage() {}

func (x *GetSelfProgramReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSelfProgramReply.ProtoReflect.Descriptor instead.
func (*GetSelfProgramReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{141}
}

func (x *GetSelfProgramReply) GetProgram() []*Program {
	if x != nil {
		return x.Program
	}
	return nil
}

type SearchProgramReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,2,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	LikeName    string `protobuf:"bytes,3,opt,name=likeName,proto3" json:"likeName,omitempty"`
}

func (x *SearchProgramReq) Reset() {
	*x = SearchProgramReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchProgramReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchProgramReq) ProtoMessage() {}

func (x *SearchProgramReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchProgramReq.ProtoReflect.Descriptor instead.
func (*SearchProgramReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{142}
}

func (x *SearchProgramReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *SearchProgramReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *SearchProgramReq) GetLikeName() string {
	if x != nil {
		return x.LikeName
	}
	return ""
}

type SearchProgramReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Program []*Program `protobuf:"bytes,1,rep,name=program,proto3" json:"program,omitempty"`
}

func (x *SearchProgramReply) Reset() {
	*x = SearchProgramReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchProgramReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchProgramReply) ProtoMessage() {}

func (x *SearchProgramReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchProgramReply.ProtoReflect.Descriptor instead.
func (*SearchProgramReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{143}
}

func (x *SearchProgramReply) GetProgram() []*Program {
	if x != nil {
		return x.Program
	}
	return nil
}

//
type ProgramMarket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        string     `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name        string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	RepoType    int32      `protobuf:"varint,3,opt,name=repoType,proto3" json:"repoType,omitempty"`
	RepoUuid    string     `protobuf:"bytes,4,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	Branch      string     `protobuf:"bytes,5,opt,name=branch,proto3" json:"branch,omitempty"`
	CommitId    string     `protobuf:"bytes,6,opt,name=commitId,proto3" json:"commitId,omitempty"`
	ProductUuid string     `protobuf:"bytes,7,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	CiUuid      string     `protobuf:"bytes,8,opt,name=ciUuid,proto3" json:"ciUuid,omitempty"`
	Publisher   string     `protobuf:"bytes,9,opt,name=publisher,proto3" json:"publisher,omitempty"`
	Release     []*Release `protobuf:"bytes,10,rep,name=release,proto3" json:"release,omitempty"`
}

func (x *ProgramMarket) Reset() {
	*x = ProgramMarket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgramMarket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgramMarket) ProtoMessage() {}

func (x *ProgramMarket) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgramMarket.ProtoReflect.Descriptor instead.
func (*ProgramMarket) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{144}
}

func (x *ProgramMarket) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ProgramMarket) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProgramMarket) GetRepoType() int32 {
	if x != nil {
		return x.RepoType
	}
	return 0
}

func (x *ProgramMarket) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *ProgramMarket) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *ProgramMarket) GetCommitId() string {
	if x != nil {
		return x.CommitId
	}
	return ""
}

func (x *ProgramMarket) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ProgramMarket) GetCiUuid() string {
	if x != nil {
		return x.CiUuid
	}
	return ""
}

func (x *ProgramMarket) GetPublisher() string {
	if x != nil {
		return x.Publisher
	}
	return ""
}

func (x *ProgramMarket) GetRelease() []*Release {
	if x != nil {
		return x.Release
	}
	return nil
}

type CreateProgramMarketReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	RepoType int32  `protobuf:"varint,3,opt,name=repoType,proto3" json:"repoType,omitempty"`
	RepoUuid string `protobuf:"bytes,4,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	Branch   string `protobuf:"bytes,5,opt,name=branch,proto3" json:"branch,omitempty"`
	CommitId string `protobuf:"bytes,6,opt,name=commitId,proto3" json:"commitId,omitempty"`
	CiUuid   string `protobuf:"bytes,8,opt,name=ciUuid,proto3" json:"ciUuid,omitempty"`
}

func (x *CreateProgramMarketReq) Reset() {
	*x = CreateProgramMarketReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProgramMarketReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProgramMarketReq) ProtoMessage() {}

func (x *CreateProgramMarketReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProgramMarketReq.ProtoReflect.Descriptor instead.
func (*CreateProgramMarketReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{145}
}

func (x *CreateProgramMarketReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *CreateProgramMarketReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateProgramMarketReq) GetRepoType() int32 {
	if x != nil {
		return x.RepoType
	}
	return 0
}

func (x *CreateProgramMarketReq) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *CreateProgramMarketReq) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *CreateProgramMarketReq) GetCommitId() string {
	if x != nil {
		return x.CommitId
	}
	return ""
}

func (x *CreateProgramMarketReq) GetCiUuid() string {
	if x != nil {
		return x.CiUuid
	}
	return ""
}

type CreateProgramMarketReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CreateProgramMarketReply) Reset() {
	*x = CreateProgramMarketReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProgramMarketReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProgramMarketReply) ProtoMessage() {}

func (x *CreateProgramMarketReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProgramMarketReply.ProtoReflect.Descriptor instead.
func (*CreateProgramMarketReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{146}
}

func (x *CreateProgramMarketReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type GetProgramMarketByUuidReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	Uuid     string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *GetProgramMarketByUuidReq) Reset() {
	*x = GetProgramMarketByUuidReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProgramMarketByUuidReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProgramMarketByUuidReq) ProtoMessage() {}

func (x *GetProgramMarketByUuidReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProgramMarketByUuidReq.ProtoReflect.Descriptor instead.
func (*GetProgramMarketByUuidReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{147}
}

func (x *GetProgramMarketByUuidReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *GetProgramMarketByUuidReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type GetProgramMarketByUuidReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProgramMarket []*ProgramMarket `protobuf:"bytes,1,rep,name=programMarket,proto3" json:"programMarket,omitempty"`
}

func (x *GetProgramMarketByUuidReply) Reset() {
	*x = GetProgramMarketByUuidReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProgramMarketByUuidReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProgramMarketByUuidReply) ProtoMessage() {}

func (x *GetProgramMarketByUuidReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProgramMarketByUuidReply.ProtoReflect.Descriptor instead.
func (*GetProgramMarketByUuidReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{148}
}

func (x *GetProgramMarketByUuidReply) GetProgramMarket() []*ProgramMarket {
	if x != nil {
		return x.ProgramMarket
	}
	return nil
}

type GetSelfProgramMarketReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
}

func (x *GetSelfProgramMarketReq) Reset() {
	*x = GetSelfProgramMarketReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSelfProgramMarketReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSelfProgramMarketReq) ProtoMessage() {}

func (x *GetSelfProgramMarketReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSelfProgramMarketReq.ProtoReflect.Descriptor instead.
func (*GetSelfProgramMarketReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{149}
}

func (x *GetSelfProgramMarketReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

type GetSelfProgramMarketReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProgramMarket []*ProgramMarket `protobuf:"bytes,1,rep,name=programMarket,proto3" json:"programMarket,omitempty"`
}

func (x *GetSelfProgramMarketReply) Reset() {
	*x = GetSelfProgramMarketReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSelfProgramMarketReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSelfProgramMarketReply) ProtoMessage() {}

func (x *GetSelfProgramMarketReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSelfProgramMarketReply.ProtoReflect.Descriptor instead.
func (*GetSelfProgramMarketReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{150}
}

func (x *GetSelfProgramMarketReply) GetProgramMarket() []*ProgramMarket {
	if x != nil {
		return x.ProgramMarket
	}
	return nil
}

type SearchProgramMarketReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	LikeName string `protobuf:"bytes,2,opt,name=likeName,proto3" json:"likeName,omitempty"`
}

func (x *SearchProgramMarketReq) Reset() {
	*x = SearchProgramMarketReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchProgramMarketReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchProgramMarketReq) ProtoMessage() {}

func (x *SearchProgramMarketReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchProgramMarketReq.ProtoReflect.Descriptor instead.
func (*SearchProgramMarketReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{151}
}

func (x *SearchProgramMarketReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *SearchProgramMarketReq) GetLikeName() string {
	if x != nil {
		return x.LikeName
	}
	return ""
}

type SearchProgramMarketReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProgramMarket []*ProgramMarket `protobuf:"bytes,1,rep,name=programMarket,proto3" json:"programMarket,omitempty"`
}

func (x *SearchProgramMarketReply) Reset() {
	*x = SearchProgramMarketReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchProgramMarketReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchProgramMarketReply) ProtoMessage() {}

func (x *SearchProgramMarketReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchProgramMarketReply.ProtoReflect.Descriptor instead.
func (*SearchProgramMarketReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{152}
}

func (x *SearchProgramMarketReply) GetProgramMarket() []*ProgramMarket {
	if x != nil {
		return x.ProgramMarket
	}
	return nil
}

type Release struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	ProgramUuid string `protobuf:"bytes,2,opt,name=programUuid,proto3" json:"programUuid,omitempty"`
	Url         string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Sha         string `protobuf:"bytes,4,opt,name=sha,proto3" json:"sha,omitempty"`
	Arch        string `protobuf:"bytes,5,opt,name=arch,proto3" json:"arch,omitempty"`
	CreateTime  int64  `protobuf:"varint,6,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *Release) Reset() {
	*x = Release{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Release) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Release) ProtoMessage() {}

func (x *Release) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Release.ProtoReflect.Descriptor instead.
func (*Release) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{153}
}

func (x *Release) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Release) GetProgramUuid() string {
	if x != nil {
		return x.ProgramUuid
	}
	return ""
}

func (x *Release) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Release) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

func (x *Release) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *Release) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type CreateSelfGitlabPlatformReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	Protocol    int32  `protobuf:"varint,4,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Hostname    string `protobuf:"bytes,5,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Describe    string `protobuf:"bytes,6,opt,name=describe,proto3" json:"describe,omitempty"`
}

func (x *CreateSelfGitlabPlatformReq) Reset() {
	*x = CreateSelfGitlabPlatformReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSelfGitlabPlatformReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSelfGitlabPlatformReq) ProtoMessage() {}

func (x *CreateSelfGitlabPlatformReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSelfGitlabPlatformReq.ProtoReflect.Descriptor instead.
func (*CreateSelfGitlabPlatformReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{154}
}

func (x *CreateSelfGitlabPlatformReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *CreateSelfGitlabPlatformReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *CreateSelfGitlabPlatformReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *CreateSelfGitlabPlatformReq) GetProtocol() int32 {
	if x != nil {
		return x.Protocol
	}
	return 0
}

func (x *CreateSelfGitlabPlatformReq) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *CreateSelfGitlabPlatformReq) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

type CreateSelfGitlabPlatformReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CreateSelfGitlabPlatformReply) Reset() {
	*x = CreateSelfGitlabPlatformReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSelfGitlabPlatformReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSelfGitlabPlatformReply) ProtoMessage() {}

func (x *CreateSelfGitlabPlatformReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSelfGitlabPlatformReply.ProtoReflect.Descriptor instead.
func (*CreateSelfGitlabPlatformReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{155}
}

func (x *CreateSelfGitlabPlatformReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type ListSelfGitlabPlatformReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
}

func (x *ListSelfGitlabPlatformReq) Reset() {
	*x = ListSelfGitlabPlatformReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSelfGitlabPlatformReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSelfGitlabPlatformReq) ProtoMessage() {}

func (x *ListSelfGitlabPlatformReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSelfGitlabPlatformReq.ProtoReflect.Descriptor instead.
func (*ListSelfGitlabPlatformReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{156}
}

func (x *ListSelfGitlabPlatformReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListSelfGitlabPlatformReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListSelfGitlabPlatformReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

type ListSelfGitlabPlatformReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GitlabPlatform []*ListSelfGitlabPlatformReply_GitlabPlatform `protobuf:"bytes,1,rep,name=gitlabPlatform,proto3" json:"gitlabPlatform,omitempty"`
}

func (x *ListSelfGitlabPlatformReply) Reset() {
	*x = ListSelfGitlabPlatformReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSelfGitlabPlatformReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSelfGitlabPlatformReply) ProtoMessage() {}

func (x *ListSelfGitlabPlatformReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSelfGitlabPlatformReply.ProtoReflect.Descriptor instead.
func (*ListSelfGitlabPlatformReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{157}
}

func (x *ListSelfGitlabPlatformReply) GetGitlabPlatform() []*ListSelfGitlabPlatformReply_GitlabPlatform {
	if x != nil {
		return x.GitlabPlatform
	}
	return nil
}

type DelSelfGitlabPlatformReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	Uuid        string `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *DelSelfGitlabPlatformReq) Reset() {
	*x = DelSelfGitlabPlatformReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelSelfGitlabPlatformReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelSelfGitlabPlatformReq) ProtoMessage() {}

func (x *DelSelfGitlabPlatformReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelSelfGitlabPlatformReq.ProtoReflect.Descriptor instead.
func (*DelSelfGitlabPlatformReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{158}
}

func (x *DelSelfGitlabPlatformReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *DelSelfGitlabPlatformReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *DelSelfGitlabPlatformReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *DelSelfGitlabPlatformReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type DelSelfGitlabPlatformReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *DelSelfGitlabPlatformReply) Reset() {
	*x = DelSelfGitlabPlatformReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelSelfGitlabPlatformReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelSelfGitlabPlatformReply) ProtoMessage() {}

func (x *DelSelfGitlabPlatformReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelSelfGitlabPlatformReply.ProtoReflect.Descriptor instead.
func (*DelSelfGitlabPlatformReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{159}
}

func (x *DelSelfGitlabPlatformReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// token
type CreateSelfGitlabTokenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid     string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid      string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid  string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	PlatformUuid string `protobuf:"bytes,4,opt,name=platformUuid,proto3" json:"platformUuid,omitempty"`
	Name         string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	PrivateToken string `protobuf:"bytes,6,opt,name=privateToken,proto3" json:"privateToken,omitempty"`
	Describe     string `protobuf:"bytes,7,opt,name=describe,proto3" json:"describe,omitempty"`
}

func (x *CreateSelfGitlabTokenReq) Reset() {
	*x = CreateSelfGitlabTokenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSelfGitlabTokenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSelfGitlabTokenReq) ProtoMessage() {}

func (x *CreateSelfGitlabTokenReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSelfGitlabTokenReq.ProtoReflect.Descriptor instead.
func (*CreateSelfGitlabTokenReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{160}
}

func (x *CreateSelfGitlabTokenReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *CreateSelfGitlabTokenReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *CreateSelfGitlabTokenReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *CreateSelfGitlabTokenReq) GetPlatformUuid() string {
	if x != nil {
		return x.PlatformUuid
	}
	return ""
}

func (x *CreateSelfGitlabTokenReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateSelfGitlabTokenReq) GetPrivateToken() string {
	if x != nil {
		return x.PrivateToken
	}
	return ""
}

func (x *CreateSelfGitlabTokenReq) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

type CreateSelfGitlabTokenReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CreateSelfGitlabTokenReply) Reset() {
	*x = CreateSelfGitlabTokenReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSelfGitlabTokenReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSelfGitlabTokenReply) ProtoMessage() {}

func (x *CreateSelfGitlabTokenReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSelfGitlabTokenReply.ProtoReflect.Descriptor instead.
func (*CreateSelfGitlabTokenReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{161}
}

func (x *CreateSelfGitlabTokenReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type ListSelfGitlabTokenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid     string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid      string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid  string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	PlatformUuid string `protobuf:"bytes,4,opt,name=platformUuid,proto3" json:"platformUuid,omitempty"`
}

func (x *ListSelfGitlabTokenReq) Reset() {
	*x = ListSelfGitlabTokenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSelfGitlabTokenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSelfGitlabTokenReq) ProtoMessage() {}

func (x *ListSelfGitlabTokenReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSelfGitlabTokenReq.ProtoReflect.Descriptor instead.
func (*ListSelfGitlabTokenReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{162}
}

func (x *ListSelfGitlabTokenReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListSelfGitlabTokenReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListSelfGitlabTokenReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ListSelfGitlabTokenReq) GetPlatformUuid() string {
	if x != nil {
		return x.PlatformUuid
	}
	return ""
}

type ListSelfGitlabTokenReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GitlabToken []*ListSelfGitlabTokenReply_GitlabToken `protobuf:"bytes,1,rep,name=gitlabToken,proto3" json:"gitlabToken,omitempty"`
}

func (x *ListSelfGitlabTokenReply) Reset() {
	*x = ListSelfGitlabTokenReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSelfGitlabTokenReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSelfGitlabTokenReply) ProtoMessage() {}

func (x *ListSelfGitlabTokenReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSelfGitlabTokenReply.ProtoReflect.Descriptor instead.
func (*ListSelfGitlabTokenReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{163}
}

func (x *ListSelfGitlabTokenReply) GetGitlabToken() []*ListSelfGitlabTokenReply_GitlabToken {
	if x != nil {
		return x.GitlabToken
	}
	return nil
}

type DelSelfGitlabTokenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid     string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid      string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid  string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	PlatformUuid string `protobuf:"bytes,4,opt,name=platformUuid,proto3" json:"platformUuid,omitempty"`
	TokenUuid    string `protobuf:"bytes,5,opt,name=tokenUuid,proto3" json:"tokenUuid,omitempty"`
}

func (x *DelSelfGitlabTokenReq) Reset() {
	*x = DelSelfGitlabTokenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelSelfGitlabTokenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelSelfGitlabTokenReq) ProtoMessage() {}

func (x *DelSelfGitlabTokenReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelSelfGitlabTokenReq.ProtoReflect.Descriptor instead.
func (*DelSelfGitlabTokenReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{164}
}

func (x *DelSelfGitlabTokenReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *DelSelfGitlabTokenReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *DelSelfGitlabTokenReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *DelSelfGitlabTokenReq) GetPlatformUuid() string {
	if x != nil {
		return x.PlatformUuid
	}
	return ""
}

func (x *DelSelfGitlabTokenReq) GetTokenUuid() string {
	if x != nil {
		return x.TokenUuid
	}
	return ""
}

type DelSelfGitlabTokenReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *DelSelfGitlabTokenReply) Reset() {
	*x = DelSelfGitlabTokenReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelSelfGitlabTokenReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelSelfGitlabTokenReply) ProtoMessage() {}

func (x *DelSelfGitlabTokenReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelSelfGitlabTokenReply.ProtoReflect.Descriptor instead.
func (*DelSelfGitlabTokenReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{165}
}

func (x *DelSelfGitlabTokenReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// gitlab group
type CreateSelfGitlabGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid          string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid           string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid       string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	PlatformUuid      string `protobuf:"bytes,4,opt,name=platformUuid,proto3" json:"platformUuid,omitempty"`
	PlatformTokenUuid string `protobuf:"bytes,5,opt,name=platformTokenUuid,proto3" json:"platformTokenUuid,omitempty"`
	Name              string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Describe          string `protobuf:"bytes,7,opt,name=describe,proto3" json:"describe,omitempty"`
}

func (x *CreateSelfGitlabGroupReq) Reset() {
	*x = CreateSelfGitlabGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSelfGitlabGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSelfGitlabGroupReq) ProtoMessage() {}

func (x *CreateSelfGitlabGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSelfGitlabGroupReq.ProtoReflect.Descriptor instead.
func (*CreateSelfGitlabGroupReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{166}
}

func (x *CreateSelfGitlabGroupReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *CreateSelfGitlabGroupReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *CreateSelfGitlabGroupReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *CreateSelfGitlabGroupReq) GetPlatformUuid() string {
	if x != nil {
		return x.PlatformUuid
	}
	return ""
}

func (x *CreateSelfGitlabGroupReq) GetPlatformTokenUuid() string {
	if x != nil {
		return x.PlatformTokenUuid
	}
	return ""
}

func (x *CreateSelfGitlabGroupReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateSelfGitlabGroupReq) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

type CreateSelfGitlabGroupReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CreateSelfGitlabGroupReply) Reset() {
	*x = CreateSelfGitlabGroupReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSelfGitlabGroupReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSelfGitlabGroupReply) ProtoMessage() {}

func (x *CreateSelfGitlabGroupReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSelfGitlabGroupReply.ProtoReflect.Descriptor instead.
func (*CreateSelfGitlabGroupReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{167}
}

func (x *CreateSelfGitlabGroupReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type ListSelfGitlabGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid          string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid           string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid       string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	PlatformUuid      string `protobuf:"bytes,4,opt,name=platformUuid,proto3" json:"platformUuid,omitempty"`
	PlatformTokenUuid string `protobuf:"bytes,5,opt,name=platformTokenUuid,proto3" json:"platformTokenUuid,omitempty"`
}

func (x *ListSelfGitlabGroupReq) Reset() {
	*x = ListSelfGitlabGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSelfGitlabGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSelfGitlabGroupReq) ProtoMessage() {}

func (x *ListSelfGitlabGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSelfGitlabGroupReq.ProtoReflect.Descriptor instead.
func (*ListSelfGitlabGroupReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{168}
}

func (x *ListSelfGitlabGroupReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListSelfGitlabGroupReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListSelfGitlabGroupReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ListSelfGitlabGroupReq) GetPlatformUuid() string {
	if x != nil {
		return x.PlatformUuid
	}
	return ""
}

func (x *ListSelfGitlabGroupReq) GetPlatformTokenUuid() string {
	if x != nil {
		return x.PlatformTokenUuid
	}
	return ""
}

type ListSelfGitlabGroupReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups []*ListSelfGitlabGroupReply_Group `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *ListSelfGitlabGroupReply) Reset() {
	*x = ListSelfGitlabGroupReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSelfGitlabGroupReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSelfGitlabGroupReply) ProtoMessage() {}

func (x *ListSelfGitlabGroupReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSelfGitlabGroupReply.ProtoReflect.Descriptor instead.
func (*ListSelfGitlabGroupReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{169}
}

func (x *ListSelfGitlabGroupReply) GetGroups() []*ListSelfGitlabGroupReply_Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

// gitlab repo
type ImportSelfGitlabRepoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid          string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid           string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid       string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	PlatformUuid      string `protobuf:"bytes,4,opt,name=platformUuid,proto3" json:"platformUuid,omitempty"`
	PlatformTokenUuid string `protobuf:"bytes,5,opt,name=platformTokenUuid,proto3" json:"platformTokenUuid,omitempty"`
	ProjectId         int32  `protobuf:"varint,6,opt,name=projectId,proto3" json:"projectId,omitempty"`
}

func (x *ImportSelfGitlabRepoReq) Reset() {
	*x = ImportSelfGitlabRepoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportSelfGitlabRepoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportSelfGitlabRepoReq) ProtoMessage() {}

func (x *ImportSelfGitlabRepoReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportSelfGitlabRepoReq.ProtoReflect.Descriptor instead.
func (*ImportSelfGitlabRepoReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{170}
}

func (x *ImportSelfGitlabRepoReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ImportSelfGitlabRepoReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ImportSelfGitlabRepoReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ImportSelfGitlabRepoReq) GetPlatformUuid() string {
	if x != nil {
		return x.PlatformUuid
	}
	return ""
}

func (x *ImportSelfGitlabRepoReq) GetPlatformTokenUuid() string {
	if x != nil {
		return x.PlatformTokenUuid
	}
	return ""
}

func (x *ImportSelfGitlabRepoReq) GetProjectId() int32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

type ImportSelfGitlabRepoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *ImportSelfGitlabRepoReply) Reset() {
	*x = ImportSelfGitlabRepoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportSelfGitlabRepoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportSelfGitlabRepoReply) ProtoMessage() {}

func (x *ImportSelfGitlabRepoReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportSelfGitlabRepoReply.ProtoReflect.Descriptor instead.
func (*ImportSelfGitlabRepoReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{171}
}

func (x *ImportSelfGitlabRepoReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type CreateSelfGitlabRepoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid          string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid           string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid       string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	PlatformUuid      string `protobuf:"bytes,4,opt,name=platformUuid,proto3" json:"platformUuid,omitempty"`
	PlatformTokenUuid string `protobuf:"bytes,5,opt,name=platformTokenUuid,proto3" json:"platformTokenUuid,omitempty"`
	ProjectName       string `protobuf:"bytes,6,opt,name=projectName,proto3" json:"projectName,omitempty"`
	GroupId           int32  `protobuf:"varint,7,opt,name=groupId,proto3" json:"groupId,omitempty"`
	Describe          string `protobuf:"bytes,8,opt,name=describe,proto3" json:"describe,omitempty"`
}

func (x *CreateSelfGitlabRepoReq) Reset() {
	*x = CreateSelfGitlabRepoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSelfGitlabRepoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSelfGitlabRepoReq) ProtoMessage() {}

func (x *CreateSelfGitlabRepoReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSelfGitlabRepoReq.ProtoReflect.Descriptor instead.
func (*CreateSelfGitlabRepoReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{172}
}

func (x *CreateSelfGitlabRepoReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *CreateSelfGitlabRepoReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *CreateSelfGitlabRepoReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *CreateSelfGitlabRepoReq) GetPlatformUuid() string {
	if x != nil {
		return x.PlatformUuid
	}
	return ""
}

func (x *CreateSelfGitlabRepoReq) GetPlatformTokenUuid() string {
	if x != nil {
		return x.PlatformTokenUuid
	}
	return ""
}

func (x *CreateSelfGitlabRepoReq) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *CreateSelfGitlabRepoReq) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *CreateSelfGitlabRepoReq) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

type CreateSelfGitlabRepoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CreateSelfGitlabRepoReply) Reset() {
	*x = CreateSelfGitlabRepoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSelfGitlabRepoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSelfGitlabRepoReply) ProtoMessage() {}

func (x *CreateSelfGitlabRepoReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSelfGitlabRepoReply.ProtoReflect.Descriptor instead.
func (*CreateSelfGitlabRepoReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{173}
}

func (x *CreateSelfGitlabRepoReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type ListSelfGitlabRepoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid          string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid           string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid       string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	PlatformUuid      string `protobuf:"bytes,4,opt,name=platformUuid,proto3" json:"platformUuid,omitempty"`
	PlatformTokenUuid string `protobuf:"bytes,5,opt,name=platformTokenUuid,proto3" json:"platformTokenUuid,omitempty"`
}

func (x *ListSelfGitlabRepoReq) Reset() {
	*x = ListSelfGitlabRepoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSelfGitlabRepoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSelfGitlabRepoReq) ProtoMessage() {}

func (x *ListSelfGitlabRepoReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSelfGitlabRepoReq.ProtoReflect.Descriptor instead.
func (*ListSelfGitlabRepoReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{174}
}

func (x *ListSelfGitlabRepoReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListSelfGitlabRepoReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListSelfGitlabRepoReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ListSelfGitlabRepoReq) GetPlatformUuid() string {
	if x != nil {
		return x.PlatformUuid
	}
	return ""
}

func (x *ListSelfGitlabRepoReq) GetPlatformTokenUuid() string {
	if x != nil {
		return x.PlatformTokenUuid
	}
	return ""
}

type ListSelfGitlabRepoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GitlabRepo []*ListSelfGitlabRepoReply_GitlabRepo `protobuf:"bytes,1,rep,name=gitlabRepo,proto3" json:"gitlabRepo,omitempty"`
}

func (x *ListSelfGitlabRepoReply) Reset() {
	*x = ListSelfGitlabRepoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSelfGitlabRepoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSelfGitlabRepoReply) ProtoMessage() {}

func (x *ListSelfGitlabRepoReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSelfGitlabRepoReply.ProtoReflect.Descriptor instead.
func (*ListSelfGitlabRepoReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{175}
}

func (x *ListSelfGitlabRepoReply) GetGitlabRepo() []*ListSelfGitlabRepoReply_GitlabRepo {
	if x != nil {
		return x.GitlabRepo
	}
	return nil
}

type DelSelfGitlabRepoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	Uuid        string `protobuf:"bytes,5,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *DelSelfGitlabRepoReq) Reset() {
	*x = DelSelfGitlabRepoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelSelfGitlabRepoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelSelfGitlabRepoReq) ProtoMessage() {}

func (x *DelSelfGitlabRepoReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelSelfGitlabRepoReq.ProtoReflect.Descriptor instead.
func (*DelSelfGitlabRepoReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{176}
}

func (x *DelSelfGitlabRepoReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *DelSelfGitlabRepoReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *DelSelfGitlabRepoReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *DelSelfGitlabRepoReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type DelSelfGitlabRepoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *DelSelfGitlabRepoReply) Reset() {
	*x = DelSelfGitlabRepoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelSelfGitlabRepoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelSelfGitlabRepoReply) ProtoMessage() {}

func (x *DelSelfGitlabRepoReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelSelfGitlabRepoReply.ProtoReflect.Descriptor instead.
func (*DelSelfGitlabRepoReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{177}
}

func (x *DelSelfGitlabRepoReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type ArchiveSelfGitlabRepoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	RepoUuid    string `protobuf:"bytes,5,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
}

func (x *ArchiveSelfGitlabRepoReq) Reset() {
	*x = ArchiveSelfGitlabRepoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchiveSelfGitlabRepoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveSelfGitlabRepoReq) ProtoMessage() {}

func (x *ArchiveSelfGitlabRepoReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveSelfGitlabRepoReq.ProtoReflect.Descriptor instead.
func (*ArchiveSelfGitlabRepoReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{178}
}

func (x *ArchiveSelfGitlabRepoReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ArchiveSelfGitlabRepoReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ArchiveSelfGitlabRepoReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ArchiveSelfGitlabRepoReq) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

type ArchiveSelfGitlabRepoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *ArchiveSelfGitlabRepoReply) Reset() {
	*x = ArchiveSelfGitlabRepoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchiveSelfGitlabRepoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveSelfGitlabRepoReply) ProtoMessage() {}

func (x *ArchiveSelfGitlabRepoReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveSelfGitlabRepoReply.ProtoReflect.Descriptor instead.
func (*ArchiveSelfGitlabRepoReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{179}
}

func (x *ArchiveSelfGitlabRepoReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type MergeSelfGitlabRepoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid     string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid      string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid  string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	RepoUuid     string `protobuf:"bytes,5,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	SourceBranch string `protobuf:"bytes,6,opt,name=sourceBranch,proto3" json:"sourceBranch,omitempty"`
	TargetBranch string `protobuf:"bytes,7,opt,name=targetBranch,proto3" json:"targetBranch,omitempty"`
	Message      string `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *MergeSelfGitlabRepoReq) Reset() {
	*x = MergeSelfGitlabRepoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeSelfGitlabRepoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeSelfGitlabRepoReq) ProtoMessage() {}

func (x *MergeSelfGitlabRepoReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeSelfGitlabRepoReq.ProtoReflect.Descriptor instead.
func (*MergeSelfGitlabRepoReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{180}
}

func (x *MergeSelfGitlabRepoReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *MergeSelfGitlabRepoReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *MergeSelfGitlabRepoReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *MergeSelfGitlabRepoReq) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *MergeSelfGitlabRepoReq) GetSourceBranch() string {
	if x != nil {
		return x.SourceBranch
	}
	return ""
}

func (x *MergeSelfGitlabRepoReq) GetTargetBranch() string {
	if x != nil {
		return x.TargetBranch
	}
	return ""
}

func (x *MergeSelfGitlabRepoReq) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type MergeSelfGitlabRepoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *MergeSelfGitlabRepoReply) Reset() {
	*x = MergeSelfGitlabRepoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeSelfGitlabRepoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeSelfGitlabRepoReply) ProtoMessage() {}

func (x *MergeSelfGitlabRepoReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeSelfGitlabRepoReply.ProtoReflect.Descriptor instead.
func (*MergeSelfGitlabRepoReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{181}
}

func (x *MergeSelfGitlabRepoReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type SelfGitlabRepoMergeHisReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid     string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid      string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid  string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	RepoUuid     string `protobuf:"bytes,5,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	SourceBranch string `protobuf:"bytes,6,opt,name=sourceBranch,proto3" json:"sourceBranch,omitempty"`
	TargetBranch string `protobuf:"bytes,7,opt,name=targetBranch,proto3" json:"targetBranch,omitempty"`
}

func (x *SelfGitlabRepoMergeHisReq) Reset() {
	*x = SelfGitlabRepoMergeHisReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelfGitlabRepoMergeHisReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelfGitlabRepoMergeHisReq) ProtoMessage() {}

func (x *SelfGitlabRepoMergeHisReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelfGitlabRepoMergeHisReq.ProtoReflect.Descriptor instead.
func (*SelfGitlabRepoMergeHisReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{182}
}

func (x *SelfGitlabRepoMergeHisReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *SelfGitlabRepoMergeHisReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *SelfGitlabRepoMergeHisReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *SelfGitlabRepoMergeHisReq) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *SelfGitlabRepoMergeHisReq) GetSourceBranch() string {
	if x != nil {
		return x.SourceBranch
	}
	return ""
}

func (x *SelfGitlabRepoMergeHisReq) GetTargetBranch() string {
	if x != nil {
		return x.TargetBranch
	}
	return ""
}

type SelfGitlabRepoMergeHisReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Merges []*SelfGitlabRepoMergeHisReply_Merge `protobuf:"bytes,1,rep,name=merges,proto3" json:"merges,omitempty"`
}

func (x *SelfGitlabRepoMergeHisReply) Reset() {
	*x = SelfGitlabRepoMergeHisReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelfGitlabRepoMergeHisReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelfGitlabRepoMergeHisReply) ProtoMessage() {}

func (x *SelfGitlabRepoMergeHisReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelfGitlabRepoMergeHisReply.ProtoReflect.Descriptor instead.
func (*SelfGitlabRepoMergeHisReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{183}
}

func (x *SelfGitlabRepoMergeHisReply) GetMerges() []*SelfGitlabRepoMergeHisReply_Merge {
	if x != nil {
		return x.Merges
	}
	return nil
}

type CreateSelfGitlabRepoBranchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	RepoUuid    string `protobuf:"bytes,5,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	BranchName  string `protobuf:"bytes,6,opt,name=branchName,proto3" json:"branchName,omitempty"`
	Ref         string `protobuf:"bytes,7,opt,name=ref,proto3" json:"ref,omitempty"`
}

func (x *CreateSelfGitlabRepoBranchReq) Reset() {
	*x = CreateSelfGitlabRepoBranchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSelfGitlabRepoBranchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSelfGitlabRepoBranchReq) ProtoMessage() {}

func (x *CreateSelfGitlabRepoBranchReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSelfGitlabRepoBranchReq.ProtoReflect.Descriptor instead.
func (*CreateSelfGitlabRepoBranchReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{184}
}

func (x *CreateSelfGitlabRepoBranchReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *CreateSelfGitlabRepoBranchReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *CreateSelfGitlabRepoBranchReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *CreateSelfGitlabRepoBranchReq) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *CreateSelfGitlabRepoBranchReq) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *CreateSelfGitlabRepoBranchReq) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

type CreateSelfGitlabRepoBranchReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CreateSelfGitlabRepoBranchReply) Reset() {
	*x = CreateSelfGitlabRepoBranchReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSelfGitlabRepoBranchReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSelfGitlabRepoBranchReply) ProtoMessage() {}

func (x *CreateSelfGitlabRepoBranchReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSelfGitlabRepoBranchReply.ProtoReflect.Descriptor instead.
func (*CreateSelfGitlabRepoBranchReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{185}
}

func (x *CreateSelfGitlabRepoBranchReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type ListSelfGitlabRepoBranchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	RepoUuid    string `protobuf:"bytes,5,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
}

func (x *ListSelfGitlabRepoBranchReq) Reset() {
	*x = ListSelfGitlabRepoBranchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSelfGitlabRepoBranchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSelfGitlabRepoBranchReq) ProtoMessage() {}

func (x *ListSelfGitlabRepoBranchReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSelfGitlabRepoBranchReq.ProtoReflect.Descriptor instead.
func (*ListSelfGitlabRepoBranchReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{186}
}

func (x *ListSelfGitlabRepoBranchReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListSelfGitlabRepoBranchReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListSelfGitlabRepoBranchReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ListSelfGitlabRepoBranchReq) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

type ListSelfGitlabRepoBranchReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branch []*ListSelfGitlabRepoBranchReply_Branch `protobuf:"bytes,1,rep,name=branch,proto3" json:"branch,omitempty"`
}

func (x *ListSelfGitlabRepoBranchReply) Reset() {
	*x = ListSelfGitlabRepoBranchReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSelfGitlabRepoBranchReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSelfGitlabRepoBranchReply) ProtoMessage() {}

func (x *ListSelfGitlabRepoBranchReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSelfGitlabRepoBranchReply.ProtoReflect.Descriptor instead.
func (*ListSelfGitlabRepoBranchReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{187}
}

func (x *ListSelfGitlabRepoBranchReply) GetBranch() []*ListSelfGitlabRepoBranchReply_Branch {
	if x != nil {
		return x.Branch
	}
	return nil
}

type DelSelfGitlabRepoBranchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	RepoUuid    string `protobuf:"bytes,4,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	BranchName  string `protobuf:"bytes,5,opt,name=branchName,proto3" json:"branchName,omitempty"`
}

func (x *DelSelfGitlabRepoBranchReq) Reset() {
	*x = DelSelfGitlabRepoBranchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelSelfGitlabRepoBranchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelSelfGitlabRepoBranchReq) ProtoMessage() {}

func (x *DelSelfGitlabRepoBranchReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelSelfGitlabRepoBranchReq.ProtoReflect.Descriptor instead.
func (*DelSelfGitlabRepoBranchReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{188}
}

func (x *DelSelfGitlabRepoBranchReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *DelSelfGitlabRepoBranchReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *DelSelfGitlabRepoBranchReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *DelSelfGitlabRepoBranchReq) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *DelSelfGitlabRepoBranchReq) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

type DelSelfGitlabRepoBranchReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *DelSelfGitlabRepoBranchReply) Reset() {
	*x = DelSelfGitlabRepoBranchReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelSelfGitlabRepoBranchReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelSelfGitlabRepoBranchReply) ProtoMessage() {}

func (x *DelSelfGitlabRepoBranchReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelSelfGitlabRepoBranchReply.ProtoReflect.Descriptor instead.
func (*DelSelfGitlabRepoBranchReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{189}
}

func (x *DelSelfGitlabRepoBranchReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type ProtectSelfGitlabRepoBranchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	RepoUuid    string `protobuf:"bytes,5,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	BranchName  string `protobuf:"bytes,6,opt,name=branchName,proto3" json:"branchName,omitempty"`
}

func (x *ProtectSelfGitlabRepoBranchReq) Reset() {
	*x = ProtectSelfGitlabRepoBranchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtectSelfGitlabRepoBranchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtectSelfGitlabRepoBranchReq) ProtoMessage() {}

func (x *ProtectSelfGitlabRepoBranchReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtectSelfGitlabRepoBranchReq.ProtoReflect.Descriptor instead.
func (*ProtectSelfGitlabRepoBranchReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{190}
}

func (x *ProtectSelfGitlabRepoBranchReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ProtectSelfGitlabRepoBranchReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ProtectSelfGitlabRepoBranchReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ProtectSelfGitlabRepoBranchReq) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *ProtectSelfGitlabRepoBranchReq) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

type ProtectSelfGitlabRepoBranchReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *ProtectSelfGitlabRepoBranchReply) Reset() {
	*x = ProtectSelfGitlabRepoBranchReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtectSelfGitlabRepoBranchReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtectSelfGitlabRepoBranchReply) ProtoMessage() {}

func (x *ProtectSelfGitlabRepoBranchReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtectSelfGitlabRepoBranchReply.ProtoReflect.Descriptor instead.
func (*ProtectSelfGitlabRepoBranchReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{191}
}

func (x *ProtectSelfGitlabRepoBranchReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type UnprotectSelfGitlabRepoBranchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	RepoUuid    string `protobuf:"bytes,5,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	BranchName  string `protobuf:"bytes,6,opt,name=branchName,proto3" json:"branchName,omitempty"`
}

func (x *UnprotectSelfGitlabRepoBranchReq) Reset() {
	*x = UnprotectSelfGitlabRepoBranchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnprotectSelfGitlabRepoBranchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnprotectSelfGitlabRepoBranchReq) ProtoMessage() {}

func (x *UnprotectSelfGitlabRepoBranchReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnprotectSelfGitlabRepoBranchReq.ProtoReflect.Descriptor instead.
func (*UnprotectSelfGitlabRepoBranchReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{192}
}

func (x *UnprotectSelfGitlabRepoBranchReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *UnprotectSelfGitlabRepoBranchReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *UnprotectSelfGitlabRepoBranchReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *UnprotectSelfGitlabRepoBranchReq) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *UnprotectSelfGitlabRepoBranchReq) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

type UnprotectSelfGitlabRepoBranchReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *UnprotectSelfGitlabRepoBranchReply) Reset() {
	*x = UnprotectSelfGitlabRepoBranchReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnprotectSelfGitlabRepoBranchReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnprotectSelfGitlabRepoBranchReply) ProtoMessage() {}

func (x *UnprotectSelfGitlabRepoBranchReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnprotectSelfGitlabRepoBranchReply.ProtoReflect.Descriptor instead.
func (*UnprotectSelfGitlabRepoBranchReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{193}
}

func (x *UnprotectSelfGitlabRepoBranchReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type ListSelfGitlabRepoBranchCommitsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	RepoUuid    string `protobuf:"bytes,5,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	BranchName  string `protobuf:"bytes,6,opt,name=branchName,proto3" json:"branchName,omitempty"`
}

func (x *ListSelfGitlabRepoBranchCommitsReq) Reset() {
	*x = ListSelfGitlabRepoBranchCommitsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSelfGitlabRepoBranchCommitsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSelfGitlabRepoBranchCommitsReq) ProtoMessage() {}

func (x *ListSelfGitlabRepoBranchCommitsReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSelfGitlabRepoBranchCommitsReq.ProtoReflect.Descriptor instead.
func (*ListSelfGitlabRepoBranchCommitsReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{194}
}

func (x *ListSelfGitlabRepoBranchCommitsReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListSelfGitlabRepoBranchCommitsReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListSelfGitlabRepoBranchCommitsReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ListSelfGitlabRepoBranchCommitsReq) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *ListSelfGitlabRepoBranchCommitsReq) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

type ListSelfGitlabRepoBranchCommitsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commits []*ListSelfGitlabRepoBranchCommitsReply_Commit `protobuf:"bytes,1,rep,name=commits,proto3" json:"commits,omitempty"`
}

func (x *ListSelfGitlabRepoBranchCommitsReply) Reset() {
	*x = ListSelfGitlabRepoBranchCommitsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSelfGitlabRepoBranchCommitsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSelfGitlabRepoBranchCommitsReply) ProtoMessage() {}

func (x *ListSelfGitlabRepoBranchCommitsReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSelfGitlabRepoBranchCommitsReply.ProtoReflect.Descriptor instead.
func (*ListSelfGitlabRepoBranchCommitsReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{195}
}

func (x *ListSelfGitlabRepoBranchCommitsReply) GetCommits() []*ListSelfGitlabRepoBranchCommitsReply_Commit {
	if x != nil {
		return x.Commits
	}
	return nil
}

// Github
// Github Token
type CreateGitHubTokenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	Name        string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Token       string `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
	Describe    string `protobuf:"bytes,6,opt,name=describe,proto3" json:"describe,omitempty"`
}

func (x *CreateGitHubTokenReq) Reset() {
	*x = CreateGitHubTokenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGitHubTokenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGitHubTokenReq) ProtoMessage() {}

func (x *CreateGitHubTokenReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGitHubTokenReq.ProtoReflect.Descriptor instead.
func (*CreateGitHubTokenReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{196}
}

func (x *CreateGitHubTokenReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *CreateGitHubTokenReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *CreateGitHubTokenReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *CreateGitHubTokenReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateGitHubTokenReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *CreateGitHubTokenReq) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

type CreateGitHubTokenReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CreateGitHubTokenReply) Reset() {
	*x = CreateGitHubTokenReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGitHubTokenReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGitHubTokenReply) ProtoMessage() {}

func (x *CreateGitHubTokenReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGitHubTokenReply.ProtoReflect.Descriptor instead.
func (*CreateGitHubTokenReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{197}
}

func (x *CreateGitHubTokenReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type ListGitHubTokenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
}

func (x *ListGitHubTokenReq) Reset() {
	*x = ListGitHubTokenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGitHubTokenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGitHubTokenReq) ProtoMessage() {}

func (x *ListGitHubTokenReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGitHubTokenReq.ProtoReflect.Descriptor instead.
func (*ListGitHubTokenReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{198}
}

func (x *ListGitHubTokenReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListGitHubTokenReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListGitHubTokenReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

type ListGitHubTokenReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GithubToken []*ListGitHubTokenReply_GithubToken `protobuf:"bytes,1,rep,name=githubToken,proto3" json:"githubToken,omitempty"`
}

func (x *ListGitHubTokenReply) Reset() {
	*x = ListGitHubTokenReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGitHubTokenReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGitHubTokenReply) ProtoMessage() {}

func (x *ListGitHubTokenReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGitHubTokenReply.ProtoReflect.Descriptor instead.
func (*ListGitHubTokenReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{199}
}

func (x *ListGitHubTokenReply) GetGithubToken() []*ListGitHubTokenReply_GithubToken {
	if x != nil {
		return x.GithubToken
	}
	return nil
}

type DelGitHubTokenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	Uuid        string `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *DelGitHubTokenReq) Reset() {
	*x = DelGitHubTokenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelGitHubTokenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelGitHubTokenReq) ProtoMessage() {}

func (x *DelGitHubTokenReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelGitHubTokenReq.ProtoReflect.Descriptor instead.
func (*DelGitHubTokenReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{200}
}

func (x *DelGitHubTokenReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *DelGitHubTokenReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *DelGitHubTokenReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *DelGitHubTokenReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type DelGitHubTokenReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *DelGitHubTokenReply) Reset() {
	*x = DelGitHubTokenReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelGitHubTokenReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelGitHubTokenReply) ProtoMessage() {}

func (x *DelGitHubTokenReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelGitHubTokenReply.ProtoReflect.Descriptor instead.
func (*DelGitHubTokenReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{201}
}

func (x *DelGitHubTokenReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// Github Repo
type ImportGithubRepoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid      string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid       string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid   string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	TokenUuid     string `protobuf:"bytes,4,opt,name=tokenUuid,proto3" json:"tokenUuid,omitempty"`
	GithubOrgName string `protobuf:"bytes,5,opt,name=githubOrgName,proto3" json:"githubOrgName,omitempty"`
	RepoName      string `protobuf:"bytes,6,opt,name=repoName,proto3" json:"repoName,omitempty"`
}

func (x *ImportGithubRepoReq) Reset() {
	*x = ImportGithubRepoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportGithubRepoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportGithubRepoReq) ProtoMessage() {}

func (x *ImportGithubRepoReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportGithubRepoReq.ProtoReflect.Descriptor instead.
func (*ImportGithubRepoReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{202}
}

func (x *ImportGithubRepoReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ImportGithubRepoReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ImportGithubRepoReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ImportGithubRepoReq) GetTokenUuid() string {
	if x != nil {
		return x.TokenUuid
	}
	return ""
}

func (x *ImportGithubRepoReq) GetGithubOrgName() string {
	if x != nil {
		return x.GithubOrgName
	}
	return ""
}

func (x *ImportGithubRepoReq) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

type ImportGithubRepoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *ImportGithubRepoReply) Reset() {
	*x = ImportGithubRepoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportGithubRepoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportGithubRepoReply) ProtoMessage() {}

func (x *ImportGithubRepoReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportGithubRepoReply.ProtoReflect.Descriptor instead.
func (*ImportGithubRepoReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{203}
}

func (x *ImportGithubRepoReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type CreateGithubRepoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	TokenUuid   string `protobuf:"bytes,4,opt,name=tokenUuid,proto3" json:"tokenUuid,omitempty"`
	Name        string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	OrgName     string `protobuf:"bytes,6,opt,name=orgName,proto3" json:"orgName,omitempty"`
	Private     bool   `protobuf:"varint,7,opt,name=private,proto3" json:"private,omitempty"`
	Describe    string `protobuf:"bytes,8,opt,name=describe,proto3" json:"describe,omitempty"`
}

func (x *CreateGithubRepoReq) Reset() {
	*x = CreateGithubRepoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGithubRepoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGithubRepoReq) ProtoMessage() {}

func (x *CreateGithubRepoReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGithubRepoReq.ProtoReflect.Descriptor instead.
func (*CreateGithubRepoReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{204}
}

func (x *CreateGithubRepoReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *CreateGithubRepoReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *CreateGithubRepoReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *CreateGithubRepoReq) GetTokenUuid() string {
	if x != nil {
		return x.TokenUuid
	}
	return ""
}

func (x *CreateGithubRepoReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateGithubRepoReq) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

func (x *CreateGithubRepoReq) GetPrivate() bool {
	if x != nil {
		return x.Private
	}
	return false
}

func (x *CreateGithubRepoReq) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

type CreateGithubRepoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CreateGithubRepoReply) Reset() {
	*x = CreateGithubRepoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGithubRepoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGithubRepoReply) ProtoMessage() {}

func (x *CreateGithubRepoReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGithubRepoReply.ProtoReflect.Descriptor instead.
func (*CreateGithubRepoReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{205}
}

func (x *CreateGithubRepoReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type ListGithubRepoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	Token       string `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *ListGithubRepoReq) Reset() {
	*x = ListGithubRepoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGithubRepoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGithubRepoReq) ProtoMessage() {}

func (x *ListGithubRepoReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGithubRepoReq.ProtoReflect.Descriptor instead.
func (*ListGithubRepoReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{206}
}

func (x *ListGithubRepoReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListGithubRepoReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListGithubRepoReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ListGithubRepoReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type ListGithubRepoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo []*ListGithubRepoReply_Repo `protobuf:"bytes,1,rep,name=repo,proto3" json:"repo,omitempty"`
}

func (x *ListGithubRepoReply) Reset() {
	*x = ListGithubRepoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGithubRepoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGithubRepoReply) ProtoMessage() {}

func (x *ListGithubRepoReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGithubRepoReply.ProtoReflect.Descriptor instead.
func (*ListGithubRepoReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{207}
}

func (x *ListGithubRepoReply) GetRepo() []*ListGithubRepoReply_Repo {
	if x != nil {
		return x.Repo
	}
	return nil
}

type GetGithubRepoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	Uuid        string `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *GetGithubRepoReq) Reset() {
	*x = GetGithubRepoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGithubRepoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGithubRepoReq) ProtoMessage() {}

func (x *GetGithubRepoReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGithubRepoReq.ProtoReflect.Descriptor instead.
func (*GetGithubRepoReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{208}
}

func (x *GetGithubRepoReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *GetGithubRepoReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *GetGithubRepoReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *GetGithubRepoReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type GetGithubRepoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FullName    string `protobuf:"bytes,2,opt,name=fullName,proto3" json:"fullName,omitempty"`
	HtmlUrl     string `protobuf:"bytes,3,opt,name=htmlUrl,proto3" json:"htmlUrl,omitempty"`
	CloneUrl    string `protobuf:"bytes,4,opt,name=cloneUrl,proto3" json:"cloneUrl,omitempty"`
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Star        int32  `protobuf:"varint,6,opt,name=star,proto3" json:"star,omitempty"`
	Owner       string `protobuf:"bytes,7,opt,name=owner,proto3" json:"owner,omitempty"`
	CreateTime  int64  `protobuf:"varint,8,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *GetGithubRepoReply) Reset() {
	*x = GetGithubRepoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGithubRepoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGithubRepoReply) ProtoMessage() {}

func (x *GetGithubRepoReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGithubRepoReply.ProtoReflect.Descriptor instead.
func (*GetGithubRepoReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{209}
}

func (x *GetGithubRepoReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetGithubRepoReply) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *GetGithubRepoReply) GetHtmlUrl() string {
	if x != nil {
		return x.HtmlUrl
	}
	return ""
}

func (x *GetGithubRepoReply) GetCloneUrl() string {
	if x != nil {
		return x.CloneUrl
	}
	return ""
}

func (x *GetGithubRepoReply) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetGithubRepoReply) GetStar() int32 {
	if x != nil {
		return x.Star
	}
	return 0
}

func (x *GetGithubRepoReply) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *GetGithubRepoReply) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type DelGithubRepoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	Uuid        string `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *DelGithubRepoReq) Reset() {
	*x = DelGithubRepoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelGithubRepoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelGithubRepoReq) ProtoMessage() {}

func (x *DelGithubRepoReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelGithubRepoReq.ProtoReflect.Descriptor instead.
func (*DelGithubRepoReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{210}
}

func (x *DelGithubRepoReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *DelGithubRepoReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *DelGithubRepoReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *DelGithubRepoReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type DelGithubRepoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *DelGithubRepoReply) Reset() {
	*x = DelGithubRepoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelGithubRepoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelGithubRepoReply) ProtoMessage() {}

func (x *DelGithubRepoReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelGithubRepoReply.ProtoReflect.Descriptor instead.
func (*DelGithubRepoReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{211}
}

func (x *DelGithubRepoReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type ArchiveGithubRepoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	Uuid        string `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *ArchiveGithubRepoReq) Reset() {
	*x = ArchiveGithubRepoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchiveGithubRepoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveGithubRepoReq) ProtoMessage() {}

func (x *ArchiveGithubRepoReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveGithubRepoReq.ProtoReflect.Descriptor instead.
func (*ArchiveGithubRepoReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{212}
}

func (x *ArchiveGithubRepoReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ArchiveGithubRepoReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ArchiveGithubRepoReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ArchiveGithubRepoReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type ArchiveGithubRepoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *ArchiveGithubRepoReply) Reset() {
	*x = ArchiveGithubRepoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchiveGithubRepoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveGithubRepoReply) ProtoMessage() {}

func (x *ArchiveGithubRepoReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveGithubRepoReply.ProtoReflect.Descriptor instead.
func (*ArchiveGithubRepoReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{213}
}

func (x *ArchiveGithubRepoReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type MergeGithubRepoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid     string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid      string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid  string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	RepoUuid     string `protobuf:"bytes,4,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	SourceBranch string `protobuf:"bytes,5,opt,name=sourceBranch,proto3" json:"sourceBranch,omitempty"`
	TargetBranch string `protobuf:"bytes,6,opt,name=targetBranch,proto3" json:"targetBranch,omitempty"`
	Message      string `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *MergeGithubRepoReq) Reset() {
	*x = MergeGithubRepoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeGithubRepoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeGithubRepoReq) ProtoMessage() {}

func (x *MergeGithubRepoReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeGithubRepoReq.ProtoReflect.Descriptor instead.
func (*MergeGithubRepoReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{214}
}

func (x *MergeGithubRepoReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *MergeGithubRepoReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *MergeGithubRepoReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *MergeGithubRepoReq) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *MergeGithubRepoReq) GetSourceBranch() string {
	if x != nil {
		return x.SourceBranch
	}
	return ""
}

func (x *MergeGithubRepoReq) GetTargetBranch() string {
	if x != nil {
		return x.TargetBranch
	}
	return ""
}

func (x *MergeGithubRepoReq) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type MergeGithubRepoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *MergeGithubRepoReply) Reset() {
	*x = MergeGithubRepoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeGithubRepoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeGithubRepoReply) ProtoMessage() {}

func (x *MergeGithubRepoReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeGithubRepoReply.ProtoReflect.Descriptor instead.
func (*MergeGithubRepoReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{215}
}

func (x *MergeGithubRepoReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type ListGithubRepoBranchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	RepoUuid    string `protobuf:"bytes,4,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
}

func (x *ListGithubRepoBranchReq) Reset() {
	*x = ListGithubRepoBranchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGithubRepoBranchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGithubRepoBranchReq) ProtoMessage() {}

func (x *ListGithubRepoBranchReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGithubRepoBranchReq.ProtoReflect.Descriptor instead.
func (*ListGithubRepoBranchReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{216}
}

func (x *ListGithubRepoBranchReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListGithubRepoBranchReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListGithubRepoBranchReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ListGithubRepoBranchReq) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

type ListGithubRepoBranchReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branch []*ListGithubRepoBranchReply_Branch `protobuf:"bytes,1,rep,name=branch,proto3" json:"branch,omitempty"`
}

func (x *ListGithubRepoBranchReply) Reset() {
	*x = ListGithubRepoBranchReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGithubRepoBranchReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGithubRepoBranchReply) ProtoMessage() {}

func (x *ListGithubRepoBranchReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGithubRepoBranchReply.ProtoReflect.Descriptor instead.
func (*ListGithubRepoBranchReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{217}
}

func (x *ListGithubRepoBranchReply) GetBranch() []*ListGithubRepoBranchReply_Branch {
	if x != nil {
		return x.Branch
	}
	return nil
}

type ListGithubRepoBranchCommitsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	RepoUuid    string `protobuf:"bytes,5,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	BranchName  string `protobuf:"bytes,6,opt,name=branchName,proto3" json:"branchName,omitempty"`
}

func (x *ListGithubRepoBranchCommitsReq) Reset() {
	*x = ListGithubRepoBranchCommitsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGithubRepoBranchCommitsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGithubRepoBranchCommitsReq) ProtoMessage() {}

func (x *ListGithubRepoBranchCommitsReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGithubRepoBranchCommitsReq.ProtoReflect.Descriptor instead.
func (*ListGithubRepoBranchCommitsReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{218}
}

func (x *ListGithubRepoBranchCommitsReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListGithubRepoBranchCommitsReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListGithubRepoBranchCommitsReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ListGithubRepoBranchCommitsReq) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *ListGithubRepoBranchCommitsReq) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

type ListGithubRepoBranchCommitsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commits []*ListGithubRepoBranchCommitsReply_Commit `protobuf:"bytes,1,rep,name=commits,proto3" json:"commits,omitempty"`
}

func (x *ListGithubRepoBranchCommitsReply) Reset() {
	*x = ListGithubRepoBranchCommitsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGithubRepoBranchCommitsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGithubRepoBranchCommitsReply) ProtoMessage() {}

func (x *ListGithubRepoBranchCommitsReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGithubRepoBranchCommitsReply.ProtoReflect.Descriptor instead.
func (*ListGithubRepoBranchCommitsReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{219}
}

func (x *ListGithubRepoBranchCommitsReply) GetCommits() []*ListGithubRepoBranchCommitsReply_Commit {
	if x != nil {
		return x.Commits
	}
	return nil
}

type ProtectGithubRepoBranchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	RepoUuid    string `protobuf:"bytes,4,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	BranchName  string `protobuf:"bytes,5,opt,name=branchName,proto3" json:"branchName,omitempty"`
}

func (x *ProtectGithubRepoBranchReq) Reset() {
	*x = ProtectGithubRepoBranchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtectGithubRepoBranchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtectGithubRepoBranchReq) ProtoMessage() {}

func (x *ProtectGithubRepoBranchReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtectGithubRepoBranchReq.ProtoReflect.Descriptor instead.
func (*ProtectGithubRepoBranchReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{220}
}

func (x *ProtectGithubRepoBranchReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ProtectGithubRepoBranchReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ProtectGithubRepoBranchReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ProtectGithubRepoBranchReq) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *ProtectGithubRepoBranchReq) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

type ProtectGithubRepoBranchReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *ProtectGithubRepoBranchReply) Reset() {
	*x = ProtectGithubRepoBranchReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtectGithubRepoBranchReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtectGithubRepoBranchReply) ProtoMessage() {}

func (x *ProtectGithubRepoBranchReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtectGithubRepoBranchReply.ProtoReflect.Descriptor instead.
func (*ProtectGithubRepoBranchReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{221}
}

func (x *ProtectGithubRepoBranchReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type UnprotectGithubRepoBranchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	RepoUuid    string `protobuf:"bytes,4,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	BranchName  string `protobuf:"bytes,5,opt,name=branchName,proto3" json:"branchName,omitempty"`
}

func (x *UnprotectGithubRepoBranchReq) Reset() {
	*x = UnprotectGithubRepoBranchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnprotectGithubRepoBranchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnprotectGithubRepoBranchReq) ProtoMessage() {}

func (x *UnprotectGithubRepoBranchReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnprotectGithubRepoBranchReq.ProtoReflect.Descriptor instead.
func (*UnprotectGithubRepoBranchReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{222}
}

func (x *UnprotectGithubRepoBranchReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *UnprotectGithubRepoBranchReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *UnprotectGithubRepoBranchReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *UnprotectGithubRepoBranchReq) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *UnprotectGithubRepoBranchReq) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

type UnprotectGithubRepoBranchReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *UnprotectGithubRepoBranchReply) Reset() {
	*x = UnprotectGithubRepoBranchReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnprotectGithubRepoBranchReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnprotectGithubRepoBranchReply) ProtoMessage() {}

func (x *UnprotectGithubRepoBranchReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnprotectGithubRepoBranchReply.ProtoReflect.Descriptor instead.
func (*UnprotectGithubRepoBranchReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{223}
}

func (x *UnprotectGithubRepoBranchReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

//
type ListGithubOrgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	TokenUuid   string `protobuf:"bytes,4,opt,name=tokenUuid,proto3" json:"tokenUuid,omitempty"`
}

func (x *ListGithubOrgReq) Reset() {
	*x = ListGithubOrgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGithubOrgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGithubOrgReq) ProtoMessage() {}

func (x *ListGithubOrgReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGithubOrgReq.ProtoReflect.Descriptor instead.
func (*ListGithubOrgReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{224}
}

func (x *ListGithubOrgReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListGithubOrgReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListGithubOrgReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ListGithubOrgReq) GetTokenUuid() string {
	if x != nil {
		return x.TokenUuid
	}
	return ""
}

type ListGithubOrgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orgs []*ListGithubOrgReply_Org `protobuf:"bytes,1,rep,name=orgs,proto3" json:"orgs,omitempty"`
}

func (x *ListGithubOrgReply) Reset() {
	*x = ListGithubOrgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGithubOrgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGithubOrgReply) ProtoMessage() {}

func (x *ListGithubOrgReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGithubOrgReply.ProtoReflect.Descriptor instead.
func (*ListGithubOrgReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{225}
}

func (x *ListGithubOrgReply) GetOrgs() []*ListGithubOrgReply_Org {
	if x != nil {
		return x.Orgs
	}
	return nil
}

type ListGithubRepoByOrgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	TokenUuid   string `protobuf:"bytes,4,opt,name=tokenUuid,proto3" json:"tokenUuid,omitempty"`
	OrgName     string `protobuf:"bytes,5,opt,name=orgName,proto3" json:"orgName,omitempty"`
	// rType: 1: public, 2: private, 3: forks, 4: sources, 5: member, other: all
	RType int32 `protobuf:"varint,6,opt,name=rType,proto3" json:"rType,omitempty"`
}

func (x *ListGithubRepoByOrgReq) Reset() {
	*x = ListGithubRepoByOrgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGithubRepoByOrgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGithubRepoByOrgReq) ProtoMessage() {}

func (x *ListGithubRepoByOrgReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGithubRepoByOrgReq.ProtoReflect.Descriptor instead.
func (*ListGithubRepoByOrgReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{226}
}

func (x *ListGithubRepoByOrgReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListGithubRepoByOrgReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListGithubRepoByOrgReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ListGithubRepoByOrgReq) GetTokenUuid() string {
	if x != nil {
		return x.TokenUuid
	}
	return ""
}

func (x *ListGithubRepoByOrgReq) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

func (x *ListGithubRepoByOrgReq) GetRType() int32 {
	if x != nil {
		return x.RType
	}
	return 0
}

type ListGithubRepoByOrgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Org     string                              `protobuf:"bytes,1,opt,name=org,proto3" json:"org,omitempty"`
	RepoOrg []*ListGithubRepoByOrgReply_RepoOrg `protobuf:"bytes,2,rep,name=repoOrg,proto3" json:"repoOrg,omitempty"`
}

func (x *ListGithubRepoByOrgReply) Reset() {
	*x = ListGithubRepoByOrgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGithubRepoByOrgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGithubRepoByOrgReply) ProtoMessage() {}

func (x *ListGithubRepoByOrgReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGithubRepoByOrgReply.ProtoReflect.Descriptor instead.
func (*ListGithubRepoByOrgReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{227}
}

func (x *ListGithubRepoByOrgReply) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *ListGithubRepoByOrgReply) GetRepoOrg() []*ListGithubRepoByOrgReply_RepoOrg {
	if x != nil {
		return x.RepoOrg
	}
	return nil
}

type GetGithubUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetGithubUserReq) Reset() {
	*x = GetGithubUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGithubUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGithubUserReq) ProtoMessage() {}

func (x *GetGithubUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGithubUserReq.ProtoReflect.Descriptor instead.
func (*GetGithubUserReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{228}
}

func (x *GetGithubUserReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetGithubUserReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username     string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Email        string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	PublicRepos  int32  `protobuf:"varint,3,opt,name=PublicRepos,proto3" json:"PublicRepos,omitempty"`
	PrivateRepos int32  `protobuf:"varint,4,opt,name=PrivateRepos,proto3" json:"PrivateRepos,omitempty"`
	Followers    int32  `protobuf:"varint,5,opt,name=Followers,proto3" json:"Followers,omitempty"`
	Following    int32  `protobuf:"varint,6,opt,name=Following,proto3" json:"Following,omitempty"`
	CreateTime   int64  `protobuf:"varint,7,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
}

func (x *GetGithubUserReply) Reset() {
	*x = GetGithubUserReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGithubUserReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGithubUserReply) ProtoMessage() {}

func (x *GetGithubUserReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGithubUserReply.ProtoReflect.Descriptor instead.
func (*GetGithubUserReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{229}
}

func (x *GetGithubUserReply) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GetGithubUserReply) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *GetGithubUserReply) GetPublicRepos() int32 {
	if x != nil {
		return x.PublicRepos
	}
	return 0
}

func (x *GetGithubUserReply) GetPrivateRepos() int32 {
	if x != nil {
		return x.PrivateRepos
	}
	return 0
}

func (x *GetGithubUserReply) GetFollowers() int32 {
	if x != nil {
		return x.Followers
	}
	return 0
}

func (x *GetGithubUserReply) GetFollowing() int32 {
	if x != nil {
		return x.Following
	}
	return 0
}

func (x *GetGithubUserReply) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

// 创建ServiceUrl
type CreateServiceUrlReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	Name           string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Url            string `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	Describe       string `protobuf:"bytes,7,opt,name=describe,proto3" json:"describe,omitempty"`
}

func (x *CreateServiceUrlReq) Reset() {
	*x = CreateServiceUrlReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateServiceUrlReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServiceUrlReq) ProtoMessage() {}

func (x *CreateServiceUrlReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServiceUrlReq.ProtoReflect.Descriptor instead.
func (*CreateServiceUrlReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{230}
}

func (x *CreateServiceUrlReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *CreateServiceUrlReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *CreateServiceUrlReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *CreateServiceUrlReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *CreateServiceUrlReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateServiceUrlReq) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *CreateServiceUrlReq) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

type CreateServiceUrlReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CreateServiceUrlReply) Reset() {
	*x = CreateServiceUrlReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateServiceUrlReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServiceUrlReply) ProtoMessage() {}

func (x *CreateServiceUrlReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServiceUrlReply.ProtoReflect.Descriptor instead.
func (*CreateServiceUrlReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{231}
}

func (x *CreateServiceUrlReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// 列出ServiceUrl
type ListServiceUrlReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
}

func (x *ListServiceUrlReq) Reset() {
	*x = ListServiceUrlReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListServiceUrlReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServiceUrlReq) ProtoMessage() {}

func (x *ListServiceUrlReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServiceUrlReq.ProtoReflect.Descriptor instead.
func (*ListServiceUrlReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{232}
}

func (x *ListServiceUrlReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListServiceUrlReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListServiceUrlReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ListServiceUrlReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

type ListServiceUrlReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceUrls []*ListServiceUrlReply_ServiceUrl `protobuf:"bytes,1,rep,name=serviceUrls,proto3" json:"serviceUrls,omitempty"`
}

func (x *ListServiceUrlReply) Reset() {
	*x = ListServiceUrlReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListServiceUrlReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServiceUrlReply) ProtoMessage() {}

func (x *ListServiceUrlReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServiceUrlReply.ProtoReflect.Descriptor instead.
func (*ListServiceUrlReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{233}
}

func (x *ListServiceUrlReply) GetServiceUrls() []*ListServiceUrlReply_ServiceUrl {
	if x != nil {
		return x.ServiceUrls
	}
	return nil
}

// 删除 ServiceUrl
type DelServiceUrlReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	ServiceUrlUuid string `protobuf:"bytes,5,opt,name=serviceUrlUuid,proto3" json:"serviceUrlUuid,omitempty"`
}

func (x *DelServiceUrlReq) Reset() {
	*x = DelServiceUrlReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelServiceUrlReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelServiceUrlReq) ProtoMessage() {}

func (x *DelServiceUrlReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelServiceUrlReq.ProtoReflect.Descriptor instead.
func (*DelServiceUrlReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{234}
}

func (x *DelServiceUrlReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *DelServiceUrlReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *DelServiceUrlReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *DelServiceUrlReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *DelServiceUrlReq) GetServiceUrlUuid() string {
	if x != nil {
		return x.ServiceUrlUuid
	}
	return ""
}

type DelServiceUrlReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *DelServiceUrlReply) Reset() {
	*x = DelServiceUrlReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelServiceUrlReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelServiceUrlReply) ProtoMessage() {}

func (x *DelServiceUrlReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelServiceUrlReply.ProtoReflect.Descriptor instead.
func (*DelServiceUrlReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{235}
}

func (x *DelServiceUrlReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// 容器仓库账户
type AddContainerRegistryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	Url         string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	Username    string `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
	Password    string `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
	Email       string `protobuf:"bytes,7,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *AddContainerRegistryReq) Reset() {
	*x = AddContainerRegistryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddContainerRegistryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddContainerRegistryReq) ProtoMessage() {}

func (x *AddContainerRegistryReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddContainerRegistryReq.ProtoReflect.Descriptor instead.
func (*AddContainerRegistryReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{236}
}

func (x *AddContainerRegistryReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *AddContainerRegistryReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *AddContainerRegistryReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *AddContainerRegistryReq) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *AddContainerRegistryReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AddContainerRegistryReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AddContainerRegistryReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type AddContainerRegistryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *AddContainerRegistryReply) Reset() {
	*x = AddContainerRegistryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddContainerRegistryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddContainerRegistryReply) ProtoMessage() {}

func (x *AddContainerRegistryReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddContainerRegistryReply.ProtoReflect.Descriptor instead.
func (*AddContainerRegistryReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{237}
}

func (x *AddContainerRegistryReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type ListContainerRegistryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
}

func (x *ListContainerRegistryReq) Reset() {
	*x = ListContainerRegistryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContainerRegistryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContainerRegistryReq) ProtoMessage() {}

func (x *ListContainerRegistryReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContainerRegistryReq.ProtoReflect.Descriptor instead.
func (*ListContainerRegistryReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{238}
}

func (x *ListContainerRegistryReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListContainerRegistryReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListContainerRegistryReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

type ListContainerRegistryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerRegistry []*ListContainerRegistryReply_ContainerRegistry `protobuf:"bytes,1,rep,name=containerRegistry,proto3" json:"containerRegistry,omitempty"`
}

func (x *ListContainerRegistryReply) Reset() {
	*x = ListContainerRegistryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContainerRegistryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContainerRegistryReply) ProtoMessage() {}

func (x *ListContainerRegistryReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContainerRegistryReply.ProtoReflect.Descriptor instead.
func (*ListContainerRegistryReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{239}
}

func (x *ListContainerRegistryReply) GetContainerRegistry() []*ListContainerRegistryReply_ContainerRegistry {
	if x != nil {
		return x.ContainerRegistry
	}
	return nil
}

type DelContainerRegistryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	Uuid        string `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *DelContainerRegistryReq) Reset() {
	*x = DelContainerRegistryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelContainerRegistryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelContainerRegistryReq) ProtoMessage() {}

func (x *DelContainerRegistryReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelContainerRegistryReq.ProtoReflect.Descriptor instead.
func (*DelContainerRegistryReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{240}
}

func (x *DelContainerRegistryReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *DelContainerRegistryReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *DelContainerRegistryReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *DelContainerRegistryReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type DelContainerRegistryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *DelContainerRegistryReply) Reset() {
	*x = DelContainerRegistryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelContainerRegistryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelContainerRegistryReply) ProtoMessage() {}

func (x *DelContainerRegistryReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelContainerRegistryReply.ProtoReflect.Descriptor instead.
func (*DelContainerRegistryReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{241}
}

func (x *DelContainerRegistryReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type GetContainerRegistryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//string userUuid = 1 [(validate.rules).string.min_len = 1];
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	Uuid        string `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *GetContainerRegistryReq) Reset() {
	*x = GetContainerRegistryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContainerRegistryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContainerRegistryReq) ProtoMessage() {}

func (x *GetContainerRegistryReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContainerRegistryReq.ProtoReflect.Descriptor instead.
func (*GetContainerRegistryReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{242}
}

func (x *GetContainerRegistryReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *GetContainerRegistryReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *GetContainerRegistryReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type GetContainerRegistryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username   string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password   string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Url        string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Email      string `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	CreateTime int64  `protobuf:"varint,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *GetContainerRegistryReply) Reset() {
	*x = GetContainerRegistryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContainerRegistryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContainerRegistryReply) ProtoMessage() {}

func (x *GetContainerRegistryReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContainerRegistryReply.ProtoReflect.Descriptor instead.
func (*GetContainerRegistryReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{243}
}

func (x *GetContainerRegistryReply) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GetContainerRegistryReply) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *GetContainerRegistryReply) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GetContainerRegistryReply) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *GetContainerRegistryReply) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

// 添加ContainerImage
type AddPublicContainerImageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	Name        string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	ImageUrl    string `protobuf:"bytes,5,opt,name=imageUrl,proto3" json:"imageUrl,omitempty"`
	Describe    string `protobuf:"bytes,6,opt,name=describe,proto3" json:"describe,omitempty"`
}

func (x *AddPublicContainerImageReq) Reset() {
	*x = AddPublicContainerImageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPublicContainerImageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPublicContainerImageReq) ProtoMessage() {}

func (x *AddPublicContainerImageReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPublicContainerImageReq.ProtoReflect.Descriptor instead.
func (*AddPublicContainerImageReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{244}
}

func (x *AddPublicContainerImageReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *AddPublicContainerImageReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *AddPublicContainerImageReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *AddPublicContainerImageReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddPublicContainerImageReq) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *AddPublicContainerImageReq) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

type AddPublicContainerImageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *AddPublicContainerImageReply) Reset() {
	*x = AddPublicContainerImageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPublicContainerImageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPublicContainerImageReply) ProtoMessage() {}

func (x *AddPublicContainerImageReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPublicContainerImageReply.ProtoReflect.Descriptor instead.
func (*AddPublicContainerImageReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{245}
}

func (x *AddPublicContainerImageReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// 列出ContainerImage
type ListPublicContainerImageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	Keyword     string `protobuf:"bytes,4,opt,name=keyword,proto3" json:"keyword,omitempty"`
}

func (x *ListPublicContainerImageReq) Reset() {
	*x = ListPublicContainerImageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPublicContainerImageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPublicContainerImageReq) ProtoMessage() {}

func (x *ListPublicContainerImageReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPublicContainerImageReq.ProtoReflect.Descriptor instead.
func (*ListPublicContainerImageReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{246}
}

func (x *ListPublicContainerImageReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListPublicContainerImageReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListPublicContainerImageReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ListPublicContainerImageReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

type ListPublicContainerImageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerImage []*ListPublicContainerImageReply_ContainerImage `protobuf:"bytes,1,rep,name=containerImage,proto3" json:"containerImage,omitempty"`
}

func (x *ListPublicContainerImageReply) Reset() {
	*x = ListPublicContainerImageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPublicContainerImageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPublicContainerImageReply) ProtoMessage() {}

func (x *ListPublicContainerImageReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPublicContainerImageReply.ProtoReflect.Descriptor instead.
func (*ListPublicContainerImageReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{247}
}

func (x *ListPublicContainerImageReply) GetContainerImage() []*ListPublicContainerImageReply_ContainerImage {
	if x != nil {
		return x.ContainerImage
	}
	return nil
}

// 删除ContainerImage
type DelPublicContainerImageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid           string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid            string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid        string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ContainerImageUuid string `protobuf:"bytes,4,opt,name=containerImageUuid,proto3" json:"containerImageUuid,omitempty"`
}

func (x *DelPublicContainerImageReq) Reset() {
	*x = DelPublicContainerImageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelPublicContainerImageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelPublicContainerImageReq) ProtoMessage() {}

func (x *DelPublicContainerImageReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelPublicContainerImageReq.ProtoReflect.Descriptor instead.
func (*DelPublicContainerImageReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{248}
}

func (x *DelPublicContainerImageReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *DelPublicContainerImageReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *DelPublicContainerImageReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *DelPublicContainerImageReq) GetContainerImageUuid() string {
	if x != nil {
		return x.ContainerImageUuid
	}
	return ""
}

type DelPublicContainerImageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *DelPublicContainerImageReply) Reset() {
	*x = DelPublicContainerImageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelPublicContainerImageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelPublicContainerImageReply) ProtoMessage() {}

func (x *DelPublicContainerImageReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelPublicContainerImageReply.ProtoReflect.Descriptor instead.
func (*DelPublicContainerImageReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{249}
}

func (x *DelPublicContainerImageReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// reliability
// 内部请求
type CreateReliabilityReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductUuid        string  `protobuf:"bytes,1,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	DailyTime          int64   `protobuf:"varint,2,opt,name=dailyTime,proto3" json:"dailyTime,omitempty"`
	ReliabilityPercent float32 `protobuf:"fixed32,3,opt,name=reliabilityPercent,proto3" json:"reliabilityPercent,omitempty"`
}

func (x *CreateReliabilityReq) Reset() {
	*x = CreateReliabilityReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReliabilityReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReliabilityReq) ProtoMessage() {}

func (x *CreateReliabilityReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReliabilityReq.ProtoReflect.Descriptor instead.
func (*CreateReliabilityReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{250}
}

func (x *CreateReliabilityReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *CreateReliabilityReq) GetDailyTime() int64 {
	if x != nil {
		return x.DailyTime
	}
	return 0
}

func (x *CreateReliabilityReq) GetReliabilityPercent() float32 {
	if x != nil {
		return x.ReliabilityPercent
	}
	return 0
}

type CreateReliabilityReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CreateReliabilityReply) Reset() {
	*x = CreateReliabilityReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReliabilityReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReliabilityReply) ProtoMessage() {}

func (x *CreateReliabilityReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReliabilityReply.ProtoReflect.Descriptor instead.
func (*CreateReliabilityReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{251}
}

func (x *CreateReliabilityReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type GetReliabilityReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,2,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	Days        int32  `protobuf:"varint,3,opt,name=days,proto3" json:"days,omitempty"`
}

func (x *GetReliabilityReq) Reset() {
	*x = GetReliabilityReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReliabilityReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReliabilityReq) ProtoMessage() {}

func (x *GetReliabilityReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReliabilityReq.ProtoReflect.Descriptor instead.
func (*GetReliabilityReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{252}
}

func (x *GetReliabilityReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *GetReliabilityReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *GetReliabilityReq) GetDays() int32 {
	if x != nil {
		return x.Days
	}
	return 0
}

type GetReliabilityReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reliability []*GetReliabilityReply_Reliability `protobuf:"bytes,1,rep,name=reliability,proto3" json:"reliability,omitempty"`
}

func (x *GetReliabilityReply) Reset() {
	*x = GetReliabilityReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReliabilityReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReliabilityReply) ProtoMessage() {}

func (x *GetReliabilityReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReliabilityReply.ProtoReflect.Descriptor instead.
func (*GetReliabilityReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{253}
}

func (x *GetReliabilityReply) GetReliability() []*GetReliabilityReply_Reliability {
	if x != nil {
		return x.Reliability
	}
	return nil
}

// WebServiceResource
type CreateWebServiceResourceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string   `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string   `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string   `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string   `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	Protocol       int32    `protobuf:"varint,5,opt,name=protocol,proto3" json:"protocol,omitempty"`
	ServerName     string   `protobuf:"bytes,6,opt,name=serverName,proto3" json:"serverName,omitempty"`
	IpPool         []string `protobuf:"bytes,7,rep,name=ipPool,proto3" json:"ipPool,omitempty"`
	HealthCheckUri string   `protobuf:"bytes,8,opt,name=healthCheckUri,proto3" json:"healthCheckUri,omitempty"`
	Describe       string   `protobuf:"bytes,9,opt,name=describe,proto3" json:"describe,omitempty"`
}

func (x *CreateWebServiceResourceReq) Reset() {
	*x = CreateWebServiceResourceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWebServiceResourceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWebServiceResourceReq) ProtoMessage() {}

func (x *CreateWebServiceResourceReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWebServiceResourceReq.ProtoReflect.Descriptor instead.
func (*CreateWebServiceResourceReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{254}
}

func (x *CreateWebServiceResourceReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *CreateWebServiceResourceReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *CreateWebServiceResourceReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *CreateWebServiceResourceReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *CreateWebServiceResourceReq) GetProtocol() int32 {
	if x != nil {
		return x.Protocol
	}
	return 0
}

func (x *CreateWebServiceResourceReq) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *CreateWebServiceResourceReq) GetIpPool() []string {
	if x != nil {
		return x.IpPool
	}
	return nil
}

func (x *CreateWebServiceResourceReq) GetHealthCheckUri() string {
	if x != nil {
		return x.HealthCheckUri
	}
	return ""
}

func (x *CreateWebServiceResourceReq) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

type CreateWebServiceResourceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CreateWebServiceResourceReply) Reset() {
	*x = CreateWebServiceResourceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWebServiceResourceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWebServiceResourceReply) ProtoMessage() {}

func (x *CreateWebServiceResourceReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWebServiceResourceReply.ProtoReflect.Descriptor instead.
func (*CreateWebServiceResourceReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{255}
}

func (x *CreateWebServiceResourceReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type ListWebServiceResourceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
}

func (x *ListWebServiceResourceReq) Reset() {
	*x = ListWebServiceResourceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWebServiceResourceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWebServiceResourceReq) ProtoMessage() {}

func (x *ListWebServiceResourceReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWebServiceResourceReq.ProtoReflect.Descriptor instead.
func (*ListWebServiceResourceReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{256}
}

func (x *ListWebServiceResourceReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListWebServiceResourceReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListWebServiceResourceReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ListWebServiceResourceReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

type ListWebServiceResourceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebServiceResource []*ListWebServiceResourceReply_WebServiceResource `protobuf:"bytes,1,rep,name=webServiceResource,proto3" json:"webServiceResource,omitempty"`
}

func (x *ListWebServiceResourceReply) Reset() {
	*x = ListWebServiceResourceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWebServiceResourceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWebServiceResourceReply) ProtoMessage() {}

func (x *ListWebServiceResourceReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWebServiceResourceReply.ProtoReflect.Descriptor instead.
func (*ListWebServiceResourceReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{257}
}

func (x *ListWebServiceResourceReply) GetWebServiceResource() []*ListWebServiceResourceReply_WebServiceResource {
	if x != nil {
		return x.WebServiceResource
	}
	return nil
}

type DelWebServiceResourceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid    string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	Uuid        string `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *DelWebServiceResourceReq) Reset() {
	*x = DelWebServiceResourceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelWebServiceResourceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelWebServiceResourceReq) ProtoMessage() {}

func (x *DelWebServiceResourceReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelWebServiceResourceReq.ProtoReflect.Descriptor instead.
func (*DelWebServiceResourceReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{258}
}

func (x *DelWebServiceResourceReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *DelWebServiceResourceReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *DelWebServiceResourceReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *DelWebServiceResourceReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type DelWebServiceResourceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *DelWebServiceResourceReply) Reset() {
	*x = DelWebServiceResourceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelWebServiceResourceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelWebServiceResourceReply) ProtoMessage() {}

func (x *DelWebServiceResourceReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelWebServiceResourceReply.ProtoReflect.Descriptor instead.
func (*DelWebServiceResourceReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{259}
}

func (x *DelWebServiceResourceReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type UpdateWebServiceResourceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid       string   `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid        string   `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string   `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	Uuid           string   `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Protocol       int32    `protobuf:"varint,5,opt,name=protocol,proto3" json:"protocol,omitempty"`
	ServerName     string   `protobuf:"bytes,6,opt,name=serverName,proto3" json:"serverName,omitempty"`
	IpPool         []string `protobuf:"bytes,7,rep,name=ipPool,proto3" json:"ipPool,omitempty"`
	HealthCheckUri string   `protobuf:"bytes,8,opt,name=healthCheckUri,proto3" json:"healthCheckUri,omitempty"`
	Describe       string   `protobuf:"bytes,9,opt,name=describe,proto3" json:"describe,omitempty"`
}

func (x *UpdateWebServiceResourceReq) Reset() {
	*x = UpdateWebServiceResourceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWebServiceResourceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWebServiceResourceReq) ProtoMessage() {}

func (x *UpdateWebServiceResourceReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWebServiceResourceReq.ProtoReflect.Descriptor instead.
func (*UpdateWebServiceResourceReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{260}
}

func (x *UpdateWebServiceResourceReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *UpdateWebServiceResourceReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *UpdateWebServiceResourceReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *UpdateWebServiceResourceReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *UpdateWebServiceResourceReq) GetProtocol() int32 {
	if x != nil {
		return x.Protocol
	}
	return 0
}

func (x *UpdateWebServiceResourceReq) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *UpdateWebServiceResourceReq) GetIpPool() []string {
	if x != nil {
		return x.IpPool
	}
	return nil
}

func (x *UpdateWebServiceResourceReq) GetHealthCheckUri() string {
	if x != nil {
		return x.HealthCheckUri
	}
	return ""
}

func (x *UpdateWebServiceResourceReq) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

type UpdateWebServiceResourceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *UpdateWebServiceResourceReply) Reset() {
	*x = UpdateWebServiceResourceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWebServiceResourceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWebServiceResourceReply) ProtoMessage() {}

func (x *UpdateWebServiceResourceReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWebServiceResourceReply.ProtoReflect.Descriptor instead.
func (*UpdateWebServiceResourceReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{261}
}

func (x *UpdateWebServiceResourceReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// 仅提供内部使用
type GetWebServiceResourcePromSDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgUuid        string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
}

func (x *GetWebServiceResourcePromSDReq) Reset() {
	*x = GetWebServiceResourcePromSDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWebServiceResourcePromSDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWebServiceResourcePromSDReq) ProtoMessage() {}

func (x *GetWebServiceResourcePromSDReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWebServiceResourcePromSDReq.ProtoReflect.Descriptor instead.
func (*GetWebServiceResourcePromSDReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{262}
}

func (x *GetWebServiceResourcePromSDReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *GetWebServiceResourcePromSDReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *GetWebServiceResourcePromSDReq) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

type GetWebServiceResourcePromSDReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebServiceResource []*GetWebServiceResourcePromSDReply_WebServiceResource `protobuf:"bytes,1,rep,name=webServiceResource,proto3" json:"webServiceResource,omitempty"`
}

func (x *GetWebServiceResourcePromSDReply) Reset() {
	*x = GetWebServiceResourcePromSDReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWebServiceResourcePromSDReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWebServiceResourcePromSDReply) ProtoMessage() {}

func (x *GetWebServiceResourcePromSDReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWebServiceResourcePromSDReply.ProtoReflect.Descriptor instead.
func (*GetWebServiceResourcePromSDReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{263}
}

func (x *GetWebServiceResourcePromSDReply) GetWebServiceResource() []*GetWebServiceResourcePromSDReply_WebServiceResource {
	if x != nil {
		return x.WebServiceResource
	}
	return nil
}

// CI
// 自建Gitlab仓库构建容器镜像
type SelfGitlabRepoBuildContainerImageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid     string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid      string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid  string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	PlatformUuid string `protobuf:"bytes,4,opt,name=platformUuid,proto3" json:"platformUuid,omitempty"`
	RepoUuid     string `protobuf:"bytes,5,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	BranchName   string `protobuf:"bytes,6,opt,name=branchName,proto3" json:"branchName,omitempty"`
	RegistryUuid string `protobuf:"bytes,7,opt,name=registryUuid,proto3" json:"registryUuid,omitempty"`
	Dockerfile   string `protobuf:"bytes,8,opt,name=dockerfile,proto3" json:"dockerfile,omitempty"`
}

func (x *SelfGitlabRepoBuildContainerImageReq) Reset() {
	*x = SelfGitlabRepoBuildContainerImageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelfGitlabRepoBuildContainerImageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelfGitlabRepoBuildContainerImageReq) ProtoMessage() {}

func (x *SelfGitlabRepoBuildContainerImageReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelfGitlabRepoBuildContainerImageReq.ProtoReflect.Descriptor instead.
func (*SelfGitlabRepoBuildContainerImageReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{264}
}

func (x *SelfGitlabRepoBuildContainerImageReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *SelfGitlabRepoBuildContainerImageReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *SelfGitlabRepoBuildContainerImageReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *SelfGitlabRepoBuildContainerImageReq) GetPlatformUuid() string {
	if x != nil {
		return x.PlatformUuid
	}
	return ""
}

func (x *SelfGitlabRepoBuildContainerImageReq) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *SelfGitlabRepoBuildContainerImageReq) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *SelfGitlabRepoBuildContainerImageReq) GetRegistryUuid() string {
	if x != nil {
		return x.RegistryUuid
	}
	return ""
}

func (x *SelfGitlabRepoBuildContainerImageReq) GetDockerfile() string {
	if x != nil {
		return x.Dockerfile
	}
	return ""
}

type SelfGitlabRepoBuildContainerImageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *SelfGitlabRepoBuildContainerImageReply) Reset() {
	*x = SelfGitlabRepoBuildContainerImageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelfGitlabRepoBuildContainerImageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelfGitlabRepoBuildContainerImageReply) ProtoMessage() {}

func (x *SelfGitlabRepoBuildContainerImageReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelfGitlabRepoBuildContainerImageReply.ProtoReflect.Descriptor instead.
func (*SelfGitlabRepoBuildContainerImageReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{265}
}

func (x *SelfGitlabRepoBuildContainerImageReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// Github仓库构建容器镜像
type GithubRepoBuildContainerImageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid     string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid      string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid  string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	RepoUuid     string `protobuf:"bytes,4,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	BranchName   string `protobuf:"bytes,5,opt,name=branchName,proto3" json:"branchName,omitempty"`
	RegistryUuid string `protobuf:"bytes,6,opt,name=registryUuid,proto3" json:"registryUuid,omitempty"`
	Dockerfile   string `protobuf:"bytes,7,opt,name=dockerfile,proto3" json:"dockerfile,omitempty"`
}

func (x *GithubRepoBuildContainerImageReq) Reset() {
	*x = GithubRepoBuildContainerImageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GithubRepoBuildContainerImageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GithubRepoBuildContainerImageReq) ProtoMessage() {}

func (x *GithubRepoBuildContainerImageReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GithubRepoBuildContainerImageReq.ProtoReflect.Descriptor instead.
func (*GithubRepoBuildContainerImageReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{266}
}

func (x *GithubRepoBuildContainerImageReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *GithubRepoBuildContainerImageReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *GithubRepoBuildContainerImageReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *GithubRepoBuildContainerImageReq) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *GithubRepoBuildContainerImageReq) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *GithubRepoBuildContainerImageReq) GetRegistryUuid() string {
	if x != nil {
		return x.RegistryUuid
	}
	return ""
}

func (x *GithubRepoBuildContainerImageReq) GetDockerfile() string {
	if x != nil {
		return x.Dockerfile
	}
	return ""
}

type GithubRepoBuildContainerImageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *GithubRepoBuildContainerImageReply) Reset() {
	*x = GithubRepoBuildContainerImageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GithubRepoBuildContainerImageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GithubRepoBuildContainerImageReply) ProtoMessage() {}

func (x *GithubRepoBuildContainerImageReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GithubRepoBuildContainerImageReply.ProtoReflect.Descriptor instead.
func (*GithubRepoBuildContainerImageReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{267}
}

func (x *GithubRepoBuildContainerImageReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// 自建Gitlab仓库执行CI模版任务
type SelfGitlabRepoExecCiTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid     string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid      string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid  string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	PlatformUuid string `protobuf:"bytes,4,opt,name=platformUuid,proto3" json:"platformUuid,omitempty"`
	RepoUuid     string `protobuf:"bytes,5,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	BranchName   string `protobuf:"bytes,6,opt,name=branchName,proto3" json:"branchName,omitempty"`
	TemplateUuid string `protobuf:"bytes,7,opt,name=templateUuid,proto3" json:"templateUuid,omitempty"`
}

func (x *SelfGitlabRepoExecCiTemplateReq) Reset() {
	*x = SelfGitlabRepoExecCiTemplateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelfGitlabRepoExecCiTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelfGitlabRepoExecCiTemplateReq) ProtoMessage() {}

func (x *SelfGitlabRepoExecCiTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelfGitlabRepoExecCiTemplateReq.ProtoReflect.Descriptor instead.
func (*SelfGitlabRepoExecCiTemplateReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{268}
}

func (x *SelfGitlabRepoExecCiTemplateReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *SelfGitlabRepoExecCiTemplateReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *SelfGitlabRepoExecCiTemplateReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *SelfGitlabRepoExecCiTemplateReq) GetPlatformUuid() string {
	if x != nil {
		return x.PlatformUuid
	}
	return ""
}

func (x *SelfGitlabRepoExecCiTemplateReq) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *SelfGitlabRepoExecCiTemplateReq) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *SelfGitlabRepoExecCiTemplateReq) GetTemplateUuid() string {
	if x != nil {
		return x.TemplateUuid
	}
	return ""
}

type SelfGitlabRepoExecCiTemplateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *SelfGitlabRepoExecCiTemplateReply) Reset() {
	*x = SelfGitlabRepoExecCiTemplateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelfGitlabRepoExecCiTemplateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelfGitlabRepoExecCiTemplateReply) ProtoMessage() {}

func (x *SelfGitlabRepoExecCiTemplateReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelfGitlabRepoExecCiTemplateReply.ProtoReflect.Descriptor instead.
func (*SelfGitlabRepoExecCiTemplateReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{269}
}

func (x *SelfGitlabRepoExecCiTemplateReply) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

// Github仓库执行CI模版任务
type GithubRepoExecCiTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUuid     string `protobuf:"bytes,1,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	OrgUuid      string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid  string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	RepoUuid     string `protobuf:"bytes,4,opt,name=repoUuid,proto3" json:"repoUuid,omitempty"`
	BranchName   string `protobuf:"bytes,5,opt,name=branchName,proto3" json:"branchName,omitempty"`
	TemplateUuid string `protobuf:"bytes,6,opt,name=templateUuid,proto3" json:"templateUuid,omitempty"`
}

func (x *GithubRepoExecCiTemplateReq) Reset() {
	*x = GithubRepoExecCiTemplateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GithubRepoExecCiTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GithubRepoExecCiTemplateReq) ProtoMessage() {}

func (x *GithubRepoExecCiTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GithubRepoExecCiTemplateReq.ProtoReflect.Descriptor instead.
func (*GithubRepoExecCiTemplateReq) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{270}
}

func (x *GithubRepoExecCiTemplateReq) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *GithubRepoExecCiTemplateReq) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *GithubRepoExecCiTemplateReq) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *GithubRepoExecCiTemplateReq) GetRepoUuid() string {
	if x != nil {
		return x.RepoUuid
	}
	return ""
}

func (x *GithubRepoExecCiTemplateReq) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

func (x *GithubRepoExecCiTemplateReq) GetTemplateUuid() string {
	if x != nil {
		return x.TemplateUuid
	}
	return ""
}

type GithubRepoExecCiTemplateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *GithubRepoExecCiTemplateReply) Reset() {
	*x = GithubRepoExecCiTemplateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GithubRepoExecCiTemplateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GithubRepoExecCiTemplateReply) ProtoMessage() {}

func (x *GithubRepoExecCiTemplateReply) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GithubRepoExecCiTemplateReply.ProtoReflect.Descriptor instead.
func (*GithubRepoExecCiTemplateReply) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{271}
}

func (x *GithubRepoExecCiTemplateReply) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type ListOrgProductReply_Product struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=org_uuid,json=orgUuid,proto3" json:"org_uuid,omitempty"`
	ProductName string `protobuf:"bytes,3,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	Logo        string `protobuf:"bytes,4,opt,name=logo,proto3" json:"logo,omitempty"`
	Describe    string `protobuf:"bytes,5,opt,name=describe,proto3" json:"describe,omitempty"`
	CreateTime  int64  `protobuf:"varint,6,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *ListOrgProductReply_Product) Reset() {
	*x = ListOrgProductReply_Product{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrgProductReply_Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrgProductReply_Product) ProtoMessage() {}

func (x *ListOrgProductReply_Product) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrgProductReply_Product.ProtoReflect.Descriptor instead.
func (*ListOrgProductReply_Product) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{3, 0}
}

func (x *ListOrgProductReply_Product) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ListOrgProductReply_Product) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListOrgProductReply_Product) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *ListOrgProductReply_Product) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *ListOrgProductReply_Product) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *ListOrgProductReply_Product) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type ListOrgProductGroupMemberReply_ProductGroupMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid     string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	UserUuid string `protobuf:"bytes,2,opt,name=userUuid,proto3" json:"userUuid,omitempty"`
	UserName string `protobuf:"bytes,3,opt,name=userName,proto3" json:"userName,omitempty"`
}

func (x *ListOrgProductGroupMemberReply_ProductGroupMember) Reset() {
	*x = ListOrgProductGroupMemberReply_ProductGroupMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrgProductGroupMemberReply_ProductGroupMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrgProductGroupMemberReply_ProductGroupMember) ProtoMessage() {}

func (x *ListOrgProductGroupMemberReply_ProductGroupMember) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrgProductGroupMemberReply_ProductGroupMember.ProtoReflect.Descriptor instead.
func (*ListOrgProductGroupMemberReply_ProductGroupMember) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{17, 0}
}

func (x *ListOrgProductGroupMemberReply_ProductGroupMember) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ListOrgProductGroupMemberReply_ProductGroupMember) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ListOrgProductGroupMemberReply_ProductGroupMember) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type ListOrgProductEnvReply_Env struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	ProductUuid string `protobuf:"bytes,2,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	EnvName     string `protobuf:"bytes,3,opt,name=envName,proto3" json:"envName,omitempty"`
	Priority    int32  `protobuf:"varint,4,opt,name=priority,proto3" json:"priority,omitempty"`
	Describe    string `protobuf:"bytes,5,opt,name=describe,proto3" json:"describe,omitempty"`
	CreateTime  int64  `protobuf:"varint,6,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *ListOrgProductEnvReply_Env) Reset() {
	*x = ListOrgProductEnvReply_Env{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[274]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrgProductEnvReply_Env) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrgProductEnvReply_Env) ProtoMessage() {}

func (x *ListOrgProductEnvReply_Env) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[274]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrgProductEnvReply_Env.ProtoReflect.Descriptor instead.
func (*ListOrgProductEnvReply_Env) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{25, 0}
}

func (x *ListOrgProductEnvReply_Env) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ListOrgProductEnvReply_Env) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ListOrgProductEnvReply_Env) GetEnvName() string {
	if x != nil {
		return x.EnvName
	}
	return ""
}

func (x *ListOrgProductEnvReply_Env) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *ListOrgProductEnvReply_Env) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *ListOrgProductEnvReply_Env) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type GetK8SClusterNodeReply_Capacity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu              string `protobuf:"bytes,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory           string `protobuf:"bytes,2,opt,name=memory,proto3" json:"memory,omitempty"`
	Storage          string `protobuf:"bytes,3,opt,name=storage,proto3" json:"storage,omitempty"`
	StorageEphemeral string `protobuf:"bytes,4,opt,name=storageEphemeral,proto3" json:"storageEphemeral,omitempty"`
}

func (x *GetK8SClusterNodeReply_Capacity) Reset() {
	*x = GetK8SClusterNodeReply_Capacity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[277]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetK8SClusterNodeReply_Capacity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetK8SClusterNodeReply_Capacity) ProtoMessage() {}

func (x *GetK8SClusterNodeReply_Capacity) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[277]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetK8SClusterNodeReply_Capacity.ProtoReflect.Descriptor instead.
func (*GetK8SClusterNodeReply_Capacity) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{48, 2}
}

func (x *GetK8SClusterNodeReply_Capacity) GetCpu() string {
	if x != nil {
		return x.Cpu
	}
	return ""
}

func (x *GetK8SClusterNodeReply_Capacity) GetMemory() string {
	if x != nil {
		return x.Memory
	}
	return ""
}

func (x *GetK8SClusterNodeReply_Capacity) GetStorage() string {
	if x != nil {
		return x.Storage
	}
	return ""
}

func (x *GetK8SClusterNodeReply_Capacity) GetStorageEphemeral() string {
	if x != nil {
		return x.StorageEphemeral
	}
	return ""
}

type GetK8SClusterNodeReply_Allocatable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu              string `protobuf:"bytes,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory           string `protobuf:"bytes,2,opt,name=memory,proto3" json:"memory,omitempty"`
	Storage          string `protobuf:"bytes,3,opt,name=storage,proto3" json:"storage,omitempty"`
	StorageEphemeral string `protobuf:"bytes,4,opt,name=storageEphemeral,proto3" json:"storageEphemeral,omitempty"`
}

func (x *GetK8SClusterNodeReply_Allocatable) Reset() {
	*x = GetK8SClusterNodeReply_Allocatable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetK8SClusterNodeReply_Allocatable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetK8SClusterNodeReply_Allocatable) ProtoMessage() {}

func (x *GetK8SClusterNodeReply_Allocatable) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetK8SClusterNodeReply_Allocatable.ProtoReflect.Descriptor instead.
func (*GetK8SClusterNodeReply_Allocatable) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{48, 3}
}

func (x *GetK8SClusterNodeReply_Allocatable) GetCpu() string {
	if x != nil {
		return x.Cpu
	}
	return ""
}

func (x *GetK8SClusterNodeReply_Allocatable) GetMemory() string {
	if x != nil {
		return x.Memory
	}
	return ""
}

func (x *GetK8SClusterNodeReply_Allocatable) GetStorage() string {
	if x != nil {
		return x.Storage
	}
	return ""
}

func (x *GetK8SClusterNodeReply_Allocatable) GetStorageEphemeral() string {
	if x != nil {
		return x.StorageEphemeral
	}
	return ""
}

type ListK8SClusterNodeReply_Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                    string                                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CreationTimestamp       int64                                     `protobuf:"varint,2,opt,name=creationTimestamp,proto3" json:"creationTimestamp,omitempty"`
	ContainerRuntimeVersion string                                    `protobuf:"bytes,3,opt,name=containerRuntimeVersion,proto3" json:"containerRuntimeVersion,omitempty"`
	KernelVersion           string                                    `protobuf:"bytes,4,opt,name=kernelVersion,proto3" json:"kernelVersion,omitempty"`
	KubeProxyVersion        string                                    `protobuf:"bytes,5,opt,name=kubeProxyVersion,proto3" json:"kubeProxyVersion,omitempty"`
	KubeletVersion          string                                    `protobuf:"bytes,6,opt,name=kubeletVersion,proto3" json:"kubeletVersion,omitempty"`
	KubeletEndpoint         string                                    `protobuf:"bytes,7,opt,name=kubeletEndpoint,proto3" json:"kubeletEndpoint,omitempty"`
	OsImage                 string                                    `protobuf:"bytes,8,opt,name=osImage,proto3" json:"osImage,omitempty"`
	Labels                  map[string]string                         `protobuf:"bytes,9,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Annotations             map[string]string                         `protobuf:"bytes,10,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Capacity                *ListK8SClusterNodeReply_Node_Capacity    `protobuf:"bytes,11,opt,name=capacity,proto3" json:"capacity,omitempty"`
	Allocatable             *ListK8SClusterNodeReply_Node_Allocatable `protobuf:"bytes,12,opt,name=allocatable,proto3" json:"allocatable,omitempty"`
}

func (x *ListK8SClusterNodeReply_Node) Reset() {
	*x = ListK8SClusterNodeReply_Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[279]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListK8SClusterNodeReply_Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListK8SClusterNodeReply_Node) ProtoMessage() {}

func (x *ListK8SClusterNodeReply_Node) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[279]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListK8SClusterNodeReply_Node.ProtoReflect.Descriptor instead.
func (*ListK8SClusterNodeReply_Node) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{50, 0}
}

func (x *ListK8SClusterNodeReply_Node) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListK8SClusterNodeReply_Node) GetCreationTimestamp() int64 {
	if x != nil {
		return x.CreationTimestamp
	}
	return 0
}

func (x *ListK8SClusterNodeReply_Node) GetContainerRuntimeVersion() string {
	if x != nil {
		return x.ContainerRuntimeVersion
	}
	return ""
}

func (x *ListK8SClusterNodeReply_Node) GetKernelVersion() string {
	if x != nil {
		return x.KernelVersion
	}
	return ""
}

func (x *ListK8SClusterNodeReply_Node) GetKubeProxyVersion() string {
	if x != nil {
		return x.KubeProxyVersion
	}
	return ""
}

func (x *ListK8SClusterNodeReply_Node) GetKubeletVersion() string {
	if x != nil {
		return x.KubeletVersion
	}
	return ""
}

func (x *ListK8SClusterNodeReply_Node) GetKubeletEndpoint() string {
	if x != nil {
		return x.KubeletEndpoint
	}
	return ""
}

func (x *ListK8SClusterNodeReply_Node) GetOsImage() string {
	if x != nil {
		return x.OsImage
	}
	return ""
}

func (x *ListK8SClusterNodeReply_Node) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ListK8SClusterNodeReply_Node) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *ListK8SClusterNodeReply_Node) GetCapacity() *ListK8SClusterNodeReply_Node_Capacity {
	if x != nil {
		return x.Capacity
	}
	return nil
}

func (x *ListK8SClusterNodeReply_Node) GetAllocatable() *ListK8SClusterNodeReply_Node_Allocatable {
	if x != nil {
		return x.Allocatable
	}
	return nil
}

type ListK8SClusterNodeReply_Node_Capacity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu              int64 `protobuf:"varint,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory           int64 `protobuf:"varint,2,opt,name=memory,proto3" json:"memory,omitempty"`
	Storage          int64 `protobuf:"varint,3,opt,name=storage,proto3" json:"storage,omitempty"`
	StorageEphemeral int64 `protobuf:"varint,4,opt,name=storageEphemeral,proto3" json:"storageEphemeral,omitempty"`
}

func (x *ListK8SClusterNodeReply_Node_Capacity) Reset() {
	*x = ListK8SClusterNodeReply_Node_Capacity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[282]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListK8SClusterNodeReply_Node_Capacity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListK8SClusterNodeReply_Node_Capacity) ProtoMessage() {}

func (x *ListK8SClusterNodeReply_Node_Capacity) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[282]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListK8SClusterNodeReply_Node_Capacity.ProtoReflect.Descriptor instead.
func (*ListK8SClusterNodeReply_Node_Capacity) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{50, 0, 2}
}

func (x *ListK8SClusterNodeReply_Node_Capacity) GetCpu() int64 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *ListK8SClusterNodeReply_Node_Capacity) GetMemory() int64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *ListK8SClusterNodeReply_Node_Capacity) GetStorage() int64 {
	if x != nil {
		return x.Storage
	}
	return 0
}

func (x *ListK8SClusterNodeReply_Node_Capacity) GetStorageEphemeral() int64 {
	if x != nil {
		return x.StorageEphemeral
	}
	return 0
}

type ListK8SClusterNodeReply_Node_Allocatable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu              int64 `protobuf:"varint,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory           int64 `protobuf:"varint,2,opt,name=memory,proto3" json:"memory,omitempty"`
	Storage          int64 `protobuf:"varint,3,opt,name=storage,proto3" json:"storage,omitempty"`
	StorageEphemeral int64 `protobuf:"varint,4,opt,name=storageEphemeral,proto3" json:"storageEphemeral,omitempty"`
}

func (x *ListK8SClusterNodeReply_Node_Allocatable) Reset() {
	*x = ListK8SClusterNodeReply_Node_Allocatable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[283]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListK8SClusterNodeReply_Node_Allocatable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListK8SClusterNodeReply_Node_Allocatable) ProtoMessage() {}

func (x *ListK8SClusterNodeReply_Node_Allocatable) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[283]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListK8SClusterNodeReply_Node_Allocatable.ProtoReflect.Descriptor instead.
func (*ListK8SClusterNodeReply_Node_Allocatable) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{50, 0, 3}
}

func (x *ListK8SClusterNodeReply_Node_Allocatable) GetCpu() int64 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *ListK8SClusterNodeReply_Node_Allocatable) GetMemory() int64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *ListK8SClusterNodeReply_Node_Allocatable) GetStorage() int64 {
	if x != nil {
		return x.Storage
	}
	return 0
}

func (x *ListK8SClusterNodeReply_Node_Allocatable) GetStorageEphemeral() int64 {
	if x != nil {
		return x.StorageEphemeral
	}
	return 0
}

type ListK8SPodReply_Pod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace         string                           `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name              string                           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CreationTimestamp int64                            `protobuf:"varint,3,opt,name=creationTimestamp,proto3" json:"creationTimestamp,omitempty"`
	Reason            string                           `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	Phase             string                           `protobuf:"bytes,5,opt,name=phase,proto3" json:"phase,omitempty"`
	HostIP            string                           `protobuf:"bytes,6,opt,name=hostIP,proto3" json:"hostIP,omitempty"`
	PodIP             string                           `protobuf:"bytes,7,opt,name=podIP,proto3" json:"podIP,omitempty"`
	Labels            map[string]string                `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Envs              map[string]string                `protobuf:"bytes,9,rep,name=envs,proto3" json:"envs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Container         []*ListK8SPodReply_Pod_Container `protobuf:"bytes,10,rep,name=container,proto3" json:"container,omitempty"`
}

func (x *ListK8SPodReply_Pod) Reset() {
	*x = ListK8SPodReply_Pod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[284]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListK8SPodReply_Pod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListK8SPodReply_Pod) ProtoMessage() {}

func (x *ListK8SPodReply_Pod) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[284]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListK8SPodReply_Pod.ProtoReflect.Descriptor instead.
func (*ListK8SPodReply_Pod) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{52, 0}
}

func (x *ListK8SPodReply_Pod) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListK8SPodReply_Pod) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListK8SPodReply_Pod) GetCreationTimestamp() int64 {
	if x != nil {
		return x.CreationTimestamp
	}
	return 0
}

func (x *ListK8SPodReply_Pod) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ListK8SPodReply_Pod) GetPhase() string {
	if x != nil {
		return x.Phase
	}
	return ""
}

func (x *ListK8SPodReply_Pod) GetHostIP() string {
	if x != nil {
		return x.HostIP
	}
	return ""
}

func (x *ListK8SPodReply_Pod) GetPodIP() string {
	if x != nil {
		return x.PodIP
	}
	return ""
}

func (x *ListK8SPodReply_Pod) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ListK8SPodReply_Pod) GetEnvs() map[string]string {
	if x != nil {
		return x.Envs
	}
	return nil
}

func (x *ListK8SPodReply_Pod) GetContainer() []*ListK8SPodReply_Pod_Container {
	if x != nil {
		return x.Container
	}
	return nil
}

type ListK8SPodReply_Pod_Container struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Image                    string `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	WorkingDir               string `protobuf:"bytes,3,opt,name=workingDir,proto3" json:"workingDir,omitempty"`
	Command                  string `protobuf:"bytes,4,opt,name=command,proto3" json:"command,omitempty"`
	SecurityContext          string `protobuf:"bytes,5,opt,name=securityContext,proto3" json:"securityContext,omitempty"`
	RequestsCpu              string `protobuf:"bytes,6,opt,name=requestsCpu,proto3" json:"requestsCpu,omitempty"`
	RequestsMemory           string `protobuf:"bytes,7,opt,name=requestsMemory,proto3" json:"requestsMemory,omitempty"`
	RequestsStorage          string `protobuf:"bytes,8,opt,name=requestsStorage,proto3" json:"requestsStorage,omitempty"`
	RequestsStorageEphemeral string `protobuf:"bytes,9,opt,name=requestsStorageEphemeral,proto3" json:"requestsStorageEphemeral,omitempty"`
	LimitCpu                 string `protobuf:"bytes,10,opt,name=limitCpu,proto3" json:"limitCpu,omitempty"`
	LimitMemory              string `protobuf:"bytes,11,opt,name=limitMemory,proto3" json:"limitMemory,omitempty"`
	LimitStorage             string `protobuf:"bytes,12,opt,name=limitStorage,proto3" json:"limitStorage,omitempty"`
	LimitStorageEphemeral    string `protobuf:"bytes,13,opt,name=limitStorageEphemeral,proto3" json:"limitStorageEphemeral,omitempty"`
	StartupProbe             string `protobuf:"bytes,14,opt,name=startupProbe,proto3" json:"startupProbe,omitempty"`
	LivenessProbe            string `protobuf:"bytes,15,opt,name=livenessProbe,proto3" json:"livenessProbe,omitempty"`
	ReadinessProbe           string `protobuf:"bytes,16,opt,name=readinessProbe,proto3" json:"readinessProbe,omitempty"`
	RestartCount             int32  `protobuf:"varint,17,opt,name=restartCount,proto3" json:"restartCount,omitempty"`
	Ready                    bool   `protobuf:"varint,18,opt,name=ready,proto3" json:"ready,omitempty"`
}

func (x *ListK8SPodReply_Pod_Container) Reset() {
	*x = ListK8SPodReply_Pod_Container{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[287]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListK8SPodReply_Pod_Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListK8SPodReply_Pod_Container) ProtoMessage() {}

func (x *ListK8SPodReply_Pod_Container) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[287]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListK8SPodReply_Pod_Container.ProtoReflect.Descriptor instead.
func (*ListK8SPodReply_Pod_Container) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{52, 0, 2}
}

func (x *ListK8SPodReply_Pod_Container) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListK8SPodReply_Pod_Container) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *ListK8SPodReply_Pod_Container) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

func (x *ListK8SPodReply_Pod_Container) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *ListK8SPodReply_Pod_Container) GetSecurityContext() string {
	if x != nil {
		return x.SecurityContext
	}
	return ""
}

func (x *ListK8SPodReply_Pod_Container) GetRequestsCpu() string {
	if x != nil {
		return x.RequestsCpu
	}
	return ""
}

func (x *ListK8SPodReply_Pod_Container) GetRequestsMemory() string {
	if x != nil {
		return x.RequestsMemory
	}
	return ""
}

func (x *ListK8SPodReply_Pod_Container) GetRequestsStorage() string {
	if x != nil {
		return x.RequestsStorage
	}
	return ""
}

func (x *ListK8SPodReply_Pod_Container) GetRequestsStorageEphemeral() string {
	if x != nil {
		return x.RequestsStorageEphemeral
	}
	return ""
}

func (x *ListK8SPodReply_Pod_Container) GetLimitCpu() string {
	if x != nil {
		return x.LimitCpu
	}
	return ""
}

func (x *ListK8SPodReply_Pod_Container) GetLimitMemory() string {
	if x != nil {
		return x.LimitMemory
	}
	return ""
}

func (x *ListK8SPodReply_Pod_Container) GetLimitStorage() string {
	if x != nil {
		return x.LimitStorage
	}
	return ""
}

func (x *ListK8SPodReply_Pod_Container) GetLimitStorageEphemeral() string {
	if x != nil {
		return x.LimitStorageEphemeral
	}
	return ""
}

func (x *ListK8SPodReply_Pod_Container) GetStartupProbe() string {
	if x != nil {
		return x.StartupProbe
	}
	return ""
}

func (x *ListK8SPodReply_Pod_Container) GetLivenessProbe() string {
	if x != nil {
		return x.LivenessProbe
	}
	return ""
}

func (x *ListK8SPodReply_Pod_Container) GetReadinessProbe() string {
	if x != nil {
		return x.ReadinessProbe
	}
	return ""
}

func (x *ListK8SPodReply_Pod_Container) GetRestartCount() int32 {
	if x != nil {
		return x.RestartCount
	}
	return 0
}

func (x *ListK8SPodReply_Pod_Container) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

type GetK8SPodReply_Container struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Image                    string `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	WorkingDir               string `protobuf:"bytes,3,opt,name=workingDir,proto3" json:"workingDir,omitempty"`
	Command                  string `protobuf:"bytes,4,opt,name=command,proto3" json:"command,omitempty"`
	SecurityContext          string `protobuf:"bytes,5,opt,name=securityContext,proto3" json:"securityContext,omitempty"`
	RequestsCpu              string `protobuf:"bytes,6,opt,name=requestsCpu,proto3" json:"requestsCpu,omitempty"`
	RequestsMemory           string `protobuf:"bytes,7,opt,name=requestsMemory,proto3" json:"requestsMemory,omitempty"`
	RequestsStorage          string `protobuf:"bytes,8,opt,name=requestsStorage,proto3" json:"requestsStorage,omitempty"`
	RequestsStorageEphemeral string `protobuf:"bytes,9,opt,name=requestsStorageEphemeral,proto3" json:"requestsStorageEphemeral,omitempty"`
	LimitCpu                 string `protobuf:"bytes,10,opt,name=limitCpu,proto3" json:"limitCpu,omitempty"`
	LimitMemory              string `protobuf:"bytes,11,opt,name=limitMemory,proto3" json:"limitMemory,omitempty"`
	LimitStorage             string `protobuf:"bytes,12,opt,name=limitStorage,proto3" json:"limitStorage,omitempty"`
	LimitStorageEphemeral    string `protobuf:"bytes,13,opt,name=limitStorageEphemeral,proto3" json:"limitStorageEphemeral,omitempty"`
	StartupProbe             string `protobuf:"bytes,14,opt,name=startupProbe,proto3" json:"startupProbe,omitempty"`
	LivenessProbe            string `protobuf:"bytes,15,opt,name=livenessProbe,proto3" json:"livenessProbe,omitempty"`
	ReadinessProbe           string `protobuf:"bytes,16,opt,name=readinessProbe,proto3" json:"readinessProbe,omitempty"`
	RestartCount             int32  `protobuf:"varint,17,opt,name=restartCount,proto3" json:"restartCount,omitempty"`
	Ready                    bool   `protobuf:"varint,18,opt,name=ready,proto3" json:"ready,omitempty"`
}

func (x *GetK8SPodReply_Container) Reset() {
	*x = GetK8SPodReply_Container{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[290]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetK8SPodReply_Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetK8SPodReply_Container) ProtoMessage() {}

func (x *GetK8SPodReply_Container) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[290]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetK8SPodReply_Container.ProtoReflect.Descriptor instead.
func (*GetK8SPodReply_Container) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{56, 2}
}

func (x *GetK8SPodReply_Container) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetK8SPodReply_Container) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *GetK8SPodReply_Container) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

func (x *GetK8SPodReply_Container) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *GetK8SPodReply_Container) GetSecurityContext() string {
	if x != nil {
		return x.SecurityContext
	}
	return ""
}

func (x *GetK8SPodReply_Container) GetRequestsCpu() string {
	if x != nil {
		return x.RequestsCpu
	}
	return ""
}

func (x *GetK8SPodReply_Container) GetRequestsMemory() string {
	if x != nil {
		return x.RequestsMemory
	}
	return ""
}

func (x *GetK8SPodReply_Container) GetRequestsStorage() string {
	if x != nil {
		return x.RequestsStorage
	}
	return ""
}

func (x *GetK8SPodReply_Container) GetRequestsStorageEphemeral() string {
	if x != nil {
		return x.RequestsStorageEphemeral
	}
	return ""
}

func (x *GetK8SPodReply_Container) GetLimitCpu() string {
	if x != nil {
		return x.LimitCpu
	}
	return ""
}

func (x *GetK8SPodReply_Container) GetLimitMemory() string {
	if x != nil {
		return x.LimitMemory
	}
	return ""
}

func (x *GetK8SPodReply_Container) GetLimitStorage() string {
	if x != nil {
		return x.LimitStorage
	}
	return ""
}

func (x *GetK8SPodReply_Container) GetLimitStorageEphemeral() string {
	if x != nil {
		return x.LimitStorageEphemeral
	}
	return ""
}

func (x *GetK8SPodReply_Container) GetStartupProbe() string {
	if x != nil {
		return x.StartupProbe
	}
	return ""
}

func (x *GetK8SPodReply_Container) GetLivenessProbe() string {
	if x != nil {
		return x.LivenessProbe
	}
	return ""
}

func (x *GetK8SPodReply_Container) GetReadinessProbe() string {
	if x != nil {
		return x.ReadinessProbe
	}
	return ""
}

func (x *GetK8SPodReply_Container) GetRestartCount() int32 {
	if x != nil {
		return x.RestartCount
	}
	return 0
}

func (x *GetK8SPodReply_Container) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

type SearchK8SPodReply_Pod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace         string                             `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name              string                             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CreationTimestamp int64                              `protobuf:"varint,3,opt,name=creationTimestamp,proto3" json:"creationTimestamp,omitempty"`
	Reason            string                             `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	Phase             string                             `protobuf:"bytes,5,opt,name=phase,proto3" json:"phase,omitempty"`
	HostIP            string                             `protobuf:"bytes,6,opt,name=hostIP,proto3" json:"hostIP,omitempty"`
	PodIP             string                             `protobuf:"bytes,7,opt,name=podIP,proto3" json:"podIP,omitempty"`
	Labels            map[string]string                  `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Envs              map[string]string                  `protobuf:"bytes,9,rep,name=envs,proto3" json:"envs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Container         []*SearchK8SPodReply_Pod_Container `protobuf:"bytes,10,rep,name=container,proto3" json:"container,omitempty"`
}

func (x *SearchK8SPodReply_Pod) Reset() {
	*x = SearchK8SPodReply_Pod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[291]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchK8SPodReply_Pod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchK8SPodReply_Pod) ProtoMessage() {}

func (x *SearchK8SPodReply_Pod) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[291]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchK8SPodReply_Pod.ProtoReflect.Descriptor instead.
func (*SearchK8SPodReply_Pod) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{62, 0}
}

func (x *SearchK8SPodReply_Pod) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *SearchK8SPodReply_Pod) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SearchK8SPodReply_Pod) GetCreationTimestamp() int64 {
	if x != nil {
		return x.CreationTimestamp
	}
	return 0
}

func (x *SearchK8SPodReply_Pod) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *SearchK8SPodReply_Pod) GetPhase() string {
	if x != nil {
		return x.Phase
	}
	return ""
}

func (x *SearchK8SPodReply_Pod) GetHostIP() string {
	if x != nil {
		return x.HostIP
	}
	return ""
}

func (x *SearchK8SPodReply_Pod) GetPodIP() string {
	if x != nil {
		return x.PodIP
	}
	return ""
}

func (x *SearchK8SPodReply_Pod) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *SearchK8SPodReply_Pod) GetEnvs() map[string]string {
	if x != nil {
		return x.Envs
	}
	return nil
}

func (x *SearchK8SPodReply_Pod) GetContainer() []*SearchK8SPodReply_Pod_Container {
	if x != nil {
		return x.Container
	}
	return nil
}

type SearchK8SPodReply_Pod_Container struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Image                    string `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	WorkingDir               string `protobuf:"bytes,3,opt,name=workingDir,proto3" json:"workingDir,omitempty"`
	Command                  string `protobuf:"bytes,4,opt,name=command,proto3" json:"command,omitempty"`
	SecurityContext          string `protobuf:"bytes,5,opt,name=securityContext,proto3" json:"securityContext,omitempty"`
	RequestsCpu              string `protobuf:"bytes,6,opt,name=requestsCpu,proto3" json:"requestsCpu,omitempty"`
	RequestsMemory           string `protobuf:"bytes,7,opt,name=requestsMemory,proto3" json:"requestsMemory,omitempty"`
	RequestsStorage          string `protobuf:"bytes,8,opt,name=requestsStorage,proto3" json:"requestsStorage,omitempty"`
	RequestsStorageEphemeral string `protobuf:"bytes,9,opt,name=requestsStorageEphemeral,proto3" json:"requestsStorageEphemeral,omitempty"`
	LimitCpu                 string `protobuf:"bytes,10,opt,name=limitCpu,proto3" json:"limitCpu,omitempty"`
	LimitMemory              string `protobuf:"bytes,11,opt,name=limitMemory,proto3" json:"limitMemory,omitempty"`
	LimitStorage             string `protobuf:"bytes,12,opt,name=limitStorage,proto3" json:"limitStorage,omitempty"`
	LimitStorageEphemeral    string `protobuf:"bytes,13,opt,name=limitStorageEphemeral,proto3" json:"limitStorageEphemeral,omitempty"`
	StartupProbe             string `protobuf:"bytes,14,opt,name=startupProbe,proto3" json:"startupProbe,omitempty"`
	LivenessProbe            string `protobuf:"bytes,15,opt,name=livenessProbe,proto3" json:"livenessProbe,omitempty"`
	ReadinessProbe           string `protobuf:"bytes,16,opt,name=readinessProbe,proto3" json:"readinessProbe,omitempty"`
	RestartCount             int32  `protobuf:"varint,17,opt,name=restartCount,proto3" json:"restartCount,omitempty"`
	Ready                    bool   `protobuf:"varint,18,opt,name=ready,proto3" json:"ready,omitempty"`
}

func (x *SearchK8SPodReply_Pod_Container) Reset() {
	*x = SearchK8SPodReply_Pod_Container{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[294]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchK8SPodReply_Pod_Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchK8SPodReply_Pod_Container) ProtoMessage() {}

func (x *SearchK8SPodReply_Pod_Container) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[294]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchK8SPodReply_Pod_Container.ProtoReflect.Descriptor instead.
func (*SearchK8SPodReply_Pod_Container) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{62, 0, 2}
}

func (x *SearchK8SPodReply_Pod_Container) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SearchK8SPodReply_Pod_Container) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *SearchK8SPodReply_Pod_Container) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

func (x *SearchK8SPodReply_Pod_Container) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *SearchK8SPodReply_Pod_Container) GetSecurityContext() string {
	if x != nil {
		return x.SecurityContext
	}
	return ""
}

func (x *SearchK8SPodReply_Pod_Container) GetRequestsCpu() string {
	if x != nil {
		return x.RequestsCpu
	}
	return ""
}

func (x *SearchK8SPodReply_Pod_Container) GetRequestsMemory() string {
	if x != nil {
		return x.RequestsMemory
	}
	return ""
}

func (x *SearchK8SPodReply_Pod_Container) GetRequestsStorage() string {
	if x != nil {
		return x.RequestsStorage
	}
	return ""
}

func (x *SearchK8SPodReply_Pod_Container) GetRequestsStorageEphemeral() string {
	if x != nil {
		return x.RequestsStorageEphemeral
	}
	return ""
}

func (x *SearchK8SPodReply_Pod_Container) GetLimitCpu() string {
	if x != nil {
		return x.LimitCpu
	}
	return ""
}

func (x *SearchK8SPodReply_Pod_Container) GetLimitMemory() string {
	if x != nil {
		return x.LimitMemory
	}
	return ""
}

func (x *SearchK8SPodReply_Pod_Container) GetLimitStorage() string {
	if x != nil {
		return x.LimitStorage
	}
	return ""
}

func (x *SearchK8SPodReply_Pod_Container) GetLimitStorageEphemeral() string {
	if x != nil {
		return x.LimitStorageEphemeral
	}
	return ""
}

func (x *SearchK8SPodReply_Pod_Container) GetStartupProbe() string {
	if x != nil {
		return x.StartupProbe
	}
	return ""
}

func (x *SearchK8SPodReply_Pod_Container) GetLivenessProbe() string {
	if x != nil {
		return x.LivenessProbe
	}
	return ""
}

func (x *SearchK8SPodReply_Pod_Container) GetReadinessProbe() string {
	if x != nil {
		return x.ReadinessProbe
	}
	return ""
}

func (x *SearchK8SPodReply_Pod_Container) GetRestartCount() int32 {
	if x != nil {
		return x.RestartCount
	}
	return 0
}

func (x *SearchK8SPodReply_Pod_Container) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

type ListSecretReply_Secret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace         string            `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name              string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Annotations       map[string]string `protobuf:"bytes,3,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Labels            map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Immutable         bool              `protobuf:"varint,5,opt,name=immutable,proto3" json:"immutable,omitempty"`
	Type              string            `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	CreationTimestamp int64             `protobuf:"varint,7,opt,name=creationTimestamp,proto3" json:"creationTimestamp,omitempty"`
	StringData        map[string]string `protobuf:"bytes,8,rep,name=stringData,proto3" json:"stringData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Data              map[string][]byte `protobuf:"bytes,9,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListSecretReply_Secret) Reset() {
	*x = ListSecretReply_Secret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[299]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSecretReply_Secret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSecretReply_Secret) ProtoMessage() {}

func (x *ListSecretReply_Secret) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[299]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSecretReply_Secret.ProtoReflect.Descriptor instead.
func (*ListSecretReply_Secret) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{75, 0}
}

func (x *ListSecretReply_Secret) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListSecretReply_Secret) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListSecretReply_Secret) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *ListSecretReply_Secret) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ListSecretReply_Secret) GetImmutable() bool {
	if x != nil {
		return x.Immutable
	}
	return false
}

func (x *ListSecretReply_Secret) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ListSecretReply_Secret) GetCreationTimestamp() int64 {
	if x != nil {
		return x.CreationTimestamp
	}
	return 0
}

func (x *ListSecretReply_Secret) GetStringData() map[string]string {
	if x != nil {
		return x.StringData
	}
	return nil
}

func (x *ListSecretReply_Secret) GetData() map[string][]byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListK8SClusterNameSpaceReply_NameSpace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Status     string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	CreateTime int64  `protobuf:"varint,3,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *ListK8SClusterNameSpaceReply_NameSpace) Reset() {
	*x = ListK8SClusterNameSpaceReply_NameSpace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[330]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListK8SClusterNameSpaceReply_NameSpace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListK8SClusterNameSpaceReply_NameSpace) ProtoMessage() {}

func (x *ListK8SClusterNameSpaceReply_NameSpace) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[330]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListK8SClusterNameSpaceReply_NameSpace.ProtoReflect.Descriptor instead.
func (*ListK8SClusterNameSpaceReply_NameSpace) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{101, 0}
}

func (x *ListK8SClusterNameSpaceReply_NameSpace) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListK8SClusterNameSpaceReply_NameSpace) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ListK8SClusterNameSpaceReply_NameSpace) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type ListK8SClusterDeploymentReply_DeploymentStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace           string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Replicas            int32  `protobuf:"varint,3,opt,name=replicas,proto3" json:"replicas,omitempty"`
	AvailableReplicas   int32  `protobuf:"varint,4,opt,name=availableReplicas,proto3" json:"availableReplicas,omitempty"`
	UnavailableReplicas int32  `protobuf:"varint,5,opt,name=unavailableReplicas,proto3" json:"unavailableReplicas,omitempty"`
	UpdatedReplicas     int32  `protobuf:"varint,6,opt,name=updatedReplicas,proto3" json:"updatedReplicas,omitempty"`
	ReadyReplicas       int32  `protobuf:"varint,7,opt,name=readyReplicas,proto3" json:"readyReplicas,omitempty"`
}

func (x *ListK8SClusterDeploymentReply_DeploymentStatus) Reset() {
	*x = ListK8SClusterDeploymentReply_DeploymentStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[331]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListK8SClusterDeploymentReply_DeploymentStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListK8SClusterDeploymentReply_DeploymentStatus) ProtoMessage() {}

func (x *ListK8SClusterDeploymentReply_DeploymentStatus) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[331]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListK8SClusterDeploymentReply_DeploymentStatus.ProtoReflect.Descriptor instead.
func (*ListK8SClusterDeploymentReply_DeploymentStatus) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{107, 0}
}

func (x *ListK8SClusterDeploymentReply_DeploymentStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListK8SClusterDeploymentReply_DeploymentStatus) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListK8SClusterDeploymentReply_DeploymentStatus) GetReplicas() int32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *ListK8SClusterDeploymentReply_DeploymentStatus) GetAvailableReplicas() int32 {
	if x != nil {
		return x.AvailableReplicas
	}
	return 0
}

func (x *ListK8SClusterDeploymentReply_DeploymentStatus) GetUnavailableReplicas() int32 {
	if x != nil {
		return x.UnavailableReplicas
	}
	return 0
}

func (x *ListK8SClusterDeploymentReply_DeploymentStatus) GetUpdatedReplicas() int32 {
	if x != nil {
		return x.UpdatedReplicas
	}
	return 0
}

func (x *ListK8SClusterDeploymentReply_DeploymentStatus) GetReadyReplicas() int32 {
	if x != nil {
		return x.ReadyReplicas
	}
	return 0
}

type ListK8SServiceReply_Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace       string            `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ResourceVersion string            `protobuf:"bytes,3,opt,name=resourceVersion,proto3" json:"resourceVersion,omitempty"`
	Annotations     map[string]string `protobuf:"bytes,4,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ClusterIP       string            `protobuf:"bytes,5,opt,name=clusterIP,proto3" json:"clusterIP,omitempty"`
	SessionAffinity string            `protobuf:"bytes,6,opt,name=sessionAffinity,proto3" json:"sessionAffinity,omitempty"`
	Type            string            `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
	Labels          map[string]string `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Ports           []*ServicePort    `protobuf:"bytes,9,rep,name=ports,proto3" json:"ports,omitempty"`
	ExternalIPs     []string          `protobuf:"bytes,10,rep,name=ExternalIPs,proto3" json:"ExternalIPs,omitempty"`
}

func (x *ListK8SServiceReply_Service) Reset() {
	*x = ListK8SServiceReply_Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[334]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListK8SServiceReply_Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListK8SServiceReply_Service) ProtoMessage() {}

func (x *ListK8SServiceReply_Service) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[334]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListK8SServiceReply_Service.ProtoReflect.Descriptor instead.
func (*ListK8SServiceReply_Service) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{120, 0}
}

func (x *ListK8SServiceReply_Service) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListK8SServiceReply_Service) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListK8SServiceReply_Service) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

func (x *ListK8SServiceReply_Service) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *ListK8SServiceReply_Service) GetClusterIP() string {
	if x != nil {
		return x.ClusterIP
	}
	return ""
}

func (x *ListK8SServiceReply_Service) GetSessionAffinity() string {
	if x != nil {
		return x.SessionAffinity
	}
	return ""
}

func (x *ListK8SServiceReply_Service) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ListK8SServiceReply_Service) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ListK8SServiceReply_Service) GetPorts() []*ServicePort {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *ListK8SServiceReply_Service) GetExternalIPs() []string {
	if x != nil {
		return x.ExternalIPs
	}
	return nil
}

type CreateK8SIngressReq_Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TlsSecret string                                       `protobuf:"bytes,1,opt,name=tlsSecret,proto3" json:"tlsSecret,omitempty"`
	Path      map[string]*CreateK8SIngressReq_Service_Path `protobuf:"bytes,2,rep,name=path,proto3" json:"path,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateK8SIngressReq_Service) Reset() {
	*x = CreateK8SIngressReq_Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[342]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateK8SIngressReq_Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateK8SIngressReq_Service) ProtoMessage() {}

func (x *CreateK8SIngressReq_Service) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[342]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateK8SIngressReq_Service.ProtoReflect.Descriptor instead.
func (*CreateK8SIngressReq_Service) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{125, 3}
}

func (x *CreateK8SIngressReq_Service) GetTlsSecret() string {
	if x != nil {
		return x.TlsSecret
	}
	return ""
}

func (x *CreateK8SIngressReq_Service) GetPath() map[string]*CreateK8SIngressReq_Service_Path {
	if x != nil {
		return x.Path
	}
	return nil
}

type CreateK8SIngressReq_Service_Path struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathType    string `protobuf:"bytes,1,opt,name=pathType,proto3" json:"pathType,omitempty"`
	ServiceName string `protobuf:"bytes,2,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	ServicePort int32  `protobuf:"varint,3,opt,name=servicePort,proto3" json:"servicePort,omitempty"`
}

func (x *CreateK8SIngressReq_Service_Path) Reset() {
	*x = CreateK8SIngressReq_Service_Path{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[344]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateK8SIngressReq_Service_Path) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateK8SIngressReq_Service_Path) ProtoMessage() {}

func (x *CreateK8SIngressReq_Service_Path) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[344]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateK8SIngressReq_Service_Path.ProtoReflect.Descriptor instead.
func (*CreateK8SIngressReq_Service_Path) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{125, 3, 1}
}

func (x *CreateK8SIngressReq_Service_Path) GetPathType() string {
	if x != nil {
		return x.PathType
	}
	return ""
}

func (x *CreateK8SIngressReq_Service_Path) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *CreateK8SIngressReq_Service_Path) GetServicePort() int32 {
	if x != nil {
		return x.ServicePort
	}
	return 0
}

type ListK8SIngressReply_Ingress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string                                                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace string                                                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Labels    map[string]string                                      `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Service   map[string]*ListK8SIngressReply_Ingress_IngressService `protobuf:"bytes,4,rep,name=service,proto3" json:"service,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListK8SIngressReply_Ingress) Reset() {
	*x = ListK8SIngressReply_Ingress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[345]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListK8SIngressReply_Ingress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListK8SIngressReply_Ingress) ProtoMessage() {}

func (x *ListK8SIngressReply_Ingress) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[345]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListK8SIngressReply_Ingress.ProtoReflect.Descriptor instead.
func (*ListK8SIngressReply_Ingress) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{128, 0}
}

func (x *ListK8SIngressReply_Ingress) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListK8SIngressReply_Ingress) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListK8SIngressReply_Ingress) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ListK8SIngressReply_Ingress) GetService() map[string]*ListK8SIngressReply_Ingress_IngressService {
	if x != nil {
		return x.Service
	}
	return nil
}

type ListK8SIngressReply_Ingress_IngressService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TlsSecret string                                                                    `protobuf:"bytes,1,opt,name=tlsSecret,proto3" json:"tlsSecret,omitempty"`
	Path      map[string]*ListK8SIngressReply_Ingress_IngressService_IngressServicePath `protobuf:"bytes,2,rep,name=path,proto3" json:"path,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListK8SIngressReply_Ingress_IngressService) Reset() {
	*x = ListK8SIngressReply_Ingress_IngressService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[348]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListK8SIngressReply_Ingress_IngressService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListK8SIngressReply_Ingress_IngressService) ProtoMessage() {}

func (x *ListK8SIngressReply_Ingress_IngressService) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[348]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListK8SIngressReply_Ingress_IngressService.ProtoReflect.Descriptor instead.
func (*ListK8SIngressReply_Ingress_IngressService) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{128, 0, 2}
}

func (x *ListK8SIngressReply_Ingress_IngressService) GetTlsSecret() string {
	if x != nil {
		return x.TlsSecret
	}
	return ""
}

func (x *ListK8SIngressReply_Ingress_IngressService) GetPath() map[string]*ListK8SIngressReply_Ingress_IngressService_IngressServicePath {
	if x != nil {
		return x.Path
	}
	return nil
}

type ListK8SIngressReply_Ingress_IngressService_IngressServicePath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathType    string `protobuf:"bytes,1,opt,name=pathType,proto3" json:"pathType,omitempty"`
	ServiceName string `protobuf:"bytes,2,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	ServicePort int32  `protobuf:"varint,3,opt,name=servicePort,proto3" json:"servicePort,omitempty"`
}

func (x *ListK8SIngressReply_Ingress_IngressService_IngressServicePath) Reset() {
	*x = ListK8SIngressReply_Ingress_IngressService_IngressServicePath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[350]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListK8SIngressReply_Ingress_IngressService_IngressServicePath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListK8SIngressReply_Ingress_IngressService_IngressServicePath) ProtoMessage() {}

func (x *ListK8SIngressReply_Ingress_IngressService_IngressServicePath) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[350]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListK8SIngressReply_Ingress_IngressService_IngressServicePath.ProtoReflect.Descriptor instead.
func (*ListK8SIngressReply_Ingress_IngressService_IngressServicePath) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{128, 0, 2, 1}
}

func (x *ListK8SIngressReply_Ingress_IngressService_IngressServicePath) GetPathType() string {
	if x != nil {
		return x.PathType
	}
	return ""
}

func (x *ListK8SIngressReply_Ingress_IngressService_IngressServicePath) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *ListK8SIngressReply_Ingress_IngressService_IngressServicePath) GetServicePort() int32 {
	if x != nil {
		return x.ServicePort
	}
	return 0
}

type GetK8SIngressReply_IngressService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TlsSecret string                                                           `protobuf:"bytes,1,opt,name=tlsSecret,proto3" json:"tlsSecret,omitempty"`
	Path      map[string]*GetK8SIngressReply_IngressService_IngressServicePath `protobuf:"bytes,2,rep,name=path,proto3" json:"path,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetK8SIngressReply_IngressService) Reset() {
	*x = GetK8SIngressReply_IngressService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[353]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetK8SIngressReply_IngressService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetK8SIngressReply_IngressService) ProtoMessage() {}

func (x *GetK8SIngressReply_IngressService) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[353]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetK8SIngressReply_IngressService.ProtoReflect.Descriptor instead.
func (*GetK8SIngressReply_IngressService) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{130, 2}
}

func (x *GetK8SIngressReply_IngressService) GetTlsSecret() string {
	if x != nil {
		return x.TlsSecret
	}
	return ""
}

func (x *GetK8SIngressReply_IngressService) GetPath() map[string]*GetK8SIngressReply_IngressService_IngressServicePath {
	if x != nil {
		return x.Path
	}
	return nil
}

type GetK8SIngressReply_IngressService_IngressServicePath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathType    string `protobuf:"bytes,1,opt,name=pathType,proto3" json:"pathType,omitempty"`
	ServiceName string `protobuf:"bytes,2,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	ServicePort int32  `protobuf:"varint,3,opt,name=servicePort,proto3" json:"servicePort,omitempty"`
}

func (x *GetK8SIngressReply_IngressService_IngressServicePath) Reset() {
	*x = GetK8SIngressReply_IngressService_IngressServicePath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[355]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetK8SIngressReply_IngressService_IngressServicePath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetK8SIngressReply_IngressService_IngressServicePath) ProtoMessage() {}

func (x *GetK8SIngressReply_IngressService_IngressServicePath) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[355]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetK8SIngressReply_IngressService_IngressServicePath.ProtoReflect.Descriptor instead.
func (*GetK8SIngressReply_IngressService_IngressServicePath) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{130, 2, 1}
}

func (x *GetK8SIngressReply_IngressService_IngressServicePath) GetPathType() string {
	if x != nil {
		return x.PathType
	}
	return ""
}

func (x *GetK8SIngressReply_IngressService_IngressServicePath) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *GetK8SIngressReply_IngressService_IngressServicePath) GetServicePort() int32 {
	if x != nil {
		return x.ServicePort
	}
	return 0
}

type UpdateK8SIngressReq_Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TlsSecret string                                       `protobuf:"bytes,1,opt,name=tlsSecret,proto3" json:"tlsSecret,omitempty"`
	Path      map[string]*UpdateK8SIngressReq_Service_Path `protobuf:"bytes,2,rep,name=path,proto3" json:"path,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateK8SIngressReq_Service) Reset() {
	*x = UpdateK8SIngressReq_Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[359]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateK8SIngressReq_Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateK8SIngressReq_Service) ProtoMessage() {}

func (x *UpdateK8SIngressReq_Service) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[359]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateK8SIngressReq_Service.ProtoReflect.Descriptor instead.
func (*UpdateK8SIngressReq_Service) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{133, 3}
}

func (x *UpdateK8SIngressReq_Service) GetTlsSecret() string {
	if x != nil {
		return x.TlsSecret
	}
	return ""
}

func (x *UpdateK8SIngressReq_Service) GetPath() map[string]*UpdateK8SIngressReq_Service_Path {
	if x != nil {
		return x.Path
	}
	return nil
}

type UpdateK8SIngressReq_Service_Path struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathType    string `protobuf:"bytes,1,opt,name=pathType,proto3" json:"pathType,omitempty"`
	ServiceName string `protobuf:"bytes,2,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	ServicePort int32  `protobuf:"varint,3,opt,name=servicePort,proto3" json:"servicePort,omitempty"`
}

func (x *UpdateK8SIngressReq_Service_Path) Reset() {
	*x = UpdateK8SIngressReq_Service_Path{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[361]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateK8SIngressReq_Service_Path) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateK8SIngressReq_Service_Path) ProtoMessage() {}

func (x *UpdateK8SIngressReq_Service_Path) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[361]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateK8SIngressReq_Service_Path.ProtoReflect.Descriptor instead.
func (*UpdateK8SIngressReq_Service_Path) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{133, 3, 1}
}

func (x *UpdateK8SIngressReq_Service_Path) GetPathType() string {
	if x != nil {
		return x.PathType
	}
	return ""
}

func (x *UpdateK8SIngressReq_Service_Path) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *UpdateK8SIngressReq_Service_Path) GetServicePort() int32 {
	if x != nil {
		return x.ServicePort
	}
	return 0
}

type ListSelfGitlabPlatformReply_GitlabPlatform struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid       string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Protocol   string `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Hostname   string `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Describe   string `protobuf:"bytes,4,opt,name=describe,proto3" json:"describe,omitempty"`
	CreateTime int64  `protobuf:"varint,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *ListSelfGitlabPlatformReply_GitlabPlatform) Reset() {
	*x = ListSelfGitlabPlatformReply_GitlabPlatform{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[362]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSelfGitlabPlatformReply_GitlabPlatform) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSelfGitlabPlatformReply_GitlabPlatform) ProtoMessage() {}

func (x *ListSelfGitlabPlatformReply_GitlabPlatform) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[362]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSelfGitlabPlatformReply_GitlabPlatform.ProtoReflect.Descriptor instead.
func (*ListSelfGitlabPlatformReply_GitlabPlatform) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{157, 0}
}

func (x *ListSelfGitlabPlatformReply_GitlabPlatform) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ListSelfGitlabPlatformReply_GitlabPlatform) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *ListSelfGitlabPlatformReply_GitlabPlatform) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *ListSelfGitlabPlatformReply_GitlabPlatform) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *ListSelfGitlabPlatformReply_GitlabPlatform) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type ListSelfGitlabTokenReply_GitlabToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid         string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	PlatformUuid string `protobuf:"bytes,2,opt,name=platformUuid,proto3" json:"platformUuid,omitempty"`
	Name         string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	PrivateToken string `protobuf:"bytes,4,opt,name=privateToken,proto3" json:"privateToken,omitempty"`
	Describe     string `protobuf:"bytes,5,opt,name=describe,proto3" json:"describe,omitempty"`
	CreateTime   int64  `protobuf:"varint,6,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *ListSelfGitlabTokenReply_GitlabToken) Reset() {
	*x = ListSelfGitlabTokenReply_GitlabToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[363]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSelfGitlabTokenReply_GitlabToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSelfGitlabTokenReply_GitlabToken) ProtoMessage() {}

func (x *ListSelfGitlabTokenReply_GitlabToken) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[363]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSelfGitlabTokenReply_GitlabToken.ProtoReflect.Descriptor instead.
func (*ListSelfGitlabTokenReply_GitlabToken) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{163, 0}
}

func (x *ListSelfGitlabTokenReply_GitlabToken) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ListSelfGitlabTokenReply_GitlabToken) GetPlatformUuid() string {
	if x != nil {
		return x.PlatformUuid
	}
	return ""
}

func (x *ListSelfGitlabTokenReply_GitlabToken) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListSelfGitlabTokenReply_GitlabToken) GetPrivateToken() string {
	if x != nil {
		return x.PrivateToken
	}
	return ""
}

func (x *ListSelfGitlabTokenReply_GitlabToken) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *ListSelfGitlabTokenReply_GitlabToken) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type ListSelfGitlabGroupReply_Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	GroupId    int32  `protobuf:"varint,2,opt,name=groupId,proto3" json:"groupId,omitempty"`
	Describe   string `protobuf:"bytes,3,opt,name=describe,proto3" json:"describe,omitempty"`
	CreateTime int64  `protobuf:"varint,4,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *ListSelfGitlabGroupReply_Group) Reset() {
	*x = ListSelfGitlabGroupReply_Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[364]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSelfGitlabGroupReply_Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSelfGitlabGroupReply_Group) ProtoMessage() {}

func (x *ListSelfGitlabGroupReply_Group) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[364]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSelfGitlabGroupReply_Group.ProtoReflect.Descriptor instead.
func (*ListSelfGitlabGroupReply_Group) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{169, 0}
}

func (x *ListSelfGitlabGroupReply_Group) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListSelfGitlabGroupReply_Group) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *ListSelfGitlabGroupReply_Group) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *ListSelfGitlabGroupReply_Group) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type ListSelfGitlabRepoReply_GitlabRepo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid          string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	PlatformUuid  string `protobuf:"bytes,2,opt,name=platformUuid,proto3" json:"platformUuid,omitempty"`
	Name          string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ProjectId     int32  `protobuf:"varint,4,opt,name=projectId,proto3" json:"projectId,omitempty"`
	WebUrl        string `protobuf:"bytes,5,opt,name=webUrl,proto3" json:"webUrl,omitempty"`
	HttpCloneUrl  string `protobuf:"bytes,6,opt,name=httpCloneUrl,proto3" json:"httpCloneUrl,omitempty"`
	SshCloneUrl   string `protobuf:"bytes,7,opt,name=sshCloneUrl,proto3" json:"sshCloneUrl,omitempty"`
	DefaultBranch string `protobuf:"bytes,8,opt,name=defaultBranch,proto3" json:"defaultBranch,omitempty"`
	Namespace     string `protobuf:"bytes,9,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Archived      bool   `protobuf:"varint,10,opt,name=archived,proto3" json:"archived,omitempty"`
	Describe      string `protobuf:"bytes,11,opt,name=describe,proto3" json:"describe,omitempty"`
	CreateTime    int64  `protobuf:"varint,12,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *ListSelfGitlabRepoReply_GitlabRepo) Reset() {
	*x = ListSelfGitlabRepoReply_GitlabRepo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[365]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSelfGitlabRepoReply_GitlabRepo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSelfGitlabRepoReply_GitlabRepo) ProtoMessage() {}

func (x *ListSelfGitlabRepoReply_GitlabRepo) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[365]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSelfGitlabRepoReply_GitlabRepo.ProtoReflect.Descriptor instead.
func (*ListSelfGitlabRepoReply_GitlabRepo) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{175, 0}
}

func (x *ListSelfGitlabRepoReply_GitlabRepo) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ListSelfGitlabRepoReply_GitlabRepo) GetPlatformUuid() string {
	if x != nil {
		return x.PlatformUuid
	}
	return ""
}

func (x *ListSelfGitlabRepoReply_GitlabRepo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListSelfGitlabRepoReply_GitlabRepo) GetProjectId() int32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ListSelfGitlabRepoReply_GitlabRepo) GetWebUrl() string {
	if x != nil {
		return x.WebUrl
	}
	return ""
}

func (x *ListSelfGitlabRepoReply_GitlabRepo) GetHttpCloneUrl() string {
	if x != nil {
		return x.HttpCloneUrl
	}
	return ""
}

func (x *ListSelfGitlabRepoReply_GitlabRepo) GetSshCloneUrl() string {
	if x != nil {
		return x.SshCloneUrl
	}
	return ""
}

func (x *ListSelfGitlabRepoReply_GitlabRepo) GetDefaultBranch() string {
	if x != nil {
		return x.DefaultBranch
	}
	return ""
}

func (x *ListSelfGitlabRepoReply_GitlabRepo) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListSelfGitlabRepoReply_GitlabRepo) GetArchived() bool {
	if x != nil {
		return x.Archived
	}
	return false
}

func (x *ListSelfGitlabRepoReply_GitlabRepo) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *ListSelfGitlabRepoReply_GitlabRepo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type SelfGitlabRepoMergeHisReply_Merge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title          string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Author         string `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
	MergedBy       string `protobuf:"bytes,3,opt,name=mergedBy,proto3" json:"mergedBy,omitempty"`
	ClosedBy       string `protobuf:"bytes,4,opt,name=closedBy,proto3" json:"closedBy,omitempty"`
	MergeCommitSHA string `protobuf:"bytes,5,opt,name=mergeCommitSHA,proto3" json:"mergeCommitSHA,omitempty"`
	Message        string `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	SourceBranch   string `protobuf:"bytes,7,opt,name=sourceBranch,proto3" json:"sourceBranch,omitempty"`
	TargetBranch   string `protobuf:"bytes,8,opt,name=targetBranch,proto3" json:"targetBranch,omitempty"`
	MergedAt       int64  `protobuf:"varint,9,opt,name=mergedAt,proto3" json:"mergedAt,omitempty"`
	ClosedAt       int64  `protobuf:"varint,10,opt,name=closedAt,proto3" json:"closedAt,omitempty"`
	MergeStatus    string `protobuf:"bytes,11,opt,name=mergeStatus,proto3" json:"mergeStatus,omitempty"`
}

func (x *SelfGitlabRepoMergeHisReply_Merge) Reset() {
	*x = SelfGitlabRepoMergeHisReply_Merge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[366]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelfGitlabRepoMergeHisReply_Merge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelfGitlabRepoMergeHisReply_Merge) ProtoMessage() {}

func (x *SelfGitlabRepoMergeHisReply_Merge) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[366]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelfGitlabRepoMergeHisReply_Merge.ProtoReflect.Descriptor instead.
func (*SelfGitlabRepoMergeHisReply_Merge) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{183, 0}
}

func (x *SelfGitlabRepoMergeHisReply_Merge) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SelfGitlabRepoMergeHisReply_Merge) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *SelfGitlabRepoMergeHisReply_Merge) GetMergedBy() string {
	if x != nil {
		return x.MergedBy
	}
	return ""
}

func (x *SelfGitlabRepoMergeHisReply_Merge) GetClosedBy() string {
	if x != nil {
		return x.ClosedBy
	}
	return ""
}

func (x *SelfGitlabRepoMergeHisReply_Merge) GetMergeCommitSHA() string {
	if x != nil {
		return x.MergeCommitSHA
	}
	return ""
}

func (x *SelfGitlabRepoMergeHisReply_Merge) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SelfGitlabRepoMergeHisReply_Merge) GetSourceBranch() string {
	if x != nil {
		return x.SourceBranch
	}
	return ""
}

func (x *SelfGitlabRepoMergeHisReply_Merge) GetTargetBranch() string {
	if x != nil {
		return x.TargetBranch
	}
	return ""
}

func (x *SelfGitlabRepoMergeHisReply_Merge) GetMergedAt() int64 {
	if x != nil {
		return x.MergedAt
	}
	return 0
}

func (x *SelfGitlabRepoMergeHisReply_Merge) GetClosedAt() int64 {
	if x != nil {
		return x.ClosedAt
	}
	return 0
}

func (x *SelfGitlabRepoMergeHisReply_Merge) GetMergeStatus() string {
	if x != nil {
		return x.MergeStatus
	}
	return ""
}

type ListSelfGitlabRepoBranchReply_Branch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Protected          bool   `protobuf:"varint,2,opt,name=protected,proto3" json:"protected,omitempty"`
	CommitSha          string `protobuf:"bytes,3,opt,name=commitSha,proto3" json:"commitSha,omitempty"`
	CommitMessage      string `protobuf:"bytes,4,opt,name=commitMessage,proto3" json:"commitMessage,omitempty"`
	Merged             bool   `protobuf:"varint,5,opt,name=merged,proto3" json:"merged,omitempty"`
	IsDefault          bool   `protobuf:"varint,6,opt,name=isDefault,proto3" json:"isDefault,omitempty"`
	CanPush            bool   `protobuf:"varint,7,opt,name=canPush,proto3" json:"canPush,omitempty"`
	DevelopersCanPush  bool   `protobuf:"varint,8,opt,name=developersCanPush,proto3" json:"developersCanPush,omitempty"`
	DevelopersCanMerge bool   `protobuf:"varint,9,opt,name=developersCanMerge,proto3" json:"developersCanMerge,omitempty"`
	WebURL             string `protobuf:"bytes,10,opt,name=webURL,proto3" json:"webURL,omitempty"`
}

func (x *ListSelfGitlabRepoBranchReply_Branch) Reset() {
	*x = ListSelfGitlabRepoBranchReply_Branch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[367]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSelfGitlabRepoBranchReply_Branch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSelfGitlabRepoBranchReply_Branch) ProtoMessage() {}

func (x *ListSelfGitlabRepoBranchReply_Branch) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[367]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSelfGitlabRepoBranchReply_Branch.ProtoReflect.Descriptor instead.
func (*ListSelfGitlabRepoBranchReply_Branch) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{187, 0}
}

func (x *ListSelfGitlabRepoBranchReply_Branch) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListSelfGitlabRepoBranchReply_Branch) GetProtected() bool {
	if x != nil {
		return x.Protected
	}
	return false
}

func (x *ListSelfGitlabRepoBranchReply_Branch) GetCommitSha() string {
	if x != nil {
		return x.CommitSha
	}
	return ""
}

func (x *ListSelfGitlabRepoBranchReply_Branch) GetCommitMessage() string {
	if x != nil {
		return x.CommitMessage
	}
	return ""
}

func (x *ListSelfGitlabRepoBranchReply_Branch) GetMerged() bool {
	if x != nil {
		return x.Merged
	}
	return false
}

func (x *ListSelfGitlabRepoBranchReply_Branch) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *ListSelfGitlabRepoBranchReply_Branch) GetCanPush() bool {
	if x != nil {
		return x.CanPush
	}
	return false
}

func (x *ListSelfGitlabRepoBranchReply_Branch) GetDevelopersCanPush() bool {
	if x != nil {
		return x.DevelopersCanPush
	}
	return false
}

func (x *ListSelfGitlabRepoBranchReply_Branch) GetDevelopersCanMerge() bool {
	if x != nil {
		return x.DevelopersCanMerge
	}
	return false
}

func (x *ListSelfGitlabRepoBranchReply_Branch) GetWebURL() string {
	if x != nil {
		return x.WebURL
	}
	return ""
}

type ListSelfGitlabRepoBranchCommitsReply_Commit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sha        string `protobuf:"bytes,1,opt,name=sha,proto3" json:"sha,omitempty"`
	Author     string `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
	Message    string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Committer  string `protobuf:"bytes,4,opt,name=committer,proto3" json:"committer,omitempty"`
	CreateTime int64  `protobuf:"varint,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *ListSelfGitlabRepoBranchCommitsReply_Commit) Reset() {
	*x = ListSelfGitlabRepoBranchCommitsReply_Commit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[368]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSelfGitlabRepoBranchCommitsReply_Commit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSelfGitlabRepoBranchCommitsReply_Commit) ProtoMessage() {}

func (x *ListSelfGitlabRepoBranchCommitsReply_Commit) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[368]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSelfGitlabRepoBranchCommitsReply_Commit.ProtoReflect.Descriptor instead.
func (*ListSelfGitlabRepoBranchCommitsReply_Commit) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{195, 0}
}

func (x *ListSelfGitlabRepoBranchCommitsReply_Commit) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

func (x *ListSelfGitlabRepoBranchCommitsReply_Commit) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *ListSelfGitlabRepoBranchCommitsReply_Commit) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListSelfGitlabRepoBranchCommitsReply_Commit) GetCommitter() string {
	if x != nil {
		return x.Committer
	}
	return ""
}

func (x *ListSelfGitlabRepoBranchCommitsReply_Commit) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type ListGitHubTokenReply_GithubToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid         string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	PrivateToken string `protobuf:"bytes,3,opt,name=privateToken,proto3" json:"privateToken,omitempty"`
	Describe     string `protobuf:"bytes,4,opt,name=describe,proto3" json:"describe,omitempty"`
	CreateTime   int64  `protobuf:"varint,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *ListGitHubTokenReply_GithubToken) Reset() {
	*x = ListGitHubTokenReply_GithubToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[369]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGitHubTokenReply_GithubToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGitHubTokenReply_GithubToken) ProtoMessage() {}

func (x *ListGitHubTokenReply_GithubToken) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[369]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGitHubTokenReply_GithubToken.ProtoReflect.Descriptor instead.
func (*ListGitHubTokenReply_GithubToken) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{199, 0}
}

func (x *ListGitHubTokenReply_GithubToken) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ListGitHubTokenReply_GithubToken) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListGitHubTokenReply_GithubToken) GetPrivateToken() string {
	if x != nil {
		return x.PrivateToken
	}
	return ""
}

func (x *ListGitHubTokenReply_GithubToken) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *ListGitHubTokenReply_GithubToken) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type ListGithubRepoReply_Repo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid          string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	OrgUuid       string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid   string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	Name          string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	FullName      string `protobuf:"bytes,5,opt,name=fullName,proto3" json:"fullName,omitempty"`
	DefaultBranch string `protobuf:"bytes,6,opt,name=defaultBranch,proto3" json:"defaultBranch,omitempty"`
	HttpCloneUrl  string `protobuf:"bytes,7,opt,name=httpCloneUrl,proto3" json:"httpCloneUrl,omitempty"`
	SshCloneUrl   string `protobuf:"bytes,8,opt,name=sshCloneUrl,proto3" json:"sshCloneUrl,omitempty"`
	WebUrl        string `protobuf:"bytes,9,opt,name=webUrl,proto3" json:"webUrl,omitempty"`
	Describe      string `protobuf:"bytes,10,opt,name=describe,proto3" json:"describe,omitempty"`
	Star          int32  `protobuf:"varint,11,opt,name=star,proto3" json:"star,omitempty"`
	CreateTime    int64  `protobuf:"varint,12,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *ListGithubRepoReply_Repo) Reset() {
	*x = ListGithubRepoReply_Repo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[370]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGithubRepoReply_Repo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGithubRepoReply_Repo) ProtoMessage() {}

func (x *ListGithubRepoReply_Repo) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[370]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGithubRepoReply_Repo.ProtoReflect.Descriptor instead.
func (*ListGithubRepoReply_Repo) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{207, 0}
}

func (x *ListGithubRepoReply_Repo) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ListGithubRepoReply_Repo) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListGithubRepoReply_Repo) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ListGithubRepoReply_Repo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListGithubRepoReply_Repo) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *ListGithubRepoReply_Repo) GetDefaultBranch() string {
	if x != nil {
		return x.DefaultBranch
	}
	return ""
}

func (x *ListGithubRepoReply_Repo) GetHttpCloneUrl() string {
	if x != nil {
		return x.HttpCloneUrl
	}
	return ""
}

func (x *ListGithubRepoReply_Repo) GetSshCloneUrl() string {
	if x != nil {
		return x.SshCloneUrl
	}
	return ""
}

func (x *ListGithubRepoReply_Repo) GetWebUrl() string {
	if x != nil {
		return x.WebUrl
	}
	return ""
}

func (x *ListGithubRepoReply_Repo) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *ListGithubRepoReply_Repo) GetStar() int32 {
	if x != nil {
		return x.Star
	}
	return 0
}

func (x *ListGithubRepoReply_Repo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type ListGithubRepoBranchReply_Branch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Protected     bool   `protobuf:"varint,2,opt,name=protected,proto3" json:"protected,omitempty"`
	CommitSha     string `protobuf:"bytes,3,opt,name=commitSha,proto3" json:"commitSha,omitempty"`
	CommitMessage string `protobuf:"bytes,4,opt,name=commitMessage,proto3" json:"commitMessage,omitempty"`
}

func (x *ListGithubRepoBranchReply_Branch) Reset() {
	*x = ListGithubRepoBranchReply_Branch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[371]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGithubRepoBranchReply_Branch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGithubRepoBranchReply_Branch) ProtoMessage() {}

func (x *ListGithubRepoBranchReply_Branch) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[371]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGithubRepoBranchReply_Branch.ProtoReflect.Descriptor instead.
func (*ListGithubRepoBranchReply_Branch) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{217, 0}
}

func (x *ListGithubRepoBranchReply_Branch) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListGithubRepoBranchReply_Branch) GetProtected() bool {
	if x != nil {
		return x.Protected
	}
	return false
}

func (x *ListGithubRepoBranchReply_Branch) GetCommitSha() string {
	if x != nil {
		return x.CommitSha
	}
	return ""
}

func (x *ListGithubRepoBranchReply_Branch) GetCommitMessage() string {
	if x != nil {
		return x.CommitMessage
	}
	return ""
}

type ListGithubRepoBranchCommitsReply_Commit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sha        string `protobuf:"bytes,1,opt,name=sha,proto3" json:"sha,omitempty"`
	Author     string `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
	Message    string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Committer  string `protobuf:"bytes,4,opt,name=committer,proto3" json:"committer,omitempty"`
	CreateTime int64  `protobuf:"varint,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *ListGithubRepoBranchCommitsReply_Commit) Reset() {
	*x = ListGithubRepoBranchCommitsReply_Commit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[372]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGithubRepoBranchCommitsReply_Commit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGithubRepoBranchCommitsReply_Commit) ProtoMessage() {}

func (x *ListGithubRepoBranchCommitsReply_Commit) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[372]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGithubRepoBranchCommitsReply_Commit.ProtoReflect.Descriptor instead.
func (*ListGithubRepoBranchCommitsReply_Commit) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{219, 0}
}

func (x *ListGithubRepoBranchCommitsReply_Commit) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

func (x *ListGithubRepoBranchCommitsReply_Commit) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *ListGithubRepoBranchCommitsReply_Commit) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListGithubRepoBranchCommitsReply_Commit) GetCommitter() string {
	if x != nil {
		return x.Committer
	}
	return ""
}

func (x *ListGithubRepoBranchCommitsReply_Commit) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type ListGithubOrgReply_Org struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ListGithubOrgReply_Org) Reset() {
	*x = ListGithubOrgReply_Org{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[373]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGithubOrgReply_Org) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGithubOrgReply_Org) ProtoMessage() {}

func (x *ListGithubOrgReply_Org) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[373]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGithubOrgReply_Org.ProtoReflect.Descriptor instead.
func (*ListGithubOrgReply_Org) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{225, 0}
}

func (x *ListGithubOrgReply_Org) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListGithubOrgReply_Org) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListGithubRepoByOrgReply_RepoOrg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FullName    string `protobuf:"bytes,2,opt,name=fullName,proto3" json:"fullName,omitempty"`
	HtmlUrl     string `protobuf:"bytes,3,opt,name=htmlUrl,proto3" json:"htmlUrl,omitempty"`
	CloneUrl    string `protobuf:"bytes,4,opt,name=cloneUrl,proto3" json:"cloneUrl,omitempty"`
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Star        int32  `protobuf:"varint,6,opt,name=star,proto3" json:"star,omitempty"`
	Owner       string `protobuf:"bytes,7,opt,name=owner,proto3" json:"owner,omitempty"`
	CreateTime  int64  `protobuf:"varint,8,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *ListGithubRepoByOrgReply_RepoOrg) Reset() {
	*x = ListGithubRepoByOrgReply_RepoOrg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[374]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGithubRepoByOrgReply_RepoOrg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGithubRepoByOrgReply_RepoOrg) ProtoMessage() {}

func (x *ListGithubRepoByOrgReply_RepoOrg) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[374]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGithubRepoByOrgReply_RepoOrg.ProtoReflect.Descriptor instead.
func (*ListGithubRepoByOrgReply_RepoOrg) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{227, 0}
}

func (x *ListGithubRepoByOrgReply_RepoOrg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListGithubRepoByOrgReply_RepoOrg) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *ListGithubRepoByOrgReply_RepoOrg) GetHtmlUrl() string {
	if x != nil {
		return x.HtmlUrl
	}
	return ""
}

func (x *ListGithubRepoByOrgReply_RepoOrg) GetCloneUrl() string {
	if x != nil {
		return x.CloneUrl
	}
	return ""
}

func (x *ListGithubRepoByOrgReply_RepoOrg) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ListGithubRepoByOrgReply_RepoOrg) GetStar() int32 {
	if x != nil {
		return x.Star
	}
	return 0
}

func (x *ListGithubRepoByOrgReply_RepoOrg) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *ListGithubRepoByOrgReply_RepoOrg) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type ListServiceUrlReply_ServiceUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid           string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	OrgUuid        string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid    string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	ProductEnvUuid string `protobuf:"bytes,4,opt,name=productEnvUuid,proto3" json:"productEnvUuid,omitempty"`
	//string ownerUuid = 4;
	Name       string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Url        string `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	Describe   string `protobuf:"bytes,7,opt,name=describe,proto3" json:"describe,omitempty"`
	CreateTime int64  `protobuf:"varint,8,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *ListServiceUrlReply_ServiceUrl) Reset() {
	*x = ListServiceUrlReply_ServiceUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[375]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListServiceUrlReply_ServiceUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServiceUrlReply_ServiceUrl) ProtoMessage() {}

func (x *ListServiceUrlReply_ServiceUrl) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[375]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServiceUrlReply_ServiceUrl.ProtoReflect.Descriptor instead.
func (*ListServiceUrlReply_ServiceUrl) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{233, 0}
}

func (x *ListServiceUrlReply_ServiceUrl) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ListServiceUrlReply_ServiceUrl) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListServiceUrlReply_ServiceUrl) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ListServiceUrlReply_ServiceUrl) GetProductEnvUuid() string {
	if x != nil {
		return x.ProductEnvUuid
	}
	return ""
}

func (x *ListServiceUrlReply_ServiceUrl) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListServiceUrlReply_ServiceUrl) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ListServiceUrlReply_ServiceUrl) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *ListServiceUrlReply_ServiceUrl) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type ListContainerRegistryReply_ContainerRegistry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid       string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Username   string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Url        string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Email      string `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	CreateTime int64  `protobuf:"varint,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *ListContainerRegistryReply_ContainerRegistry) Reset() {
	*x = ListContainerRegistryReply_ContainerRegistry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[376]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContainerRegistryReply_ContainerRegistry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContainerRegistryReply_ContainerRegistry) ProtoMessage() {}

func (x *ListContainerRegistryReply_ContainerRegistry) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[376]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContainerRegistryReply_ContainerRegistry.ProtoReflect.Descriptor instead.
func (*ListContainerRegistryReply_ContainerRegistry) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{239, 0}
}

func (x *ListContainerRegistryReply_ContainerRegistry) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ListContainerRegistryReply_ContainerRegistry) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ListContainerRegistryReply_ContainerRegistry) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ListContainerRegistryReply_ContainerRegistry) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ListContainerRegistryReply_ContainerRegistry) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type ListPublicContainerImageReply_ContainerImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid        string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	OrgUuid     string `protobuf:"bytes,2,opt,name=orgUuid,proto3" json:"orgUuid,omitempty"`
	ProductUuid string `protobuf:"bytes,3,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	Name        string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	ImageUrl    string `protobuf:"bytes,5,opt,name=imageUrl,proto3" json:"imageUrl,omitempty"`
	AuthorUuid  string `protobuf:"bytes,6,opt,name=author_uuid,json=authorUuid,proto3" json:"author_uuid,omitempty"`
	Describe    string `protobuf:"bytes,7,opt,name=describe,proto3" json:"describe,omitempty"`
	CreateTime  int64  `protobuf:"varint,8,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *ListPublicContainerImageReply_ContainerImage) Reset() {
	*x = ListPublicContainerImageReply_ContainerImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[377]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPublicContainerImageReply_ContainerImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPublicContainerImageReply_ContainerImage) ProtoMessage() {}

func (x *ListPublicContainerImageReply_ContainerImage) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[377]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPublicContainerImageReply_ContainerImage.ProtoReflect.Descriptor instead.
func (*ListPublicContainerImageReply_ContainerImage) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{247, 0}
}

func (x *ListPublicContainerImageReply_ContainerImage) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ListPublicContainerImageReply_ContainerImage) GetOrgUuid() string {
	if x != nil {
		return x.OrgUuid
	}
	return ""
}

func (x *ListPublicContainerImageReply_ContainerImage) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *ListPublicContainerImageReply_ContainerImage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListPublicContainerImageReply_ContainerImage) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *ListPublicContainerImageReply_ContainerImage) GetAuthorUuid() string {
	if x != nil {
		return x.AuthorUuid
	}
	return ""
}

func (x *ListPublicContainerImageReply_ContainerImage) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *ListPublicContainerImageReply_ContainerImage) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type GetReliabilityReply_Reliability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid               string  `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	ProductUuid        string  `protobuf:"bytes,2,opt,name=productUuid,proto3" json:"productUuid,omitempty"`
	DailyTime          int64   `protobuf:"varint,3,opt,name=dailyTime,proto3" json:"dailyTime,omitempty"`
	ReliabilityPercent float32 `protobuf:"fixed32,4,opt,name=reliabilityPercent,proto3" json:"reliabilityPercent,omitempty"`
	CreateTime         int64   `protobuf:"varint,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *GetReliabilityReply_Reliability) Reset() {
	*x = GetReliabilityReply_Reliability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[378]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReliabilityReply_Reliability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReliabilityReply_Reliability) ProtoMessage() {}

func (x *GetReliabilityReply_Reliability) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[378]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReliabilityReply_Reliability.ProtoReflect.Descriptor instead.
func (*GetReliabilityReply_Reliability) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{253, 0}
}

func (x *GetReliabilityReply_Reliability) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *GetReliabilityReply_Reliability) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *GetReliabilityReply_Reliability) GetDailyTime() int64 {
	if x != nil {
		return x.DailyTime
	}
	return 0
}

func (x *GetReliabilityReply_Reliability) GetReliabilityPercent() float32 {
	if x != nil {
		return x.ReliabilityPercent
	}
	return 0
}

func (x *GetReliabilityReply_Reliability) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type ListWebServiceResourceReply_WebServiceResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid           string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Protocol       int32    `protobuf:"varint,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	ServerName     string   `protobuf:"bytes,3,opt,name=serverName,proto3" json:"serverName,omitempty"`
	IpPool         []string `protobuf:"bytes,4,rep,name=ipPool,proto3" json:"ipPool,omitempty"`
	HealthCheckUri string   `protobuf:"bytes,5,opt,name=healthCheckUri,proto3" json:"healthCheckUri,omitempty"`
	Describe       string   `protobuf:"bytes,6,opt,name=describe,proto3" json:"describe,omitempty"`
	CreateTime     int64    `protobuf:"varint,7,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *ListWebServiceResourceReply_WebServiceResource) Reset() {
	*x = ListWebServiceResourceReply_WebServiceResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[379]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWebServiceResourceReply_WebServiceResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWebServiceResourceReply_WebServiceResource) ProtoMessage() {}

func (x *ListWebServiceResourceReply_WebServiceResource) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[379]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWebServiceResourceReply_WebServiceResource.ProtoReflect.Descriptor instead.
func (*ListWebServiceResourceReply_WebServiceResource) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{257, 0}
}

func (x *ListWebServiceResourceReply_WebServiceResource) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ListWebServiceResourceReply_WebServiceResource) GetProtocol() int32 {
	if x != nil {
		return x.Protocol
	}
	return 0
}

func (x *ListWebServiceResourceReply_WebServiceResource) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *ListWebServiceResourceReply_WebServiceResource) GetIpPool() []string {
	if x != nil {
		return x.IpPool
	}
	return nil
}

func (x *ListWebServiceResourceReply_WebServiceResource) GetHealthCheckUri() string {
	if x != nil {
		return x.HealthCheckUri
	}
	return ""
}

func (x *ListWebServiceResourceReply_WebServiceResource) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *ListWebServiceResourceReply_WebServiceResource) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type GetWebServiceResourcePromSDReply_WebServiceResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid           string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Protocol       string   `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	ServerName     string   `protobuf:"bytes,3,opt,name=serverName,proto3" json:"serverName,omitempty"`
	IpPool         []string `protobuf:"bytes,4,rep,name=ipPool,proto3" json:"ipPool,omitempty"`
	HealthCheckUri string   `protobuf:"bytes,5,opt,name=healthCheckUri,proto3" json:"healthCheckUri,omitempty"`
	Describe       string   `protobuf:"bytes,6,opt,name=describe,proto3" json:"describe,omitempty"`
	CreateTime     int64    `protobuf:"varint,7,opt,name=createTime,proto3" json:"createTime,omitempty"`
}

func (x *GetWebServiceResourcePromSDReply_WebServiceResource) Reset() {
	*x = GetWebServiceResourcePromSDReply_WebServiceResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_oneProduct_v1_product_proto_msgTypes[380]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWebServiceResourcePromSDReply_WebServiceResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWebServiceResourcePromSDReply_WebServiceResource) ProtoMessage() {}

func (x *GetWebServiceResourcePromSDReply_WebServiceResource) ProtoReflect() protoreflect.Message {
	mi := &file_oneProduct_v1_product_proto_msgTypes[380]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWebServiceResourcePromSDReply_WebServiceResource.ProtoReflect.Descriptor instead.
func (*GetWebServiceResourcePromSDReply_WebServiceResource) Descriptor() ([]byte, []int) {
	return file_oneProduct_v1_product_proto_rawDescGZIP(), []int{263, 0}
}

func (x *GetWebServiceResourcePromSDReply_WebServiceResource) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *GetWebServiceResourcePromSDReply_WebServiceResource) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *GetWebServiceResourcePromSDReply_WebServiceResource) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *GetWebServiceResourcePromSDReply_WebServiceResource) GetIpPool() []string {
	if x != nil {
		return x.IpPool
	}
	return nil
}

func (x *GetWebServiceResourcePromSDReply_WebServiceResource) GetHealthCheckUri() string {
	if x != nil {
		return x.HealthCheckUri
	}
	return ""
}

func (x *GetWebServiceResourcePromSDReply_WebServiceResource) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *GetWebServiceResourcePromSDReply_WebServiceResource) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

var File_oneProduct_v1_product_proto protoreflect.FileDescriptor

var file_oneProduct_v1_product_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xb8, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67,
	0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x22, 0x2f, 0x0a,
	0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x5b,
	0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x22, 0x86, 0x02, 0x0a, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x41, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x1a, 0xab, 0x01, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x67, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x4f, 0x72, 0x67, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21,
	0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x22, 0x2c, 0x0a, 0x12,
	0x44, 0x65, 0x6c, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x60, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x21,
	0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x22, 0xb4, 0x01, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x34, 0x0a, 0x1a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x8b, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x22, 0x2e,
	0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb1,
	0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a,
	0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x75,
	0x69, 0x64, 0x22, 0x31, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xe4, 0x01, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x67,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72,
	0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x2b, 0x0a, 0x0c, 0x6a, 0x6f, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c,
	0x6a, 0x6f, 0x69, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x22, 0x37, 0x0a, 0x1d,
	0x41, 0x64, 0x64, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb8, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72,
	0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f,
	0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x75, 0x69, 0x64,
	0x22, 0xf1, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x6d, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x12,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x1a, 0x60, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe8, 0x01, 0x0a, 0x1d, 0x45, 0x76, 0x69, 0x63, 0x74, 0x4f, 0x72,
	0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f,
	0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x2d, 0x0a, 0x0d, 0x65, 0x76, 0x69, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0d, 0x65, 0x76, 0x69, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x22,
	0x39, 0x0a, 0x1f, 0x45, 0x76, 0x69, 0x63, 0x74, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb9, 0x01, 0x0a, 0x1d, 0x4c,
	0x65, 0x61, 0x76, 0x65, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x25, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x55, 0x75, 0x69, 0x64, 0x22, 0x39, 0x0a, 0x1f, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x4f,
	0x72, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0xec, 0x01, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21,
	0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07,
	0x65, 0x6e, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x18, 0x0a, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x22, 0x2f, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x89, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x22, 0x82, 0x02,
	0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x45, 0x6e, 0x76, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x38, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x45, 0x6e, 0x76, 0x52, 0x03, 0x65,
	0x6e, 0x76, 0x1a, 0xad, 0x01, 0x0a, 0x03, 0x45, 0x6e, 0x76, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x6e, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a,
	0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x22, 0x2f,
	0x0a, 0x15, 0x44, 0x65, 0x6c, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45,
	0x6e, 0x76, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x71, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x45, 0x6e, 0x76, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75,
	0x69, 0x64, 0x22, 0xbf, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x65, 0x0a, 0x15, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a,
	0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x22, 0x31, 0x0a, 0x17, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x4f, 0x72,
	0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xc8,
	0x02, 0x0a, 0x0a, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x70, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x6b, 0x75, 0x62, 0x65, 0x45, 0x64, 0x67, 0x65, 0x47, 0x72, 0x70, 0x63, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6b, 0x75, 0x62, 0x65, 0x45, 0x64, 0x67, 0x65, 0x47,
	0x72, 0x70, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x98, 0x02, 0x0a, 0x10, 0x41, 0x64,
	0x64, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x23,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f,
	0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f,
	0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x27, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x61, 0x70,
	0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x22, 0x2c, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x4b, 0x38, 0x53, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0xe1, 0x01, 0x0a, 0x12, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4b, 0x38, 0x53, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x75, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x75,
	0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x98, 0x02, 0x0a, 0x14, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e,
	0x76, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x75,
	0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x70,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xb7, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07,
	0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x22, 0x4d, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x36, 0x0a, 0x0a, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x0a,
	0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0xe1, 0x01, 0x0a, 0x10, 0x44,
	0x65, 0x6c, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12,
	0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07,
	0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x22, 0x2c,
	0x0a, 0x12, 0x44, 0x65, 0x6c, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb7, 0x02, 0x0a,
	0x14, 0x41, 0x64, 0x64, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x64,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72,
	0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x6b, 0x38, 0x73,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x6b, 0x38, 0x73, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0c, 0x6b, 0x75,
	0x62, 0x65, 0x45, 0x64, 0x67, 0x65, 0x47, 0x72, 0x70, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x6b, 0x75, 0x62, 0x65, 0x45,
	0x64, 0x67, 0x65, 0x47, 0x72, 0x70, 0x63, 0x12, 0x1d, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x30, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x4b, 0x38, 0x53,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x64, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xeb, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x64, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45,
	0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e,
	0x76, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x22, 0x72, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4b, 0x38, 0x53,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x64, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x22, 0x0a, 0x0c, 0x6b, 0x75, 0x62, 0x65, 0x45, 0x64, 0x67, 0x65, 0x47, 0x72, 0x70, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6b, 0x75, 0x62, 0x65, 0x45, 0x64, 0x67, 0x65,
	0x47, 0x72, 0x70, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xeb, 0x01, 0x0a, 0x14, 0x44,
	0x65, 0x6c, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x64, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x22, 0x30, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x4b,
	0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x64, 0x67, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x90, 0x02, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x82, 0x08,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x38, 0x0a, 0x17, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6b, 0x65, 0x72,
	0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x6b, 0x75,
	0x62, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6b, 0x75, 0x62, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28,
	0x0a, 0x0f, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x73, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x73, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x55, 0x0a, 0x0b, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x47, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x50, 0x0a, 0x0b, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x39, 0x0a, 0x0b,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x7a, 0x0a, 0x08, 0x43, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x45, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x70, 0x68, 0x65, 0x6d, 0x65,
	0x72, 0x61, 0x6c, 0x1a, 0x7d, 0x0a, 0x0b, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x63, 0x70, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x45, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72,
	0x61, 0x6c, 0x22, 0xec, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x38, 0x53, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x2f, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x2f, 0x0a, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x22, 0xe2, 0x08, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3c, 0x0a,
	0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x38, 0x53,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x1a, 0x88, 0x08, 0x0a, 0x04,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x38, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x24, 0x0a, 0x0d, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x6b, 0x75, 0x62, 0x65, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x6b, 0x75, 0x62, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6b, 0x75, 0x62, 0x65,
	0x6c, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x6b, 0x75,
	0x62, 0x65, 0x6c, 0x65, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6b, 0x75, 0x62, 0x65, 0x6c, 0x65, 0x74, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x4c,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x5b, 0x0a, 0x0b,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4d, 0x0a, 0x08, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x38, 0x53,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x52, 0x08,
	0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x56, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b,
	0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x7a, 0x0a, 0x08, 0x43,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x70,
	0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x1a, 0x7d, 0x0a, 0x0b, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x70, 0x68,
	0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x22, 0xe3, 0x02, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x4b,
	0x38, 0x53, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a,
	0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e,
	0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x6b,
	0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xf5, 0x09, 0x0a,
	0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x38, 0x53, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x12, 0x31, 0x0a, 0x03,
	0x70, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x38, 0x53, 0x50, 0x6f,
	0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x50, 0x6f, 0x64, 0x52, 0x03, 0x70, 0x6f, 0x64, 0x1a,
	0x92, 0x09, 0x0a, 0x03, 0x50, 0x6f, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x50, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x50, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x6f, 0x64, 0x49, 0x50, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f,
	0x64, 0x49, 0x50, 0x12, 0x43, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x38, 0x53, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x2e, 0x50, 0x6f, 0x64, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x3d, 0x0a, 0x04, 0x65, 0x6e, 0x76, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x38, 0x53, 0x50, 0x6f, 0x64, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x2e, 0x50, 0x6f, 0x64, 0x2e, 0x45, 0x6e, 0x76, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x12, 0x47, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x38, 0x53, 0x50,
	0x6f, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x50, 0x6f, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x37, 0x0a, 0x09, 0x45,
	0x6e, 0x76, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x8d, 0x05, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x43, 0x70, 0x75, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x43,
	0x70, 0x75, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x70, 0x75, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x70, 0x75, 0x12, 0x20, 0x0a, 0x0b,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x22,
	0x0a, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x45, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45,
	0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x6c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f,
	0x62, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x50,
	0x72, 0x6f, 0x62, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x64,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x22, 0xa9, 0x02, 0x0a, 0x0e, 0x45, 0x76, 0x69, 0x63, 0x74, 0x4b, 0x38,
	0x53, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07,
	0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x6b,
	0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x6b, 0x38,
	0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x2a, 0x0a, 0x10, 0x45, 0x76, 0x69, 0x63, 0x74, 0x4b, 0x38, 0x53, 0x50, 0x6f, 0x64, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xa7, 0x02, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x4b, 0x38, 0x53, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72,
	0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x2f, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8e, 0x09, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4b, 0x38,
	0x53, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49,
	0x50, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x50, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x6f, 0x64, 0x49, 0x50, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x6f, 0x64, 0x49, 0x50, 0x12, 0x3e, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x38, 0x53, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4b, 0x38, 0x53, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e,
	0x45, 0x6e, 0x76, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x12,
	0x42, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4b, 0x38, 0x53, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x37,
	0x0a, 0x09, 0x45, 0x6e, 0x76, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x8d, 0x05, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x43,
	0x70, 0x75, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x43, 0x70, 0x75, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x28, 0x0a,
	0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x70, 0x68, 0x65, 0x6d, 0x65,
	0x72, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x70, 0x68, 0x65, 0x6d, 0x65,
	0x72, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x70, 0x75, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x70, 0x75, 0x12,
	0x20, 0x0a, 0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x45, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x6c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x62, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73,
	0x50, 0x72, 0x6f, 0x62, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x22, 0xa7, 0x02, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x4b,
	0x38, 0x53, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a,
	0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e,
	0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x6b,
	0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x28, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x4b, 0x38, 0x53, 0x50, 0x6f, 0x64, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x91, 0x02, 0x0a, 0x13,
	0x43, 0x6c, 0x65, 0x61, 0x6e, 0x45, 0x76, 0x69, 0x63, 0x74, 0x4b, 0x38, 0x53, 0x50, 0x6f, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22,
	0x2f, 0x0a, 0x15, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x45, 0x76, 0x69, 0x63, 0x74, 0x4b, 0x38, 0x53,
	0x50, 0x6f, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x22, 0xa7, 0x02, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x38, 0x53, 0x50, 0x6f,
	0x64, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x6b, 0x38, 0x73, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xe3, 0x09, 0x0a, 0x11, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x38, 0x53, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x33, 0x0a, 0x03, 0x70, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4b, 0x38, 0x53, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x50, 0x6f, 0x64,
	0x52, 0x03, 0x70, 0x6f, 0x64, 0x1a, 0x98, 0x09, 0x0a, 0x03, 0x50, 0x6f, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x6f, 0x73, 0x74, 0x49, 0x50, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73,
	0x74, 0x49, 0x50, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x64, 0x49, 0x50, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x64, 0x49, 0x50, 0x12, 0x45, 0x0a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x38, 0x53,
	0x50, 0x6f, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x50, 0x6f, 0x64, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x3f, 0x0a, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x4b, 0x38, 0x53, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x50, 0x6f,
	0x64, 0x2e, 0x45, 0x6e, 0x76, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x65, 0x6e, 0x76,
	0x73, 0x12, 0x49, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x38, 0x53, 0x50, 0x6f, 0x64, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x2e, 0x50, 0x6f, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x1a, 0x39, 0x0a, 0x0b,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x37, 0x0a, 0x09, 0x45, 0x6e, 0x76, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x8d, 0x05, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x43, 0x70, 0x75, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x43, 0x70, 0x75, 0x12, 0x26,
	0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x12, 0x3a, 0x0a, 0x18, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x45, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x18, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x45, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x70, 0x75, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x70, 0x75, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x34,
	0x0a, 0x15, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x70,
	0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x70, 0x68, 0x65, 0x6d,
	0x65, 0x72, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x50,
	0x72, 0x6f, 0x62, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x69, 0x76, 0x65,
	0x6e, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x62, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79,
	0x22, 0xc9, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4d, 0x61, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe0, 0x03, 0x0a,
	0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72,
	0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x2f, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x9a, 0x01, 0x02,
	0x08, 0x01, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x6d, 0x75,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6d, 0x6d,
	0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x38, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x98, 0x02, 0x0a, 0x1a, 0x4c, 0x69,
	0x73, 0x74, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a,
	0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e,
	0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x6b,
	0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x22, 0x53, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x38, 0x53, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x33, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61,
	0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x22, 0xb4, 0x02, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07,
	0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x6b,
	0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x6b, 0x38,
	0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xed, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x6d,
	0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6d,
	0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xe0, 0x03, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x52, 0x65,
	0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45,
	0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e,
	0x76, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x52,
	0x65, 0x71, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x9a, 0x01, 0x02, 0x08, 0x01, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x38, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb4, 0x02,
	0x0a, 0x19, 0x44, 0x65, 0x6c, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f,
	0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x2f, 0x0a, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x25, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x35, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x4b, 0x38, 0x53, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x8b, 0x02, 0x0a, 0x0d,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72,
	0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x2f, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x94, 0x06, 0x0a, 0x0f, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3c, 0x0a,
	0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x1a, 0xc2, 0x05, 0x0a, 0x06,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x46, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x6d, 0x75, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6d, 0x6d, 0x75,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x52, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3e, 0x0a,
	0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a,
	0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xa7, 0x02, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45,
	0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e,
	0x76, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xaa, 0x05, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x4d, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x4a,
	0x0a, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3d, 0x0a, 0x0f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x37,
	0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa7, 0x02, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a,
	0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e,
	0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x6b,
	0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x28, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xcc, 0x05, 0x0a, 0x15,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72,
	0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x6b, 0x38, 0x73,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x6b, 0x38, 0x73, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x60, 0x01,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x19, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x54, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x6b, 0x65,
	0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x45, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x6b,
	0x65, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a,
	0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x31, 0x0a, 0x17, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xcc, 0x05,
	0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07,
	0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x6b,
	0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x6b, 0x38,
	0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x60, 0x01, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x19, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x54, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x45, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x6f,
	0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x31, 0x0a, 0x17,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x81, 0x05, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6c, 0x73, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f,
	0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x6b, 0x38,
	0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x6b, 0x38, 0x73,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x06, 0x74, 0x6c, 0x73, 0x43, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x74, 0x6c, 0x73, 0x43, 0x72, 0x74,
	0x12, 0x1f, 0x0a, 0x06, 0x74, 0x6c, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x74, 0x6c, 0x73, 0x4b, 0x65,
	0x79, 0x12, 0x51, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6c, 0x73, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x42, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6c, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x2e, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6c, 0x73,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x81, 0x05, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6c,
	0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a,
	0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f,
	0x0a, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x25, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x74, 0x6c, 0x73, 0x43, 0x72, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x74, 0x6c,
	0x73, 0x43, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x74, 0x6c, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x74,
	0x6c, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x51, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6c,
	0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x42, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6c, 0x73, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x3e, 0x0a, 0x10,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2e, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x6c, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xc2, 0x05, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45,
	0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e,
	0x76, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x61, 0x71,
	0x75, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x54, 0x0a, 0x0b, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x45, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x31, 0x0a, 0x17,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0xc2, 0x05, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21,
	0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a,
	0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e,
	0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x25,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x54, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x61, 0x71,
	0x75, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x45, 0x0a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x61,
	0x71, 0x75, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x31, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70,
	0x61, 0x71, 0x75, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x92, 0x05, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x53, 0x48, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45,
	0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1b,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0a, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x55, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x53, 0x48, 0x41, 0x75,
	0x74, 0x68, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x53, 0x48,
	0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x32, 0x0a, 0x18,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x53, 0x48, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x92, 0x05, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x53, 0x48, 0x41, 0x75,
	0x74, 0x68, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f,
	0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x2f, 0x0a, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x25, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x55, 0x0a, 0x0b, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x53, 0x48, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x46, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x53, 0x48, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x32, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x53, 0x48, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb9, 0x05, 0x0a, 0x18, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f,
	0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x6b, 0x38,
	0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x6b, 0x38, 0x73,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x6d,
	0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6d,
	0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x57, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x48, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x34, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb9, 0x05, 0x0a, 0x18,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a,
	0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e,
	0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x6b,
	0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x57, 0x0a, 0x0b, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x48, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x3e, 0x0a, 0x10,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x34, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xf1, 0x01,
	0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x2f, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x2f, 0x0a, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x22, 0xc9, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x50, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x1a, 0x57, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x97, 0x02,
	0x0a, 0x19, 0x44, 0x65, 0x6c, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f,
	0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x2f, 0x0a, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x25, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x35, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x4b, 0x38,
	0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x9a,
	0x02, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07,
	0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x38, 0x0a, 0x1e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xf1, 0x02, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x38,
	0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72,
	0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x6b, 0x38, 0x73,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x6b, 0x38, 0x73, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xaa, 0x03, 0x0a, 0x1d, 0x4c, 0x69,
	0x73, 0x74, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x12, 0x5a, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x38, 0x53,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x1a, 0x90, 0x02, 0x0a, 0x10, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x13, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x22, 0xc1, 0x02, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4b, 0x38,
	0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72,
	0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x6b, 0x38, 0x73,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x6b, 0x38, 0x73, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x27, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x40, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x1f, 0x0a, 0x1d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x22, 0x21, 0x0a,
	0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0xc1, 0x02, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07,
	0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0a, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0x36, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x4b, 0x38, 0x53, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xe7, 0x02, 0x0a,
	0x27, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a,
	0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e,
	0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x6b,
	0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x08, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x22, 0x43, 0x0a, 0x29, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x71, 0x0a, 0x0b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x22, 0xa4,
	0x05, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f,
	0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x6b, 0x38,
	0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x6b, 0x38, 0x73,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x29, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x08, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4b, 0x38, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x12, 0x52, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2f, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b,
	0x38, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x8f, 0x02, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4b,
	0x38, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x2f, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x2f, 0x0a, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x25, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x91, 0x05, 0x0a, 0x13, 0x4c, 0x69, 0x73,
	0x74, 0x4b, 0x38, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x41, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4b, 0x38, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x1a, 0xb6, 0x04, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x0b, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4b, 0x38, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x50, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x50, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x38, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x2d, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x50, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x50,
	0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xab, 0x02, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x4b, 0x38, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45,
	0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e,
	0x76, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xaf, 0x04, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x4b, 0x38, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x50, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x50, 0x12, 0x28, 0x0a, 0x0f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x66, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x38, 0x53, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x51, 0x0a,
	0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4b, 0x38, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2d, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x50, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x50,
	0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xab, 0x02, 0x0a,
	0x10, 0x44, 0x65, 0x6c, 0x4b, 0x38, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45,
	0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e,
	0x76, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2c, 0x0a, 0x12, 0x44, 0x65,
	0x6c, 0x4b, 0x38, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xaf, 0x08, 0x0a, 0x13, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e,
	0x76, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x0b, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4b, 0x38, 0x53, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x2e,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4b, 0x38, 0x53, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x46, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x63, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xbd, 0x02, 0x0a, 0x07, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6c, 0x73, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6c, 0x73, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x12, 0x45, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x68,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x1a, 0x65, 0x0a, 0x09, 0x50,
	0x61, 0x74, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x66, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x2f, 0x0a, 0x15, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x8f, 0x02, 0x0a, 0x11,
	0x4c, 0x69, 0x73, 0x74, 0x4b, 0x38, 0x53, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45,
	0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e,
	0x76, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0xe4, 0x06,
	0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x38, 0x53, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x41, 0x0a, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x38, 0x53, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x89, 0x06, 0x0a, 0x07, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x38, 0x53, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x4e, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x38, 0x53, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x72,
	0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x4c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4b, 0x38, 0x53, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0xff, 0x02, 0x0a, 0x0e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6c, 0x73, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6c, 0x73, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x12, 0x54, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4b, 0x38, 0x53, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x1a, 0x82, 0x01, 0x0a, 0x09, 0x50, 0x61,
	0x74, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x5f, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x38, 0x53, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x74,
	0x0a, 0x12, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x22, 0xab, 0x02, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4b, 0x38, 0x53, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21,
	0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a,
	0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e,
	0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x25,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xe6, 0x05, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4b, 0x38, 0x53, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x38, 0x53, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x45, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4b, 0x38, 0x53, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x69, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4b, 0x38, 0x53, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xec, 0x02, 0x0a,
	0x0e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x6c, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x6c, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x4b, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x38, 0x53, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x1a, 0x79, 0x0a, 0x09, 0x50, 0x61,
	0x74, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x56, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x38, 0x53, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x74, 0x0a, 0x12, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x22, 0xab, 0x02, 0x0a, 0x10,
	0x44, 0x65, 0x6c, 0x4b, 0x38, 0x53, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e,
	0x76, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2c, 0x0a, 0x12, 0x44, 0x65, 0x6c,
	0x4b, 0x38, 0x53, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xaf, 0x08, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4b, 0x38, 0x53, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07,
	0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4b, 0x38, 0x53, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x2e, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4b, 0x38, 0x53, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x46, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x63, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xbd, 0x02, 0x0a, 0x07, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6c, 0x73, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6c, 0x73, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x12, 0x45, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x1a, 0x65, 0x0a, 0x09, 0x50, 0x61,
	0x74, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x66, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x74,
	0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x74,
	0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x2f, 0x0a, 0x15, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xa4, 0x02, 0x0a, 0x07, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x69, 0x55, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x69,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x12, 0x2d, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x22, 0xfa, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x69, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x69, 0x55, 0x75, 0x69, 0x64, 0x22, 0x2c,
	0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x82, 0x01, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x42, 0x79, 0x55, 0x75, 0x69,
	0x64, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x22, 0x46, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x42,
	0x79, 0x55, 0x75, 0x69, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x22, 0x63, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x6c, 0x66, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x23,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x22, 0x44,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x22, 0x7e, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x6b, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x6b, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x43, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x22, 0xaa, 0x02, 0x0a, 0x0d, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x69, 0x55, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x69, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x07, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x22, 0xde, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x69, 0x55, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x69, 0x55, 0x75, 0x69, 0x64, 0x22, 0x32, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x5d, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42,
	0x79, 0x55, 0x75, 0x69, 0x64, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x5e, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0x79,
	0x55, 0x75, 0x69, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3f, 0x0a, 0x0d, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x0d, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x22, 0x3e, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x6c, 0x66, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x22, 0x5c, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x6c, 0x66, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3f, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x22, 0x59, 0x0a, 0x16, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x6b, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x6b, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x5b, 0x0a, 0x18, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x3f, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x22, 0x97, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x68, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x73, 0x68, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x63, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xed, 0x01, 0x0a, 0x1b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x23, 0x0a, 0x08, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x22, 0x37, 0x0a, 0x1d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x66,
	0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65,
	0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x55, 0x75, 0x69, 0x64, 0x22, 0x98, 0x02, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6c,
	0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x5e, 0x0a, 0x0e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65,
	0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x52, 0x0e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x1a, 0x98, 0x01, 0x0a, 0x0e, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xaa, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61,
	0x62, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x34, 0x0a, 0x1a,
	0x44, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0xa0, 0x02, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c,
	0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x12,
	0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07,
	0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x0c,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x22, 0x34, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xaf, 0x01, 0x0a, 0x16,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f,
	0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x22, 0xaa, 0x02,
	0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x52, 0x0a, 0x0b, 0x67, 0x69,
	0x74, 0x6c, 0x61, 0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x0b, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0xb9,
	0x01, 0x0a, 0x0b, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xde, 0x01, 0x0a, 0x15, 0x44,
	0x65, 0x6c, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x22, 0x31, 0x0a, 0x17, 0x44,
	0x65, 0x6c, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xaa,
	0x02, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74,
	0x6c, 0x61, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2b,
	0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x11, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x11, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x22, 0x34, 0x0a, 0x1a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0xef, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69,
	0x74, 0x6c, 0x61, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x2b, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x11,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x11, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55,
	0x75, 0x69, 0x64, 0x22, 0xd1, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x66,
	0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x42, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x1a, 0x71, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x97, 0x02, 0x0a, 0x17, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f,
	0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x22, 0x33, 0x0a, 0x19, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x47,
	0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xd1, 0x02, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52,
	0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x35, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x22, 0x33, 0x0a, 0x19, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65,
	0x70, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0xdc, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c,
	0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21,
	0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x2c, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x22, 0xdc,
	0x03, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61,
	0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4e, 0x0a, 0x0a, 0x67, 0x69,
	0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x2e, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x0a,
	0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x1a, 0xf0, 0x02, 0x0a, 0x0a, 0x47,
	0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x62, 0x55, 0x72, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x65, 0x62, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x68,
	0x74, 0x74, 0x70, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x55, 0x72, 0x6c, 0x12,
	0x20, 0x0a, 0x0b, 0x73, 0x73, 0x68, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x73, 0x68, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x55, 0x72,
	0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa6, 0x01,
	0x0a, 0x14, 0x44, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52,
	0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f,
	0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x30, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x53, 0x65, 0x6c,
	0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb2, 0x01, 0x0a, 0x18, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65,
	0x70, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72,
	0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x22, 0x34, 0x0a,
	0x1a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c,
	0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0xad, 0x02, 0x0a, 0x16, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x65, 0x6c,
	0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x23,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f,
	0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x23, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x72, 0x65,
	0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x12, 0x2b, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x12, 0x21, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x32, 0x0a, 0x18, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x65, 0x6c, 0x66,
	0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xfb, 0x01, 0x0a, 0x19, 0x53, 0x65, 0x6c, 0x66,
	0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x48,
	0x69, 0x73, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72,
	0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x22, 0xb8, 0x03, 0x0a, 0x1b, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69,
	0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x48, 0x69, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x45, 0x0a, 0x06, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70,
	0x6f, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x48, 0x69, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x52, 0x06, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x73, 0x1a, 0xd1, 0x02, 0x0a,
	0x05, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x42, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x42, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x42, 0x79, 0x12, 0x26, 0x0a, 0x0e,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x48, 0x41, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x53, 0x48, 0x41, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xfb, 0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x47,
	0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0a, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x03, 0x72, 0x65, 0x66, 0x22, 0x39,
	0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c,
	0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb5, 0x01, 0x0a, 0x1b, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21,
	0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x08,
	0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69,
	0x64, 0x22, 0xb0, 0x03, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69,
	0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x48, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52,
	0x65, 0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x1a, 0xc4, 0x02,
	0x0a, 0x06, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x53, 0x68, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x68, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x6e, 0x50, 0x75, 0x73, 0x68, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x50, 0x75, 0x73, 0x68, 0x12, 0x2c,
	0x0a, 0x11, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x43, 0x61, 0x6e, 0x50,
	0x75, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x64, 0x65, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x72, 0x73, 0x43, 0x61, 0x6e, 0x50, 0x75, 0x73, 0x68, 0x12, 0x2e, 0x0a, 0x12,
	0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x43, 0x61, 0x6e, 0x4d, 0x65, 0x72,
	0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x72, 0x73, 0x43, 0x61, 0x6e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x77, 0x65, 0x62, 0x55, 0x52, 0x4c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x65,
	0x62, 0x55, 0x52, 0x4c, 0x22, 0xdd, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x66,
	0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0a, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x36, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x66, 0x47,
	0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xe1, 0x01, 0x0a,
	0x1e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c,
	0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x12,
	0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07,
	0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x72,
	0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x3a, 0x0a, 0x20, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x47,
	0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xe3, 0x01, 0x0a,
	0x20, 0x55, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69,
	0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0a, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x3c, 0x0a, 0x22, 0x55, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x53,
	0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0xe5, 0x01, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74,
	0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07,
	0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x72, 0x65,
	0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x27, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x86, 0x02, 0x0a, 0x24, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x51, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65,
	0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x73, 0x1a, 0x8a, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x68, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x68,
	0x61, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xe1, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x69, 0x74, 0x48,
	0x75, 0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x22, 0x30, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47,
	0x69, 0x74, 0x48, 0x75, 0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x87, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74,
	0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x23,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f,
	0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69,
	0x64, 0x22, 0xfe, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4e, 0x0a, 0x0b, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x2e, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0b, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x95, 0x01, 0x0a, 0x0b, 0x47,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a,
	0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x2d, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x47,
	0x69, 0x74, 0x48, 0x75, 0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xfa, 0x01, 0x0a, 0x13, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x12,
	0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07,
	0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x4f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x4f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2f, 0x0a, 0x15, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x9c, 0x02, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72,
	0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x25, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x22, 0x2f, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x9c, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xac, 0x03, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x38, 0x0a, 0x04,
	0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x1a, 0xda, 0x02, 0x0a, 0x04, 0x52, 0x65, 0x70, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x43, 0x6c, 0x6f,
	0x6e, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x74, 0x74,
	0x70, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x73, 0x68,
	0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x73, 0x68, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x77,
	0x65, 0x62, 0x55, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x65, 0x62,
	0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73,
	0x74, 0x61, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a,
	0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0xe6, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x68, 0x74, 0x6d, 0x6c, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x68, 0x74, 0x6d, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x6f,
	0x6e, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x6f,
	0x6e, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x74, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xa2, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52,
	0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f,
	0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x2c, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x47, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0xa6, 0x01, 0x0a, 0x14, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72,
	0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x30, 0x0a,
	0x16, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65,
	0x70, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0xa9, 0x02, 0x0a, 0x12, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52,
	0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f,
	0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x72, 0x65, 0x70,
	0x6f, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2b,
	0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x2b, 0x0a, 0x0c, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x21, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2e, 0x0a, 0x14, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb1, 0x01, 0x0a, 0x17,
	0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07,
	0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x72, 0x65,
	0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x22,
	0xe1, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65,
	0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x44, 0x0a,
	0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x06, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x1a, 0x7e, 0x0a, 0x06, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x68, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x68, 0x61, 0x12, 0x24, 0x0a,
	0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0xe1, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f,
	0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x72, 0x65, 0x70,
	0x6f, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x12, 0x27,
	0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xfe, 0x01, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74,
	0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4d, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x1a, 0x8a, 0x01, 0x0a, 0x06,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x68, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x68, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xdd, 0x01, 0x0a, 0x1a, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07,
	0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x72, 0x65,
	0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x27, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x36, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0xdf, 0x01, 0x0a, 0x1c, 0x55, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x47, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0a, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x38, 0x0a, 0x1e, 0x55, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x47,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xac, 0x01, 0x0a,
	0x10, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x4f, 0x72, 0x67, 0x52, 0x65,
	0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x22, 0x77, 0x0a, 0x12, 0x4c,
	0x69, 0x73, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x36, 0x0a, 0x04, 0x6f, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e,
	0x4f, 0x72, 0x67, 0x52, 0x04, 0x6f, 0x72, 0x67, 0x73, 0x1a, 0x29, 0x0a, 0x03, 0x4f, 0x72, 0x67,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0xeb, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x79, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x12,
	0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07,
	0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xd2, 0x02, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x79, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x72,
	0x67, 0x12, 0x46, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x4f, 0x72, 0x67, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x79,
	0x4f, 0x72, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x4f, 0x72, 0x67,
	0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x4f, 0x72, 0x67, 0x1a, 0xdb, 0x01, 0x0a, 0x07, 0x52, 0x65,
	0x70, 0x6f, 0x4f, 0x72, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x74, 0x6d, 0x6c, 0x55, 0x72, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x74, 0x6d, 0x6c, 0x55, 0x72, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x74, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x74, 0x61,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x31, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x47, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xe8, 0x01, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x46, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x46, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x8d, 0x02, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72,
	0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x2f, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x22, 0x2f, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb7, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x2f, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64,
	0x22, 0xcc, 0x02, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x55, 0x72, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4c, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x55, 0x72, 0x6c, 0x73, 0x1a, 0xe6, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x67,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xe7, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x72,
	0x6c, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x55, 0x72, 0x6c, 0x55, 0x75, 0x69, 0x64, 0x22, 0x2c, 0x0a, 0x12, 0x44, 0x65, 0x6c,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x90, 0x02, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x60, 0x01, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x33, 0x0a, 0x19, 0x41, 0x64,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x8d, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x22,
	0x92, 0x02, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x66,
	0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x1a, 0x8b, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x22, 0x33, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x84, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x9b, 0x01, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xed, 0x01, 0x0a, 0x1a, 0x41,
	0x64, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21,
	0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x08, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x22, 0x36, 0x0a, 0x1c, 0x41, 0x64,
	0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0xaa, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x22,
	0xf1, 0x02, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x60, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x1a, 0xed, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72,
	0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x75, 0x69, 0x64, 0x22, 0x36,
	0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x12,
	0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61,
	0x69, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64,
	0x61, 0x69, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x6c, 0x69,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0x30, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x77, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x12,
	0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64,
	0x61, 0x79, 0x73, 0x22, 0x98, 0x02, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x69, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4d, 0x0a, 0x0b, 0x72,
	0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x2e, 0x52, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x72,
	0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0xb1, 0x01, 0x0a, 0x0b, 0x52,
	0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x12, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x72, 0x65, 0x6c, 0x69,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xe2,
	0x02, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x23,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f,
	0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x27,
	0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x70, 0x50, 0x6f, 0x6f,
	0x6c, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x69, 0x70, 0x50, 0x6f, 0x6f, 0x6c, 0x12,
	0x26, 0x0a, 0x0e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x72,
	0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x55, 0x72, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x22, 0x37, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xbf, 0x01, 0x0a,
	0x19, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a,
	0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55, 0x75, 0x69, 0x64, 0x22, 0xec,
	0x02, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6a,
	0x0a, 0x12, 0x77, 0x65, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x62, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x2e, 0x57, 0x65, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x12, 0x77, 0x65, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0xe0, 0x01, 0x0a, 0x12, 0x57,
	0x65, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x70, 0x50, 0x6f, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x69, 0x70, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x72,
	0x69, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xaa, 0x01,
	0x0a, 0x18, 0x44, 0x65, 0x6c, 0x57, 0x65, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x34, 0x0a, 0x1a, 0x44, 0x65,
	0x6c, 0x57, 0x65, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0xc5, 0x02, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x70, 0x50, 0x6f, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x69, 0x70,
	0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x55, 0x72, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x72, 0x69, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x22, 0x37, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x57, 0x65, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x9f, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x57, 0x65, 0x62, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x53,
	0x44, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07,
	0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x55,
	0x75, 0x69, 0x64, 0x22, 0xf6, 0x02, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x57, 0x65, 0x62, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x6d, 0x53, 0x44, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6f, 0x0a, 0x12, 0x77, 0x65, 0x62, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x65, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x53, 0x44, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x2e, 0x57, 0x65, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x12, 0x77, 0x65, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0xe0, 0x01, 0x0a, 0x12, 0x57, 0x65,
	0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x69, 0x70, 0x50, 0x6f, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x69, 0x70, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x72, 0x69,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xea, 0x02, 0x0a,
	0x24, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72,
	0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x55, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0a, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x55,
	0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x27, 0x0a, 0x0a, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x64,
	0x6f, 0x63, 0x6b, 0x65, 0x72, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x40, 0x0a, 0x26, 0x53, 0x65, 0x6c,
	0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb9, 0x02, 0x0a, 0x20,
	0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08,
	0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2b, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x55, 0x75, 0x69, 0x64, 0x12, 0x27,
	0x0a, 0x0a, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x64, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x3c, 0x0a, 0x22, 0x47, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xbc, 0x02, 0x0a, 0x1f, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69,
	0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x45, 0x78, 0x65, 0x63, 0x43, 0x69, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21,
	0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x0c,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x72, 0x65, 0x70,
	0x6f, 0x55, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x12, 0x27,
	0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x55, 0x75, 0x69, 0x64, 0x22, 0x3b, 0x0a, 0x21, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c,
	0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x45, 0x78, 0x65, 0x63, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x22, 0x8b, 0x02, 0x0a, 0x1b, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f,
	0x45, 0x78, 0x65, 0x63, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x55, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x08, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x75, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0a, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x22,
	0x37, 0x0a, 0x1d, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x45, 0x78, 0x65,
	0x63, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x32, 0xe3, 0x65, 0x0a, 0x07, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x12, 0x58, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x52,
	0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x12, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x4f, 0x72, 0x67, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x61, 0x0a,
	0x13, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x5e, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x70, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x67,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x73, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x1a, 0x45, 0x76, 0x69, 0x63, 0x74,
	0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x76, 0x69, 0x63, 0x74, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x1a, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76,
	0x69, 0x63, 0x74, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x76, 0x0a, 0x1a, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x29, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65,
	0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x4f, 0x72, 0x67, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x4f, 0x72,
	0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x12, 0x1f, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x67, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x67,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x5b, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x58,
	0x0a, 0x10, 0x44, 0x65, 0x6c, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45,
	0x6e, 0x76, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76,
	0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x4f, 0x72, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e,
	0x76, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x12, 0x1f, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x67, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x64, 0x64, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x64, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x38, 0x53, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0f, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4b, 0x38, 0x53,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4b, 0x38, 0x53,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4f,
	0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x4b, 0x38,
	0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x5b, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x45, 0x64, 0x67, 0x65, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x64, 0x64, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45,
	0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x45, 0x64, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x64, 0x67,
	0x65, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x64, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x64,
	0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x11, 0x44, 0x65, 0x6c,
	0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x64, 0x67, 0x65, 0x12, 0x20,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x4b,
	0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x64, 0x67, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x38,
	0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x38, 0x53, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x4b, 0x38, 0x53, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x25, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x73, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x28,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4b, 0x38, 0x53,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x38, 0x53, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x38,
	0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x38, 0x53, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x38, 0x53, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x38,
	0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x38, 0x53, 0x50, 0x6f,
	0x64, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4b, 0x38, 0x53, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x38,
	0x53, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x09, 0x47,
	0x65, 0x74, 0x4b, 0x38, 0x53, 0x50, 0x6f, 0x64, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x38, 0x53, 0x50, 0x6f, 0x64, 0x52,
	0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4b, 0x38, 0x53, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x4c, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x38, 0x53, 0x50, 0x6f, 0x64,
	0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x4b, 0x38, 0x53, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4b, 0x38, 0x53, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x49,
	0x0a, 0x0b, 0x45, 0x76, 0x69, 0x63, 0x74, 0x4b, 0x38, 0x53, 0x50, 0x6f, 0x64, 0x12, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x69, 0x63, 0x74,
	0x4b, 0x38, 0x53, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x69, 0x63, 0x74, 0x4b, 0x38, 0x53, 0x50,
	0x6f, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x09, 0x44, 0x65, 0x6c,
	0x4b, 0x38, 0x53, 0x50, 0x6f, 0x64, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x4b, 0x38, 0x53, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x71,
	0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x4b, 0x38, 0x53, 0x50, 0x6f, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x58,
	0x0a, 0x10, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x45, 0x76, 0x69, 0x63, 0x74, 0x4b, 0x38, 0x53, 0x50,
	0x6f, 0x64, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6c, 0x65, 0x61, 0x6e, 0x45, 0x76, 0x69, 0x63, 0x74, 0x4b, 0x38, 0x53, 0x50, 0x6f, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x45, 0x76, 0x69, 0x63, 0x74, 0x4b, 0x38, 0x53, 0x50, 0x6f,
	0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4d, 0x61, 0x70, 0x12, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x1a,
	0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x6d, 0x0a,
	0x17, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x12, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71,
	0x1a, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x12, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x38,
	0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61,
	0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4d, 0x61, 0x70, 0x12, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x1a,
	0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x6a, 0x0a,
	0x16, 0x44, 0x65, 0x6c, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x12, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x27,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x4b,
	0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d,
	0x61, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0a, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x43, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x18,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x12, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x12, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6c, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x6c, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x20,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x6c, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x55, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6c, 0x73, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6c, 0x73, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6c, 0x73, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12,
	0x21, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x12, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12,
	0x21, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x13, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x53, 0x48, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x53, 0x48, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x53, 0x48, 0x41, 0x75, 0x74, 0x68, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x13,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x53, 0x48, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x53, 0x48, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x53, 0x48, 0x41, 0x75,
	0x74, 0x68, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x67, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75,
	0x74, 0x68, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x26,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x12, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x70, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b,
	0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b,
	0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x6d, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x4b, 0x38,
	0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x76, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x29, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x38,
	0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x94, 0x01, 0x0a, 0x24, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53,
	0x65, 0x74, 0x12, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x58, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0e, 0x4c, 0x69,
	0x73, 0x74, 0x4b, 0x38, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x38,
	0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x38, 0x53,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4f,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4b, 0x38, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4b, 0x38, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x38,
	0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x4f, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x4b, 0x38, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x4b, 0x38, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x4b,
	0x38, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x58, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0e, 0x4c, 0x69,
	0x73, 0x74, 0x4b, 0x38, 0x53, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x38,
	0x53, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x38, 0x53,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4f,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4b, 0x38, 0x53, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4b, 0x38, 0x53, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x38,
	0x53, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x4f, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x4b, 0x38, 0x53, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x4b, 0x38, 0x53, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x4b,
	0x38, 0x53, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x58, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4b, 0x38, 0x53, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x10, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1f,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x1a,
	0x21, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55,
	0x72, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x72,
	0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55,
	0x72, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x14, 0x41, 0x64, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x67, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x26,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x64,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x26, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x27, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x12, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c,
	0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65,
	0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x12, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74,
	0x6c, 0x61, 0x62, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x67, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74,
	0x6c, 0x61, 0x62, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x24, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x66,
	0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65,
	0x71, 0x1a, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x15, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c,
	0x61, 0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x66,
	0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6c,
	0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x1a,
	0x24, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x53, 0x65,
	0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x53, 0x65,
	0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71,
	0x1a, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x12,
	0x23, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70,
	0x6f, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c,
	0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x64, 0x0a,
	0x14, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61,
	0x62, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74,
	0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65,
	0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x47,
	0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x47,
	0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65,
	0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69,
	0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74,
	0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x66, 0x47,
	0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x67, 0x0a, 0x15, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x47,
	0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x53, 0x65,
	0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x1a,
	0x26, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65,
	0x70, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x13, 0x4d, 0x65, 0x72,
	0x67, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f,
	0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70,
	0x6f, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61,
	0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x16,
	0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x48, 0x69, 0x73, 0x12, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65,
	0x70, 0x6f, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x48, 0x69, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6c, 0x66, 0x47,
	0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x48, 0x69,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x12, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62,
	0x52, 0x65, 0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x1a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65,
	0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x66,
	0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61,
	0x62, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x6d, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74,
	0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x26, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x53, 0x65,
	0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62,
	0x52, 0x65, 0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x79, 0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x66,
	0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x12, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52,
	0x65, 0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x1d,
	0x55, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74,
	0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x2c, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65,
	0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x85, 0x01,
	0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62,
	0x52, 0x65, 0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x73, 0x12, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70,
	0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70,
	0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c,
	0x61, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x61,
	0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61,
	0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x47,
	0x69, 0x74, 0x6c, 0x61, 0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x5b, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x69, 0x74, 0x48, 0x75,
	0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x69, 0x74, 0x48,
	0x75, 0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x55,
	0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x71, 0x1a, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x47, 0x69, 0x74, 0x48,
	0x75, 0x62, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x10, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x1f, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x21,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x52, 0x0a,
	0x0e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x12,
	0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1f,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x4f, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65,
	0x70, 0x6f, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71,
	0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x5b, 0x0a, 0x11, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x47, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x47, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x47, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x55, 0x0a, 0x0f, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65,
	0x70, 0x6f, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52,
	0x65, 0x71, 0x1a, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x12, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x47, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x19, 0x55, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x12, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52,
	0x65, 0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x70, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0d, 0x4c, 0x69,
	0x73, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x4f, 0x72, 0x67, 0x12, 0x1c, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x79, 0x4f,
	0x72, 0x67, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x79,
	0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65,
	0x70, 0x6f, 0x42, 0x79, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x64,
	0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65,
	0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x73, 0x12, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x8b, 0x01, 0x0a, 0x21, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52,
	0x65, 0x70, 0x6f, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65,
	0x70, 0x6f, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62,
	0x52, 0x65, 0x70, 0x6f, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x7f,
	0x0a, 0x1d, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x7c, 0x0a, 0x1c, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70,
	0x6f, 0x45, 0x78, 0x65, 0x63, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12,
	0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6c,
	0x66, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x45, 0x78, 0x65, 0x63, 0x43,
	0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6c, 0x66, 0x47, 0x69,
	0x74, 0x6c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x45, 0x78, 0x65, 0x63, 0x43, 0x69, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x70, 0x0a,
	0x18, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x45, 0x78, 0x65, 0x63, 0x43,
	0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70,
	0x6f, 0x45, 0x78, 0x65, 0x63, 0x43, 0x69, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x45, 0x78, 0x65, 0x63, 0x43, 0x69,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x4f, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x58, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x42, 0x79,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x42, 0x79, 0x55, 0x75,
	0x69, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x42, 0x79, 0x55,
	0x75, 0x69, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x6c, 0x66, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x1d, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c,
	0x66, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x66,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4f,
	0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12,
	0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x61, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x6a, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0x79, 0x55, 0x75, 0x69, 0x64, 0x12, 0x25, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x42, 0x79, 0x55, 0x75, 0x69, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x42, 0x79, 0x55, 0x75, 0x69, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x64,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x66,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x22, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x24, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x20, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x22,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x50, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x6e, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65,
	0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x68, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x62, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x25,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x57, 0x65, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x65,
	0x0a, 0x15, 0x44, 0x65, 0x6c, 0x57, 0x65, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x57, 0x65, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x57, 0x65,
	0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6e, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57,
	0x65, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x65,
	0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x77, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x57, 0x65, 0x62, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x6d, 0x53, 0x44, 0x12, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x65, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x53, 0x44, 0x52, 0x65, 0x71,
	0x1a, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x57, 0x65, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x53, 0x44, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x30,
	0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x6f, 0x70, 0x73, 0x7a, 0x2f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_oneProduct_v1_product_proto_rawDescOnce sync.Once
	file_oneProduct_v1_product_proto_rawDescData = file_oneProduct_v1_product_proto_rawDesc
)

func file_oneProduct_v1_product_proto_rawDescGZIP() []byte {
	file_oneProduct_v1_product_proto_rawDescOnce.Do(func() {
		file_oneProduct_v1_product_proto_rawDescData = protoimpl.X.CompressGZIP(file_oneProduct_v1_product_proto_rawDescData)
	})
	return file_oneProduct_v1_product_proto_rawDescData
}

var file_oneProduct_v1_product_proto_msgTypes = make([]protoimpl.MessageInfo, 381)
var file_oneProduct_v1_product_proto_goTypes = []interface{}{
	(*CreateOrgProductReq)(nil),                               // 0: product.v1.CreateOrgProductReq
	(*CreateOrgProductReply)(nil),                             // 1: product.v1.CreateOrgProductReply
	(*ListOrgProductReq)(nil),                                 // 2: product.v1.ListOrgProductReq
	(*ListOrgProductReply)(nil),                               // 3: product.v1.ListOrgProductReply
	(*DelOrgProductReq)(nil),                                  // 4: product.v1.DelOrgProductReq
	(*DelOrgProductReply)(nil),                                // 5: product.v1.DelOrgProductReply
	(*GetOrgProductReq)(nil),                                  // 6: product.v1.GetOrgProductReq
	(*GetOrgProductReply)(nil),                                // 7: product.v1.GetOrgProductReply
	(*CreateOrgProductGroupReq)(nil),                          // 8: product.v1.CreateOrgProductGroupReq
	(*CreateOrgProductGroupReply)(nil),                        // 9: product.v1.CreateOrgProductGroupReply
	(*ListOrgProductGroupReq)(nil),                            // 10: product.v1.ListOrgProductGroupReq
	(*ListOrgProductGroupReply)(nil),                          // 11: product.v1.ListOrgProductGroupReply
	(*DelOrgProductGroupReq)(nil),                             // 12: product.v1.DelOrgProductGroupReq
	(*DelOrgProductGroupReply)(nil),                           // 13: product.v1.DelOrgProductGroupReply
	(*AddOrgProductGroupMemberReq)(nil),                       // 14: product.v1.AddOrgProductGroupMemberReq
	(*AddOrgProductGroupMemberReply)(nil),                     // 15: product.v1.AddOrgProductGroupMemberReply
	(*ListOrgProductGroupMemberReq)(nil),                      // 16: product.v1.ListOrgProductGroupMemberReq
	(*ListOrgProductGroupMemberReply)(nil),                    // 17: product.v1.ListOrgProductGroupMemberReply
	(*EvictOrgProductGroupMemberReq)(nil),                     // 18: product.v1.EvictOrgProductGroupMemberReq
	(*EvictOrgProductGroupMemberReply)(nil),                   // 19: product.v1.EvictOrgProductGroupMemberReply
	(*LeaveOrgProductGroupMemberReq)(nil),                     // 20: product.v1.LeaveOrgProductGroupMemberReq
	(*LeaveOrgProductGroupMemberReply)(nil),                   // 21: product.v1.LeaveOrgProductGroupMemberReply
	(*AddOrgProductEnvReq)(nil),                               // 22: product.v1.AddOrgProductEnvReq
	(*AddOrgProductEnvReply)(nil),                             // 23: product.v1.AddOrgProductEnvReply
	(*ListOrgProductEnvReq)(nil),                              // 24: product.v1.ListOrgProductEnvReq
	(*ListOrgProductEnvReply)(nil),                            // 25: product.v1.ListOrgProductEnvReply
	(*DelOrgProductEnvReq)(nil),                               // 26: product.v1.DelOrgProductEnvReq
	(*DelOrgProductEnvReply)(nil),                             // 27: product.v1.DelOrgProductEnvReply
	(*GetOrgProductEnvReq)(nil),                               // 28: product.v1.GetOrgProductEnvReq
	(*GetOrgProductEnvReply)(nil),                             // 29: product.v1.GetOrgProductEnvReply
	(*VerifyProductInOrgReq)(nil),                             // 30: product.v1.VerifyProductInOrgReq
	(*VerifyProductInOrgReply)(nil),                           // 31: product.v1.VerifyProductInOrgReply
	(*K8SCluster)(nil),                                        // 32: product.v1.K8SCluster
	(*AddK8SClusterReq)(nil),                                  // 33: product.v1.AddK8SClusterReq
	(*AddK8SClusterReply)(nil),                                // 34: product.v1.AddK8SClusterReply
	(*ExistK8SClusterReq)(nil),                                // 35: product.v1.ExistK8SClusterReq
	(*ExistK8SClusterReply)(nil),                              // 36: product.v1.ExistK8SClusterReply
	(*ListK8SClusterReq)(nil),                                 // 37: product.v1.ListK8SClusterReq
	(*ListK8SClusterReply)(nil),                               // 38: product.v1.ListK8SClusterReply
	(*DelK8SClusterReq)(nil),                                  // 39: product.v1.DelK8SClusterReq
	(*DelK8SClusterReply)(nil),                                // 40: product.v1.DelK8SClusterReply
	(*AddK8SClusterEdgeReq)(nil),                              // 41: product.v1.AddK8SClusterEdgeReq
	(*AddK8SClusterEdgeReply)(nil),                            // 42: product.v1.AddK8SClusterEdgeReply
	(*GetK8SClusterEdgeReq)(nil),                              // 43: product.v1.GetK8SClusterEdgeReq
	(*GetK8SClusterEdgeReply)(nil),                            // 44: product.v1.GetK8SClusterEdgeReply
	(*DelK8SClusterEdgeReq)(nil),                              // 45: product.v1.DelK8SClusterEdgeReq
	(*DelK8SClusterEdgeReply)(nil),                            // 46: product.v1.DelK8SClusterEdgeReply
	(*GetK8SClusterNodeReq)(nil),                              // 47: product.v1.GetK8SClusterNodeReq
	(*GetK8SClusterNodeReply)(nil),                            // 48: product.v1.GetK8SClusterNodeReply
	(*ListK8SClusterNodeReq)(nil),                             // 49: product.v1.ListK8SClusterNodeReq
	(*ListK8SClusterNodeReply)(nil),                           // 50: product.v1.ListK8SClusterNodeReply
	(*ListK8SPodReq)(nil),                                     // 51: product.v1.ListK8SPodReq
	(*ListK8SPodReply)(nil),                                   // 52: product.v1.ListK8SPodReply
	(*EvictK8SPodReq)(nil),                                    // 53: product.v1.EvictK8SPodReq
	(*EvictK8SPodReply)(nil),                                  // 54: product.v1.EvictK8SPodReply
	(*GetK8SPodReq)(nil),                                      // 55: product.v1.GetK8SPodReq
	(*GetK8SPodReply)(nil),                                    // 56: product.v1.GetK8SPodReply
	(*DelK8SPodReq)(nil),                                      // 57: product.v1.DelK8SPodReq
	(*DelK8SPodReply)(nil),                                    // 58: product.v1.DelK8SPodReply
	(*CleanEvictK8SPodReq)(nil),                               // 59: product.v1.CleanEvictK8SPodReq
	(*CleanEvictK8SPodReply)(nil),                             // 60: product.v1.CleanEvictK8SPodReply
	(*SearchK8SPodReq)(nil),                                   // 61: product.v1.SearchK8SPodReq
	(*SearchK8SPodReply)(nil),                                 // 62: product.v1.SearchK8SPodReply
	(*ConfigMap)(nil),                                         // 63: product.v1.ConfigMap
	(*CreateK8SClusterConfigMapReq)(nil),                      // 64: product.v1.CreateK8SClusterConfigMapReq
	(*CreateK8SClusterConfigMapReply)(nil),                    // 65: product.v1.CreateK8SClusterConfigMapReply
	(*ListK8SClusterConfigMapReq)(nil),                        // 66: product.v1.ListK8SClusterConfigMapReq
	(*ListK8SClusterConfigMapReply)(nil),                      // 67: product.v1.ListK8SClusterConfigMapReply
	(*GetK8SClusterConfigMapReq)(nil),                         // 68: product.v1.GetK8SClusterConfigMapReq
	(*GetK8SClusterConfigMapReply)(nil),                       // 69: product.v1.GetK8SClusterConfigMapReply
	(*UpdateK8SClusterConfigMapReq)(nil),                      // 70: product.v1.UpdateK8SClusterConfigMapReq
	(*UpdateK8SClusterConfigMapReply)(nil),                    // 71: product.v1.UpdateK8SClusterConfigMapReply
	(*DelK8SClusterConfigMapReq)(nil),                         // 72: product.v1.DelK8SClusterConfigMapReq
	(*DelK8SClusterConfigMapReply)(nil),                       // 73: product.v1.DelK8SClusterConfigMapReply
	(*ListSecretReq)(nil),                                     // 74: product.v1.ListSecretReq
	(*ListSecretReply)(nil),                                   // 75: product.v1.ListSecretReply
	(*GetSecretReq)(nil),                                      // 76: product.v1.GetSecretReq
	(*GetSecretReply)(nil),                                    // 77: product.v1.GetSecretReply
	(*DelSecretReq)(nil),                                      // 78: product.v1.DelSecretReq
	(*DelSecretReply)(nil),                                    // 79: product.v1.DelSecretReply
	(*CreateDockerSecretReq)(nil),                             // 80: product.v1.CreateDockerSecretReq
	(*CreateDockerSecretReply)(nil),                           // 81: product.v1.CreateDockerSecretReply
	(*UpdateDockerSecretReq)(nil),                             // 82: product.v1.UpdateDockerSecretReq
	(*UpdateDockerSecretReply)(nil),                           // 83: product.v1.UpdateDockerSecretReply
	(*CreateTlsSecretReq)(nil),                                // 84: product.v1.CreateTlsSecretReq
	(*CreateTlsSecretReply)(nil),                              // 85: product.v1.CreateTlsSecretReply
	(*UpdateTlsSecretReq)(nil),                                // 86: product.v1.UpdateTlsSecretReq
	(*UpdateTlsSecretReply)(nil),                              // 87: product.v1.UpdateTlsSecretReply
	(*CreateOpaqueSecretReq)(nil),                             // 88: product.v1.CreateOpaqueSecretReq
	(*CreateOpaqueSecretReply)(nil),                           // 89: product.v1.CreateOpaqueSecretReply
	(*UpdateOpaqueSecretReq)(nil),                             // 90: product.v1.UpdateOpaqueSecretReq
	(*UpdateOpaqueSecretReply)(nil),                           // 91: product.v1.UpdateOpaqueSecretReply
	(*CreateSSHAuthSecretReq)(nil),                            // 92: product.v1.CreateSSHAuthSecretReq
	(*CreateSSHAuthSecretReply)(nil),                          // 93: product.v1.CreateSSHAuthSecretReply
	(*UpdateSSHAuthSecretReq)(nil),                            // 94: product.v1.UpdateSSHAuthSecretReq
	(*UpdateSSHAuthSecretReply)(nil),                          // 95: product.v1.UpdateSSHAuthSecretReply
	(*CreateBasicAuthSecretReq)(nil),                          // 96: product.v1.CreateBasicAuthSecretReq
	(*CreateBasicAuthSecretReply)(nil),                        // 97: product.v1.CreateBasicAuthSecretReply
	(*UpdateBasicAuthSecretReq)(nil),                          // 98: product.v1.UpdateBasicAuthSecretReq
	(*UpdateBasicAuthSecretReply)(nil),                        // 99: product.v1.UpdateBasicAuthSecretReply
	(*ListK8SClusterNameSpaceReq)(nil),                        // 100: product.v1.ListK8SClusterNameSpaceReq
	(*ListK8SClusterNameSpaceReply)(nil),                      // 101: product.v1.ListK8SClusterNameSpaceReply
	(*DelK8SClusterNameSpaceReq)(nil),                         // 102: product.v1.DelK8SClusterNameSpaceReq
	(*DelK8SClusterNameSpaceReply)(nil),                       // 103: product.v1.DelK8SClusterNameSpaceReply
	(*CreateK8SClusterNameSpaceReq)(nil),                      // 104: product.v1.CreateK8SClusterNameSpaceReq
	(*CreateK8SClusterNameSpaceReply)(nil),                    // 105: product.v1.CreateK8SClusterNameSpaceReply
	(*ListK8SClusterDeploymentReq)(nil),                       // 106: product.v1.ListK8SClusterDeploymentReq
	(*ListK8SClusterDeploymentReply)(nil),                     // 107: product.v1.ListK8SClusterDeploymentReply
	(*GetK8SClusterDeploymentReq)(nil),                        // 108: product.v1.GetK8SClusterDeploymentReq
	(*GetK8SClusterDeploymentReply)(nil),                      // 109: product.v1.GetK8SClusterDeploymentReply
	(*UpdateK8SClusterDeploymentReq)(nil),                     // 110: product.v1.UpdateK8SClusterDeploymentReq
	(*UpdateK8SClusterDeploymentReply)(nil),                   // 111: product.v1.UpdateK8SClusterDeploymentReply
	(*DelK8SClusterDeploymentReq)(nil),                        // 112: product.v1.DelK8SClusterDeploymentReq
	(*DelK8SClusterDeploymentReply)(nil),                      // 113: product.v1.DelK8SClusterDeploymentReply
	(*UpdateK8SClusterDeploymentReplicaSetReq)(nil),           // 114: product.v1.UpdateK8SClusterDeploymentReplicaSetReq
	(*UpdateK8SClusterDeploymentReplicaSetReply)(nil),         // 115: product.v1.UpdateK8SClusterDeploymentReplicaSetReply
	(*ServicePort)(nil),                                       // 116: product.v1.ServicePort
	(*CreateK8SServiceReq)(nil),                               // 117: product.v1.CreateK8SServiceReq
	(*CreateK8SServiceReply)(nil),                             // 118: product.v1.CreateK8SServiceReply
	(*ListK8SServiceReq)(nil),                                 // 119: product.v1.ListK8SServiceReq
	(*ListK8SServiceReply)(nil),                               // 120: product.v1.ListK8SServiceReply
	(*GetK8SServiceReq)(nil),                                  // 121: product.v1.GetK8SServiceReq
	(*GetK8SServiceReply)(nil),                                // 122: product.v1.GetK8SServiceReply
	(*DelK8SServiceReq)(nil),                                  // 123: product.v1.DelK8SServiceReq
	(*DelK8SServiceReply)(nil),                                // 124: product.v1.DelK8SServiceReply
	(*CreateK8SIngressReq)(nil),                               // 125: product.v1.CreateK8SIngressReq
	(*CreateK8SIngressReply)(nil),                             // 126: product.v1.CreateK8SIngressReply
	(*ListK8SIngressReq)(nil),                                 // 127: product.v1.ListK8SIngressReq
	(*ListK8SIngressReply)(nil),                               // 128: product.v1.ListK8SIngressReply
	(*GetK8SIngressReq)(nil),                                  // 129: product.v1.GetK8SIngressReq
	(*GetK8SIngressReply)(nil),                                // 130: product.v1.GetK8SIngressReply
	(*DelK8SIngressReq)(nil),                                  // 131: product.v1.DelK8SIngressReq
	(*DelK8SIngressReply)(nil),                                // 132: product.v1.DelK8SIngressReply
	(*UpdateK8SIngressReq)(nil),                               // 133: product.v1.UpdateK8SIngressReq
	(*UpdateK8SIngressReply)(nil),                             // 134: product.v1.UpdateK8SIngressReply
	(*Program)(nil),                                           // 135: product.v1.Program
	(*CreateProgramReq)(nil),                                  // 136: product.v1.CreateProgramReq
	(*CreateProgramReply)(nil),                                // 137: product.v1.CreateProgramReply
	(*GetProgramByUuidReq)(nil),                               // 138: product.v1.GetProgramByUuidReq
	(*GetProgramByUuidReply)(nil),                             // 139: product.v1.GetProgramByUuidReply
	(*GetSelfProgramReq)(nil),                                 // 140: product.v1.GetSelfProgramReq
	(*GetSelfProgramReply)(nil),                               // 141: product.v1.GetSelfProgramReply
	(*SearchProgramReq)(nil),                                  // 142: product.v1.SearchProgramReq
	(*SearchProgramReply)(nil),                                // 143: product.v1.SearchProgramReply
	(*ProgramMarket)(nil),                                     // 144: product.v1.ProgramMarket
	(*CreateProgramMarketReq)(nil),                            // 145: product.v1.CreateProgramMarketReq
	(*CreateProgramMarketReply)(nil),                          // 146: product.v1.CreateProgramMarketReply
	(*GetProgramMarketByUuidReq)(nil),                         // 147: product.v1.GetProgramMarketByUuidReq
	(*GetProgramMarketByUuidReply)(nil),                       // 148: product.v1.GetProgramMarketByUuidReply
	(*GetSelfProgramMarketReq)(nil),                           // 149: product.v1.GetSelfProgramMarketReq
	(*GetSelfProgramMarketReply)(nil),                         // 150: product.v1.GetSelfProgramMarketReply
	(*SearchProgramMarketReq)(nil),                            // 151: product.v1.SearchProgramMarketReq
	(*SearchProgramMarketReply)(nil),                          // 152: product.v1.SearchProgramMarketReply
	(*Release)(nil),                                           // 153: product.v1.Release
	(*CreateSelfGitlabPlatformReq)(nil),                       // 154: product.v1.CreateSelfGitlabPlatformReq
	(*CreateSelfGitlabPlatformReply)(nil),                     // 155: product.v1.CreateSelfGitlabPlatformReply
	(*ListSelfGitlabPlatformReq)(nil),                         // 156: product.v1.ListSelfGitlabPlatformReq
	(*ListSelfGitlabPlatformReply)(nil),                       // 157: product.v1.ListSelfGitlabPlatformReply
	(*DelSelfGitlabPlatformReq)(nil),                          // 158: product.v1.DelSelfGitlabPlatformReq
	(*DelSelfGitlabPlatformReply)(nil),                        // 159: product.v1.DelSelfGitlabPlatformReply
	(*CreateSelfGitlabTokenReq)(nil),                          // 160: product.v1.CreateSelfGitlabTokenReq
	(*CreateSelfGitlabTokenReply)(nil),                        // 161: product.v1.CreateSelfGitlabTokenReply
	(*ListSelfGitlabTokenReq)(nil),                            // 162: product.v1.ListSelfGitlabTokenReq
	(*ListSelfGitlabTokenReply)(nil),                          // 163: product.v1.ListSelfGitlabTokenReply
	(*DelSelfGitlabTokenReq)(nil),                             // 164: product.v1.DelSelfGitlabTokenReq
	(*DelSelfGitlabTokenReply)(nil),                           // 165: product.v1.DelSelfGitlabTokenReply
	(*CreateSelfGitlabGroupReq)(nil),                          // 166: product.v1.CreateSelfGitlabGroupReq
	(*CreateSelfGitlabGroupReply)(nil),                        // 167: product.v1.CreateSelfGitlabGroupReply
	(*ListSelfGitlabGroupReq)(nil),                            // 168: product.v1.ListSelfGitlabGroupReq
	(*ListSelfGitlabGroupReply)(nil),                          // 169: product.v1.ListSelfGitlabGroupReply
	(*ImportSelfGitlabRepoReq)(nil),                           // 170: product.v1.ImportSelfGitlabRepoReq
	(*ImportSelfGitlabRepoReply)(nil),                         // 171: product.v1.ImportSelfGitlabRepoReply
	(*CreateSelfGitlabRepoReq)(nil),                           // 172: product.v1.CreateSelfGitlabRepoReq
	(*CreateSelfGitlabRepoReply)(nil),                         // 173: product.v1.CreateSelfGitlabRepoReply
	(*ListSelfGitlabRepoReq)(nil),                             // 174: product.v1.ListSelfGitlabRepoReq
	(*ListSelfGitlabRepoReply)(nil),                           // 175: product.v1.ListSelfGitlabRepoReply
	(*DelSelfGitlabRepoReq)(nil),                              // 176: product.v1.DelSelfGitlabRepoReq
	(*DelSelfGitlabRepoReply)(nil),                            // 177: product.v1.DelSelfGitlabRepoReply
	(*ArchiveSelfGitlabRepoReq)(nil),                          // 178: product.v1.ArchiveSelfGitlabRepoReq
	(*ArchiveSelfGitlabRepoReply)(nil),                        // 179: product.v1.ArchiveSelfGitlabRepoReply
	(*MergeSelfGitlabRepoReq)(nil),                            // 180: product.v1.MergeSelfGitlabRepoReq
	(*MergeSelfGitlabRepoReply)(nil),                          // 181: product.v1.MergeSelfGitlabRepoReply
	(*SelfGitlabRepoMergeHisReq)(nil),                         // 182: product.v1.SelfGitlabRepoMergeHisReq
	(*SelfGitlabRepoMergeHisReply)(nil),                       // 183: product.v1.SelfGitlabRepoMergeHisReply
	(*CreateSelfGitlabRepoBranchReq)(nil),                     // 184: product.v1.CreateSelfGitlabRepoBranchReq
	(*CreateSelfGitlabRepoBranchReply)(nil),                   // 185: product.v1.CreateSelfGitlabRepoBranchReply
	(*ListSelfGitlabRepoBranchReq)(nil),                       // 186: product.v1.ListSelfGitlabRepoBranchReq
	(*ListSelfGitlabRepoBranchReply)(nil),                     // 187: product.v1.ListSelfGitlabRepoBranchReply
	(*DelSelfGitlabRepoBranchReq)(nil),                        // 188: product.v1.DelSelfGitlabRepoBranchReq
	(*DelSelfGitlabRepoBranchReply)(nil),                      // 189: product.v1.DelSelfGitlabRepoBranchReply
	(*ProtectSelfGitlabRepoBranchReq)(nil),                    // 190: product.v1.ProtectSelfGitlabRepoBranchReq
	(*ProtectSelfGitlabRepoBranchReply)(nil),                  // 191: product.v1.ProtectSelfGitlabRepoBranchReply
	(*UnprotectSelfGitlabRepoBranchReq)(nil),                  // 192: product.v1.UnprotectSelfGitlabRepoBranchReq
	(*UnprotectSelfGitlabRepoBranchReply)(nil),                // 193: product.v1.UnprotectSelfGitlabRepoBranchReply
	(*ListSelfGitlabRepoBranchCommitsReq)(nil),                // 194: product.v1.ListSelfGitlabRepoBranchCommitsReq
	(*ListSelfGitlabRepoBranchCommitsReply)(nil),              // 195: product.v1.ListSelfGitlabRepoBranchCommitsReply
	(*CreateGitHubTokenReq)(nil),                              // 196: product.v1.CreateGitHubTokenReq
	(*CreateGitHubTokenReply)(nil),                            // 197: product.v1.CreateGitHubTokenReply
	(*ListGitHubTokenReq)(nil),                                // 198: product.v1.ListGitHubTokenReq
	(*ListGitHubTokenReply)(nil),                              // 199: product.v1.ListGitHubTokenReply
	(*DelGitHubTokenReq)(nil),                                 // 200: product.v1.DelGitHubTokenReq
	(*DelGitHubTokenReply)(nil),                               // 201: product.v1.DelGitHubTokenReply
	(*ImportGithubRepoReq)(nil),                               // 202: product.v1.ImportGithubRepoReq
	(*ImportGithubRepoReply)(nil),                             // 203: product.v1.ImportGithubRepoReply
	(*CreateGithubRepoReq)(nil),                               // 204: product.v1.CreateGithubRepoReq
	(*CreateGithubRepoReply)(nil),                             // 205: product.v1.CreateGithubRepoReply
	(*ListGithubRepoReq)(nil),                                 // 206: product.v1.ListGithubRepoReq
	(*ListGithubRepoReply)(nil),                               // 207: product.v1.ListGithubRepoReply
	(*GetGithubRepoReq)(nil),                                  // 208: product.v1.GetGithubRepoReq
	(*GetGithubRepoReply)(nil),                                // 209: product.v1.GetGithubRepoReply
	(*DelGithubRepoReq)(nil),                                  // 210: product.v1.DelGithubRepoReq
	(*DelGithubRepoReply)(nil),                                // 211: product.v1.DelGithubRepoReply
	(*ArchiveGithubRepoReq)(nil),                              // 212: product.v1.ArchiveGithubRepoReq
	(*ArchiveGithubRepoReply)(nil),                            // 213: product.v1.ArchiveGithubRepoReply
	(*MergeGithubRepoReq)(nil),                                // 214: product.v1.MergeGithubRepoReq
	(*MergeGithubRepoReply)(nil),                              // 215: product.v1.MergeGithubRepoReply
	(*ListGithubRepoBranchReq)(nil),                           // 216: product.v1.ListGithubRepoBranchReq
	(*ListGithubRepoBranchReply)(nil),                         // 217: product.v1.ListGithubRepoBranchReply
	(*ListGithubRepoBranchCommitsReq)(nil),                    // 218: product.v1.ListGithubRepoBranchCommitsReq
	(*ListGithubRepoBranchCommitsReply)(nil),                  // 219: product.v1.ListGithubRepoBranchCommitsReply
	(*ProtectGithubRepoBranchReq)(nil),                        // 220: product.v1.ProtectGithubRepoBranchReq
	(*ProtectGithubRepoBranchReply)(nil),                      // 221: product.v1.ProtectGithubRepoBranchReply
	(*UnprotectGithubRepoBranchReq)(nil),                      // 222: product.v1.UnprotectGithubRepoBranchReq
	(*UnprotectGithubRepoBranchReply)(nil),                    // 223: product.v1.UnprotectGithubRepoBranchReply
	(*ListGithubOrgReq)(nil),                                  // 224: product.v1.ListGithubOrgReq
	(*ListGithubOrgReply)(nil),                                // 225: product.v1.ListGithubOrgReply
	(*ListGithubRepoByOrgReq)(nil),                            // 226: product.v1.ListGithubRepoByOrgReq
	(*ListGithubRepoByOrgReply)(nil),                          // 227: product.v1.ListGithubRepoByOrgReply
	(*GetGithubUserReq)(nil),                                  // 228: product.v1.GetGithubUserReq
	(*GetGithubUserReply)(nil),                                // 229: product.v1.GetGithubUserReply
	(*CreateServiceUrlReq)(nil),                               // 230: product.v1.CreateServiceUrlReq
	(*CreateServiceUrlReply)(nil),                             // 231: product.v1.CreateServiceUrlReply
	(*ListServiceUrlReq)(nil),                                 // 232: product.v1.ListServiceUrlReq
	(*ListServiceUrlReply)(nil),                               // 233: product.v1.ListServiceUrlReply
	(*DelServiceUrlReq)(nil),                                  // 234: product.v1.DelServiceUrlReq
	(*DelServiceUrlReply)(nil),                                // 235: product.v1.DelServiceUrlReply
	(*AddContainerRegistryReq)(nil),                           // 236: product.v1.AddContainerRegistryReq
	(*AddContainerRegistryReply)(nil),                         // 237: product.v1.AddContainerRegistryReply
	(*ListContainerRegistryReq)(nil),                          // 238: product.v1.ListContainerRegistryReq
	(*ListContainerRegistryReply)(nil),                        // 239: product.v1.ListContainerRegistryReply
	(*DelContainerRegistryReq)(nil),                           // 240: product.v1.DelContainerRegistryReq
	(*DelContainerRegistryReply)(nil),                         // 241: product.v1.DelContainerRegistryReply
	(*GetContainerRegistryReq)(nil),                           // 242: product.v1.GetContainerRegistryReq
	(*GetContainerRegistryReply)(nil),                         // 243: product.v1.GetContainerRegistryReply
	(*AddPublicContainerImageReq)(nil),                        // 244: product.v1.AddPublicContainerImageReq
	(*AddPublicContainerImageReply)(nil),                      // 245: product.v1.AddPublicContainerImageReply
	(*ListPublicContainerImageReq)(nil),                       // 246: product.v1.ListPublicContainerImageReq
	(*ListPublicContainerImageReply)(nil),                     // 247: product.v1.ListPublicContainerImageReply
	(*DelPublicContainerImageReq)(nil),                        // 248: product.v1.DelPublicContainerImageReq
	(*DelPublicContainerImageReply)(nil),                      // 249: product.v1.DelPublicContainerImageReply
	(*CreateReliabilityReq)(nil),                              // 250: product.v1.CreateReliabilityReq
	(*CreateReliabilityReply)(nil),                            // 251: product.v1.CreateReliabilityReply
	(*GetReliabilityReq)(nil),                                 // 252: product.v1.GetReliabilityReq
	(*GetReliabilityReply)(nil),                               // 253: product.v1.GetReliabilityReply
	(*CreateWebServiceResourceReq)(nil),                       // 254: product.v1.CreateWebServiceResourceReq
	(*CreateWebServiceResourceReply)(nil),                     // 255: product.v1.CreateWebServiceResourceReply
	(*ListWebServiceResourceReq)(nil),                         // 256: product.v1.ListWebServiceResourceReq
	(*ListWebServiceResourceReply)(nil),                       // 257: product.v1.ListWebServiceResourceReply
	(*DelWebServiceResourceReq)(nil),                          // 258: product.v1.DelWebServiceResourceReq
	(*DelWebServiceResourceReply)(nil),                        // 259: product.v1.DelWebServiceResourceReply
	(*UpdateWebServiceResourceReq)(nil),                       // 260: product.v1.UpdateWebServiceResourceReq
	(*UpdateWebServiceResourceReply)(nil),                     // 261: product.v1.UpdateWebServiceResourceReply
	(*GetWebServiceResourcePromSDReq)(nil),                    // 262: product.v1.GetWebServiceResourcePromSDReq
	(*GetWebServiceResourcePromSDReply)(nil),                  // 263: product.v1.GetWebServiceResourcePromSDReply
	(*SelfGitlabRepoBuildContainerImageReq)(nil),              // 264: product.v1.SelfGitlabRepoBuildContainerImageReq
	(*SelfGitlabRepoBuildContainerImageReply)(nil),            // 265: product.v1.SelfGitlabRepoBuildContainerImageReply
	(*GithubRepoBuildContainerImageReq)(nil),                  // 266: product.v1.GithubRepoBuildContainerImageReq
	(*GithubRepoBuildContainerImageReply)(nil),                // 267: product.v1.GithubRepoBuildContainerImageReply
	(*SelfGitlabRepoExecCiTemplateReq)(nil),                   // 268: product.v1.SelfGitlabRepoExecCiTemplateReq
	(*SelfGitlabRepoExecCiTemplateReply)(nil),                 // 269: product.v1.SelfGitlabRepoExecCiTemplateReply
	(*GithubRepoExecCiTemplateReq)(nil),                       // 270: product.v1.GithubRepoExecCiTemplateReq
	(*GithubRepoExecCiTemplateReply)(nil),                     // 271: product.v1.GithubRepoExecCiTemplateReply
	(*ListOrgProductReply_Product)(nil),                       // 272: product.v1.ListOrgProductReply.Product
	(*ListOrgProductGroupMemberReply_ProductGroupMember)(nil), // 273: product.v1.ListOrgProductGroupMemberReply.ProductGroupMember
	(*ListOrgProductEnvReply_Env)(nil),                        // 274: product.v1.ListOrgProductEnvReply.Env
	nil,                                                       // 275: product.v1.GetK8SClusterNodeReply.LabelsEntry
	nil,                                                       // 276: product.v1.GetK8SClusterNodeReply.AnnotationsEntry
	(*GetK8SClusterNodeReply_Capacity)(nil),                   // 277: product.v1.GetK8SClusterNodeReply.Capacity
	(*GetK8SClusterNodeReply_Allocatable)(nil),                // 278: product.v1.GetK8SClusterNodeReply.Allocatable
	(*ListK8SClusterNodeReply_Node)(nil),                      // 279: product.v1.ListK8SClusterNodeReply.Node
	nil,                                                       // 280: product.v1.ListK8SClusterNodeReply.Node.LabelsEntry
	nil,                                                       // 281: product.v1.ListK8SClusterNodeReply.Node.AnnotationsEntry
	(*ListK8SClusterNodeReply_Node_Capacity)(nil),             // 282: product.v1.ListK8SClusterNodeReply.Node.Capacity
	(*ListK8SClusterNodeReply_Node_Allocatable)(nil),          // 283: product.v1.ListK8SClusterNodeReply.Node.Allocatable
	(*ListK8SPodReply_Pod)(nil),                               // 284: product.v1.ListK8SPodReply.Pod
	nil,                                                       // 285: product.v1.ListK8SPodReply.Pod.LabelsEntry
	nil,                                                       // 286: product.v1.ListK8SPodReply.Pod.EnvsEntry
	(*ListK8SPodReply_Pod_Container)(nil),                     // 287: product.v1.ListK8SPodReply.Pod.Container
	nil,                                                       // 288: product.v1.GetK8SPodReply.LabelsEntry
	nil,                                                       // 289: product.v1.GetK8SPodReply.EnvsEntry
	(*GetK8SPodReply_Container)(nil),                          // 290: product.v1.GetK8SPodReply.Container
	(*SearchK8SPodReply_Pod)(nil),                             // 291: product.v1.SearchK8SPodReply.Pod
	nil,                                                       // 292: product.v1.SearchK8SPodReply.Pod.LabelsEntry
	nil,                                                       // 293: product.v1.SearchK8SPodReply.Pod.EnvsEntry
	(*SearchK8SPodReply_Pod_Container)(nil),                   // 294: product.v1.SearchK8SPodReply.Pod.Container
	nil,                                                       // 295: product.v1.ConfigMap.DataEntry
	nil,                                                       // 296: product.v1.CreateK8SClusterConfigMapReq.DataEntry
	nil,                                                       // 297: product.v1.GetK8SClusterConfigMapReply.DataEntry
	nil,                                                       // 298: product.v1.UpdateK8SClusterConfigMapReq.DataEntry
	(*ListSecretReply_Secret)(nil),                            // 299: product.v1.ListSecretReply.Secret
	nil,                                                       // 300: product.v1.ListSecretReply.Secret.AnnotationsEntry
	nil,                                                       // 301: product.v1.ListSecretReply.Secret.LabelsEntry
	nil,                                                       // 302: product.v1.ListSecretReply.Secret.StringDataEntry
	nil,                                                       // 303: product.v1.ListSecretReply.Secret.DataEntry
	nil,                                                       // 304: product.v1.GetSecretReply.AnnotationsEntry
	nil,                                                       // 305: product.v1.GetSecretReply.LabelsEntry
	nil,                                                       // 306: product.v1.GetSecretReply.StringDataEntry
	nil,                                                       // 307: product.v1.GetSecretReply.DataEntry
	nil,                                                       // 308: product.v1.CreateDockerSecretReq.AnnotationsEntry
	nil,                                                       // 309: product.v1.CreateDockerSecretReq.LabelsEntry
	nil,                                                       // 310: product.v1.UpdateDockerSecretReq.AnnotationsEntry
	nil,                                                       // 311: product.v1.UpdateDockerSecretReq.LabelsEntry
	nil,                                                       // 312: product.v1.CreateTlsSecretReq.AnnotationsEntry
	nil,                                                       // 313: product.v1.CreateTlsSecretReq.LabelsEntry
	nil,                                                       // 314: product.v1.UpdateTlsSecretReq.AnnotationsEntry
	nil,                                                       // 315: product.v1.UpdateTlsSecretReq.LabelsEntry
	nil,                                                       // 316: product.v1.CreateOpaqueSecretReq.DataEntry
	nil,                                                       // 317: product.v1.CreateOpaqueSecretReq.AnnotationsEntry
	nil,                                                       // 318: product.v1.CreateOpaqueSecretReq.LabelsEntry
	nil,                                                       // 319: product.v1.UpdateOpaqueSecretReq.DataEntry
	nil,                                                       // 320: product.v1.UpdateOpaqueSecretReq.AnnotationsEntry
	nil,                                                       // 321: product.v1.UpdateOpaqueSecretReq.LabelsEntry
	nil,                                                       // 322: product.v1.CreateSSHAuthSecretReq.AnnotationsEntry
	nil,                                                       // 323: product.v1.CreateSSHAuthSecretReq.LabelsEntry
	nil,                                                       // 324: product.v1.UpdateSSHAuthSecretReq.AnnotationsEntry
	nil,                                                       // 325: product.v1.UpdateSSHAuthSecretReq.LabelsEntry
	nil,                                                       // 326: product.v1.CreateBasicAuthSecretReq.AnnotationsEntry
	nil,                                                       // 327: product.v1.CreateBasicAuthSecretReq.LabelsEntry
	nil,                                                       // 328: product.v1.UpdateBasicAuthSecretReq.AnnotationsEntry
	nil,                                                       // 329: product.v1.UpdateBasicAuthSecretReq.LabelsEntry
	(*ListK8SClusterNameSpaceReply_NameSpace)(nil),            // 330: product.v1.ListK8SClusterNameSpaceReply.NameSpace
	(*ListK8SClusterDeploymentReply_DeploymentStatus)(nil),    // 331: product.v1.ListK8SClusterDeploymentReply.DeploymentStatus
	nil,                                      // 332: product.v1.CreateK8SServiceReq.SelectorEntry
	nil,                                      // 333: product.v1.CreateK8SServiceReq.AnnotationsEntry
	(*ListK8SServiceReply_Service)(nil),      // 334: product.v1.ListK8SServiceReply.Service
	nil,                                      // 335: product.v1.ListK8SServiceReply.Service.AnnotationsEntry
	nil,                                      // 336: product.v1.ListK8SServiceReply.Service.LabelsEntry
	nil,                                      // 337: product.v1.GetK8SServiceReply.LabelsEntry
	nil,                                      // 338: product.v1.GetK8SServiceReply.AnnotationsEntry
	nil,                                      // 339: product.v1.CreateK8SIngressReq.AnnotationsEntry
	nil,                                      // 340: product.v1.CreateK8SIngressReq.LabelsEntry
	nil,                                      // 341: product.v1.CreateK8SIngressReq.ServiceEntry
	(*CreateK8SIngressReq_Service)(nil),      // 342: product.v1.CreateK8SIngressReq.Service
	nil,                                      // 343: product.v1.CreateK8SIngressReq.Service.PathEntry
	(*CreateK8SIngressReq_Service_Path)(nil), // 344: product.v1.CreateK8SIngressReq.Service.Path
	(*ListK8SIngressReply_Ingress)(nil),      // 345: product.v1.ListK8SIngressReply.Ingress
	nil,                                      // 346: product.v1.ListK8SIngressReply.Ingress.LabelsEntry
	nil,                                      // 347: product.v1.ListK8SIngressReply.Ingress.ServiceEntry
	(*ListK8SIngressReply_Ingress_IngressService)(nil), // 348: product.v1.ListK8SIngressReply.Ingress.IngressService
	nil, // 349: product.v1.ListK8SIngressReply.Ingress.IngressService.PathEntry
	(*ListK8SIngressReply_Ingress_IngressService_IngressServicePath)(nil), // 350: product.v1.ListK8SIngressReply.Ingress.IngressService.IngressServicePath
	nil, // 351: product.v1.GetK8SIngressReply.LabelsEntry
	nil, // 352: product.v1.GetK8SIngressReply.ServiceEntry
	(*GetK8SIngressReply_IngressService)(nil), // 353: product.v1.GetK8SIngressReply.IngressService
	nil, // 354: product.v1.GetK8SIngressReply.IngressService.PathEntry
	(*GetK8SIngressReply_IngressService_IngressServicePath)(nil), // 355: product.v1.GetK8SIngressReply.IngressService.IngressServicePath
	nil,                                      // 356: product.v1.UpdateK8SIngressReq.AnnotationsEntry
	nil,                                      // 357: product.v1.UpdateK8SIngressReq.LabelsEntry
	nil,                                      // 358: product.v1.UpdateK8SIngressReq.ServiceEntry
	(*UpdateK8SIngressReq_Service)(nil),      // 359: product.v1.UpdateK8SIngressReq.Service
	nil,                                      // 360: product.v1.UpdateK8SIngressReq.Service.PathEntry
	(*UpdateK8SIngressReq_Service_Path)(nil), // 361: product.v1.UpdateK8SIngressReq.Service.Path
	(*ListSelfGitlabPlatformReply_GitlabPlatform)(nil),          // 362: product.v1.ListSelfGitlabPlatformReply.GitlabPlatform
	(*ListSelfGitlabTokenReply_GitlabToken)(nil),                // 363: product.v1.ListSelfGitlabTokenReply.GitlabToken
	(*ListSelfGitlabGroupReply_Group)(nil),                      // 364: product.v1.ListSelfGitlabGroupReply.Group
	(*ListSelfGitlabRepoReply_GitlabRepo)(nil),                  // 365: product.v1.ListSelfGitlabRepoReply.GitlabRepo
	(*SelfGitlabRepoMergeHisReply_Merge)(nil),                   // 366: product.v1.SelfGitlabRepoMergeHisReply.Merge
	(*ListSelfGitlabRepoBranchReply_Branch)(nil),                // 367: product.v1.ListSelfGitlabRepoBranchReply.Branch
	(*ListSelfGitlabRepoBranchCommitsReply_Commit)(nil),         // 368: product.v1.ListSelfGitlabRepoBranchCommitsReply.Commit
	(*ListGitHubTokenReply_GithubToken)(nil),                    // 369: product.v1.ListGitHubTokenReply.GithubToken
	(*ListGithubRepoReply_Repo)(nil),                            // 370: product.v1.ListGithubRepoReply.Repo
	(*ListGithubRepoBranchReply_Branch)(nil),                    // 371: product.v1.ListGithubRepoBranchReply.Branch
	(*ListGithubRepoBranchCommitsReply_Commit)(nil),             // 372: product.v1.ListGithubRepoBranchCommitsReply.Commit
	(*ListGithubOrgReply_Org)(nil),                              // 373: product.v1.ListGithubOrgReply.Org
	(*ListGithubRepoByOrgReply_RepoOrg)(nil),                    // 374: product.v1.ListGithubRepoByOrgReply.RepoOrg
	(*ListServiceUrlReply_ServiceUrl)(nil),                      // 375: product.v1.ListServiceUrlReply.ServiceUrl
	(*ListContainerRegistryReply_ContainerRegistry)(nil),        // 376: product.v1.ListContainerRegistryReply.ContainerRegistry
	(*ListPublicContainerImageReply_ContainerImage)(nil),        // 377: product.v1.ListPublicContainerImageReply.ContainerImage
	(*GetReliabilityReply_Reliability)(nil),                     // 378: product.v1.GetReliabilityReply.Reliability
	(*ListWebServiceResourceReply_WebServiceResource)(nil),      // 379: product.v1.ListWebServiceResourceReply.WebServiceResource
	(*GetWebServiceResourcePromSDReply_WebServiceResource)(nil), // 380: product.v1.GetWebServiceResourcePromSDReply.WebServiceResource
}
var file_oneProduct_v1_product_proto_depIdxs = []int32{
	272, // 0: product.v1.ListOrgProductReply.product:type_name -> product.v1.ListOrgProductReply.Product
	273, // 1: product.v1.ListOrgProductGroupMemberReply.productGroupMember:type_name -> product.v1.ListOrgProductGroupMemberReply.ProductGroupMember
	274, // 2: product.v1.ListOrgProductEnvReply.env:type_name -> product.v1.ListOrgProductEnvReply.Env
	32,  // 3: product.v1.ListK8SClusterReply.k8sCluster:type_name -> product.v1.K8SCluster
	275, // 4: product.v1.GetK8SClusterNodeReply.labels:type_name -> product.v1.GetK8SClusterNodeReply.LabelsEntry
	276, // 5: product.v1.GetK8SClusterNodeReply.annotations:type_name -> product.v1.GetK8SClusterNodeReply.AnnotationsEntry
	277, // 6: product.v1.GetK8SClusterNodeReply.capacity:type_name -> product.v1.GetK8SClusterNodeReply.Capacity
	278, // 7: product.v1.GetK8SClusterNodeReply.allocatable:type_name -> product.v1.GetK8SClusterNodeReply.Allocatable
	279, // 8: product.v1.ListK8SClusterNodeReply.node:type_name -> product.v1.ListK8SClusterNodeReply.Node
	284, // 9: product.v1.ListK8SPodReply.pod:type_name -> product.v1.ListK8SPodReply.Pod
	288, // 10: product.v1.GetK8SPodReply.labels:type_name -> product.v1.GetK8SPodReply.LabelsEntry
	289, // 11: product.v1.GetK8SPodReply.envs:type_name -> product.v1.GetK8SPodReply.EnvsEntry
	290, // 12: product.v1.GetK8SPodReply.container:type_name -> product.v1.GetK8SPodReply.Container
	291, // 13: product.v1.SearchK8SPodReply.pod:type_name -> product.v1.SearchK8SPodReply.Pod
	295, // 14: product.v1.ConfigMap.data:type_name -> product.v1.ConfigMap.DataEntry
	296, // 15: product.v1.CreateK8SClusterConfigMapReq.data:type_name -> product.v1.CreateK8SClusterConfigMapReq.DataEntry
	63,  // 16: product.v1.ListK8SClusterConfigMapReply.configMap:type_name -> product.v1.ConfigMap
	297, // 17: product.v1.GetK8SClusterConfigMapReply.data:type_name -> product.v1.GetK8SClusterConfigMapReply.DataEntry
	298, // 18: product.v1.UpdateK8SClusterConfigMapReq.data:type_name -> product.v1.UpdateK8SClusterConfigMapReq.DataEntry
	299, // 19: product.v1.ListSecretReply.secrets:type_name -> product.v1.ListSecretReply.Secret
	304, // 20: product.v1.GetSecretReply.annotations:type_name -> product.v1.GetSecretReply.AnnotationsEntry
	305, // 21: product.v1.GetSecretReply.labels:type_name -> product.v1.GetSecretReply.LabelsEntry
	306, // 22: product.v1.GetSecretReply.stringData:type_name -> product.v1.GetSecretReply.StringDataEntry
	307, // 23: product.v1.GetSecretReply.data:type_name -> product.v1.GetSecretReply.DataEntry
	308, // 24: product.v1.CreateDockerSecretReq.annotations:type_name -> product.v1.CreateDockerSecretReq.AnnotationsEntry
	309, // 25: product.v1.CreateDockerSecretReq.labels:type_name -> product.v1.CreateDockerSecretReq.LabelsEntry
	310, // 26: product.v1.UpdateDockerSecretReq.annotations:type_name -> product.v1.UpdateDockerSecretReq.AnnotationsEntry
	311, // 27: product.v1.UpdateDockerSecretReq.labels:type_name -> product.v1.UpdateDockerSecretReq.LabelsEntry
	312, // 28: product.v1.CreateTlsSecretReq.annotations:type_name -> product.v1.CreateTlsSecretReq.AnnotationsEntry
	313, // 29: product.v1.CreateTlsSecretReq.labels:type_name -> product.v1.CreateTlsSecretReq.LabelsEntry
	314, // 30: product.v1.UpdateTlsSecretReq.annotations:type_name -> product.v1.UpdateTlsSecretReq.AnnotationsEntry
	315, // 31: product.v1.UpdateTlsSecretReq.labels:type_name -> product.v1.UpdateTlsSecretReq.LabelsEntry
	316, // 32: product.v1.CreateOpaqueSecretReq.data:type_name -> product.v1.CreateOpaqueSecretReq.DataEntry
	317, // 33: product.v1.CreateOpaqueSecretReq.annotations:type_name -> product.v1.CreateOpaqueSecretReq.AnnotationsEntry
	318, // 34: product.v1.CreateOpaqueSecretReq.labels:type_name -> product.v1.CreateOpaqueSecretReq.LabelsEntry
	319, // 35: product.v1.UpdateOpaqueSecretReq.data:type_name -> product.v1.UpdateOpaqueSecretReq.DataEntry
	320, // 36: product.v1.UpdateOpaqueSecretReq.annotations:type_name -> product.v1.UpdateOpaqueSecretReq.AnnotationsEntry
	321, // 37: product.v1.UpdateOpaqueSecretReq.labels:type_name -> product.v1.UpdateOpaqueSecretReq.LabelsEntry
	322, // 38: product.v1.CreateSSHAuthSecretReq.annotations:type_name -> product.v1.CreateSSHAuthSecretReq.AnnotationsEntry
	323, // 39: product.v1.CreateSSHAuthSecretReq.labels:type_name -> product.v1.CreateSSHAuthSecretReq.LabelsEntry
	324, // 40: product.v1.UpdateSSHAuthSecretReq.annotations:type_name -> product.v1.UpdateSSHAuthSecretReq.AnnotationsEntry
	325, // 41: product.v1.UpdateSSHAuthSecretReq.labels:type_name -> product.v1.UpdateSSHAuthSecretReq.LabelsEntry
	326, // 42: product.v1.CreateBasicAuthSecretReq.annotations:type_name -> product.v1.CreateBasicAuthSecretReq.AnnotationsEntry
	327, // 43: product.v1.CreateBasicAuthSecretReq.labels:type_name -> product.v1.CreateBasicAuthSecretReq.LabelsEntry
	328, // 44: product.v1.UpdateBasicAuthSecretReq.annotations:type_name -> product.v1.UpdateBasicAuthSecretReq.AnnotationsEntry
	329, // 45: product.v1.UpdateBasicAuthSecretReq.labels:type_name -> product.v1.UpdateBasicAuthSecretReq.LabelsEntry
	330, // 46: product.v1.ListK8SClusterNameSpaceReply.nameSpace:type_name -> product.v1.ListK8SClusterNameSpaceReply.NameSpace
	331, // 47: product.v1.ListK8SClusterDeploymentReply.deployment:type_name -> product.v1.ListK8SClusterDeploymentReply.DeploymentStatus
	332, // 48: product.v1.CreateK8SServiceReq.selector:type_name -> product.v1.CreateK8SServiceReq.SelectorEntry
	116, // 49: product.v1.CreateK8SServiceReq.ports:type_name -> product.v1.ServicePort
	333, // 50: product.v1.CreateK8SServiceReq.annotations:type_name -> product.v1.CreateK8SServiceReq.AnnotationsEntry
	334, // 51: product.v1.ListK8SServiceReply.service:type_name -> product.v1.ListK8SServiceReply.Service
	337, // 52: product.v1.GetK8SServiceReply.labels:type_name -> product.v1.GetK8SServiceReply.LabelsEntry
	338, // 53: product.v1.GetK8SServiceReply.annotations:type_name -> product.v1.GetK8SServiceReply.AnnotationsEntry
	116, // 54: product.v1.GetK8SServiceReply.ports:type_name -> product.v1.ServicePort
	339, // 55: product.v1.CreateK8SIngressReq.annotations:type_name -> product.v1.CreateK8SIngressReq.AnnotationsEntry
	340, // 56: product.v1.CreateK8SIngressReq.labels:type_name -> product.v1.CreateK8SIngressReq.LabelsEntry
	341, // 57: product.v1.CreateK8SIngressReq.service:type_name -> product.v1.CreateK8SIngressReq.ServiceEntry
	345, // 58: product.v1.ListK8SIngressReply.ingress:type_name -> product.v1.ListK8SIngressReply.Ingress
	351, // 59: product.v1.GetK8SIngressReply.labels:type_name -> product.v1.GetK8SIngressReply.LabelsEntry
	352, // 60: product.v1.GetK8SIngressReply.service:type_name -> product.v1.GetK8SIngressReply.ServiceEntry
	356, // 61: product.v1.UpdateK8SIngressReq.annotations:type_name -> product.v1.UpdateK8SIngressReq.AnnotationsEntry
	357, // 62: product.v1.UpdateK8SIngressReq.labels:type_name -> product.v1.UpdateK8SIngressReq.LabelsEntry
	358, // 63: product.v1.UpdateK8SIngressReq.service:type_name -> product.v1.UpdateK8SIngressReq.ServiceEntry
	153, // 64: product.v1.Program.release:type_name -> product.v1.Release
	135, // 65: product.v1.GetProgramByUuidReply.program:type_name -> product.v1.Program
	135, // 66: product.v1.GetSelfProgramReply.program:type_name -> product.v1.Program
	135, // 67: product.v1.SearchProgramReply.program:type_name -> product.v1.Program
	153, // 68: product.v1.ProgramMarket.release:type_name -> product.v1.Release
	144, // 69: product.v1.GetProgramMarketByUuidReply.programMarket:type_name -> product.v1.ProgramMarket
	144, // 70: product.v1.GetSelfProgramMarketReply.programMarket:type_name -> product.v1.ProgramMarket
	144, // 71: product.v1.SearchProgramMarketReply.programMarket:type_name -> product.v1.ProgramMarket
	362, // 72: product.v1.ListSelfGitlabPlatformReply.gitlabPlatform:type_name -> product.v1.ListSelfGitlabPlatformReply.GitlabPlatform
	363, // 73: product.v1.ListSelfGitlabTokenReply.gitlabToken:type_name -> product.v1.ListSelfGitlabTokenReply.GitlabToken
	364, // 74: product.v1.ListSelfGitlabGroupReply.groups:type_name -> product.v1.ListSelfGitlabGroupReply.Group
	365, // 75: product.v1.ListSelfGitlabRepoReply.gitlabRepo:type_name -> product.v1.ListSelfGitlabRepoReply.GitlabRepo
	366, // 76: product.v1.SelfGitlabRepoMergeHisReply.merges:type_name -> product.v1.SelfGitlabRepoMergeHisReply.Merge
	367, // 77: product.v1.ListSelfGitlabRepoBranchReply.branch:type_name -> product.v1.ListSelfGitlabRepoBranchReply.Branch
	368, // 78: product.v1.ListSelfGitlabRepoBranchCommitsReply.commits:type_name -> product.v1.ListSelfGitlabRepoBranchCommitsReply.Commit
	369, // 79: product.v1.ListGitHubTokenReply.githubToken:type_name -> product.v1.ListGitHubTokenReply.GithubToken
	370, // 80: product.v1.ListGithubRepoReply.repo:type_name -> product.v1.ListGithubRepoReply.Repo
	371, // 81: product.v1.ListGithubRepoBranchReply.branch:type_name -> product.v1.ListGithubRepoBranchReply.Branch
	372, // 82: product.v1.ListGithubRepoBranchCommitsReply.commits:type_name -> product.v1.ListGithubRepoBranchCommitsReply.Commit
	373, // 83: product.v1.ListGithubOrgReply.orgs:type_name -> product.v1.ListGithubOrgReply.Org
	374, // 84: product.v1.ListGithubRepoByOrgReply.repoOrg:type_name -> product.v1.ListGithubRepoByOrgReply.RepoOrg
	375, // 85: product.v1.ListServiceUrlReply.serviceUrls:type_name -> product.v1.ListServiceUrlReply.ServiceUrl
	376, // 86: product.v1.ListContainerRegistryReply.containerRegistry:type_name -> product.v1.ListContainerRegistryReply.ContainerRegistry
	377, // 87: product.v1.ListPublicContainerImageReply.containerImage:type_name -> product.v1.ListPublicContainerImageReply.ContainerImage
	378, // 88: product.v1.GetReliabilityReply.reliability:type_name -> product.v1.GetReliabilityReply.Reliability
	379, // 89: product.v1.ListWebServiceResourceReply.webServiceResource:type_name -> product.v1.ListWebServiceResourceReply.WebServiceResource
	380, // 90: product.v1.GetWebServiceResourcePromSDReply.webServiceResource:type_name -> product.v1.GetWebServiceResourcePromSDReply.WebServiceResource
	280, // 91: product.v1.ListK8SClusterNodeReply.Node.labels:type_name -> product.v1.ListK8SClusterNodeReply.Node.LabelsEntry
	281, // 92: product.v1.ListK8SClusterNodeReply.Node.annotations:type_name -> product.v1.ListK8SClusterNodeReply.Node.AnnotationsEntry
	282, // 93: product.v1.ListK8SClusterNodeReply.Node.capacity:type_name -> product.v1.ListK8SClusterNodeReply.Node.Capacity
	283, // 94: product.v1.ListK8SClusterNodeReply.Node.allocatable:type_name -> product.v1.ListK8SClusterNodeReply.Node.Allocatable
	285, // 95: product.v1.ListK8SPodReply.Pod.labels:type_name -> product.v1.ListK8SPodReply.Pod.LabelsEntry
	286, // 96: product.v1.ListK8SPodReply.Pod.envs:type_name -> product.v1.ListK8SPodReply.Pod.EnvsEntry
	287, // 97: product.v1.ListK8SPodReply.Pod.container:type_name -> product.v1.ListK8SPodReply.Pod.Container
	292, // 98: product.v1.SearchK8SPodReply.Pod.labels:type_name -> product.v1.SearchK8SPodReply.Pod.LabelsEntry
	293, // 99: product.v1.SearchK8SPodReply.Pod.envs:type_name -> product.v1.SearchK8SPodReply.Pod.EnvsEntry
	294, // 100: product.v1.SearchK8SPodReply.Pod.container:type_name -> product.v1.SearchK8SPodReply.Pod.Container
	300, // 101: product.v1.ListSecretReply.Secret.annotations:type_name -> product.v1.ListSecretReply.Secret.AnnotationsEntry
	301, // 102: product.v1.ListSecretReply.Secret.labels:type_name -> product.v1.ListSecretReply.Secret.LabelsEntry
	302, // 103: product.v1.ListSecretReply.Secret.stringData:type_name -> product.v1.ListSecretReply.Secret.StringDataEntry
	303, // 104: product.v1.ListSecretReply.Secret.data:type_name -> product.v1.ListSecretReply.Secret.DataEntry
	335, // 105: product.v1.ListK8SServiceReply.Service.annotations:type_name -> product.v1.ListK8SServiceReply.Service.AnnotationsEntry
	336, // 106: product.v1.ListK8SServiceReply.Service.labels:type_name -> product.v1.ListK8SServiceReply.Service.LabelsEntry
	116, // 107: product.v1.ListK8SServiceReply.Service.ports:type_name -> product.v1.ServicePort
	342, // 108: product.v1.CreateK8SIngressReq.ServiceEntry.value:type_name -> product.v1.CreateK8SIngressReq.Service
	343, // 109: product.v1.CreateK8SIngressReq.Service.path:type_name -> product.v1.CreateK8SIngressReq.Service.PathEntry
	344, // 110: product.v1.CreateK8SIngressReq.Service.PathEntry.value:type_name -> product.v1.CreateK8SIngressReq.Service.Path
	346, // 111: product.v1.ListK8SIngressReply.Ingress.labels:type_name -> product.v1.ListK8SIngressReply.Ingress.LabelsEntry
	347, // 112: product.v1.ListK8SIngressReply.Ingress.service:type_name -> product.v1.ListK8SIngressReply.Ingress.ServiceEntry
	348, // 113: product.v1.ListK8SIngressReply.Ingress.ServiceEntry.value:type_name -> product.v1.ListK8SIngressReply.Ingress.IngressService
	349, // 114: product.v1.ListK8SIngressReply.Ingress.IngressService.path:type_name -> product.v1.ListK8SIngressReply.Ingress.IngressService.PathEntry
	350, // 115: product.v1.ListK8SIngressReply.Ingress.IngressService.PathEntry.value:type_name -> product.v1.ListK8SIngressReply.Ingress.IngressService.IngressServicePath
	353, // 116: product.v1.GetK8SIngressReply.ServiceEntry.value:type_name -> product.v1.GetK8SIngressReply.IngressService
	354, // 117: product.v1.GetK8SIngressReply.IngressService.path:type_name -> product.v1.GetK8SIngressReply.IngressService.PathEntry
	355, // 118: product.v1.GetK8SIngressReply.IngressService.PathEntry.value:type_name -> product.v1.GetK8SIngressReply.IngressService.IngressServicePath
	359, // 119: product.v1.UpdateK8SIngressReq.ServiceEntry.value:type_name -> product.v1.UpdateK8SIngressReq.Service
	360, // 120: product.v1.UpdateK8SIngressReq.Service.path:type_name -> product.v1.UpdateK8SIngressReq.Service.PathEntry
	361, // 121: product.v1.UpdateK8SIngressReq.Service.PathEntry.value:type_name -> product.v1.UpdateK8SIngressReq.Service.Path
	0,   // 122: product.v1.Product.CreateOrgProduct:input_type -> product.v1.CreateOrgProductReq
	2,   // 123: product.v1.Product.ListOrgProduct:input_type -> product.v1.ListOrgProductReq
	4,   // 124: product.v1.Product.DelOrgProduct:input_type -> product.v1.DelOrgProductReq
	30,  // 125: product.v1.Product.VerifyProductInOrg:input_type -> product.v1.VerifyProductInOrgReq
	6,   // 126: product.v1.Product.GetOrgProduct:input_type -> product.v1.GetOrgProductReq
	8,   // 127: product.v1.Product.CreateOrgProductGroup:input_type -> product.v1.CreateOrgProductGroupReq
	10,  // 128: product.v1.Product.ListOrgProductGroup:input_type -> product.v1.ListOrgProductGroupReq
	12,  // 129: product.v1.Product.DelOrgProductGroup:input_type -> product.v1.DelOrgProductGroupReq
	14,  // 130: product.v1.Product.AddOrgProductGroupMember:input_type -> product.v1.AddOrgProductGroupMemberReq
	16,  // 131: product.v1.Product.ListOrgProductGroupMember:input_type -> product.v1.ListOrgProductGroupMemberReq
	18,  // 132: product.v1.Product.EvictOrgProductGroupMember:input_type -> product.v1.EvictOrgProductGroupMemberReq
	20,  // 133: product.v1.Product.LeaveOrgProductGroupMember:input_type -> product.v1.LeaveOrgProductGroupMemberReq
	22,  // 134: product.v1.Product.AddOrgProductEnv:input_type -> product.v1.AddOrgProductEnvReq
	24,  // 135: product.v1.Product.ListOrgProductEnv:input_type -> product.v1.ListOrgProductEnvReq
	26,  // 136: product.v1.Product.DelOrgProductEnv:input_type -> product.v1.DelOrgProductEnvReq
	28,  // 137: product.v1.Product.GetOrgProductEnv:input_type -> product.v1.GetOrgProductEnvReq
	33,  // 138: product.v1.Product.AddK8SCluster:input_type -> product.v1.AddK8SClusterReq
	37,  // 139: product.v1.Product.ListK8SCluster:input_type -> product.v1.ListK8SClusterReq
	35,  // 140: product.v1.Product.ExistK8SCluster:input_type -> product.v1.ExistK8SClusterReq
	39,  // 141: product.v1.Product.DelK8SCluster:input_type -> product.v1.DelK8SClusterReq
	41,  // 142: product.v1.Product.AddK8SClusterEdge:input_type -> product.v1.AddK8SClusterEdgeReq
	43,  // 143: product.v1.Product.GetK8SClusterEdge:input_type -> product.v1.GetK8SClusterEdgeReq
	45,  // 144: product.v1.Product.DelK8SClusterEdge:input_type -> product.v1.DelK8SClusterEdgeReq
	100, // 145: product.v1.Product.ListK8SClusterNameSpace:input_type -> product.v1.ListK8SClusterNameSpaceReq
	102, // 146: product.v1.Product.DelK8SClusterNameSpace:input_type -> product.v1.DelK8SClusterNameSpaceReq
	104, // 147: product.v1.Product.CreateK8SClusterNameSpace:input_type -> product.v1.CreateK8SClusterNameSpaceReq
	47,  // 148: product.v1.Product.GetK8SClusterNode:input_type -> product.v1.GetK8SClusterNodeReq
	49,  // 149: product.v1.Product.ListK8SClusterNode:input_type -> product.v1.ListK8SClusterNodeReq
	51,  // 150: product.v1.Product.ListK8SPod:input_type -> product.v1.ListK8SPodReq
	55,  // 151: product.v1.Product.GetK8SPod:input_type -> product.v1.GetK8SPodReq
	61,  // 152: product.v1.Product.SearchK8SPod:input_type -> product.v1.SearchK8SPodReq
	53,  // 153: product.v1.Product.EvictK8SPod:input_type -> product.v1.EvictK8SPodReq
	57,  // 154: product.v1.Product.DelK8SPod:input_type -> product.v1.DelK8SPodReq
	59,  // 155: product.v1.Product.CleanEvictK8SPod:input_type -> product.v1.CleanEvictK8SPodReq
	64,  // 156: product.v1.Product.CreateK8SClusterConfigMap:input_type -> product.v1.CreateK8SClusterConfigMapReq
	66,  // 157: product.v1.Product.ListK8SClusterConfigMap:input_type -> product.v1.ListK8SClusterConfigMapReq
	68,  // 158: product.v1.Product.GetK8SClusterConfigMap:input_type -> product.v1.GetK8SClusterConfigMapReq
	70,  // 159: product.v1.Product.UpdateK8SClusterConfigMap:input_type -> product.v1.UpdateK8SClusterConfigMapReq
	72,  // 160: product.v1.Product.DelK8SClusterConfigMap:input_type -> product.v1.DelK8SClusterConfigMapReq
	74,  // 161: product.v1.Product.ListSecret:input_type -> product.v1.ListSecretReq
	76,  // 162: product.v1.Product.GetSecret:input_type -> product.v1.GetSecretReq
	78,  // 163: product.v1.Product.DelSecret:input_type -> product.v1.DelSecretReq
	80,  // 164: product.v1.Product.CreateDockerSecret:input_type -> product.v1.CreateDockerSecretReq
	82,  // 165: product.v1.Product.UpdateDockerSecret:input_type -> product.v1.UpdateDockerSecretReq
	84,  // 166: product.v1.Product.CreateTlsSecret:input_type -> product.v1.CreateTlsSecretReq
	86,  // 167: product.v1.Product.UpdateTlsSecret:input_type -> product.v1.UpdateTlsSecretReq
	88,  // 168: product.v1.Product.CreateOpaqueSecret:input_type -> product.v1.CreateOpaqueSecretReq
	90,  // 169: product.v1.Product.UpdateOpaqueSecret:input_type -> product.v1.UpdateOpaqueSecretReq
	92,  // 170: product.v1.Product.CreateSSHAuthSecret:input_type -> product.v1.CreateSSHAuthSecretReq
	94,  // 171: product.v1.Product.UpdateSSHAuthSecret:input_type -> product.v1.UpdateSSHAuthSecretReq
	96,  // 172: product.v1.Product.CreateBasicAuthSecret:input_type -> product.v1.CreateBasicAuthSecretReq
	98,  // 173: product.v1.Product.UpdateBasicAuthSecret:input_type -> product.v1.UpdateBasicAuthSecretReq
	106, // 174: product.v1.Product.ListK8SClusterDeployment:input_type -> product.v1.ListK8SClusterDeploymentReq
	108, // 175: product.v1.Product.GetK8SClusterDeployment:input_type -> product.v1.GetK8SClusterDeploymentReq
	112, // 176: product.v1.Product.DelK8SClusterDeployment:input_type -> product.v1.DelK8SClusterDeploymentReq
	110, // 177: product.v1.Product.UpdateK8SClusterDeployment:input_type -> product.v1.UpdateK8SClusterDeploymentReq
	114, // 178: product.v1.Product.UpdateK8SClusterDeploymentReplicaSet:input_type -> product.v1.UpdateK8SClusterDeploymentReplicaSetReq
	117, // 179: product.v1.Product.CreateK8SService:input_type -> product.v1.CreateK8SServiceReq
	119, // 180: product.v1.Product.ListK8SService:input_type -> product.v1.ListK8SServiceReq
	121, // 181: product.v1.Product.GetK8SService:input_type -> product.v1.GetK8SServiceReq
	123, // 182: product.v1.Product.DelK8SService:input_type -> product.v1.DelK8SServiceReq
	125, // 183: product.v1.Product.CreateK8SIngress:input_type -> product.v1.CreateK8SIngressReq
	127, // 184: product.v1.Product.ListK8SIngress:input_type -> product.v1.ListK8SIngressReq
	129, // 185: product.v1.Product.GetK8SIngress:input_type -> product.v1.GetK8SIngressReq
	131, // 186: product.v1.Product.DelK8SIngress:input_type -> product.v1.DelK8SIngressReq
	133, // 187: product.v1.Product.UpdateK8SIngress:input_type -> product.v1.UpdateK8SIngressReq
	230, // 188: product.v1.Product.CreateServiceUrl:input_type -> product.v1.CreateServiceUrlReq
	232, // 189: product.v1.Product.ListServiceUrl:input_type -> product.v1.ListServiceUrlReq
	234, // 190: product.v1.Product.DelServiceUrl:input_type -> product.v1.DelServiceUrlReq
	236, // 191: product.v1.Product.AddContainerRegistry:input_type -> product.v1.AddContainerRegistryReq
	238, // 192: product.v1.Product.ListContainerRegistry:input_type -> product.v1.ListContainerRegistryReq
	240, // 193: product.v1.Product.DelContainerRegistry:input_type -> product.v1.DelContainerRegistryReq
	242, // 194: product.v1.Product.GetContainerRegistry:input_type -> product.v1.GetContainerRegistryReq
	244, // 195: product.v1.Product.AddPublicContainerImage:input_type -> product.v1.AddPublicContainerImageReq
	246, // 196: product.v1.Product.ListPublicContainerImage:input_type -> product.v1.ListPublicContainerImageReq
	248, // 197: product.v1.Product.DelPublicContainerImage:input_type -> product.v1.DelPublicContainerImageReq
	154, // 198: product.v1.Product.CreateSelfGitlabPlatform:input_type -> product.v1.CreateSelfGitlabPlatformReq
	156, // 199: product.v1.Product.ListSelfGitlabPlatform:input_type -> product.v1.ListSelfGitlabPlatformReq
	158, // 200: product.v1.Product.DelSelfGitlabPlatform:input_type -> product.v1.DelSelfGitlabPlatformReq
	160, // 201: product.v1.Product.CreateSelfGitlabToken:input_type -> product.v1.CreateSelfGitlabTokenReq
	162, // 202: product.v1.Product.ListSelfGitlabToken:input_type -> product.v1.ListSelfGitlabTokenReq
	164, // 203: product.v1.Product.DelSelfGitlabToken:input_type -> product.v1.DelSelfGitlabTokenReq
	172, // 204: product.v1.Product.CreateSelfGitlabRepo:input_type -> product.v1.CreateSelfGitlabRepoReq
	170, // 205: product.v1.Product.ImportSelfGitlabRepo:input_type -> product.v1.ImportSelfGitlabRepoReq
	174, // 206: product.v1.Product.ListSelfGitlabRepo:input_type -> product.v1.ListSelfGitlabRepoReq
	176, // 207: product.v1.Product.DelSelfGitlabRepo:input_type -> product.v1.DelSelfGitlabRepoReq
	178, // 208: product.v1.Product.ArchiveSelfGitlabRepo:input_type -> product.v1.ArchiveSelfGitlabRepoReq
	180, // 209: product.v1.Product.MergeSelfGitlabRepo:input_type -> product.v1.MergeSelfGitlabRepoReq
	182, // 210: product.v1.Product.SelfGitlabRepoMergeHis:input_type -> product.v1.SelfGitlabRepoMergeHisReq
	186, // 211: product.v1.Product.ListSelfGitlabRepoBranch:input_type -> product.v1.ListSelfGitlabRepoBranchReq
	184, // 212: product.v1.Product.CreateSelfGitlabRepoBranch:input_type -> product.v1.CreateSelfGitlabRepoBranchReq
	188, // 213: product.v1.Product.DelSelfGitlabRepoBranch:input_type -> product.v1.DelSelfGitlabRepoBranchReq
	190, // 214: product.v1.Product.ProtectSelfGitlabRepoBranch:input_type -> product.v1.ProtectSelfGitlabRepoBranchReq
	192, // 215: product.v1.Product.UnprotectSelfGitlabRepoBranch:input_type -> product.v1.UnprotectSelfGitlabRepoBranchReq
	194, // 216: product.v1.Product.ListSelfGitlabRepoBranchCommits:input_type -> product.v1.ListSelfGitlabRepoBranchCommitsReq
	166, // 217: product.v1.Product.CreateSelfGitlabGroup:input_type -> product.v1.CreateSelfGitlabGroupReq
	168, // 218: product.v1.Product.ListSelfGitlabGroup:input_type -> product.v1.ListSelfGitlabGroupReq
	196, // 219: product.v1.Product.CreateGitHubToken:input_type -> product.v1.CreateGitHubTokenReq
	198, // 220: product.v1.Product.ListGitHubToken:input_type -> product.v1.ListGitHubTokenReq
	200, // 221: product.v1.Product.DelGitHubToken:input_type -> product.v1.DelGitHubTokenReq
	202, // 222: product.v1.Product.ImportGithubRepo:input_type -> product.v1.ImportGithubRepoReq
	204, // 223: product.v1.Product.CreateGithubRepo:input_type -> product.v1.CreateGithubRepoReq
	206, // 224: product.v1.Product.ListGithubRepo:input_type -> product.v1.ListGithubRepoReq
	210, // 225: product.v1.Product.DelGithubRepo:input_type -> product.v1.DelGithubRepoReq
	212, // 226: product.v1.Product.ArchiveGithubRepo:input_type -> product.v1.ArchiveGithubRepoReq
	214, // 227: product.v1.Product.MergeGithubRepo:input_type -> product.v1.MergeGithubRepoReq
	220, // 228: product.v1.Product.ProtectGithubRepoBranch:input_type -> product.v1.ProtectGithubRepoBranchReq
	222, // 229: product.v1.Product.UnprotectGithubRepoBranch:input_type -> product.v1.UnprotectGithubRepoBranchReq
	224, // 230: product.v1.Product.ListGithubOrg:input_type -> product.v1.ListGithubOrgReq
	226, // 231: product.v1.Product.ListGithubRepoByOrg:input_type -> product.v1.ListGithubRepoByOrgReq
	216, // 232: product.v1.Product.ListGithubRepoBranch:input_type -> product.v1.ListGithubRepoBranchReq
	228, // 233: product.v1.Product.GetGithubUser:input_type -> product.v1.GetGithubUserReq
	218, // 234: product.v1.Product.ListGithubRepoBranchCommits:input_type -> product.v1.ListGithubRepoBranchCommitsReq
	264, // 235: product.v1.Product.SelfGitlabRepoBuildContainerImage:input_type -> product.v1.SelfGitlabRepoBuildContainerImageReq
	266, // 236: product.v1.Product.GithubRepoBuildContainerImage:input_type -> product.v1.GithubRepoBuildContainerImageReq
	268, // 237: product.v1.Product.SelfGitlabRepoExecCiTemplate:input_type -> product.v1.SelfGitlabRepoExecCiTemplateReq
	270, // 238: product.v1.Product.GithubRepoExecCiTemplate:input_type -> product.v1.GithubRepoExecCiTemplateReq
	136, // 239: product.v1.Product.CreateProgram:input_type -> product.v1.CreateProgramReq
	138, // 240: product.v1.Product.GetProgramByUuid:input_type -> product.v1.GetProgramByUuidReq
	140, // 241: product.v1.Product.GetSelfProgram:input_type -> product.v1.GetSelfProgramReq
	142, // 242: product.v1.Product.SearchProgram:input_type -> product.v1.SearchProgramReq
	145, // 243: product.v1.Product.CreateProgramMarket:input_type -> product.v1.CreateProgramMarketReq
	147, // 244: product.v1.Product.GetProgramMarketByUuid:input_type -> product.v1.GetProgramMarketByUuidReq
	149, // 245: product.v1.Product.GetSelfProgramMarket:input_type -> product.v1.GetSelfProgramMarketReq
	151, // 246: product.v1.Product.SearchProgramMarket:input_type -> product.v1.SearchProgramMarketReq
	250, // 247: product.v1.Product.CreateReliability:input_type -> product.v1.CreateReliabilityReq
	252, // 248: product.v1.Product.GetReliability:input_type -> product.v1.GetReliabilityReq
	254, // 249: product.v1.Product.CreateWebServiceResource:input_type -> product.v1.CreateWebServiceResourceReq
	256, // 250: product.v1.Product.ListWebServiceResource:input_type -> product.v1.ListWebServiceResourceReq
	258, // 251: product.v1.Product.DelWebServiceResource:input_type -> product.v1.DelWebServiceResourceReq
	260, // 252: product.v1.Product.UpdateWebServiceResource:input_type -> product.v1.UpdateWebServiceResourceReq
	262, // 253: product.v1.Product.GetWebServiceResourcePromSD:input_type -> product.v1.GetWebServiceResourcePromSDReq
	1,   // 254: product.v1.Product.CreateOrgProduct:output_type -> product.v1.CreateOrgProductReply
	3,   // 255: product.v1.Product.ListOrgProduct:output_type -> product.v1.ListOrgProductReply
	5,   // 256: product.v1.Product.DelOrgProduct:output_type -> product.v1.DelOrgProductReply
	31,  // 257: product.v1.Product.VerifyProductInOrg:output_type -> product.v1.VerifyProductInOrgReply
	7,   // 258: product.v1.Product.GetOrgProduct:output_type -> product.v1.GetOrgProductReply
	9,   // 259: product.v1.Product.CreateOrgProductGroup:output_type -> product.v1.CreateOrgProductGroupReply
	11,  // 260: product.v1.Product.ListOrgProductGroup:output_type -> product.v1.ListOrgProductGroupReply
	13,  // 261: product.v1.Product.DelOrgProductGroup:output_type -> product.v1.DelOrgProductGroupReply
	15,  // 262: product.v1.Product.AddOrgProductGroupMember:output_type -> product.v1.AddOrgProductGroupMemberReply
	17,  // 263: product.v1.Product.ListOrgProductGroupMember:output_type -> product.v1.ListOrgProductGroupMemberReply
	19,  // 264: product.v1.Product.EvictOrgProductGroupMember:output_type -> product.v1.EvictOrgProductGroupMemberReply
	21,  // 265: product.v1.Product.LeaveOrgProductGroupMember:output_type -> product.v1.LeaveOrgProductGroupMemberReply
	23,  // 266: product.v1.Product.AddOrgProductEnv:output_type -> product.v1.AddOrgProductEnvReply
	25,  // 267: product.v1.Product.ListOrgProductEnv:output_type -> product.v1.ListOrgProductEnvReply
	27,  // 268: product.v1.Product.DelOrgProductEnv:output_type -> product.v1.DelOrgProductEnvReply
	29,  // 269: product.v1.Product.GetOrgProductEnv:output_type -> product.v1.GetOrgProductEnvReply
	34,  // 270: product.v1.Product.AddK8SCluster:output_type -> product.v1.AddK8SClusterReply
	38,  // 271: product.v1.Product.ListK8SCluster:output_type -> product.v1.ListK8SClusterReply
	36,  // 272: product.v1.Product.ExistK8SCluster:output_type -> product.v1.ExistK8SClusterReply
	40,  // 273: product.v1.Product.DelK8SCluster:output_type -> product.v1.DelK8SClusterReply
	42,  // 274: product.v1.Product.AddK8SClusterEdge:output_type -> product.v1.AddK8SClusterEdgeReply
	44,  // 275: product.v1.Product.GetK8SClusterEdge:output_type -> product.v1.GetK8SClusterEdgeReply
	46,  // 276: product.v1.Product.DelK8SClusterEdge:output_type -> product.v1.DelK8SClusterEdgeReply
	101, // 277: product.v1.Product.ListK8SClusterNameSpace:output_type -> product.v1.ListK8SClusterNameSpaceReply
	103, // 278: product.v1.Product.DelK8SClusterNameSpace:output_type -> product.v1.DelK8SClusterNameSpaceReply
	105, // 279: product.v1.Product.CreateK8SClusterNameSpace:output_type -> product.v1.CreateK8SClusterNameSpaceReply
	48,  // 280: product.v1.Product.GetK8SClusterNode:output_type -> product.v1.GetK8SClusterNodeReply
	50,  // 281: product.v1.Product.ListK8SClusterNode:output_type -> product.v1.ListK8SClusterNodeReply
	52,  // 282: product.v1.Product.ListK8SPod:output_type -> product.v1.ListK8SPodReply
	56,  // 283: product.v1.Product.GetK8SPod:output_type -> product.v1.GetK8SPodReply
	62,  // 284: product.v1.Product.SearchK8SPod:output_type -> product.v1.SearchK8SPodReply
	54,  // 285: product.v1.Product.EvictK8SPod:output_type -> product.v1.EvictK8SPodReply
	58,  // 286: product.v1.Product.DelK8SPod:output_type -> product.v1.DelK8SPodReply
	60,  // 287: product.v1.Product.CleanEvictK8SPod:output_type -> product.v1.CleanEvictK8SPodReply
	65,  // 288: product.v1.Product.CreateK8SClusterConfigMap:output_type -> product.v1.CreateK8SClusterConfigMapReply
	67,  // 289: product.v1.Product.ListK8SClusterConfigMap:output_type -> product.v1.ListK8SClusterConfigMapReply
	69,  // 290: product.v1.Product.GetK8SClusterConfigMap:output_type -> product.v1.GetK8SClusterConfigMapReply
	71,  // 291: product.v1.Product.UpdateK8SClusterConfigMap:output_type -> product.v1.UpdateK8SClusterConfigMapReply
	73,  // 292: product.v1.Product.DelK8SClusterConfigMap:output_type -> product.v1.DelK8SClusterConfigMapReply
	75,  // 293: product.v1.Product.ListSecret:output_type -> product.v1.ListSecretReply
	77,  // 294: product.v1.Product.GetSecret:output_type -> product.v1.GetSecretReply
	79,  // 295: product.v1.Product.DelSecret:output_type -> product.v1.DelSecretReply
	81,  // 296: product.v1.Product.CreateDockerSecret:output_type -> product.v1.CreateDockerSecretReply
	83,  // 297: product.v1.Product.UpdateDockerSecret:output_type -> product.v1.UpdateDockerSecretReply
	85,  // 298: product.v1.Product.CreateTlsSecret:output_type -> product.v1.CreateTlsSecretReply
	87,  // 299: product.v1.Product.UpdateTlsSecret:output_type -> product.v1.UpdateTlsSecretReply
	89,  // 300: product.v1.Product.CreateOpaqueSecret:output_type -> product.v1.CreateOpaqueSecretReply
	91,  // 301: product.v1.Product.UpdateOpaqueSecret:output_type -> product.v1.UpdateOpaqueSecretReply
	93,  // 302: product.v1.Product.CreateSSHAuthSecret:output_type -> product.v1.CreateSSHAuthSecretReply
	95,  // 303: product.v1.Product.UpdateSSHAuthSecret:output_type -> product.v1.UpdateSSHAuthSecretReply
	97,  // 304: product.v1.Product.CreateBasicAuthSecret:output_type -> product.v1.CreateBasicAuthSecretReply
	99,  // 305: product.v1.Product.UpdateBasicAuthSecret:output_type -> product.v1.UpdateBasicAuthSecretReply
	107, // 306: product.v1.Product.ListK8SClusterDeployment:output_type -> product.v1.ListK8SClusterDeploymentReply
	109, // 307: product.v1.Product.GetK8SClusterDeployment:output_type -> product.v1.GetK8SClusterDeploymentReply
	113, // 308: product.v1.Product.DelK8SClusterDeployment:output_type -> product.v1.DelK8SClusterDeploymentReply
	111, // 309: product.v1.Product.UpdateK8SClusterDeployment:output_type -> product.v1.UpdateK8SClusterDeploymentReply
	115, // 310: product.v1.Product.UpdateK8SClusterDeploymentReplicaSet:output_type -> product.v1.UpdateK8SClusterDeploymentReplicaSetReply
	118, // 311: product.v1.Product.CreateK8SService:output_type -> product.v1.CreateK8SServiceReply
	120, // 312: product.v1.Product.ListK8SService:output_type -> product.v1.ListK8SServiceReply
	122, // 313: product.v1.Product.GetK8SService:output_type -> product.v1.GetK8SServiceReply
	124, // 314: product.v1.Product.DelK8SService:output_type -> product.v1.DelK8SServiceReply
	126, // 315: product.v1.Product.CreateK8SIngress:output_type -> product.v1.CreateK8SIngressReply
	128, // 316: product.v1.Product.ListK8SIngress:output_type -> product.v1.ListK8SIngressReply
	130, // 317: product.v1.Product.GetK8SIngress:output_type -> product.v1.GetK8SIngressReply
	132, // 318: product.v1.Product.DelK8SIngress:output_type -> product.v1.DelK8SIngressReply
	134, // 319: product.v1.Product.UpdateK8SIngress:output_type -> product.v1.UpdateK8SIngressReply
	231, // 320: product.v1.Product.CreateServiceUrl:output_type -> product.v1.CreateServiceUrlReply
	233, // 321: product.v1.Product.ListServiceUrl:output_type -> product.v1.ListServiceUrlReply
	235, // 322: product.v1.Product.DelServiceUrl:output_type -> product.v1.DelServiceUrlReply
	237, // 323: product.v1.Product.AddContainerRegistry:output_type -> product.v1.AddContainerRegistryReply
	239, // 324: product.v1.Product.ListContainerRegistry:output_type -> product.v1.ListContainerRegistryReply
	241, // 325: product.v1.Product.DelContainerRegistry:output_type -> product.v1.DelContainerRegistryReply
	243, // 326: product.v1.Product.GetContainerRegistry:output_type -> product.v1.GetContainerRegistryReply
	245, // 327: product.v1.Product.AddPublicContainerImage:output_type -> product.v1.AddPublicContainerImageReply
	247, // 328: product.v1.Product.ListPublicContainerImage:output_type -> product.v1.ListPublicContainerImageReply
	249, // 329: product.v1.Product.DelPublicContainerImage:output_type -> product.v1.DelPublicContainerImageReply
	155, // 330: product.v1.Product.CreateSelfGitlabPlatform:output_type -> product.v1.CreateSelfGitlabPlatformReply
	157, // 331: product.v1.Product.ListSelfGitlabPlatform:output_type -> product.v1.ListSelfGitlabPlatformReply
	159, // 332: product.v1.Product.DelSelfGitlabPlatform:output_type -> product.v1.DelSelfGitlabPlatformReply
	161, // 333: product.v1.Product.CreateSelfGitlabToken:output_type -> product.v1.CreateSelfGitlabTokenReply
	163, // 334: product.v1.Product.ListSelfGitlabToken:output_type -> product.v1.ListSelfGitlabTokenReply
	165, // 335: product.v1.Product.DelSelfGitlabToken:output_type -> product.v1.DelSelfGitlabTokenReply
	173, // 336: product.v1.Product.CreateSelfGitlabRepo:output_type -> product.v1.CreateSelfGitlabRepoReply
	171, // 337: product.v1.Product.ImportSelfGitlabRepo:output_type -> product.v1.ImportSelfGitlabRepoReply
	175, // 338: product.v1.Product.ListSelfGitlabRepo:output_type -> product.v1.ListSelfGitlabRepoReply
	177, // 339: product.v1.Product.DelSelfGitlabRepo:output_type -> product.v1.DelSelfGitlabRepoReply
	179, // 340: product.v1.Product.ArchiveSelfGitlabRepo:output_type -> product.v1.ArchiveSelfGitlabRepoReply
	181, // 341: product.v1.Product.MergeSelfGitlabRepo:output_type -> product.v1.MergeSelfGitlabRepoReply
	183, // 342: product.v1.Product.SelfGitlabRepoMergeHis:output_type -> product.v1.SelfGitlabRepoMergeHisReply
	187, // 343: product.v1.Product.ListSelfGitlabRepoBranch:output_type -> product.v1.ListSelfGitlabRepoBranchReply
	185, // 344: product.v1.Product.CreateSelfGitlabRepoBranch:output_type -> product.v1.CreateSelfGitlabRepoBranchReply
	189, // 345: product.v1.Product.DelSelfGitlabRepoBranch:output_type -> product.v1.DelSelfGitlabRepoBranchReply
	191, // 346: product.v1.Product.ProtectSelfGitlabRepoBranch:output_type -> product.v1.ProtectSelfGitlabRepoBranchReply
	193, // 347: product.v1.Product.UnprotectSelfGitlabRepoBranch:output_type -> product.v1.UnprotectSelfGitlabRepoBranchReply
	195, // 348: product.v1.Product.ListSelfGitlabRepoBranchCommits:output_type -> product.v1.ListSelfGitlabRepoBranchCommitsReply
	167, // 349: product.v1.Product.CreateSelfGitlabGroup:output_type -> product.v1.CreateSelfGitlabGroupReply
	169, // 350: product.v1.Product.ListSelfGitlabGroup:output_type -> product.v1.ListSelfGitlabGroupReply
	197, // 351: product.v1.Product.CreateGitHubToken:output_type -> product.v1.CreateGitHubTokenReply
	199, // 352: product.v1.Product.ListGitHubToken:output_type -> product.v1.ListGitHubTokenReply
	201, // 353: product.v1.Product.DelGitHubToken:output_type -> product.v1.DelGitHubTokenReply
	203, // 354: product.v1.Product.ImportGithubRepo:output_type -> product.v1.ImportGithubRepoReply
	205, // 355: product.v1.Product.CreateGithubRepo:output_type -> product.v1.CreateGithubRepoReply
	207, // 356: product.v1.Product.ListGithubRepo:output_type -> product.v1.ListGithubRepoReply
	211, // 357: product.v1.Product.DelGithubRepo:output_type -> product.v1.DelGithubRepoReply
	213, // 358: product.v1.Product.ArchiveGithubRepo:output_type -> product.v1.ArchiveGithubRepoReply
	215, // 359: product.v1.Product.MergeGithubRepo:output_type -> product.v1.MergeGithubRepoReply
	221, // 360: product.v1.Product.ProtectGithubRepoBranch:output_type -> product.v1.ProtectGithubRepoBranchReply
	223, // 361: product.v1.Product.UnprotectGithubRepoBranch:output_type -> product.v1.UnprotectGithubRepoBranchReply
	225, // 362: product.v1.Product.ListGithubOrg:output_type -> product.v1.ListGithubOrgReply
	227, // 363: product.v1.Product.ListGithubRepoByOrg:output_type -> product.v1.ListGithubRepoByOrgReply
	217, // 364: product.v1.Product.ListGithubRepoBranch:output_type -> product.v1.ListGithubRepoBranchReply
	229, // 365: product.v1.Product.GetGithubUser:output_type -> product.v1.GetGithubUserReply
	219, // 366: product.v1.Product.ListGithubRepoBranchCommits:output_type -> product.v1.ListGithubRepoBranchCommitsReply
	265, // 367: product.v1.Product.SelfGitlabRepoBuildContainerImage:output_type -> product.v1.SelfGitlabRepoBuildContainerImageReply
	267, // 368: product.v1.Product.GithubRepoBuildContainerImage:output_type -> product.v1.GithubRepoBuildContainerImageReply
	269, // 369: product.v1.Product.SelfGitlabRepoExecCiTemplate:output_type -> product.v1.SelfGitlabRepoExecCiTemplateReply
	271, // 370: product.v1.Product.GithubRepoExecCiTemplate:output_type -> product.v1.GithubRepoExecCiTemplateReply
	137, // 371: product.v1.Product.CreateProgram:output_type -> product.v1.CreateProgramReply
	139, // 372: product.v1.Product.GetProgramByUuid:output_type -> product.v1.GetProgramByUuidReply
	141, // 373: product.v1.Product.GetSelfProgram:output_type -> product.v1.GetSelfProgramReply
	143, // 374: product.v1.Product.SearchProgram:output_type -> product.v1.SearchProgramReply
	146, // 375: product.v1.Product.CreateProgramMarket:output_type -> product.v1.CreateProgramMarketReply
	148, // 376: product.v1.Product.GetProgramMarketByUuid:output_type -> product.v1.GetProgramMarketByUuidReply
	150, // 377: product.v1.Product.GetSelfProgramMarket:output_type -> product.v1.GetSelfProgramMarketReply
	152, // 378: product.v1.Product.SearchProgramMarket:output_type -> product.v1.SearchProgramMarketReply
	251, // 379: product.v1.Product.CreateReliability:output_type -> product.v1.CreateReliabilityReply
	253, // 380: product.v1.Product.GetReliability:output_type -> product.v1.GetReliabilityReply
	255, // 381: product.v1.Product.CreateWebServiceResource:output_type -> product.v1.CreateWebServiceResourceReply
	257, // 382: product.v1.Product.ListWebServiceResource:output_type -> product.v1.ListWebServiceResourceReply
	259, // 383: product.v1.Product.DelWebServiceResource:output_type -> product.v1.DelWebServiceResourceReply
	261, // 384: product.v1.Product.UpdateWebServiceResource:output_type -> product.v1.UpdateWebServiceResourceReply
	263, // 385: product.v1.Product.GetWebServiceResourcePromSD:output_type -> product.v1.GetWebServiceResourcePromSDReply
	254, // [254:386] is the sub-list for method output_type
	122, // [122:254] is the sub-list for method input_type
	122, // [122:122] is the sub-list for extension type_name
	122, // [122:122] is the sub-list for extension extendee
	0,   // [0:122] is the sub-list for field type_name
}

func init() { file_oneProduct_v1_product_proto_init() }
func file_oneProduct_v1_product_proto_init() {
	if File_oneProduct_v1_product_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_oneProduct_v1_product_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrgProductReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrgProductReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrgProductReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrgProductReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelOrgProductReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelOrgProductReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrgProductReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrgProductReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrgProductGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrgProductGroupReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrgProductGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrgProductGroupReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelOrgProductGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelOrgProductGroupReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOrgProductGroupMemberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOrgProductGroupMemberReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrgProductGroupMemberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrgProductGroupMemberReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvictOrgProductGroupMemberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvictOrgProductGroupMemberReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaveOrgProductGroupMemberReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaveOrgProductGroupMemberReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOrgProductEnvReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOrgProductEnvReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrgProductEnvReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrgProductEnvReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelOrgProductEnvReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelOrgProductEnvReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrgProductEnvReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrgProductEnvReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyProductInOrgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyProductInOrgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*K8SCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddK8SClusterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddK8SClusterReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistK8SClusterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistK8SClusterReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListK8SClusterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListK8SClusterReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelK8SClusterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelK8SClusterReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddK8SClusterEdgeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddK8SClusterEdgeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetK8SClusterEdgeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetK8SClusterEdgeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelK8SClusterEdgeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelK8SClusterEdgeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetK8SClusterNodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetK8SClusterNodeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListK8SClusterNodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListK8SClusterNodeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListK8SPodReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListK8SPodReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvictK8SPodReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvictK8SPodReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetK8SPodReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetK8SPodReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelK8SPodReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelK8SPodReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CleanEvictK8SPodReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CleanEvictK8SPodReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchK8SPodReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchK8SPodReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateK8SClusterConfigMapReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateK8SClusterConfigMapReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListK8SClusterConfigMapReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListK8SClusterConfigMapReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetK8SClusterConfigMapReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetK8SClusterConfigMapReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateK8SClusterConfigMapReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateK8SClusterConfigMapReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelK8SClusterConfigMapReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelK8SClusterConfigMapReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSecretReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSecretReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSecretReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSecretReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelSecretReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelSecretReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDockerSecretReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDockerSecretReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDockerSecretReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDockerSecretReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTlsSecretReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTlsSecretReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTlsSecretReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTlsSecretReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOpaqueSecretReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOpaqueSecretReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOpaqueSecretReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOpaqueSecretReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSSHAuthSecretReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSSHAuthSecretReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSSHAuthSecretReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSSHAuthSecretReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBasicAuthSecretReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBasicAuthSecretReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBasicAuthSecretReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBasicAuthSecretReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListK8SClusterNameSpaceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListK8SClusterNameSpaceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelK8SClusterNameSpaceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelK8SClusterNameSpaceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateK8SClusterNameSpaceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateK8SClusterNameSpaceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListK8SClusterDeploymentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListK8SClusterDeploymentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetK8SClusterDeploymentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetK8SClusterDeploymentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateK8SClusterDeploymentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateK8SClusterDeploymentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelK8SClusterDeploymentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelK8SClusterDeploymentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateK8SClusterDeploymentReplicaSetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateK8SClusterDeploymentReplicaSetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServicePort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateK8SServiceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateK8SServiceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListK8SServiceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListK8SServiceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetK8SServiceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetK8SServiceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelK8SServiceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelK8SServiceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateK8SIngressReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateK8SIngressReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListK8SIngressReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListK8SIngressReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetK8SIngressReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetK8SIngressReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelK8SIngressReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelK8SIngressReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateK8SIngressReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateK8SIngressReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Program); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProgramReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProgramReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProgramByUuidReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProgramByUuidReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSelfProgramReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSelfProgramReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchProgramReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchProgramReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProgramMarket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProgramMarketReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProgramMarketReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProgramMarketByUuidReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProgramMarketByUuidReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSelfProgramMarketReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSelfProgramMarketReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchProgramMarketReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchProgramMarketReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Release); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSelfGitlabPlatformReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSelfGitlabPlatformReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSelfGitlabPlatformReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSelfGitlabPlatformReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelSelfGitlabPlatformReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelSelfGitlabPlatformReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSelfGitlabTokenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSelfGitlabTokenReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSelfGitlabTokenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSelfGitlabTokenReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelSelfGitlabTokenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelSelfGitlabTokenReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSelfGitlabGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSelfGitlabGroupReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSelfGitlabGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSelfGitlabGroupReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportSelfGitlabRepoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportSelfGitlabRepoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSelfGitlabRepoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSelfGitlabRepoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSelfGitlabRepoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSelfGitlabRepoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelSelfGitlabRepoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelSelfGitlabRepoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArchiveSelfGitlabRepoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArchiveSelfGitlabRepoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeSelfGitlabRepoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeSelfGitlabRepoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelfGitlabRepoMergeHisReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelfGitlabRepoMergeHisReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSelfGitlabRepoBranchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSelfGitlabRepoBranchReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSelfGitlabRepoBranchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSelfGitlabRepoBranchReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelSelfGitlabRepoBranchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelSelfGitlabRepoBranchReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtectSelfGitlabRepoBranchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtectSelfGitlabRepoBranchReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnprotectSelfGitlabRepoBranchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnprotectSelfGitlabRepoBranchReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSelfGitlabRepoBranchCommitsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSelfGitlabRepoBranchCommitsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGitHubTokenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGitHubTokenReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGitHubTokenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGitHubTokenReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelGitHubTokenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelGitHubTokenReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportGithubRepoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportGithubRepoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGithubRepoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGithubRepoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGithubRepoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGithubRepoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGithubRepoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGithubRepoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelGithubRepoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelGithubRepoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArchiveGithubRepoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArchiveGithubRepoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeGithubRepoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeGithubRepoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGithubRepoBranchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGithubRepoBranchReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGithubRepoBranchCommitsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGithubRepoBranchCommitsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtectGithubRepoBranchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtectGithubRepoBranchReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnprotectGithubRepoBranchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnprotectGithubRepoBranchReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGithubOrgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGithubOrgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGithubRepoByOrgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGithubRepoByOrgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGithubUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGithubUserReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateServiceUrlReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateServiceUrlReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListServiceUrlReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListServiceUrlReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelServiceUrlReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelServiceUrlReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddContainerRegistryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddContainerRegistryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListContainerRegistryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListContainerRegistryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelContainerRegistryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelContainerRegistryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContainerRegistryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContainerRegistryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPublicContainerImageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPublicContainerImageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPublicContainerImageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPublicContainerImageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelPublicContainerImageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelPublicContainerImageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReliabilityReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReliabilityReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReliabilityReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReliabilityReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWebServiceResourceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWebServiceResourceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWebServiceResourceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWebServiceResourceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelWebServiceResourceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelWebServiceResourceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWebServiceResourceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWebServiceResourceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWebServiceResourcePromSDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWebServiceResourcePromSDReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelfGitlabRepoBuildContainerImageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[265].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelfGitlabRepoBuildContainerImageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[266].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GithubRepoBuildContainerImageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[267].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GithubRepoBuildContainerImageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[268].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelfGitlabRepoExecCiTemplateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[269].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelfGitlabRepoExecCiTemplateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[270].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GithubRepoExecCiTemplateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[271].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GithubRepoExecCiTemplateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[272].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrgProductReply_Product); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[273].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrgProductGroupMemberReply_ProductGroupMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[274].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrgProductEnvReply_Env); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[277].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetK8SClusterNodeReply_Capacity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[278].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetK8SClusterNodeReply_Allocatable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[279].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListK8SClusterNodeReply_Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[282].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListK8SClusterNodeReply_Node_Capacity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[283].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListK8SClusterNodeReply_Node_Allocatable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[284].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListK8SPodReply_Pod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[287].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListK8SPodReply_Pod_Container); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[290].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetK8SPodReply_Container); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[291].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchK8SPodReply_Pod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[294].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchK8SPodReply_Pod_Container); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[299].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSecretReply_Secret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[330].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListK8SClusterNameSpaceReply_NameSpace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[331].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListK8SClusterDeploymentReply_DeploymentStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[334].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListK8SServiceReply_Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[342].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateK8SIngressReq_Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[344].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateK8SIngressReq_Service_Path); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[345].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListK8SIngressReply_Ingress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[348].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListK8SIngressReply_Ingress_IngressService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[350].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListK8SIngressReply_Ingress_IngressService_IngressServicePath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[353].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetK8SIngressReply_IngressService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[355].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetK8SIngressReply_IngressService_IngressServicePath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[359].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateK8SIngressReq_Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[361].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateK8SIngressReq_Service_Path); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[362].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSelfGitlabPlatformReply_GitlabPlatform); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[363].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSelfGitlabTokenReply_GitlabToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[364].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSelfGitlabGroupReply_Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[365].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSelfGitlabRepoReply_GitlabRepo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[366].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelfGitlabRepoMergeHisReply_Merge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[367].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSelfGitlabRepoBranchReply_Branch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[368].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSelfGitlabRepoBranchCommitsReply_Commit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[369].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGitHubTokenReply_GithubToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[370].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGithubRepoReply_Repo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[371].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGithubRepoBranchReply_Branch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[372].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGithubRepoBranchCommitsReply_Commit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[373].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGithubOrgReply_Org); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[374].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGithubRepoByOrgReply_RepoOrg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[375].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListServiceUrlReply_ServiceUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[376].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListContainerRegistryReply_ContainerRegistry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[377].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPublicContainerImageReply_ContainerImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[378].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReliabilityReply_Reliability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[379].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWebServiceResourceReply_WebServiceResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_oneProduct_v1_product_proto_msgTypes[380].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWebServiceResourcePromSDReply_WebServiceResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_oneProduct_v1_product_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   381,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_oneProduct_v1_product_proto_goTypes,
		DependencyIndexes: file_oneProduct_v1_product_proto_depIdxs,
		MessageInfos:      file_oneProduct_v1_product_proto_msgTypes,
	}.Build()
	File_oneProduct_v1_product_proto = out.File
	file_oneProduct_v1_product_proto_rawDesc = nil
	file_oneProduct_v1_product_proto_goTypes = nil
	file_oneProduct_v1_product_proto_depIdxs = nil
}
