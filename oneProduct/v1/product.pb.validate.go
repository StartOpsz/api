// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/product/v1/product.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateOrgProductReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrgProductReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrgProductReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrgProductReqMultiError, or nil if none found.
func (m *CreateOrgProductReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrgProductReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := CreateOrgProductReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := CreateOrgProductReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductName()) < 1 {
		err := CreateOrgProductReqValidationError{
			field:  "ProductName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Logo

	// no validation rules for Describe

	if len(errors) > 0 {
		return CreateOrgProductReqMultiError(errors)
	}

	return nil
}

// CreateOrgProductReqMultiError is an error wrapping multiple validation
// errors returned by CreateOrgProductReq.ValidateAll() if the designated
// constraints aren't met.
type CreateOrgProductReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrgProductReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrgProductReqMultiError) AllErrors() []error { return m }

// CreateOrgProductReqValidationError is the validation error returned by
// CreateOrgProductReq.Validate if the designated constraints aren't met.
type CreateOrgProductReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrgProductReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrgProductReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrgProductReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrgProductReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrgProductReqValidationError) ErrorName() string {
	return "CreateOrgProductReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrgProductReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrgProductReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrgProductReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrgProductReqValidationError{}

// Validate checks the field values on CreateOrgProductReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrgProductReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrgProductReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrgProductReplyMultiError, or nil if none found.
func (m *CreateOrgProductReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrgProductReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return CreateOrgProductReplyMultiError(errors)
	}

	return nil
}

// CreateOrgProductReplyMultiError is an error wrapping multiple validation
// errors returned by CreateOrgProductReply.ValidateAll() if the designated
// constraints aren't met.
type CreateOrgProductReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrgProductReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrgProductReplyMultiError) AllErrors() []error { return m }

// CreateOrgProductReplyValidationError is the validation error returned by
// CreateOrgProductReply.Validate if the designated constraints aren't met.
type CreateOrgProductReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrgProductReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrgProductReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrgProductReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrgProductReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrgProductReplyValidationError) ErrorName() string {
	return "CreateOrgProductReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrgProductReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrgProductReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrgProductReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrgProductReplyValidationError{}

// Validate checks the field values on ListOrgProductReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListOrgProductReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrgProductReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrgProductReqMultiError, or nil if none found.
func (m *ListOrgProductReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrgProductReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ListOrgProductReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ListOrgProductReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListOrgProductReqMultiError(errors)
	}

	return nil
}

// ListOrgProductReqMultiError is an error wrapping multiple validation errors
// returned by ListOrgProductReq.ValidateAll() if the designated constraints
// aren't met.
type ListOrgProductReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrgProductReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrgProductReqMultiError) AllErrors() []error { return m }

// ListOrgProductReqValidationError is the validation error returned by
// ListOrgProductReq.Validate if the designated constraints aren't met.
type ListOrgProductReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrgProductReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrgProductReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrgProductReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrgProductReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrgProductReqValidationError) ErrorName() string {
	return "ListOrgProductReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrgProductReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrgProductReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrgProductReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrgProductReqValidationError{}

// Validate checks the field values on ListOrgProductReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrgProductReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrgProductReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrgProductReplyMultiError, or nil if none found.
func (m *ListOrgProductReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrgProductReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProduct() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrgProductReplyValidationError{
						field:  fmt.Sprintf("Product[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrgProductReplyValidationError{
						field:  fmt.Sprintf("Product[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrgProductReplyValidationError{
					field:  fmt.Sprintf("Product[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOrgProductReplyMultiError(errors)
	}

	return nil
}

// ListOrgProductReplyMultiError is an error wrapping multiple validation
// errors returned by ListOrgProductReply.ValidateAll() if the designated
// constraints aren't met.
type ListOrgProductReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrgProductReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrgProductReplyMultiError) AllErrors() []error { return m }

// ListOrgProductReplyValidationError is the validation error returned by
// ListOrgProductReply.Validate if the designated constraints aren't met.
type ListOrgProductReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrgProductReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrgProductReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrgProductReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrgProductReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrgProductReplyValidationError) ErrorName() string {
	return "ListOrgProductReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrgProductReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrgProductReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrgProductReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrgProductReplyValidationError{}

// Validate checks the field values on DelOrgProductReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DelOrgProductReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelOrgProductReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelOrgProductReqMultiError, or nil if none found.
func (m *DelOrgProductReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelOrgProductReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := DelOrgProductReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := DelOrgProductReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := DelOrgProductReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelOrgProductReqMultiError(errors)
	}

	return nil
}

// DelOrgProductReqMultiError is an error wrapping multiple validation errors
// returned by DelOrgProductReq.ValidateAll() if the designated constraints
// aren't met.
type DelOrgProductReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelOrgProductReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelOrgProductReqMultiError) AllErrors() []error { return m }

// DelOrgProductReqValidationError is the validation error returned by
// DelOrgProductReq.Validate if the designated constraints aren't met.
type DelOrgProductReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelOrgProductReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelOrgProductReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelOrgProductReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelOrgProductReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelOrgProductReqValidationError) ErrorName() string { return "DelOrgProductReqValidationError" }

// Error satisfies the builtin error interface
func (e DelOrgProductReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelOrgProductReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelOrgProductReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelOrgProductReqValidationError{}

// Validate checks the field values on DelOrgProductReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelOrgProductReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelOrgProductReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelOrgProductReplyMultiError, or nil if none found.
func (m *DelOrgProductReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DelOrgProductReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return DelOrgProductReplyMultiError(errors)
	}

	return nil
}

// DelOrgProductReplyMultiError is an error wrapping multiple validation errors
// returned by DelOrgProductReply.ValidateAll() if the designated constraints
// aren't met.
type DelOrgProductReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelOrgProductReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelOrgProductReplyMultiError) AllErrors() []error { return m }

// DelOrgProductReplyValidationError is the validation error returned by
// DelOrgProductReply.Validate if the designated constraints aren't met.
type DelOrgProductReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelOrgProductReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelOrgProductReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelOrgProductReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelOrgProductReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelOrgProductReplyValidationError) ErrorName() string {
	return "DelOrgProductReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DelOrgProductReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelOrgProductReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelOrgProductReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelOrgProductReplyValidationError{}

// Validate checks the field values on GetOrgProductReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetOrgProductReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrgProductReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrgProductReqMultiError, or nil if none found.
func (m *GetOrgProductReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrgProductReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := GetOrgProductReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := GetOrgProductReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetOrgProductReqMultiError(errors)
	}

	return nil
}

// GetOrgProductReqMultiError is an error wrapping multiple validation errors
// returned by GetOrgProductReq.ValidateAll() if the designated constraints
// aren't met.
type GetOrgProductReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrgProductReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrgProductReqMultiError) AllErrors() []error { return m }

// GetOrgProductReqValidationError is the validation error returned by
// GetOrgProductReq.Validate if the designated constraints aren't met.
type GetOrgProductReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgProductReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgProductReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgProductReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgProductReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgProductReqValidationError) ErrorName() string { return "GetOrgProductReqValidationError" }

// Error satisfies the builtin error interface
func (e GetOrgProductReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgProductReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgProductReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgProductReqValidationError{}

// Validate checks the field values on GetOrgProductReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrgProductReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrgProductReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrgProductReplyMultiError, or nil if none found.
func (m *GetOrgProductReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrgProductReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for OrgUuid

	// no validation rules for ProductName

	// no validation rules for Logo

	// no validation rules for CreateTime

	// no validation rules for Describe

	if len(errors) > 0 {
		return GetOrgProductReplyMultiError(errors)
	}

	return nil
}

// GetOrgProductReplyMultiError is an error wrapping multiple validation errors
// returned by GetOrgProductReply.ValidateAll() if the designated constraints
// aren't met.
type GetOrgProductReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrgProductReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrgProductReplyMultiError) AllErrors() []error { return m }

// GetOrgProductReplyValidationError is the validation error returned by
// GetOrgProductReply.Validate if the designated constraints aren't met.
type GetOrgProductReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgProductReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgProductReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgProductReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgProductReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgProductReplyValidationError) ErrorName() string {
	return "GetOrgProductReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrgProductReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgProductReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgProductReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgProductReplyValidationError{}

// Validate checks the field values on CreateOrgProductGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrgProductGroupReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrgProductGroupReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrgProductGroupReqMultiError, or nil if none found.
func (m *CreateOrgProductGroupReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrgProductGroupReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := CreateOrgProductGroupReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := CreateOrgProductGroupReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := CreateOrgProductGroupReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetGroupName()) < 1 {
		err := CreateOrgProductGroupReqValidationError{
			field:  "GroupName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateOrgProductGroupReqMultiError(errors)
	}

	return nil
}

// CreateOrgProductGroupReqMultiError is an error wrapping multiple validation
// errors returned by CreateOrgProductGroupReq.ValidateAll() if the designated
// constraints aren't met.
type CreateOrgProductGroupReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrgProductGroupReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrgProductGroupReqMultiError) AllErrors() []error { return m }

// CreateOrgProductGroupReqValidationError is the validation error returned by
// CreateOrgProductGroupReq.Validate if the designated constraints aren't met.
type CreateOrgProductGroupReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrgProductGroupReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrgProductGroupReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrgProductGroupReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrgProductGroupReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrgProductGroupReqValidationError) ErrorName() string {
	return "CreateOrgProductGroupReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrgProductGroupReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrgProductGroupReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrgProductGroupReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrgProductGroupReqValidationError{}

// Validate checks the field values on CreateOrgProductGroupReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrgProductGroupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrgProductGroupReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrgProductGroupReplyMultiError, or nil if none found.
func (m *CreateOrgProductGroupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrgProductGroupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return CreateOrgProductGroupReplyMultiError(errors)
	}

	return nil
}

// CreateOrgProductGroupReplyMultiError is an error wrapping multiple
// validation errors returned by CreateOrgProductGroupReply.ValidateAll() if
// the designated constraints aren't met.
type CreateOrgProductGroupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrgProductGroupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrgProductGroupReplyMultiError) AllErrors() []error { return m }

// CreateOrgProductGroupReplyValidationError is the validation error returned
// by CreateOrgProductGroupReply.Validate if the designated constraints aren't met.
type CreateOrgProductGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrgProductGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrgProductGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrgProductGroupReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrgProductGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrgProductGroupReplyValidationError) ErrorName() string {
	return "CreateOrgProductGroupReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrgProductGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrgProductGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrgProductGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrgProductGroupReplyValidationError{}

// Validate checks the field values on ListOrgProductGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrgProductGroupReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrgProductGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrgProductGroupReqMultiError, or nil if none found.
func (m *ListOrgProductGroupReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrgProductGroupReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ListOrgProductGroupReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ListOrgProductGroupReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ListOrgProductGroupReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListOrgProductGroupReqMultiError(errors)
	}

	return nil
}

// ListOrgProductGroupReqMultiError is an error wrapping multiple validation
// errors returned by ListOrgProductGroupReq.ValidateAll() if the designated
// constraints aren't met.
type ListOrgProductGroupReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrgProductGroupReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrgProductGroupReqMultiError) AllErrors() []error { return m }

// ListOrgProductGroupReqValidationError is the validation error returned by
// ListOrgProductGroupReq.Validate if the designated constraints aren't met.
type ListOrgProductGroupReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrgProductGroupReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrgProductGroupReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrgProductGroupReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrgProductGroupReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrgProductGroupReqValidationError) ErrorName() string {
	return "ListOrgProductGroupReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrgProductGroupReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrgProductGroupReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrgProductGroupReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrgProductGroupReqValidationError{}

// Validate checks the field values on ListOrgProductGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrgProductGroupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrgProductGroupReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrgProductGroupReplyMultiError, or nil if none found.
func (m *ListOrgProductGroupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrgProductGroupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListOrgProductGroupReplyMultiError(errors)
	}

	return nil
}

// ListOrgProductGroupReplyMultiError is an error wrapping multiple validation
// errors returned by ListOrgProductGroupReply.ValidateAll() if the designated
// constraints aren't met.
type ListOrgProductGroupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrgProductGroupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrgProductGroupReplyMultiError) AllErrors() []error { return m }

// ListOrgProductGroupReplyValidationError is the validation error returned by
// ListOrgProductGroupReply.Validate if the designated constraints aren't met.
type ListOrgProductGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrgProductGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrgProductGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrgProductGroupReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrgProductGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrgProductGroupReplyValidationError) ErrorName() string {
	return "ListOrgProductGroupReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrgProductGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrgProductGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrgProductGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrgProductGroupReplyValidationError{}

// Validate checks the field values on DelOrgProductGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelOrgProductGroupReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelOrgProductGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelOrgProductGroupReqMultiError, or nil if none found.
func (m *DelOrgProductGroupReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelOrgProductGroupReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := DelOrgProductGroupReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := DelOrgProductGroupReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := DelOrgProductGroupReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetGroupUuid()) < 1 {
		err := DelOrgProductGroupReqValidationError{
			field:  "GroupUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelOrgProductGroupReqMultiError(errors)
	}

	return nil
}

// DelOrgProductGroupReqMultiError is an error wrapping multiple validation
// errors returned by DelOrgProductGroupReq.ValidateAll() if the designated
// constraints aren't met.
type DelOrgProductGroupReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelOrgProductGroupReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelOrgProductGroupReqMultiError) AllErrors() []error { return m }

// DelOrgProductGroupReqValidationError is the validation error returned by
// DelOrgProductGroupReq.Validate if the designated constraints aren't met.
type DelOrgProductGroupReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelOrgProductGroupReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelOrgProductGroupReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelOrgProductGroupReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelOrgProductGroupReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelOrgProductGroupReqValidationError) ErrorName() string {
	return "DelOrgProductGroupReqValidationError"
}

// Error satisfies the builtin error interface
func (e DelOrgProductGroupReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelOrgProductGroupReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelOrgProductGroupReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelOrgProductGroupReqValidationError{}

// Validate checks the field values on DelOrgProductGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelOrgProductGroupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelOrgProductGroupReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelOrgProductGroupReplyMultiError, or nil if none found.
func (m *DelOrgProductGroupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DelOrgProductGroupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return DelOrgProductGroupReplyMultiError(errors)
	}

	return nil
}

// DelOrgProductGroupReplyMultiError is an error wrapping multiple validation
// errors returned by DelOrgProductGroupReply.ValidateAll() if the designated
// constraints aren't met.
type DelOrgProductGroupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelOrgProductGroupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelOrgProductGroupReplyMultiError) AllErrors() []error { return m }

// DelOrgProductGroupReplyValidationError is the validation error returned by
// DelOrgProductGroupReply.Validate if the designated constraints aren't met.
type DelOrgProductGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelOrgProductGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelOrgProductGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelOrgProductGroupReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelOrgProductGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelOrgProductGroupReplyValidationError) ErrorName() string {
	return "DelOrgProductGroupReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DelOrgProductGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelOrgProductGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelOrgProductGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelOrgProductGroupReplyValidationError{}

// Validate checks the field values on AddOrgProductGroupMemberReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddOrgProductGroupMemberReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrgProductGroupMemberReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddOrgProductGroupMemberReqMultiError, or nil if none found.
func (m *AddOrgProductGroupMemberReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrgProductGroupMemberReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := AddOrgProductGroupMemberReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := AddOrgProductGroupMemberReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := AddOrgProductGroupMemberReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetGroupUuid()) < 1 {
		err := AddOrgProductGroupMemberReqValidationError{
			field:  "GroupUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetJoinUserUuid()) < 1 {
		err := AddOrgProductGroupMemberReqValidationError{
			field:  "JoinUserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddOrgProductGroupMemberReqMultiError(errors)
	}

	return nil
}

// AddOrgProductGroupMemberReqMultiError is an error wrapping multiple
// validation errors returned by AddOrgProductGroupMemberReq.ValidateAll() if
// the designated constraints aren't met.
type AddOrgProductGroupMemberReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrgProductGroupMemberReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrgProductGroupMemberReqMultiError) AllErrors() []error { return m }

// AddOrgProductGroupMemberReqValidationError is the validation error returned
// by AddOrgProductGroupMemberReq.Validate if the designated constraints
// aren't met.
type AddOrgProductGroupMemberReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrgProductGroupMemberReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrgProductGroupMemberReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrgProductGroupMemberReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrgProductGroupMemberReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrgProductGroupMemberReqValidationError) ErrorName() string {
	return "AddOrgProductGroupMemberReqValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrgProductGroupMemberReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrgProductGroupMemberReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrgProductGroupMemberReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrgProductGroupMemberReqValidationError{}

// Validate checks the field values on AddOrgProductGroupMemberReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddOrgProductGroupMemberReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrgProductGroupMemberReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AddOrgProductGroupMemberReplyMultiError, or nil if none found.
func (m *AddOrgProductGroupMemberReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrgProductGroupMemberReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return AddOrgProductGroupMemberReplyMultiError(errors)
	}

	return nil
}

// AddOrgProductGroupMemberReplyMultiError is an error wrapping multiple
// validation errors returned by AddOrgProductGroupMemberReply.ValidateAll()
// if the designated constraints aren't met.
type AddOrgProductGroupMemberReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrgProductGroupMemberReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrgProductGroupMemberReplyMultiError) AllErrors() []error { return m }

// AddOrgProductGroupMemberReplyValidationError is the validation error
// returned by AddOrgProductGroupMemberReply.Validate if the designated
// constraints aren't met.
type AddOrgProductGroupMemberReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrgProductGroupMemberReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrgProductGroupMemberReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrgProductGroupMemberReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrgProductGroupMemberReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrgProductGroupMemberReplyValidationError) ErrorName() string {
	return "AddOrgProductGroupMemberReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrgProductGroupMemberReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrgProductGroupMemberReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrgProductGroupMemberReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrgProductGroupMemberReplyValidationError{}

// Validate checks the field values on ListOrgProductGroupMemberReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrgProductGroupMemberReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrgProductGroupMemberReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrgProductGroupMemberReqMultiError, or nil if none found.
func (m *ListOrgProductGroupMemberReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrgProductGroupMemberReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ListOrgProductGroupMemberReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ListOrgProductGroupMemberReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ListOrgProductGroupMemberReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetGroupUuid()) < 1 {
		err := ListOrgProductGroupMemberReqValidationError{
			field:  "GroupUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListOrgProductGroupMemberReqMultiError(errors)
	}

	return nil
}

// ListOrgProductGroupMemberReqMultiError is an error wrapping multiple
// validation errors returned by ListOrgProductGroupMemberReq.ValidateAll() if
// the designated constraints aren't met.
type ListOrgProductGroupMemberReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrgProductGroupMemberReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrgProductGroupMemberReqMultiError) AllErrors() []error { return m }

// ListOrgProductGroupMemberReqValidationError is the validation error returned
// by ListOrgProductGroupMemberReq.Validate if the designated constraints
// aren't met.
type ListOrgProductGroupMemberReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrgProductGroupMemberReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrgProductGroupMemberReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrgProductGroupMemberReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrgProductGroupMemberReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrgProductGroupMemberReqValidationError) ErrorName() string {
	return "ListOrgProductGroupMemberReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrgProductGroupMemberReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrgProductGroupMemberReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrgProductGroupMemberReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrgProductGroupMemberReqValidationError{}

// Validate checks the field values on ListOrgProductGroupMemberReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrgProductGroupMemberReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrgProductGroupMemberReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListOrgProductGroupMemberReplyMultiError, or nil if none found.
func (m *ListOrgProductGroupMemberReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrgProductGroupMemberReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProductGroupMember() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrgProductGroupMemberReplyValidationError{
						field:  fmt.Sprintf("ProductGroupMember[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrgProductGroupMemberReplyValidationError{
						field:  fmt.Sprintf("ProductGroupMember[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrgProductGroupMemberReplyValidationError{
					field:  fmt.Sprintf("ProductGroupMember[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOrgProductGroupMemberReplyMultiError(errors)
	}

	return nil
}

// ListOrgProductGroupMemberReplyMultiError is an error wrapping multiple
// validation errors returned by ListOrgProductGroupMemberReply.ValidateAll()
// if the designated constraints aren't met.
type ListOrgProductGroupMemberReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrgProductGroupMemberReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrgProductGroupMemberReplyMultiError) AllErrors() []error { return m }

// ListOrgProductGroupMemberReplyValidationError is the validation error
// returned by ListOrgProductGroupMemberReply.Validate if the designated
// constraints aren't met.
type ListOrgProductGroupMemberReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrgProductGroupMemberReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrgProductGroupMemberReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrgProductGroupMemberReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrgProductGroupMemberReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrgProductGroupMemberReplyValidationError) ErrorName() string {
	return "ListOrgProductGroupMemberReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrgProductGroupMemberReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrgProductGroupMemberReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrgProductGroupMemberReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrgProductGroupMemberReplyValidationError{}

// Validate checks the field values on EvictOrgProductGroupMemberReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EvictOrgProductGroupMemberReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EvictOrgProductGroupMemberReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// EvictOrgProductGroupMemberReqMultiError, or nil if none found.
func (m *EvictOrgProductGroupMemberReq) ValidateAll() error {
	return m.validate(true)
}

func (m *EvictOrgProductGroupMemberReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := EvictOrgProductGroupMemberReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := EvictOrgProductGroupMemberReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := EvictOrgProductGroupMemberReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetGroupUuid()) < 1 {
		err := EvictOrgProductGroupMemberReqValidationError{
			field:  "GroupUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetEvictUserUuid()) < 1 {
		err := EvictOrgProductGroupMemberReqValidationError{
			field:  "EvictUserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EvictOrgProductGroupMemberReqMultiError(errors)
	}

	return nil
}

// EvictOrgProductGroupMemberReqMultiError is an error wrapping multiple
// validation errors returned by EvictOrgProductGroupMemberReq.ValidateAll()
// if the designated constraints aren't met.
type EvictOrgProductGroupMemberReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EvictOrgProductGroupMemberReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EvictOrgProductGroupMemberReqMultiError) AllErrors() []error { return m }

// EvictOrgProductGroupMemberReqValidationError is the validation error
// returned by EvictOrgProductGroupMemberReq.Validate if the designated
// constraints aren't met.
type EvictOrgProductGroupMemberReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EvictOrgProductGroupMemberReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EvictOrgProductGroupMemberReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EvictOrgProductGroupMemberReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EvictOrgProductGroupMemberReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EvictOrgProductGroupMemberReqValidationError) ErrorName() string {
	return "EvictOrgProductGroupMemberReqValidationError"
}

// Error satisfies the builtin error interface
func (e EvictOrgProductGroupMemberReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvictOrgProductGroupMemberReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EvictOrgProductGroupMemberReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EvictOrgProductGroupMemberReqValidationError{}

// Validate checks the field values on EvictOrgProductGroupMemberReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EvictOrgProductGroupMemberReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EvictOrgProductGroupMemberReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// EvictOrgProductGroupMemberReplyMultiError, or nil if none found.
func (m *EvictOrgProductGroupMemberReply) ValidateAll() error {
	return m.validate(true)
}

func (m *EvictOrgProductGroupMemberReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return EvictOrgProductGroupMemberReplyMultiError(errors)
	}

	return nil
}

// EvictOrgProductGroupMemberReplyMultiError is an error wrapping multiple
// validation errors returned by EvictOrgProductGroupMemberReply.ValidateAll()
// if the designated constraints aren't met.
type EvictOrgProductGroupMemberReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EvictOrgProductGroupMemberReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EvictOrgProductGroupMemberReplyMultiError) AllErrors() []error { return m }

// EvictOrgProductGroupMemberReplyValidationError is the validation error
// returned by EvictOrgProductGroupMemberReply.Validate if the designated
// constraints aren't met.
type EvictOrgProductGroupMemberReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EvictOrgProductGroupMemberReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EvictOrgProductGroupMemberReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EvictOrgProductGroupMemberReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EvictOrgProductGroupMemberReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EvictOrgProductGroupMemberReplyValidationError) ErrorName() string {
	return "EvictOrgProductGroupMemberReplyValidationError"
}

// Error satisfies the builtin error interface
func (e EvictOrgProductGroupMemberReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvictOrgProductGroupMemberReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EvictOrgProductGroupMemberReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EvictOrgProductGroupMemberReplyValidationError{}

// Validate checks the field values on LeaveOrgProductGroupMemberReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LeaveOrgProductGroupMemberReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LeaveOrgProductGroupMemberReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// LeaveOrgProductGroupMemberReqMultiError, or nil if none found.
func (m *LeaveOrgProductGroupMemberReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LeaveOrgProductGroupMemberReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := LeaveOrgProductGroupMemberReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := LeaveOrgProductGroupMemberReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := LeaveOrgProductGroupMemberReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetGroupUuid()) < 1 {
		err := LeaveOrgProductGroupMemberReqValidationError{
			field:  "GroupUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LeaveOrgProductGroupMemberReqMultiError(errors)
	}

	return nil
}

// LeaveOrgProductGroupMemberReqMultiError is an error wrapping multiple
// validation errors returned by LeaveOrgProductGroupMemberReq.ValidateAll()
// if the designated constraints aren't met.
type LeaveOrgProductGroupMemberReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LeaveOrgProductGroupMemberReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LeaveOrgProductGroupMemberReqMultiError) AllErrors() []error { return m }

// LeaveOrgProductGroupMemberReqValidationError is the validation error
// returned by LeaveOrgProductGroupMemberReq.Validate if the designated
// constraints aren't met.
type LeaveOrgProductGroupMemberReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LeaveOrgProductGroupMemberReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LeaveOrgProductGroupMemberReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LeaveOrgProductGroupMemberReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LeaveOrgProductGroupMemberReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LeaveOrgProductGroupMemberReqValidationError) ErrorName() string {
	return "LeaveOrgProductGroupMemberReqValidationError"
}

// Error satisfies the builtin error interface
func (e LeaveOrgProductGroupMemberReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLeaveOrgProductGroupMemberReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LeaveOrgProductGroupMemberReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LeaveOrgProductGroupMemberReqValidationError{}

// Validate checks the field values on LeaveOrgProductGroupMemberReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LeaveOrgProductGroupMemberReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LeaveOrgProductGroupMemberReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// LeaveOrgProductGroupMemberReplyMultiError, or nil if none found.
func (m *LeaveOrgProductGroupMemberReply) ValidateAll() error {
	return m.validate(true)
}

func (m *LeaveOrgProductGroupMemberReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return LeaveOrgProductGroupMemberReplyMultiError(errors)
	}

	return nil
}

// LeaveOrgProductGroupMemberReplyMultiError is an error wrapping multiple
// validation errors returned by LeaveOrgProductGroupMemberReply.ValidateAll()
// if the designated constraints aren't met.
type LeaveOrgProductGroupMemberReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LeaveOrgProductGroupMemberReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LeaveOrgProductGroupMemberReplyMultiError) AllErrors() []error { return m }

// LeaveOrgProductGroupMemberReplyValidationError is the validation error
// returned by LeaveOrgProductGroupMemberReply.Validate if the designated
// constraints aren't met.
type LeaveOrgProductGroupMemberReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LeaveOrgProductGroupMemberReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LeaveOrgProductGroupMemberReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LeaveOrgProductGroupMemberReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LeaveOrgProductGroupMemberReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LeaveOrgProductGroupMemberReplyValidationError) ErrorName() string {
	return "LeaveOrgProductGroupMemberReplyValidationError"
}

// Error satisfies the builtin error interface
func (e LeaveOrgProductGroupMemberReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLeaveOrgProductGroupMemberReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LeaveOrgProductGroupMemberReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LeaveOrgProductGroupMemberReplyValidationError{}

// Validate checks the field values on AddOrgProductEnvReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddOrgProductEnvReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrgProductEnvReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddOrgProductEnvReqMultiError, or nil if none found.
func (m *AddOrgProductEnvReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrgProductEnvReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := AddOrgProductEnvReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := AddOrgProductEnvReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := AddOrgProductEnvReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetEnvName()) < 1 {
		err := AddOrgProductEnvReqValidationError{
			field:  "EnvName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPriority() > 10 {
		err := AddOrgProductEnvReqValidationError{
			field:  "Priority",
			reason: "value must be less than or equal to 10",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Describe

	if len(errors) > 0 {
		return AddOrgProductEnvReqMultiError(errors)
	}

	return nil
}

// AddOrgProductEnvReqMultiError is an error wrapping multiple validation
// errors returned by AddOrgProductEnvReq.ValidateAll() if the designated
// constraints aren't met.
type AddOrgProductEnvReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrgProductEnvReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrgProductEnvReqMultiError) AllErrors() []error { return m }

// AddOrgProductEnvReqValidationError is the validation error returned by
// AddOrgProductEnvReq.Validate if the designated constraints aren't met.
type AddOrgProductEnvReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrgProductEnvReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrgProductEnvReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrgProductEnvReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrgProductEnvReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrgProductEnvReqValidationError) ErrorName() string {
	return "AddOrgProductEnvReqValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrgProductEnvReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrgProductEnvReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrgProductEnvReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrgProductEnvReqValidationError{}

// Validate checks the field values on AddOrgProductEnvReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddOrgProductEnvReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrgProductEnvReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddOrgProductEnvReplyMultiError, or nil if none found.
func (m *AddOrgProductEnvReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrgProductEnvReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return AddOrgProductEnvReplyMultiError(errors)
	}

	return nil
}

// AddOrgProductEnvReplyMultiError is an error wrapping multiple validation
// errors returned by AddOrgProductEnvReply.ValidateAll() if the designated
// constraints aren't met.
type AddOrgProductEnvReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrgProductEnvReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrgProductEnvReplyMultiError) AllErrors() []error { return m }

// AddOrgProductEnvReplyValidationError is the validation error returned by
// AddOrgProductEnvReply.Validate if the designated constraints aren't met.
type AddOrgProductEnvReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrgProductEnvReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrgProductEnvReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrgProductEnvReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrgProductEnvReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrgProductEnvReplyValidationError) ErrorName() string {
	return "AddOrgProductEnvReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrgProductEnvReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrgProductEnvReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrgProductEnvReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrgProductEnvReplyValidationError{}

// Validate checks the field values on ListOrgProductEnvReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrgProductEnvReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrgProductEnvReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrgProductEnvReqMultiError, or nil if none found.
func (m *ListOrgProductEnvReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrgProductEnvReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ListOrgProductEnvReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ListOrgProductEnvReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ListOrgProductEnvReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListOrgProductEnvReqMultiError(errors)
	}

	return nil
}

// ListOrgProductEnvReqMultiError is an error wrapping multiple validation
// errors returned by ListOrgProductEnvReq.ValidateAll() if the designated
// constraints aren't met.
type ListOrgProductEnvReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrgProductEnvReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrgProductEnvReqMultiError) AllErrors() []error { return m }

// ListOrgProductEnvReqValidationError is the validation error returned by
// ListOrgProductEnvReq.Validate if the designated constraints aren't met.
type ListOrgProductEnvReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrgProductEnvReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrgProductEnvReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrgProductEnvReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrgProductEnvReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrgProductEnvReqValidationError) ErrorName() string {
	return "ListOrgProductEnvReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrgProductEnvReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrgProductEnvReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrgProductEnvReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrgProductEnvReqValidationError{}

// Validate checks the field values on ListOrgProductEnvReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrgProductEnvReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrgProductEnvReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrgProductEnvReplyMultiError, or nil if none found.
func (m *ListOrgProductEnvReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrgProductEnvReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEnv() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrgProductEnvReplyValidationError{
						field:  fmt.Sprintf("Env[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrgProductEnvReplyValidationError{
						field:  fmt.Sprintf("Env[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrgProductEnvReplyValidationError{
					field:  fmt.Sprintf("Env[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOrgProductEnvReplyMultiError(errors)
	}

	return nil
}

// ListOrgProductEnvReplyMultiError is an error wrapping multiple validation
// errors returned by ListOrgProductEnvReply.ValidateAll() if the designated
// constraints aren't met.
type ListOrgProductEnvReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrgProductEnvReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrgProductEnvReplyMultiError) AllErrors() []error { return m }

// ListOrgProductEnvReplyValidationError is the validation error returned by
// ListOrgProductEnvReply.Validate if the designated constraints aren't met.
type ListOrgProductEnvReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrgProductEnvReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrgProductEnvReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrgProductEnvReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrgProductEnvReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrgProductEnvReplyValidationError) ErrorName() string {
	return "ListOrgProductEnvReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrgProductEnvReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrgProductEnvReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrgProductEnvReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrgProductEnvReplyValidationError{}

// Validate checks the field values on DelOrgProductEnvReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelOrgProductEnvReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelOrgProductEnvReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelOrgProductEnvReqMultiError, or nil if none found.
func (m *DelOrgProductEnvReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelOrgProductEnvReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := DelOrgProductEnvReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := DelOrgProductEnvReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := DelOrgProductEnvReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := DelOrgProductEnvReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelOrgProductEnvReqMultiError(errors)
	}

	return nil
}

// DelOrgProductEnvReqMultiError is an error wrapping multiple validation
// errors returned by DelOrgProductEnvReq.ValidateAll() if the designated
// constraints aren't met.
type DelOrgProductEnvReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelOrgProductEnvReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelOrgProductEnvReqMultiError) AllErrors() []error { return m }

// DelOrgProductEnvReqValidationError is the validation error returned by
// DelOrgProductEnvReq.Validate if the designated constraints aren't met.
type DelOrgProductEnvReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelOrgProductEnvReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelOrgProductEnvReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelOrgProductEnvReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelOrgProductEnvReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelOrgProductEnvReqValidationError) ErrorName() string {
	return "DelOrgProductEnvReqValidationError"
}

// Error satisfies the builtin error interface
func (e DelOrgProductEnvReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelOrgProductEnvReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelOrgProductEnvReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelOrgProductEnvReqValidationError{}

// Validate checks the field values on DelOrgProductEnvReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelOrgProductEnvReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelOrgProductEnvReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelOrgProductEnvReplyMultiError, or nil if none found.
func (m *DelOrgProductEnvReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DelOrgProductEnvReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return DelOrgProductEnvReplyMultiError(errors)
	}

	return nil
}

// DelOrgProductEnvReplyMultiError is an error wrapping multiple validation
// errors returned by DelOrgProductEnvReply.ValidateAll() if the designated
// constraints aren't met.
type DelOrgProductEnvReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelOrgProductEnvReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelOrgProductEnvReplyMultiError) AllErrors() []error { return m }

// DelOrgProductEnvReplyValidationError is the validation error returned by
// DelOrgProductEnvReply.Validate if the designated constraints aren't met.
type DelOrgProductEnvReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelOrgProductEnvReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelOrgProductEnvReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelOrgProductEnvReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelOrgProductEnvReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelOrgProductEnvReplyValidationError) ErrorName() string {
	return "DelOrgProductEnvReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DelOrgProductEnvReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelOrgProductEnvReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelOrgProductEnvReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelOrgProductEnvReplyValidationError{}

// Validate checks the field values on GetOrgProductEnvReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrgProductEnvReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrgProductEnvReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrgProductEnvReqMultiError, or nil if none found.
func (m *GetOrgProductEnvReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrgProductEnvReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := GetOrgProductEnvReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := GetOrgProductEnvReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetOrgProductEnvReqMultiError(errors)
	}

	return nil
}

// GetOrgProductEnvReqMultiError is an error wrapping multiple validation
// errors returned by GetOrgProductEnvReq.ValidateAll() if the designated
// constraints aren't met.
type GetOrgProductEnvReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrgProductEnvReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrgProductEnvReqMultiError) AllErrors() []error { return m }

// GetOrgProductEnvReqValidationError is the validation error returned by
// GetOrgProductEnvReq.Validate if the designated constraints aren't met.
type GetOrgProductEnvReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgProductEnvReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgProductEnvReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgProductEnvReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgProductEnvReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgProductEnvReqValidationError) ErrorName() string {
	return "GetOrgProductEnvReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrgProductEnvReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgProductEnvReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgProductEnvReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgProductEnvReqValidationError{}

// Validate checks the field values on GetOrgProductEnvReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrgProductEnvReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrgProductEnvReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrgProductEnvReplyMultiError, or nil if none found.
func (m *GetOrgProductEnvReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrgProductEnvReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for ProductUuid

	// no validation rules for EnvName

	// no validation rules for Priority

	// no validation rules for Describe

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return GetOrgProductEnvReplyMultiError(errors)
	}

	return nil
}

// GetOrgProductEnvReplyMultiError is an error wrapping multiple validation
// errors returned by GetOrgProductEnvReply.ValidateAll() if the designated
// constraints aren't met.
type GetOrgProductEnvReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrgProductEnvReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrgProductEnvReplyMultiError) AllErrors() []error { return m }

// GetOrgProductEnvReplyValidationError is the validation error returned by
// GetOrgProductEnvReply.Validate if the designated constraints aren't met.
type GetOrgProductEnvReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgProductEnvReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgProductEnvReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgProductEnvReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgProductEnvReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgProductEnvReplyValidationError) ErrorName() string {
	return "GetOrgProductEnvReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrgProductEnvReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgProductEnvReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgProductEnvReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgProductEnvReplyValidationError{}

// Validate checks the field values on VerifyProductInOrgReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifyProductInOrgReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyProductInOrgReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyProductInOrgReqMultiError, or nil if none found.
func (m *VerifyProductInOrgReq) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyProductInOrgReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := VerifyProductInOrgReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := VerifyProductInOrgReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return VerifyProductInOrgReqMultiError(errors)
	}

	return nil
}

// VerifyProductInOrgReqMultiError is an error wrapping multiple validation
// errors returned by VerifyProductInOrgReq.ValidateAll() if the designated
// constraints aren't met.
type VerifyProductInOrgReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyProductInOrgReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyProductInOrgReqMultiError) AllErrors() []error { return m }

// VerifyProductInOrgReqValidationError is the validation error returned by
// VerifyProductInOrgReq.Validate if the designated constraints aren't met.
type VerifyProductInOrgReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyProductInOrgReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyProductInOrgReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyProductInOrgReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyProductInOrgReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyProductInOrgReqValidationError) ErrorName() string {
	return "VerifyProductInOrgReqValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyProductInOrgReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyProductInOrgReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyProductInOrgReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyProductInOrgReqValidationError{}

// Validate checks the field values on VerifyProductInOrgReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifyProductInOrgReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyProductInOrgReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyProductInOrgReplyMultiError, or nil if none found.
func (m *VerifyProductInOrgReply) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyProductInOrgReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return VerifyProductInOrgReplyMultiError(errors)
	}

	return nil
}

// VerifyProductInOrgReplyMultiError is an error wrapping multiple validation
// errors returned by VerifyProductInOrgReply.ValidateAll() if the designated
// constraints aren't met.
type VerifyProductInOrgReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyProductInOrgReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyProductInOrgReplyMultiError) AllErrors() []error { return m }

// VerifyProductInOrgReplyValidationError is the validation error returned by
// VerifyProductInOrgReply.Validate if the designated constraints aren't met.
type VerifyProductInOrgReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyProductInOrgReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyProductInOrgReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyProductInOrgReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyProductInOrgReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyProductInOrgReplyValidationError) ErrorName() string {
	return "VerifyProductInOrgReplyValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyProductInOrgReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyProductInOrgReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyProductInOrgReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyProductInOrgReplyValidationError{}

// Validate checks the field values on K8SCluster with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *K8SCluster) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on K8SCluster with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in K8SClusterMultiError, or
// nil if none found.
func (m *K8SCluster) ValidateAll() error {
	return m.validate(true)
}

func (m *K8SCluster) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for Name

	// no validation rules for OrgUuid

	// no validation rules for ProductUuid

	// no validation rules for ProductEnvUuid

	// no validation rules for UpToken

	// no validation rules for ApiService

	// no validation rules for Describe

	// no validation rules for KubeEdgeGrpc

	// no validation rules for Token

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return K8SClusterMultiError(errors)
	}

	return nil
}

// K8SClusterMultiError is an error wrapping multiple validation errors
// returned by K8SCluster.ValidateAll() if the designated constraints aren't met.
type K8SClusterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m K8SClusterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m K8SClusterMultiError) AllErrors() []error { return m }

// K8SClusterValidationError is the validation error returned by
// K8SCluster.Validate if the designated constraints aren't met.
type K8SClusterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e K8SClusterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e K8SClusterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e K8SClusterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e K8SClusterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e K8SClusterValidationError) ErrorName() string { return "K8SClusterValidationError" }

// Error satisfies the builtin error interface
func (e K8SClusterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sK8SCluster.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = K8SClusterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = K8SClusterValidationError{}

// Validate checks the field values on AddK8SClusterReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddK8SClusterReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddK8SClusterReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddK8SClusterReqMultiError, or nil if none found.
func (m *AddK8SClusterReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddK8SClusterReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := AddK8SClusterReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := AddK8SClusterReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := AddK8SClusterReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := AddK8SClusterReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := AddK8SClusterReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetApiService()) < 1 {
		err := AddK8SClusterReqValidationError{
			field:  "ApiService",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Describe

	if len(errors) > 0 {
		return AddK8SClusterReqMultiError(errors)
	}

	return nil
}

// AddK8SClusterReqMultiError is an error wrapping multiple validation errors
// returned by AddK8SClusterReq.ValidateAll() if the designated constraints
// aren't met.
type AddK8SClusterReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddK8SClusterReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddK8SClusterReqMultiError) AllErrors() []error { return m }

// AddK8SClusterReqValidationError is the validation error returned by
// AddK8SClusterReq.Validate if the designated constraints aren't met.
type AddK8SClusterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddK8SClusterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddK8SClusterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddK8SClusterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddK8SClusterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddK8SClusterReqValidationError) ErrorName() string { return "AddK8SClusterReqValidationError" }

// Error satisfies the builtin error interface
func (e AddK8SClusterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddK8SClusterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddK8SClusterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddK8SClusterReqValidationError{}

// Validate checks the field values on AddK8SClusterReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddK8SClusterReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddK8SClusterReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddK8SClusterReplyMultiError, or nil if none found.
func (m *AddK8SClusterReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddK8SClusterReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return AddK8SClusterReplyMultiError(errors)
	}

	return nil
}

// AddK8SClusterReplyMultiError is an error wrapping multiple validation errors
// returned by AddK8SClusterReply.ValidateAll() if the designated constraints
// aren't met.
type AddK8SClusterReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddK8SClusterReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddK8SClusterReplyMultiError) AllErrors() []error { return m }

// AddK8SClusterReplyValidationError is the validation error returned by
// AddK8SClusterReply.Validate if the designated constraints aren't met.
type AddK8SClusterReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddK8SClusterReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddK8SClusterReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddK8SClusterReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddK8SClusterReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddK8SClusterReplyValidationError) ErrorName() string {
	return "AddK8SClusterReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AddK8SClusterReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddK8SClusterReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddK8SClusterReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddK8SClusterReplyValidationError{}

// Validate checks the field values on ExistK8SClusterReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExistK8SClusterReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExistK8SClusterReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExistK8SClusterReqMultiError, or nil if none found.
func (m *ExistK8SClusterReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ExistK8SClusterReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ExistK8SClusterReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ExistK8SClusterReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := ExistK8SClusterReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetClusterUuid()) < 1 {
		err := ExistK8SClusterReqValidationError{
			field:  "ClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUpToken()) < 1 {
		err := ExistK8SClusterReqValidationError{
			field:  "UpToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ExistK8SClusterReqMultiError(errors)
	}

	return nil
}

// ExistK8SClusterReqMultiError is an error wrapping multiple validation errors
// returned by ExistK8SClusterReq.ValidateAll() if the designated constraints
// aren't met.
type ExistK8SClusterReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExistK8SClusterReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExistK8SClusterReqMultiError) AllErrors() []error { return m }

// ExistK8SClusterReqValidationError is the validation error returned by
// ExistK8SClusterReq.Validate if the designated constraints aren't met.
type ExistK8SClusterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExistK8SClusterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExistK8SClusterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExistK8SClusterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExistK8SClusterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExistK8SClusterReqValidationError) ErrorName() string {
	return "ExistK8SClusterReqValidationError"
}

// Error satisfies the builtin error interface
func (e ExistK8SClusterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExistK8SClusterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExistK8SClusterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExistK8SClusterReqValidationError{}

// Validate checks the field values on ExistK8SClusterReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExistK8SClusterReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExistK8SClusterReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExistK8SClusterReplyMultiError, or nil if none found.
func (m *ExistK8SClusterReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ExistK8SClusterReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for Name

	// no validation rules for OrgUuid

	// no validation rules for ProductUuid

	// no validation rules for ProductEnvUuid

	// no validation rules for UpToken

	// no validation rules for ApiService

	// no validation rules for Describe

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return ExistK8SClusterReplyMultiError(errors)
	}

	return nil
}

// ExistK8SClusterReplyMultiError is an error wrapping multiple validation
// errors returned by ExistK8SClusterReply.ValidateAll() if the designated
// constraints aren't met.
type ExistK8SClusterReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExistK8SClusterReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExistK8SClusterReplyMultiError) AllErrors() []error { return m }

// ExistK8SClusterReplyValidationError is the validation error returned by
// ExistK8SClusterReply.Validate if the designated constraints aren't met.
type ExistK8SClusterReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExistK8SClusterReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExistK8SClusterReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExistK8SClusterReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExistK8SClusterReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExistK8SClusterReplyValidationError) ErrorName() string {
	return "ExistK8SClusterReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ExistK8SClusterReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExistK8SClusterReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExistK8SClusterReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExistK8SClusterReplyValidationError{}

// Validate checks the field values on ListK8SClusterReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListK8SClusterReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListK8SClusterReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListK8SClusterReqMultiError, or nil if none found.
func (m *ListK8SClusterReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListK8SClusterReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ListK8SClusterReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ListK8SClusterReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ListK8SClusterReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := ListK8SClusterReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListK8SClusterReqMultiError(errors)
	}

	return nil
}

// ListK8SClusterReqMultiError is an error wrapping multiple validation errors
// returned by ListK8SClusterReq.ValidateAll() if the designated constraints
// aren't met.
type ListK8SClusterReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListK8SClusterReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListK8SClusterReqMultiError) AllErrors() []error { return m }

// ListK8SClusterReqValidationError is the validation error returned by
// ListK8SClusterReq.Validate if the designated constraints aren't met.
type ListK8SClusterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListK8SClusterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListK8SClusterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListK8SClusterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListK8SClusterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListK8SClusterReqValidationError) ErrorName() string {
	return "ListK8SClusterReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListK8SClusterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListK8SClusterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListK8SClusterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListK8SClusterReqValidationError{}

// Validate checks the field values on ListK8SClusterReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListK8SClusterReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListK8SClusterReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListK8SClusterReplyMultiError, or nil if none found.
func (m *ListK8SClusterReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListK8SClusterReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetK8SCluster() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListK8SClusterReplyValidationError{
						field:  fmt.Sprintf("K8SCluster[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListK8SClusterReplyValidationError{
						field:  fmt.Sprintf("K8SCluster[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListK8SClusterReplyValidationError{
					field:  fmt.Sprintf("K8SCluster[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListK8SClusterReplyMultiError(errors)
	}

	return nil
}

// ListK8SClusterReplyMultiError is an error wrapping multiple validation
// errors returned by ListK8SClusterReply.ValidateAll() if the designated
// constraints aren't met.
type ListK8SClusterReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListK8SClusterReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListK8SClusterReplyMultiError) AllErrors() []error { return m }

// ListK8SClusterReplyValidationError is the validation error returned by
// ListK8SClusterReply.Validate if the designated constraints aren't met.
type ListK8SClusterReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListK8SClusterReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListK8SClusterReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListK8SClusterReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListK8SClusterReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListK8SClusterReplyValidationError) ErrorName() string {
	return "ListK8SClusterReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListK8SClusterReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListK8SClusterReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListK8SClusterReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListK8SClusterReplyValidationError{}

// Validate checks the field values on DelK8SClusterReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DelK8SClusterReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelK8SClusterReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelK8SClusterReqMultiError, or nil if none found.
func (m *DelK8SClusterReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelK8SClusterReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := DelK8SClusterReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := DelK8SClusterReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := DelK8SClusterReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := DelK8SClusterReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetClusterUuid()) < 1 {
		err := DelK8SClusterReqValidationError{
			field:  "ClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelK8SClusterReqMultiError(errors)
	}

	return nil
}

// DelK8SClusterReqMultiError is an error wrapping multiple validation errors
// returned by DelK8SClusterReq.ValidateAll() if the designated constraints
// aren't met.
type DelK8SClusterReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelK8SClusterReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelK8SClusterReqMultiError) AllErrors() []error { return m }

// DelK8SClusterReqValidationError is the validation error returned by
// DelK8SClusterReq.Validate if the designated constraints aren't met.
type DelK8SClusterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelK8SClusterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelK8SClusterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelK8SClusterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelK8SClusterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelK8SClusterReqValidationError) ErrorName() string { return "DelK8SClusterReqValidationError" }

// Error satisfies the builtin error interface
func (e DelK8SClusterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelK8SClusterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelK8SClusterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelK8SClusterReqValidationError{}

// Validate checks the field values on DelK8SClusterReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelK8SClusterReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelK8SClusterReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelK8SClusterReplyMultiError, or nil if none found.
func (m *DelK8SClusterReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DelK8SClusterReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return DelK8SClusterReplyMultiError(errors)
	}

	return nil
}

// DelK8SClusterReplyMultiError is an error wrapping multiple validation errors
// returned by DelK8SClusterReply.ValidateAll() if the designated constraints
// aren't met.
type DelK8SClusterReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelK8SClusterReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelK8SClusterReplyMultiError) AllErrors() []error { return m }

// DelK8SClusterReplyValidationError is the validation error returned by
// DelK8SClusterReply.Validate if the designated constraints aren't met.
type DelK8SClusterReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelK8SClusterReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelK8SClusterReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelK8SClusterReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelK8SClusterReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelK8SClusterReplyValidationError) ErrorName() string {
	return "DelK8SClusterReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DelK8SClusterReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelK8SClusterReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelK8SClusterReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelK8SClusterReplyValidationError{}

// Validate checks the field values on AddK8SClusterEdgeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddK8SClusterEdgeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddK8SClusterEdgeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddK8SClusterEdgeReqMultiError, or nil if none found.
func (m *AddK8SClusterEdgeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddK8SClusterEdgeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := AddK8SClusterEdgeReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := AddK8SClusterEdgeReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := AddK8SClusterEdgeReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := AddK8SClusterEdgeReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := AddK8SClusterEdgeReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKubeEdgeGrpc()) < 1 {
		err := AddK8SClusterEdgeReqValidationError{
			field:  "KubeEdgeGrpc",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetToken()) < 1 {
		err := AddK8SClusterEdgeReqValidationError{
			field:  "Token",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddK8SClusterEdgeReqMultiError(errors)
	}

	return nil
}

// AddK8SClusterEdgeReqMultiError is an error wrapping multiple validation
// errors returned by AddK8SClusterEdgeReq.ValidateAll() if the designated
// constraints aren't met.
type AddK8SClusterEdgeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddK8SClusterEdgeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddK8SClusterEdgeReqMultiError) AllErrors() []error { return m }

// AddK8SClusterEdgeReqValidationError is the validation error returned by
// AddK8SClusterEdgeReq.Validate if the designated constraints aren't met.
type AddK8SClusterEdgeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddK8SClusterEdgeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddK8SClusterEdgeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddK8SClusterEdgeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddK8SClusterEdgeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddK8SClusterEdgeReqValidationError) ErrorName() string {
	return "AddK8SClusterEdgeReqValidationError"
}

// Error satisfies the builtin error interface
func (e AddK8SClusterEdgeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddK8SClusterEdgeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddK8SClusterEdgeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddK8SClusterEdgeReqValidationError{}

// Validate checks the field values on AddK8SClusterEdgeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddK8SClusterEdgeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddK8SClusterEdgeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddK8SClusterEdgeReplyMultiError, or nil if none found.
func (m *AddK8SClusterEdgeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddK8SClusterEdgeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return AddK8SClusterEdgeReplyMultiError(errors)
	}

	return nil
}

// AddK8SClusterEdgeReplyMultiError is an error wrapping multiple validation
// errors returned by AddK8SClusterEdgeReply.ValidateAll() if the designated
// constraints aren't met.
type AddK8SClusterEdgeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddK8SClusterEdgeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddK8SClusterEdgeReplyMultiError) AllErrors() []error { return m }

// AddK8SClusterEdgeReplyValidationError is the validation error returned by
// AddK8SClusterEdgeReply.Validate if the designated constraints aren't met.
type AddK8SClusterEdgeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddK8SClusterEdgeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddK8SClusterEdgeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddK8SClusterEdgeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddK8SClusterEdgeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddK8SClusterEdgeReplyValidationError) ErrorName() string {
	return "AddK8SClusterEdgeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AddK8SClusterEdgeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddK8SClusterEdgeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddK8SClusterEdgeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddK8SClusterEdgeReplyValidationError{}

// Validate checks the field values on GetK8SClusterEdgeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetK8SClusterEdgeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetK8SClusterEdgeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetK8SClusterEdgeReqMultiError, or nil if none found.
func (m *GetK8SClusterEdgeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetK8SClusterEdgeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := GetK8SClusterEdgeReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := GetK8SClusterEdgeReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := GetK8SClusterEdgeReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := GetK8SClusterEdgeReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := GetK8SClusterEdgeReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetK8SClusterEdgeReqMultiError(errors)
	}

	return nil
}

// GetK8SClusterEdgeReqMultiError is an error wrapping multiple validation
// errors returned by GetK8SClusterEdgeReq.ValidateAll() if the designated
// constraints aren't met.
type GetK8SClusterEdgeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetK8SClusterEdgeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetK8SClusterEdgeReqMultiError) AllErrors() []error { return m }

// GetK8SClusterEdgeReqValidationError is the validation error returned by
// GetK8SClusterEdgeReq.Validate if the designated constraints aren't met.
type GetK8SClusterEdgeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetK8SClusterEdgeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetK8SClusterEdgeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetK8SClusterEdgeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetK8SClusterEdgeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetK8SClusterEdgeReqValidationError) ErrorName() string {
	return "GetK8SClusterEdgeReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetK8SClusterEdgeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetK8SClusterEdgeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetK8SClusterEdgeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetK8SClusterEdgeReqValidationError{}

// Validate checks the field values on GetK8SClusterEdgeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetK8SClusterEdgeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetK8SClusterEdgeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetK8SClusterEdgeReplyMultiError, or nil if none found.
func (m *GetK8SClusterEdgeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetK8SClusterEdgeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for KubeEdgeGrpc

	// no validation rules for Token

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return GetK8SClusterEdgeReplyMultiError(errors)
	}

	return nil
}

// GetK8SClusterEdgeReplyMultiError is an error wrapping multiple validation
// errors returned by GetK8SClusterEdgeReply.ValidateAll() if the designated
// constraints aren't met.
type GetK8SClusterEdgeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetK8SClusterEdgeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetK8SClusterEdgeReplyMultiError) AllErrors() []error { return m }

// GetK8SClusterEdgeReplyValidationError is the validation error returned by
// GetK8SClusterEdgeReply.Validate if the designated constraints aren't met.
type GetK8SClusterEdgeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetK8SClusterEdgeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetK8SClusterEdgeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetK8SClusterEdgeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetK8SClusterEdgeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetK8SClusterEdgeReplyValidationError) ErrorName() string {
	return "GetK8SClusterEdgeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetK8SClusterEdgeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetK8SClusterEdgeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetK8SClusterEdgeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetK8SClusterEdgeReplyValidationError{}

// Validate checks the field values on DelK8SClusterEdgeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelK8SClusterEdgeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelK8SClusterEdgeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelK8SClusterEdgeReqMultiError, or nil if none found.
func (m *DelK8SClusterEdgeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelK8SClusterEdgeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := DelK8SClusterEdgeReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := DelK8SClusterEdgeReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := DelK8SClusterEdgeReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := DelK8SClusterEdgeReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := DelK8SClusterEdgeReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelK8SClusterEdgeReqMultiError(errors)
	}

	return nil
}

// DelK8SClusterEdgeReqMultiError is an error wrapping multiple validation
// errors returned by DelK8SClusterEdgeReq.ValidateAll() if the designated
// constraints aren't met.
type DelK8SClusterEdgeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelK8SClusterEdgeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelK8SClusterEdgeReqMultiError) AllErrors() []error { return m }

// DelK8SClusterEdgeReqValidationError is the validation error returned by
// DelK8SClusterEdgeReq.Validate if the designated constraints aren't met.
type DelK8SClusterEdgeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelK8SClusterEdgeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelK8SClusterEdgeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelK8SClusterEdgeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelK8SClusterEdgeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelK8SClusterEdgeReqValidationError) ErrorName() string {
	return "DelK8SClusterEdgeReqValidationError"
}

// Error satisfies the builtin error interface
func (e DelK8SClusterEdgeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelK8SClusterEdgeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelK8SClusterEdgeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelK8SClusterEdgeReqValidationError{}

// Validate checks the field values on DelK8SClusterEdgeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelK8SClusterEdgeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelK8SClusterEdgeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelK8SClusterEdgeReplyMultiError, or nil if none found.
func (m *DelK8SClusterEdgeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DelK8SClusterEdgeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return DelK8SClusterEdgeReplyMultiError(errors)
	}

	return nil
}

// DelK8SClusterEdgeReplyMultiError is an error wrapping multiple validation
// errors returned by DelK8SClusterEdgeReply.ValidateAll() if the designated
// constraints aren't met.
type DelK8SClusterEdgeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelK8SClusterEdgeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelK8SClusterEdgeReplyMultiError) AllErrors() []error { return m }

// DelK8SClusterEdgeReplyValidationError is the validation error returned by
// DelK8SClusterEdgeReply.Validate if the designated constraints aren't met.
type DelK8SClusterEdgeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelK8SClusterEdgeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelK8SClusterEdgeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelK8SClusterEdgeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelK8SClusterEdgeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelK8SClusterEdgeReplyValidationError) ErrorName() string {
	return "DelK8SClusterEdgeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DelK8SClusterEdgeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelK8SClusterEdgeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelK8SClusterEdgeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelK8SClusterEdgeReplyValidationError{}

// Validate checks the field values on GetK8SClusterNodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetK8SClusterNodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetK8SClusterNodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetK8SClusterNodeReqMultiError, or nil if none found.
func (m *GetK8SClusterNodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetK8SClusterNodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := GetK8SClusterNodeReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := GetK8SClusterNodeReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := GetK8SClusterNodeReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := GetK8SClusterNodeReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := GetK8SClusterNodeReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNodeName()) < 1 {
		err := GetK8SClusterNodeReqValidationError{
			field:  "NodeName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetK8SClusterNodeReqMultiError(errors)
	}

	return nil
}

// GetK8SClusterNodeReqMultiError is an error wrapping multiple validation
// errors returned by GetK8SClusterNodeReq.ValidateAll() if the designated
// constraints aren't met.
type GetK8SClusterNodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetK8SClusterNodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetK8SClusterNodeReqMultiError) AllErrors() []error { return m }

// GetK8SClusterNodeReqValidationError is the validation error returned by
// GetK8SClusterNodeReq.Validate if the designated constraints aren't met.
type GetK8SClusterNodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetK8SClusterNodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetK8SClusterNodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetK8SClusterNodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetK8SClusterNodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetK8SClusterNodeReqValidationError) ErrorName() string {
	return "GetK8SClusterNodeReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetK8SClusterNodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetK8SClusterNodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetK8SClusterNodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetK8SClusterNodeReqValidationError{}

// Validate checks the field values on GetK8SClusterNodeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetK8SClusterNodeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetK8SClusterNodeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetK8SClusterNodeReplyMultiError, or nil if none found.
func (m *GetK8SClusterNodeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetK8SClusterNodeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for CreationTimestamp

	// no validation rules for ContainerRuntimeVersion

	// no validation rules for KernelVersion

	// no validation rules for KubeProxyVersion

	// no validation rules for KubeletVersion

	// no validation rules for KubeletEndpoint

	// no validation rules for OsImage

	// no validation rules for Labels

	// no validation rules for Annotations

	if all {
		switch v := interface{}(m.GetCapacity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetK8SClusterNodeReplyValidationError{
					field:  "Capacity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetK8SClusterNodeReplyValidationError{
					field:  "Capacity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCapacity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetK8SClusterNodeReplyValidationError{
				field:  "Capacity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAllocatable()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetK8SClusterNodeReplyValidationError{
					field:  "Allocatable",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetK8SClusterNodeReplyValidationError{
					field:  "Allocatable",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAllocatable()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetK8SClusterNodeReplyValidationError{
				field:  "Allocatable",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetK8SClusterNodeReplyMultiError(errors)
	}

	return nil
}

// GetK8SClusterNodeReplyMultiError is an error wrapping multiple validation
// errors returned by GetK8SClusterNodeReply.ValidateAll() if the designated
// constraints aren't met.
type GetK8SClusterNodeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetK8SClusterNodeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetK8SClusterNodeReplyMultiError) AllErrors() []error { return m }

// GetK8SClusterNodeReplyValidationError is the validation error returned by
// GetK8SClusterNodeReply.Validate if the designated constraints aren't met.
type GetK8SClusterNodeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetK8SClusterNodeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetK8SClusterNodeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetK8SClusterNodeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetK8SClusterNodeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetK8SClusterNodeReplyValidationError) ErrorName() string {
	return "GetK8SClusterNodeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetK8SClusterNodeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetK8SClusterNodeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetK8SClusterNodeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetK8SClusterNodeReplyValidationError{}

// Validate checks the field values on ListK8SClusterNodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListK8SClusterNodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListK8SClusterNodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListK8SClusterNodeReqMultiError, or nil if none found.
func (m *ListK8SClusterNodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListK8SClusterNodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ListK8SClusterNodeReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ListK8SClusterNodeReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ListK8SClusterNodeReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := ListK8SClusterNodeReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := ListK8SClusterNodeReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListK8SClusterNodeReqMultiError(errors)
	}

	return nil
}

// ListK8SClusterNodeReqMultiError is an error wrapping multiple validation
// errors returned by ListK8SClusterNodeReq.ValidateAll() if the designated
// constraints aren't met.
type ListK8SClusterNodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListK8SClusterNodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListK8SClusterNodeReqMultiError) AllErrors() []error { return m }

// ListK8SClusterNodeReqValidationError is the validation error returned by
// ListK8SClusterNodeReq.Validate if the designated constraints aren't met.
type ListK8SClusterNodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListK8SClusterNodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListK8SClusterNodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListK8SClusterNodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListK8SClusterNodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListK8SClusterNodeReqValidationError) ErrorName() string {
	return "ListK8SClusterNodeReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListK8SClusterNodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListK8SClusterNodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListK8SClusterNodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListK8SClusterNodeReqValidationError{}

// Validate checks the field values on ListK8SClusterNodeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListK8SClusterNodeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListK8SClusterNodeReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListK8SClusterNodeReplyMultiError, or nil if none found.
func (m *ListK8SClusterNodeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListK8SClusterNodeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNode() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListK8SClusterNodeReplyValidationError{
						field:  fmt.Sprintf("Node[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListK8SClusterNodeReplyValidationError{
						field:  fmt.Sprintf("Node[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListK8SClusterNodeReplyValidationError{
					field:  fmt.Sprintf("Node[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListK8SClusterNodeReplyMultiError(errors)
	}

	return nil
}

// ListK8SClusterNodeReplyMultiError is an error wrapping multiple validation
// errors returned by ListK8SClusterNodeReply.ValidateAll() if the designated
// constraints aren't met.
type ListK8SClusterNodeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListK8SClusterNodeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListK8SClusterNodeReplyMultiError) AllErrors() []error { return m }

// ListK8SClusterNodeReplyValidationError is the validation error returned by
// ListK8SClusterNodeReply.Validate if the designated constraints aren't met.
type ListK8SClusterNodeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListK8SClusterNodeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListK8SClusterNodeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListK8SClusterNodeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListK8SClusterNodeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListK8SClusterNodeReplyValidationError) ErrorName() string {
	return "ListK8SClusterNodeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListK8SClusterNodeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListK8SClusterNodeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListK8SClusterNodeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListK8SClusterNodeReplyValidationError{}

// Validate checks the field values on ListK8SPodReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListK8SPodReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListK8SPodReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListK8SPodReqMultiError, or
// nil if none found.
func (m *ListK8SPodReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListK8SPodReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ListK8SPodReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ListK8SPodReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ListK8SPodReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := ListK8SPodReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := ListK8SPodReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := ListK8SPodReqValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Limit

	// no validation rules for Continue

	// no validation rules for LabelSelector

	if len(errors) > 0 {
		return ListK8SPodReqMultiError(errors)
	}

	return nil
}

// ListK8SPodReqMultiError is an error wrapping multiple validation errors
// returned by ListK8SPodReq.ValidateAll() if the designated constraints
// aren't met.
type ListK8SPodReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListK8SPodReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListK8SPodReqMultiError) AllErrors() []error { return m }

// ListK8SPodReqValidationError is the validation error returned by
// ListK8SPodReq.Validate if the designated constraints aren't met.
type ListK8SPodReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListK8SPodReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListK8SPodReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListK8SPodReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListK8SPodReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListK8SPodReqValidationError) ErrorName() string { return "ListK8SPodReqValidationError" }

// Error satisfies the builtin error interface
func (e ListK8SPodReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListK8SPodReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListK8SPodReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListK8SPodReqValidationError{}

// Validate checks the field values on ListK8SPodReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListK8SPodReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListK8SPodReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListK8SPodReplyMultiError, or nil if none found.
func (m *ListK8SPodReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListK8SPodReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Continue

	for idx, item := range m.GetPod() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListK8SPodReplyValidationError{
						field:  fmt.Sprintf("Pod[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListK8SPodReplyValidationError{
						field:  fmt.Sprintf("Pod[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListK8SPodReplyValidationError{
					field:  fmt.Sprintf("Pod[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListK8SPodReplyMultiError(errors)
	}

	return nil
}

// ListK8SPodReplyMultiError is an error wrapping multiple validation errors
// returned by ListK8SPodReply.ValidateAll() if the designated constraints
// aren't met.
type ListK8SPodReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListK8SPodReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListK8SPodReplyMultiError) AllErrors() []error { return m }

// ListK8SPodReplyValidationError is the validation error returned by
// ListK8SPodReply.Validate if the designated constraints aren't met.
type ListK8SPodReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListK8SPodReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListK8SPodReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListK8SPodReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListK8SPodReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListK8SPodReplyValidationError) ErrorName() string { return "ListK8SPodReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListK8SPodReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListK8SPodReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListK8SPodReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListK8SPodReplyValidationError{}

// Validate checks the field values on EvictK8SPodReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EvictK8SPodReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EvictK8SPodReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EvictK8SPodReqMultiError,
// or nil if none found.
func (m *EvictK8SPodReq) ValidateAll() error {
	return m.validate(true)
}

func (m *EvictK8SPodReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := EvictK8SPodReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := EvictK8SPodReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := EvictK8SPodReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := EvictK8SPodReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := EvictK8SPodReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := EvictK8SPodReqValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := EvictK8SPodReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EvictK8SPodReqMultiError(errors)
	}

	return nil
}

// EvictK8SPodReqMultiError is an error wrapping multiple validation errors
// returned by EvictK8SPodReq.ValidateAll() if the designated constraints
// aren't met.
type EvictK8SPodReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EvictK8SPodReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EvictK8SPodReqMultiError) AllErrors() []error { return m }

// EvictK8SPodReqValidationError is the validation error returned by
// EvictK8SPodReq.Validate if the designated constraints aren't met.
type EvictK8SPodReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EvictK8SPodReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EvictK8SPodReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EvictK8SPodReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EvictK8SPodReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EvictK8SPodReqValidationError) ErrorName() string { return "EvictK8SPodReqValidationError" }

// Error satisfies the builtin error interface
func (e EvictK8SPodReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvictK8SPodReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EvictK8SPodReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EvictK8SPodReqValidationError{}

// Validate checks the field values on EvictK8SPodReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EvictK8SPodReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EvictK8SPodReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EvictK8SPodReplyMultiError, or nil if none found.
func (m *EvictK8SPodReply) ValidateAll() error {
	return m.validate(true)
}

func (m *EvictK8SPodReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return EvictK8SPodReplyMultiError(errors)
	}

	return nil
}

// EvictK8SPodReplyMultiError is an error wrapping multiple validation errors
// returned by EvictK8SPodReply.ValidateAll() if the designated constraints
// aren't met.
type EvictK8SPodReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EvictK8SPodReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EvictK8SPodReplyMultiError) AllErrors() []error { return m }

// EvictK8SPodReplyValidationError is the validation error returned by
// EvictK8SPodReply.Validate if the designated constraints aren't met.
type EvictK8SPodReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EvictK8SPodReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EvictK8SPodReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EvictK8SPodReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EvictK8SPodReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EvictK8SPodReplyValidationError) ErrorName() string { return "EvictK8SPodReplyValidationError" }

// Error satisfies the builtin error interface
func (e EvictK8SPodReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvictK8SPodReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EvictK8SPodReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EvictK8SPodReplyValidationError{}

// Validate checks the field values on GetK8SPodReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetK8SPodReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetK8SPodReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetK8SPodReqMultiError, or
// nil if none found.
func (m *GetK8SPodReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetK8SPodReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := GetK8SPodReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := GetK8SPodReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := GetK8SPodReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := GetK8SPodReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := GetK8SPodReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := GetK8SPodReqValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := GetK8SPodReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetK8SPodReqMultiError(errors)
	}

	return nil
}

// GetK8SPodReqMultiError is an error wrapping multiple validation errors
// returned by GetK8SPodReq.ValidateAll() if the designated constraints aren't met.
type GetK8SPodReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetK8SPodReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetK8SPodReqMultiError) AllErrors() []error { return m }

// GetK8SPodReqValidationError is the validation error returned by
// GetK8SPodReq.Validate if the designated constraints aren't met.
type GetK8SPodReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetK8SPodReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetK8SPodReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetK8SPodReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetK8SPodReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetK8SPodReqValidationError) ErrorName() string { return "GetK8SPodReqValidationError" }

// Error satisfies the builtin error interface
func (e GetK8SPodReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetK8SPodReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetK8SPodReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetK8SPodReqValidationError{}

// Validate checks the field values on GetK8SPodReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetK8SPodReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetK8SPodReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetK8SPodReplyMultiError,
// or nil if none found.
func (m *GetK8SPodReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetK8SPodReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for Name

	// no validation rules for CreationTimestamp

	// no validation rules for Reason

	// no validation rules for Phase

	// no validation rules for HostIP

	// no validation rules for PodIP

	// no validation rules for Labels

	// no validation rules for Envs

	for idx, item := range m.GetContainer() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetK8SPodReplyValidationError{
						field:  fmt.Sprintf("Container[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetK8SPodReplyValidationError{
						field:  fmt.Sprintf("Container[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetK8SPodReplyValidationError{
					field:  fmt.Sprintf("Container[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetK8SPodReplyMultiError(errors)
	}

	return nil
}

// GetK8SPodReplyMultiError is an error wrapping multiple validation errors
// returned by GetK8SPodReply.ValidateAll() if the designated constraints
// aren't met.
type GetK8SPodReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetK8SPodReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetK8SPodReplyMultiError) AllErrors() []error { return m }

// GetK8SPodReplyValidationError is the validation error returned by
// GetK8SPodReply.Validate if the designated constraints aren't met.
type GetK8SPodReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetK8SPodReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetK8SPodReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetK8SPodReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetK8SPodReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetK8SPodReplyValidationError) ErrorName() string { return "GetK8SPodReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetK8SPodReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetK8SPodReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetK8SPodReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetK8SPodReplyValidationError{}

// Validate checks the field values on DelK8SPodReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelK8SPodReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelK8SPodReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelK8SPodReqMultiError, or
// nil if none found.
func (m *DelK8SPodReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelK8SPodReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := DelK8SPodReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := DelK8SPodReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := DelK8SPodReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := DelK8SPodReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := DelK8SPodReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := DelK8SPodReqValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := DelK8SPodReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelK8SPodReqMultiError(errors)
	}

	return nil
}

// DelK8SPodReqMultiError is an error wrapping multiple validation errors
// returned by DelK8SPodReq.ValidateAll() if the designated constraints aren't met.
type DelK8SPodReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelK8SPodReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelK8SPodReqMultiError) AllErrors() []error { return m }

// DelK8SPodReqValidationError is the validation error returned by
// DelK8SPodReq.Validate if the designated constraints aren't met.
type DelK8SPodReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelK8SPodReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelK8SPodReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelK8SPodReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelK8SPodReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelK8SPodReqValidationError) ErrorName() string { return "DelK8SPodReqValidationError" }

// Error satisfies the builtin error interface
func (e DelK8SPodReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelK8SPodReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelK8SPodReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelK8SPodReqValidationError{}

// Validate checks the field values on DelK8SPodReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelK8SPodReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelK8SPodReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelK8SPodReplyMultiError,
// or nil if none found.
func (m *DelK8SPodReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DelK8SPodReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return DelK8SPodReplyMultiError(errors)
	}

	return nil
}

// DelK8SPodReplyMultiError is an error wrapping multiple validation errors
// returned by DelK8SPodReply.ValidateAll() if the designated constraints
// aren't met.
type DelK8SPodReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelK8SPodReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelK8SPodReplyMultiError) AllErrors() []error { return m }

// DelK8SPodReplyValidationError is the validation error returned by
// DelK8SPodReply.Validate if the designated constraints aren't met.
type DelK8SPodReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelK8SPodReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelK8SPodReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelK8SPodReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelK8SPodReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelK8SPodReplyValidationError) ErrorName() string { return "DelK8SPodReplyValidationError" }

// Error satisfies the builtin error interface
func (e DelK8SPodReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelK8SPodReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelK8SPodReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelK8SPodReplyValidationError{}

// Validate checks the field values on CleanEvictK8SPodReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CleanEvictK8SPodReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CleanEvictK8SPodReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CleanEvictK8SPodReqMultiError, or nil if none found.
func (m *CleanEvictK8SPodReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CleanEvictK8SPodReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := CleanEvictK8SPodReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := CleanEvictK8SPodReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := CleanEvictK8SPodReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := CleanEvictK8SPodReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := CleanEvictK8SPodReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := CleanEvictK8SPodReqValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CleanEvictK8SPodReqMultiError(errors)
	}

	return nil
}

// CleanEvictK8SPodReqMultiError is an error wrapping multiple validation
// errors returned by CleanEvictK8SPodReq.ValidateAll() if the designated
// constraints aren't met.
type CleanEvictK8SPodReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CleanEvictK8SPodReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CleanEvictK8SPodReqMultiError) AllErrors() []error { return m }

// CleanEvictK8SPodReqValidationError is the validation error returned by
// CleanEvictK8SPodReq.Validate if the designated constraints aren't met.
type CleanEvictK8SPodReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CleanEvictK8SPodReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CleanEvictK8SPodReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CleanEvictK8SPodReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CleanEvictK8SPodReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CleanEvictK8SPodReqValidationError) ErrorName() string {
	return "CleanEvictK8SPodReqValidationError"
}

// Error satisfies the builtin error interface
func (e CleanEvictK8SPodReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCleanEvictK8SPodReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CleanEvictK8SPodReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CleanEvictK8SPodReqValidationError{}

// Validate checks the field values on CleanEvictK8SPodReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CleanEvictK8SPodReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CleanEvictK8SPodReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CleanEvictK8SPodReplyMultiError, or nil if none found.
func (m *CleanEvictK8SPodReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CleanEvictK8SPodReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	if len(errors) > 0 {
		return CleanEvictK8SPodReplyMultiError(errors)
	}

	return nil
}

// CleanEvictK8SPodReplyMultiError is an error wrapping multiple validation
// errors returned by CleanEvictK8SPodReply.ValidateAll() if the designated
// constraints aren't met.
type CleanEvictK8SPodReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CleanEvictK8SPodReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CleanEvictK8SPodReplyMultiError) AllErrors() []error { return m }

// CleanEvictK8SPodReplyValidationError is the validation error returned by
// CleanEvictK8SPodReply.Validate if the designated constraints aren't met.
type CleanEvictK8SPodReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CleanEvictK8SPodReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CleanEvictK8SPodReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CleanEvictK8SPodReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CleanEvictK8SPodReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CleanEvictK8SPodReplyValidationError) ErrorName() string {
	return "CleanEvictK8SPodReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CleanEvictK8SPodReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCleanEvictK8SPodReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CleanEvictK8SPodReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CleanEvictK8SPodReplyValidationError{}

// Validate checks the field values on SearchK8SPodReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SearchK8SPodReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchK8SPodReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchK8SPodReqMultiError, or nil if none found.
func (m *SearchK8SPodReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchK8SPodReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := SearchK8SPodReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := SearchK8SPodReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := SearchK8SPodReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := SearchK8SPodReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := SearchK8SPodReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := SearchK8SPodReqValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Keyword

	if len(errors) > 0 {
		return SearchK8SPodReqMultiError(errors)
	}

	return nil
}

// SearchK8SPodReqMultiError is an error wrapping multiple validation errors
// returned by SearchK8SPodReq.ValidateAll() if the designated constraints
// aren't met.
type SearchK8SPodReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchK8SPodReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchK8SPodReqMultiError) AllErrors() []error { return m }

// SearchK8SPodReqValidationError is the validation error returned by
// SearchK8SPodReq.Validate if the designated constraints aren't met.
type SearchK8SPodReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchK8SPodReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchK8SPodReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchK8SPodReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchK8SPodReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchK8SPodReqValidationError) ErrorName() string { return "SearchK8SPodReqValidationError" }

// Error satisfies the builtin error interface
func (e SearchK8SPodReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchK8SPodReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchK8SPodReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchK8SPodReqValidationError{}

// Validate checks the field values on SearchK8SPodReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SearchK8SPodReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchK8SPodReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchK8SPodReplyMultiError, or nil if none found.
func (m *SearchK8SPodReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchK8SPodReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPod() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchK8SPodReplyValidationError{
						field:  fmt.Sprintf("Pod[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchK8SPodReplyValidationError{
						field:  fmt.Sprintf("Pod[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchK8SPodReplyValidationError{
					field:  fmt.Sprintf("Pod[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchK8SPodReplyMultiError(errors)
	}

	return nil
}

// SearchK8SPodReplyMultiError is an error wrapping multiple validation errors
// returned by SearchK8SPodReply.ValidateAll() if the designated constraints
// aren't met.
type SearchK8SPodReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchK8SPodReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchK8SPodReplyMultiError) AllErrors() []error { return m }

// SearchK8SPodReplyValidationError is the validation error returned by
// SearchK8SPodReply.Validate if the designated constraints aren't met.
type SearchK8SPodReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchK8SPodReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchK8SPodReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchK8SPodReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchK8SPodReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchK8SPodReplyValidationError) ErrorName() string {
	return "SearchK8SPodReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SearchK8SPodReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchK8SPodReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchK8SPodReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchK8SPodReplyValidationError{}

// Validate checks the field values on ConfigMap with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ConfigMap) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigMap with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConfigMapMultiError, or nil
// if none found.
func (m *ConfigMap) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigMap) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for Name

	// no validation rules for Data

	// no validation rules for Immutable

	if len(errors) > 0 {
		return ConfigMapMultiError(errors)
	}

	return nil
}

// ConfigMapMultiError is an error wrapping multiple validation errors returned
// by ConfigMap.ValidateAll() if the designated constraints aren't met.
type ConfigMapMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigMapMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigMapMultiError) AllErrors() []error { return m }

// ConfigMapValidationError is the validation error returned by
// ConfigMap.Validate if the designated constraints aren't met.
type ConfigMapValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigMapValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigMapValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigMapValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigMapValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigMapValidationError) ErrorName() string { return "ConfigMapValidationError" }

// Error satisfies the builtin error interface
func (e ConfigMapValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigMap.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigMapValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigMapValidationError{}

// Validate checks the field values on CreateK8SClusterConfigMapReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateK8SClusterConfigMapReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateK8SClusterConfigMapReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateK8SClusterConfigMapReqMultiError, or nil if none found.
func (m *CreateK8SClusterConfigMapReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateK8SClusterConfigMapReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := CreateK8SClusterConfigMapReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := CreateK8SClusterConfigMapReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := CreateK8SClusterConfigMapReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := CreateK8SClusterConfigMapReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := CreateK8SClusterConfigMapReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := CreateK8SClusterConfigMapReqValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateK8SClusterConfigMapReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetData()) < 1 {
		err := CreateK8SClusterConfigMapReqValidationError{
			field:  "Data",
			reason: "value must contain at least 1 pair(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Immutable

	if len(errors) > 0 {
		return CreateK8SClusterConfigMapReqMultiError(errors)
	}

	return nil
}

// CreateK8SClusterConfigMapReqMultiError is an error wrapping multiple
// validation errors returned by CreateK8SClusterConfigMapReq.ValidateAll() if
// the designated constraints aren't met.
type CreateK8SClusterConfigMapReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateK8SClusterConfigMapReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateK8SClusterConfigMapReqMultiError) AllErrors() []error { return m }

// CreateK8SClusterConfigMapReqValidationError is the validation error returned
// by CreateK8SClusterConfigMapReq.Validate if the designated constraints
// aren't met.
type CreateK8SClusterConfigMapReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateK8SClusterConfigMapReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateK8SClusterConfigMapReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateK8SClusterConfigMapReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateK8SClusterConfigMapReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateK8SClusterConfigMapReqValidationError) ErrorName() string {
	return "CreateK8SClusterConfigMapReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateK8SClusterConfigMapReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateK8SClusterConfigMapReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateK8SClusterConfigMapReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateK8SClusterConfigMapReqValidationError{}

// Validate checks the field values on CreateK8SClusterConfigMapReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateK8SClusterConfigMapReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateK8SClusterConfigMapReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateK8SClusterConfigMapReplyMultiError, or nil if none found.
func (m *CreateK8SClusterConfigMapReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateK8SClusterConfigMapReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return CreateK8SClusterConfigMapReplyMultiError(errors)
	}

	return nil
}

// CreateK8SClusterConfigMapReplyMultiError is an error wrapping multiple
// validation errors returned by CreateK8SClusterConfigMapReply.ValidateAll()
// if the designated constraints aren't met.
type CreateK8SClusterConfigMapReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateK8SClusterConfigMapReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateK8SClusterConfigMapReplyMultiError) AllErrors() []error { return m }

// CreateK8SClusterConfigMapReplyValidationError is the validation error
// returned by CreateK8SClusterConfigMapReply.Validate if the designated
// constraints aren't met.
type CreateK8SClusterConfigMapReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateK8SClusterConfigMapReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateK8SClusterConfigMapReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateK8SClusterConfigMapReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateK8SClusterConfigMapReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateK8SClusterConfigMapReplyValidationError) ErrorName() string {
	return "CreateK8SClusterConfigMapReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateK8SClusterConfigMapReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateK8SClusterConfigMapReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateK8SClusterConfigMapReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateK8SClusterConfigMapReplyValidationError{}

// Validate checks the field values on ListK8SClusterConfigMapReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListK8SClusterConfigMapReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListK8SClusterConfigMapReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListK8SClusterConfigMapReqMultiError, or nil if none found.
func (m *ListK8SClusterConfigMapReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListK8SClusterConfigMapReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ListK8SClusterConfigMapReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ListK8SClusterConfigMapReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ListK8SClusterConfigMapReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := ListK8SClusterConfigMapReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := ListK8SClusterConfigMapReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := ListK8SClusterConfigMapReqValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListK8SClusterConfigMapReqMultiError(errors)
	}

	return nil
}

// ListK8SClusterConfigMapReqMultiError is an error wrapping multiple
// validation errors returned by ListK8SClusterConfigMapReq.ValidateAll() if
// the designated constraints aren't met.
type ListK8SClusterConfigMapReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListK8SClusterConfigMapReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListK8SClusterConfigMapReqMultiError) AllErrors() []error { return m }

// ListK8SClusterConfigMapReqValidationError is the validation error returned
// by ListK8SClusterConfigMapReq.Validate if the designated constraints aren't met.
type ListK8SClusterConfigMapReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListK8SClusterConfigMapReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListK8SClusterConfigMapReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListK8SClusterConfigMapReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListK8SClusterConfigMapReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListK8SClusterConfigMapReqValidationError) ErrorName() string {
	return "ListK8SClusterConfigMapReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListK8SClusterConfigMapReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListK8SClusterConfigMapReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListK8SClusterConfigMapReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListK8SClusterConfigMapReqValidationError{}

// Validate checks the field values on ListK8SClusterConfigMapReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListK8SClusterConfigMapReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListK8SClusterConfigMapReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListK8SClusterConfigMapReplyMultiError, or nil if none found.
func (m *ListK8SClusterConfigMapReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListK8SClusterConfigMapReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetConfigMap() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListK8SClusterConfigMapReplyValidationError{
						field:  fmt.Sprintf("ConfigMap[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListK8SClusterConfigMapReplyValidationError{
						field:  fmt.Sprintf("ConfigMap[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListK8SClusterConfigMapReplyValidationError{
					field:  fmt.Sprintf("ConfigMap[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListK8SClusterConfigMapReplyMultiError(errors)
	}

	return nil
}

// ListK8SClusterConfigMapReplyMultiError is an error wrapping multiple
// validation errors returned by ListK8SClusterConfigMapReply.ValidateAll() if
// the designated constraints aren't met.
type ListK8SClusterConfigMapReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListK8SClusterConfigMapReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListK8SClusterConfigMapReplyMultiError) AllErrors() []error { return m }

// ListK8SClusterConfigMapReplyValidationError is the validation error returned
// by ListK8SClusterConfigMapReply.Validate if the designated constraints
// aren't met.
type ListK8SClusterConfigMapReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListK8SClusterConfigMapReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListK8SClusterConfigMapReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListK8SClusterConfigMapReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListK8SClusterConfigMapReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListK8SClusterConfigMapReplyValidationError) ErrorName() string {
	return "ListK8SClusterConfigMapReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListK8SClusterConfigMapReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListK8SClusterConfigMapReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListK8SClusterConfigMapReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListK8SClusterConfigMapReplyValidationError{}

// Validate checks the field values on GetK8SClusterConfigMapReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetK8SClusterConfigMapReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetK8SClusterConfigMapReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetK8SClusterConfigMapReqMultiError, or nil if none found.
func (m *GetK8SClusterConfigMapReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetK8SClusterConfigMapReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := GetK8SClusterConfigMapReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := GetK8SClusterConfigMapReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := GetK8SClusterConfigMapReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := GetK8SClusterConfigMapReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := GetK8SClusterConfigMapReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := GetK8SClusterConfigMapReqValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := GetK8SClusterConfigMapReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetK8SClusterConfigMapReqMultiError(errors)
	}

	return nil
}

// GetK8SClusterConfigMapReqMultiError is an error wrapping multiple validation
// errors returned by GetK8SClusterConfigMapReq.ValidateAll() if the
// designated constraints aren't met.
type GetK8SClusterConfigMapReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetK8SClusterConfigMapReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetK8SClusterConfigMapReqMultiError) AllErrors() []error { return m }

// GetK8SClusterConfigMapReqValidationError is the validation error returned by
// GetK8SClusterConfigMapReq.Validate if the designated constraints aren't met.
type GetK8SClusterConfigMapReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetK8SClusterConfigMapReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetK8SClusterConfigMapReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetK8SClusterConfigMapReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetK8SClusterConfigMapReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetK8SClusterConfigMapReqValidationError) ErrorName() string {
	return "GetK8SClusterConfigMapReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetK8SClusterConfigMapReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetK8SClusterConfigMapReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetK8SClusterConfigMapReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetK8SClusterConfigMapReqValidationError{}

// Validate checks the field values on GetK8SClusterConfigMapReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetK8SClusterConfigMapReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetK8SClusterConfigMapReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetK8SClusterConfigMapReplyMultiError, or nil if none found.
func (m *GetK8SClusterConfigMapReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetK8SClusterConfigMapReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for Name

	// no validation rules for Data

	// no validation rules for Immutable

	if len(errors) > 0 {
		return GetK8SClusterConfigMapReplyMultiError(errors)
	}

	return nil
}

// GetK8SClusterConfigMapReplyMultiError is an error wrapping multiple
// validation errors returned by GetK8SClusterConfigMapReply.ValidateAll() if
// the designated constraints aren't met.
type GetK8SClusterConfigMapReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetK8SClusterConfigMapReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetK8SClusterConfigMapReplyMultiError) AllErrors() []error { return m }

// GetK8SClusterConfigMapReplyValidationError is the validation error returned
// by GetK8SClusterConfigMapReply.Validate if the designated constraints
// aren't met.
type GetK8SClusterConfigMapReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetK8SClusterConfigMapReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetK8SClusterConfigMapReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetK8SClusterConfigMapReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetK8SClusterConfigMapReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetK8SClusterConfigMapReplyValidationError) ErrorName() string {
	return "GetK8SClusterConfigMapReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetK8SClusterConfigMapReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetK8SClusterConfigMapReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetK8SClusterConfigMapReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetK8SClusterConfigMapReplyValidationError{}

// Validate checks the field values on UpdateK8SClusterConfigMapReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateK8SClusterConfigMapReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateK8SClusterConfigMapReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateK8SClusterConfigMapReqMultiError, or nil if none found.
func (m *UpdateK8SClusterConfigMapReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateK8SClusterConfigMapReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := UpdateK8SClusterConfigMapReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := UpdateK8SClusterConfigMapReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := UpdateK8SClusterConfigMapReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := UpdateK8SClusterConfigMapReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := UpdateK8SClusterConfigMapReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := UpdateK8SClusterConfigMapReqValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateK8SClusterConfigMapReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetData()) < 1 {
		err := UpdateK8SClusterConfigMapReqValidationError{
			field:  "Data",
			reason: "value must contain at least 1 pair(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Immutable

	if len(errors) > 0 {
		return UpdateK8SClusterConfigMapReqMultiError(errors)
	}

	return nil
}

// UpdateK8SClusterConfigMapReqMultiError is an error wrapping multiple
// validation errors returned by UpdateK8SClusterConfigMapReq.ValidateAll() if
// the designated constraints aren't met.
type UpdateK8SClusterConfigMapReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateK8SClusterConfigMapReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateK8SClusterConfigMapReqMultiError) AllErrors() []error { return m }

// UpdateK8SClusterConfigMapReqValidationError is the validation error returned
// by UpdateK8SClusterConfigMapReq.Validate if the designated constraints
// aren't met.
type UpdateK8SClusterConfigMapReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateK8SClusterConfigMapReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateK8SClusterConfigMapReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateK8SClusterConfigMapReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateK8SClusterConfigMapReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateK8SClusterConfigMapReqValidationError) ErrorName() string {
	return "UpdateK8SClusterConfigMapReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateK8SClusterConfigMapReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateK8SClusterConfigMapReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateK8SClusterConfigMapReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateK8SClusterConfigMapReqValidationError{}

// Validate checks the field values on UpdateK8SClusterConfigMapReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateK8SClusterConfigMapReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateK8SClusterConfigMapReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateK8SClusterConfigMapReplyMultiError, or nil if none found.
func (m *UpdateK8SClusterConfigMapReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateK8SClusterConfigMapReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return UpdateK8SClusterConfigMapReplyMultiError(errors)
	}

	return nil
}

// UpdateK8SClusterConfigMapReplyMultiError is an error wrapping multiple
// validation errors returned by UpdateK8SClusterConfigMapReply.ValidateAll()
// if the designated constraints aren't met.
type UpdateK8SClusterConfigMapReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateK8SClusterConfigMapReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateK8SClusterConfigMapReplyMultiError) AllErrors() []error { return m }

// UpdateK8SClusterConfigMapReplyValidationError is the validation error
// returned by UpdateK8SClusterConfigMapReply.Validate if the designated
// constraints aren't met.
type UpdateK8SClusterConfigMapReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateK8SClusterConfigMapReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateK8SClusterConfigMapReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateK8SClusterConfigMapReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateK8SClusterConfigMapReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateK8SClusterConfigMapReplyValidationError) ErrorName() string {
	return "UpdateK8SClusterConfigMapReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateK8SClusterConfigMapReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateK8SClusterConfigMapReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateK8SClusterConfigMapReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateK8SClusterConfigMapReplyValidationError{}

// Validate checks the field values on DelK8SClusterConfigMapReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelK8SClusterConfigMapReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelK8SClusterConfigMapReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelK8SClusterConfigMapReqMultiError, or nil if none found.
func (m *DelK8SClusterConfigMapReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelK8SClusterConfigMapReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := DelK8SClusterConfigMapReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := DelK8SClusterConfigMapReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := DelK8SClusterConfigMapReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := DelK8SClusterConfigMapReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := DelK8SClusterConfigMapReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := DelK8SClusterConfigMapReqValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := DelK8SClusterConfigMapReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelK8SClusterConfigMapReqMultiError(errors)
	}

	return nil
}

// DelK8SClusterConfigMapReqMultiError is an error wrapping multiple validation
// errors returned by DelK8SClusterConfigMapReq.ValidateAll() if the
// designated constraints aren't met.
type DelK8SClusterConfigMapReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelK8SClusterConfigMapReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelK8SClusterConfigMapReqMultiError) AllErrors() []error { return m }

// DelK8SClusterConfigMapReqValidationError is the validation error returned by
// DelK8SClusterConfigMapReq.Validate if the designated constraints aren't met.
type DelK8SClusterConfigMapReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelK8SClusterConfigMapReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelK8SClusterConfigMapReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelK8SClusterConfigMapReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelK8SClusterConfigMapReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelK8SClusterConfigMapReqValidationError) ErrorName() string {
	return "DelK8SClusterConfigMapReqValidationError"
}

// Error satisfies the builtin error interface
func (e DelK8SClusterConfigMapReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelK8SClusterConfigMapReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelK8SClusterConfigMapReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelK8SClusterConfigMapReqValidationError{}

// Validate checks the field values on DelK8SClusterConfigMapReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelK8SClusterConfigMapReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelK8SClusterConfigMapReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelK8SClusterConfigMapReplyMultiError, or nil if none found.
func (m *DelK8SClusterConfigMapReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DelK8SClusterConfigMapReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return DelK8SClusterConfigMapReplyMultiError(errors)
	}

	return nil
}

// DelK8SClusterConfigMapReplyMultiError is an error wrapping multiple
// validation errors returned by DelK8SClusterConfigMapReply.ValidateAll() if
// the designated constraints aren't met.
type DelK8SClusterConfigMapReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelK8SClusterConfigMapReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelK8SClusterConfigMapReplyMultiError) AllErrors() []error { return m }

// DelK8SClusterConfigMapReplyValidationError is the validation error returned
// by DelK8SClusterConfigMapReply.Validate if the designated constraints
// aren't met.
type DelK8SClusterConfigMapReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelK8SClusterConfigMapReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelK8SClusterConfigMapReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelK8SClusterConfigMapReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelK8SClusterConfigMapReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelK8SClusterConfigMapReplyValidationError) ErrorName() string {
	return "DelK8SClusterConfigMapReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DelK8SClusterConfigMapReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelK8SClusterConfigMapReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelK8SClusterConfigMapReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelK8SClusterConfigMapReplyValidationError{}

// Validate checks the field values on ListSecretReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListSecretReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSecretReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListSecretReqMultiError, or
// nil if none found.
func (m *ListSecretReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSecretReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ListSecretReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ListSecretReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ListSecretReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := ListSecretReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := ListSecretReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := ListSecretReqValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListSecretReqMultiError(errors)
	}

	return nil
}

// ListSecretReqMultiError is an error wrapping multiple validation errors
// returned by ListSecretReq.ValidateAll() if the designated constraints
// aren't met.
type ListSecretReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSecretReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSecretReqMultiError) AllErrors() []error { return m }

// ListSecretReqValidationError is the validation error returned by
// ListSecretReq.Validate if the designated constraints aren't met.
type ListSecretReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSecretReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSecretReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSecretReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSecretReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSecretReqValidationError) ErrorName() string { return "ListSecretReqValidationError" }

// Error satisfies the builtin error interface
func (e ListSecretReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSecretReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSecretReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSecretReqValidationError{}

// Validate checks the field values on ListSecretReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListSecretReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSecretReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSecretReplyMultiError, or nil if none found.
func (m *ListSecretReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSecretReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSecrets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSecretReplyValidationError{
						field:  fmt.Sprintf("Secrets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSecretReplyValidationError{
						field:  fmt.Sprintf("Secrets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSecretReplyValidationError{
					field:  fmt.Sprintf("Secrets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSecretReplyMultiError(errors)
	}

	return nil
}

// ListSecretReplyMultiError is an error wrapping multiple validation errors
// returned by ListSecretReply.ValidateAll() if the designated constraints
// aren't met.
type ListSecretReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSecretReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSecretReplyMultiError) AllErrors() []error { return m }

// ListSecretReplyValidationError is the validation error returned by
// ListSecretReply.Validate if the designated constraints aren't met.
type ListSecretReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSecretReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSecretReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSecretReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSecretReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSecretReplyValidationError) ErrorName() string { return "ListSecretReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListSecretReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSecretReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSecretReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSecretReplyValidationError{}

// Validate checks the field values on GetSecretReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetSecretReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSecretReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetSecretReqMultiError, or
// nil if none found.
func (m *GetSecretReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSecretReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := GetSecretReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := GetSecretReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := GetSecretReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := GetSecretReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := GetSecretReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := GetSecretReqValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := GetSecretReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetSecretReqMultiError(errors)
	}

	return nil
}

// GetSecretReqMultiError is an error wrapping multiple validation errors
// returned by GetSecretReq.ValidateAll() if the designated constraints aren't met.
type GetSecretReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSecretReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSecretReqMultiError) AllErrors() []error { return m }

// GetSecretReqValidationError is the validation error returned by
// GetSecretReq.Validate if the designated constraints aren't met.
type GetSecretReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSecretReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSecretReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSecretReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSecretReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSecretReqValidationError) ErrorName() string { return "GetSecretReqValidationError" }

// Error satisfies the builtin error interface
func (e GetSecretReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSecretReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSecretReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSecretReqValidationError{}

// Validate checks the field values on GetSecretReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetSecretReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSecretReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetSecretReplyMultiError,
// or nil if none found.
func (m *GetSecretReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSecretReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for Name

	// no validation rules for Annotations

	// no validation rules for Labels

	// no validation rules for Immutable

	// no validation rules for Type

	// no validation rules for CreationTimestamp

	// no validation rules for StringData

	// no validation rules for Data

	if len(errors) > 0 {
		return GetSecretReplyMultiError(errors)
	}

	return nil
}

// GetSecretReplyMultiError is an error wrapping multiple validation errors
// returned by GetSecretReply.ValidateAll() if the designated constraints
// aren't met.
type GetSecretReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSecretReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSecretReplyMultiError) AllErrors() []error { return m }

// GetSecretReplyValidationError is the validation error returned by
// GetSecretReply.Validate if the designated constraints aren't met.
type GetSecretReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSecretReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSecretReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSecretReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSecretReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSecretReplyValidationError) ErrorName() string { return "GetSecretReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetSecretReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSecretReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSecretReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSecretReplyValidationError{}

// Validate checks the field values on DelSecretReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelSecretReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelSecretReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelSecretReqMultiError, or
// nil if none found.
func (m *DelSecretReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelSecretReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := DelSecretReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := DelSecretReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := DelSecretReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := DelSecretReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := DelSecretReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := DelSecretReqValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := DelSecretReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelSecretReqMultiError(errors)
	}

	return nil
}

// DelSecretReqMultiError is an error wrapping multiple validation errors
// returned by DelSecretReq.ValidateAll() if the designated constraints aren't met.
type DelSecretReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelSecretReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelSecretReqMultiError) AllErrors() []error { return m }

// DelSecretReqValidationError is the validation error returned by
// DelSecretReq.Validate if the designated constraints aren't met.
type DelSecretReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelSecretReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelSecretReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelSecretReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelSecretReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelSecretReqValidationError) ErrorName() string { return "DelSecretReqValidationError" }

// Error satisfies the builtin error interface
func (e DelSecretReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelSecretReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelSecretReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelSecretReqValidationError{}

// Validate checks the field values on DelSecretReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelSecretReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelSecretReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelSecretReplyMultiError,
// or nil if none found.
func (m *DelSecretReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DelSecretReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return DelSecretReplyMultiError(errors)
	}

	return nil
}

// DelSecretReplyMultiError is an error wrapping multiple validation errors
// returned by DelSecretReply.ValidateAll() if the designated constraints
// aren't met.
type DelSecretReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelSecretReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelSecretReplyMultiError) AllErrors() []error { return m }

// DelSecretReplyValidationError is the validation error returned by
// DelSecretReply.Validate if the designated constraints aren't met.
type DelSecretReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelSecretReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelSecretReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelSecretReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelSecretReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelSecretReplyValidationError) ErrorName() string { return "DelSecretReplyValidationError" }

// Error satisfies the builtin error interface
func (e DelSecretReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelSecretReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelSecretReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelSecretReplyValidationError{}

// Validate checks the field values on CreateDockerSecretReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDockerSecretReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDockerSecretReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDockerSecretReqMultiError, or nil if none found.
func (m *CreateDockerSecretReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDockerSecretReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := CreateDockerSecretReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := CreateDockerSecretReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := CreateDockerSecretReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := CreateDockerSecretReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := CreateDockerSecretReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := CreateDockerSecretReqValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateDockerSecretReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUsername()) < 1 {
		err := CreateDockerSecretReqValidationError{
			field:  "Username",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 1 {
		err := CreateDockerSecretReqValidationError{
			field:  "Password",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = CreateDockerSecretReqValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUrl()) < 1 {
		err := CreateDockerSecretReqValidationError{
			field:  "Url",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Annotations

	// no validation rules for Labels

	if len(errors) > 0 {
		return CreateDockerSecretReqMultiError(errors)
	}

	return nil
}

func (m *CreateDockerSecretReq) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *CreateDockerSecretReq) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// CreateDockerSecretReqMultiError is an error wrapping multiple validation
// errors returned by CreateDockerSecretReq.ValidateAll() if the designated
// constraints aren't met.
type CreateDockerSecretReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDockerSecretReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDockerSecretReqMultiError) AllErrors() []error { return m }

// CreateDockerSecretReqValidationError is the validation error returned by
// CreateDockerSecretReq.Validate if the designated constraints aren't met.
type CreateDockerSecretReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDockerSecretReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDockerSecretReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDockerSecretReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDockerSecretReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDockerSecretReqValidationError) ErrorName() string {
	return "CreateDockerSecretReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDockerSecretReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDockerSecretReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDockerSecretReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDockerSecretReqValidationError{}

// Validate checks the field values on CreateDockerSecretReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDockerSecretReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDockerSecretReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDockerSecretReplyMultiError, or nil if none found.
func (m *CreateDockerSecretReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDockerSecretReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return CreateDockerSecretReplyMultiError(errors)
	}

	return nil
}

// CreateDockerSecretReplyMultiError is an error wrapping multiple validation
// errors returned by CreateDockerSecretReply.ValidateAll() if the designated
// constraints aren't met.
type CreateDockerSecretReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDockerSecretReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDockerSecretReplyMultiError) AllErrors() []error { return m }

// CreateDockerSecretReplyValidationError is the validation error returned by
// CreateDockerSecretReply.Validate if the designated constraints aren't met.
type CreateDockerSecretReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDockerSecretReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDockerSecretReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDockerSecretReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDockerSecretReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDockerSecretReplyValidationError) ErrorName() string {
	return "CreateDockerSecretReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDockerSecretReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDockerSecretReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDockerSecretReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDockerSecretReplyValidationError{}

// Validate checks the field values on UpdateDockerSecretReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDockerSecretReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDockerSecretReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDockerSecretReqMultiError, or nil if none found.
func (m *UpdateDockerSecretReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDockerSecretReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := UpdateDockerSecretReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := UpdateDockerSecretReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := UpdateDockerSecretReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := UpdateDockerSecretReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := UpdateDockerSecretReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := UpdateDockerSecretReqValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateDockerSecretReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUsername()) < 1 {
		err := UpdateDockerSecretReqValidationError{
			field:  "Username",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 1 {
		err := UpdateDockerSecretReqValidationError{
			field:  "Password",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = UpdateDockerSecretReqValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUrl()) < 1 {
		err := UpdateDockerSecretReqValidationError{
			field:  "Url",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Annotations

	// no validation rules for Labels

	if len(errors) > 0 {
		return UpdateDockerSecretReqMultiError(errors)
	}

	return nil
}

func (m *UpdateDockerSecretReq) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *UpdateDockerSecretReq) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// UpdateDockerSecretReqMultiError is an error wrapping multiple validation
// errors returned by UpdateDockerSecretReq.ValidateAll() if the designated
// constraints aren't met.
type UpdateDockerSecretReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDockerSecretReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDockerSecretReqMultiError) AllErrors() []error { return m }

// UpdateDockerSecretReqValidationError is the validation error returned by
// UpdateDockerSecretReq.Validate if the designated constraints aren't met.
type UpdateDockerSecretReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDockerSecretReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDockerSecretReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDockerSecretReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDockerSecretReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDockerSecretReqValidationError) ErrorName() string {
	return "UpdateDockerSecretReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDockerSecretReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDockerSecretReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDockerSecretReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDockerSecretReqValidationError{}

// Validate checks the field values on UpdateDockerSecretReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDockerSecretReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDockerSecretReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDockerSecretReplyMultiError, or nil if none found.
func (m *UpdateDockerSecretReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDockerSecretReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return UpdateDockerSecretReplyMultiError(errors)
	}

	return nil
}

// UpdateDockerSecretReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateDockerSecretReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateDockerSecretReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDockerSecretReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDockerSecretReplyMultiError) AllErrors() []error { return m }

// UpdateDockerSecretReplyValidationError is the validation error returned by
// UpdateDockerSecretReply.Validate if the designated constraints aren't met.
type UpdateDockerSecretReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDockerSecretReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDockerSecretReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDockerSecretReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDockerSecretReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDockerSecretReplyValidationError) ErrorName() string {
	return "UpdateDockerSecretReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDockerSecretReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDockerSecretReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDockerSecretReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDockerSecretReplyValidationError{}

// Validate checks the field values on CreateTlsSecretReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTlsSecretReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTlsSecretReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTlsSecretReqMultiError, or nil if none found.
func (m *CreateTlsSecretReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTlsSecretReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := CreateTlsSecretReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := CreateTlsSecretReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := CreateTlsSecretReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := CreateTlsSecretReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := CreateTlsSecretReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := CreateTlsSecretReqValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateTlsSecretReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTlsCrt()) < 1 {
		err := CreateTlsSecretReqValidationError{
			field:  "TlsCrt",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTlsKey()) < 1 {
		err := CreateTlsSecretReqValidationError{
			field:  "TlsKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Annotations

	// no validation rules for Labels

	if len(errors) > 0 {
		return CreateTlsSecretReqMultiError(errors)
	}

	return nil
}

// CreateTlsSecretReqMultiError is an error wrapping multiple validation errors
// returned by CreateTlsSecretReq.ValidateAll() if the designated constraints
// aren't met.
type CreateTlsSecretReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTlsSecretReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTlsSecretReqMultiError) AllErrors() []error { return m }

// CreateTlsSecretReqValidationError is the validation error returned by
// CreateTlsSecretReq.Validate if the designated constraints aren't met.
type CreateTlsSecretReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTlsSecretReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTlsSecretReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTlsSecretReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTlsSecretReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTlsSecretReqValidationError) ErrorName() string {
	return "CreateTlsSecretReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTlsSecretReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTlsSecretReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTlsSecretReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTlsSecretReqValidationError{}

// Validate checks the field values on CreateTlsSecretReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTlsSecretReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTlsSecretReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTlsSecretReplyMultiError, or nil if none found.
func (m *CreateTlsSecretReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTlsSecretReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return CreateTlsSecretReplyMultiError(errors)
	}

	return nil
}

// CreateTlsSecretReplyMultiError is an error wrapping multiple validation
// errors returned by CreateTlsSecretReply.ValidateAll() if the designated
// constraints aren't met.
type CreateTlsSecretReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTlsSecretReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTlsSecretReplyMultiError) AllErrors() []error { return m }

// CreateTlsSecretReplyValidationError is the validation error returned by
// CreateTlsSecretReply.Validate if the designated constraints aren't met.
type CreateTlsSecretReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTlsSecretReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTlsSecretReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTlsSecretReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTlsSecretReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTlsSecretReplyValidationError) ErrorName() string {
	return "CreateTlsSecretReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTlsSecretReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTlsSecretReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTlsSecretReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTlsSecretReplyValidationError{}

// Validate checks the field values on UpdateTlsSecretReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTlsSecretReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTlsSecretReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTlsSecretReqMultiError, or nil if none found.
func (m *UpdateTlsSecretReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTlsSecretReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := UpdateTlsSecretReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := UpdateTlsSecretReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := UpdateTlsSecretReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := UpdateTlsSecretReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := UpdateTlsSecretReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := UpdateTlsSecretReqValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateTlsSecretReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTlsCrt()) < 1 {
		err := UpdateTlsSecretReqValidationError{
			field:  "TlsCrt",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTlsKey()) < 1 {
		err := UpdateTlsSecretReqValidationError{
			field:  "TlsKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Annotations

	// no validation rules for Labels

	if len(errors) > 0 {
		return UpdateTlsSecretReqMultiError(errors)
	}

	return nil
}

// UpdateTlsSecretReqMultiError is an error wrapping multiple validation errors
// returned by UpdateTlsSecretReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateTlsSecretReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTlsSecretReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTlsSecretReqMultiError) AllErrors() []error { return m }

// UpdateTlsSecretReqValidationError is the validation error returned by
// UpdateTlsSecretReq.Validate if the designated constraints aren't met.
type UpdateTlsSecretReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTlsSecretReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTlsSecretReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTlsSecretReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTlsSecretReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTlsSecretReqValidationError) ErrorName() string {
	return "UpdateTlsSecretReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTlsSecretReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTlsSecretReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTlsSecretReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTlsSecretReqValidationError{}

// Validate checks the field values on UpdateTlsSecretReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTlsSecretReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTlsSecretReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTlsSecretReplyMultiError, or nil if none found.
func (m *UpdateTlsSecretReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTlsSecretReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return UpdateTlsSecretReplyMultiError(errors)
	}

	return nil
}

// UpdateTlsSecretReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateTlsSecretReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateTlsSecretReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTlsSecretReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTlsSecretReplyMultiError) AllErrors() []error { return m }

// UpdateTlsSecretReplyValidationError is the validation error returned by
// UpdateTlsSecretReply.Validate if the designated constraints aren't met.
type UpdateTlsSecretReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTlsSecretReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTlsSecretReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTlsSecretReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTlsSecretReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTlsSecretReplyValidationError) ErrorName() string {
	return "UpdateTlsSecretReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTlsSecretReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTlsSecretReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTlsSecretReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTlsSecretReplyValidationError{}

// Validate checks the field values on CreateOpaqueSecretReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOpaqueSecretReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOpaqueSecretReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOpaqueSecretReqMultiError, or nil if none found.
func (m *CreateOpaqueSecretReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOpaqueSecretReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := CreateOpaqueSecretReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := CreateOpaqueSecretReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := CreateOpaqueSecretReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := CreateOpaqueSecretReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := CreateOpaqueSecretReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := CreateOpaqueSecretReqValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateOpaqueSecretReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Data

	// no validation rules for Annotations

	// no validation rules for Labels

	if len(errors) > 0 {
		return CreateOpaqueSecretReqMultiError(errors)
	}

	return nil
}

// CreateOpaqueSecretReqMultiError is an error wrapping multiple validation
// errors returned by CreateOpaqueSecretReq.ValidateAll() if the designated
// constraints aren't met.
type CreateOpaqueSecretReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOpaqueSecretReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOpaqueSecretReqMultiError) AllErrors() []error { return m }

// CreateOpaqueSecretReqValidationError is the validation error returned by
// CreateOpaqueSecretReq.Validate if the designated constraints aren't met.
type CreateOpaqueSecretReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOpaqueSecretReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOpaqueSecretReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOpaqueSecretReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOpaqueSecretReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOpaqueSecretReqValidationError) ErrorName() string {
	return "CreateOpaqueSecretReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOpaqueSecretReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOpaqueSecretReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOpaqueSecretReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOpaqueSecretReqValidationError{}

// Validate checks the field values on CreateOpaqueSecretReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOpaqueSecretReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOpaqueSecretReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOpaqueSecretReplyMultiError, or nil if none found.
func (m *CreateOpaqueSecretReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOpaqueSecretReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return CreateOpaqueSecretReplyMultiError(errors)
	}

	return nil
}

// CreateOpaqueSecretReplyMultiError is an error wrapping multiple validation
// errors returned by CreateOpaqueSecretReply.ValidateAll() if the designated
// constraints aren't met.
type CreateOpaqueSecretReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOpaqueSecretReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOpaqueSecretReplyMultiError) AllErrors() []error { return m }

// CreateOpaqueSecretReplyValidationError is the validation error returned by
// CreateOpaqueSecretReply.Validate if the designated constraints aren't met.
type CreateOpaqueSecretReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOpaqueSecretReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOpaqueSecretReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOpaqueSecretReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOpaqueSecretReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOpaqueSecretReplyValidationError) ErrorName() string {
	return "CreateOpaqueSecretReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOpaqueSecretReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOpaqueSecretReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOpaqueSecretReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOpaqueSecretReplyValidationError{}

// Validate checks the field values on UpdateOpaqueSecretReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOpaqueSecretReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOpaqueSecretReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOpaqueSecretReqMultiError, or nil if none found.
func (m *UpdateOpaqueSecretReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOpaqueSecretReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := UpdateOpaqueSecretReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := UpdateOpaqueSecretReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := UpdateOpaqueSecretReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := UpdateOpaqueSecretReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := UpdateOpaqueSecretReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := UpdateOpaqueSecretReqValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateOpaqueSecretReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Data

	// no validation rules for Annotations

	// no validation rules for Labels

	if len(errors) > 0 {
		return UpdateOpaqueSecretReqMultiError(errors)
	}

	return nil
}

// UpdateOpaqueSecretReqMultiError is an error wrapping multiple validation
// errors returned by UpdateOpaqueSecretReq.ValidateAll() if the designated
// constraints aren't met.
type UpdateOpaqueSecretReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOpaqueSecretReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOpaqueSecretReqMultiError) AllErrors() []error { return m }

// UpdateOpaqueSecretReqValidationError is the validation error returned by
// UpdateOpaqueSecretReq.Validate if the designated constraints aren't met.
type UpdateOpaqueSecretReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOpaqueSecretReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOpaqueSecretReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOpaqueSecretReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOpaqueSecretReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOpaqueSecretReqValidationError) ErrorName() string {
	return "UpdateOpaqueSecretReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOpaqueSecretReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOpaqueSecretReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOpaqueSecretReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOpaqueSecretReqValidationError{}

// Validate checks the field values on UpdateOpaqueSecretReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOpaqueSecretReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOpaqueSecretReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOpaqueSecretReplyMultiError, or nil if none found.
func (m *UpdateOpaqueSecretReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOpaqueSecretReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return UpdateOpaqueSecretReplyMultiError(errors)
	}

	return nil
}

// UpdateOpaqueSecretReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateOpaqueSecretReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateOpaqueSecretReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOpaqueSecretReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOpaqueSecretReplyMultiError) AllErrors() []error { return m }

// UpdateOpaqueSecretReplyValidationError is the validation error returned by
// UpdateOpaqueSecretReply.Validate if the designated constraints aren't met.
type UpdateOpaqueSecretReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOpaqueSecretReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOpaqueSecretReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOpaqueSecretReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOpaqueSecretReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOpaqueSecretReplyValidationError) ErrorName() string {
	return "UpdateOpaqueSecretReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOpaqueSecretReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOpaqueSecretReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOpaqueSecretReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOpaqueSecretReplyValidationError{}

// Validate checks the field values on CreateSSHAuthSecretReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSSHAuthSecretReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSSHAuthSecretReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSSHAuthSecretReqMultiError, or nil if none found.
func (m *CreateSSHAuthSecretReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSSHAuthSecretReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := CreateSSHAuthSecretReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := CreateSSHAuthSecretReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := CreateSSHAuthSecretReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := CreateSSHAuthSecretReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := CreateSSHAuthSecretReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := CreateSSHAuthSecretReqValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateSSHAuthSecretReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPrivateKey()) < 1 {
		err := CreateSSHAuthSecretReqValidationError{
			field:  "PrivateKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Immutable

	// no validation rules for Annotations

	// no validation rules for Labels

	if len(errors) > 0 {
		return CreateSSHAuthSecretReqMultiError(errors)
	}

	return nil
}

// CreateSSHAuthSecretReqMultiError is an error wrapping multiple validation
// errors returned by CreateSSHAuthSecretReq.ValidateAll() if the designated
// constraints aren't met.
type CreateSSHAuthSecretReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSSHAuthSecretReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSSHAuthSecretReqMultiError) AllErrors() []error { return m }

// CreateSSHAuthSecretReqValidationError is the validation error returned by
// CreateSSHAuthSecretReq.Validate if the designated constraints aren't met.
type CreateSSHAuthSecretReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSSHAuthSecretReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSSHAuthSecretReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSSHAuthSecretReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSSHAuthSecretReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSSHAuthSecretReqValidationError) ErrorName() string {
	return "CreateSSHAuthSecretReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSSHAuthSecretReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSSHAuthSecretReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSSHAuthSecretReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSSHAuthSecretReqValidationError{}

// Validate checks the field values on CreateSSHAuthSecretReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSSHAuthSecretReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSSHAuthSecretReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSSHAuthSecretReplyMultiError, or nil if none found.
func (m *CreateSSHAuthSecretReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSSHAuthSecretReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return CreateSSHAuthSecretReplyMultiError(errors)
	}

	return nil
}

// CreateSSHAuthSecretReplyMultiError is an error wrapping multiple validation
// errors returned by CreateSSHAuthSecretReply.ValidateAll() if the designated
// constraints aren't met.
type CreateSSHAuthSecretReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSSHAuthSecretReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSSHAuthSecretReplyMultiError) AllErrors() []error { return m }

// CreateSSHAuthSecretReplyValidationError is the validation error returned by
// CreateSSHAuthSecretReply.Validate if the designated constraints aren't met.
type CreateSSHAuthSecretReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSSHAuthSecretReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSSHAuthSecretReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSSHAuthSecretReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSSHAuthSecretReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSSHAuthSecretReplyValidationError) ErrorName() string {
	return "CreateSSHAuthSecretReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSSHAuthSecretReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSSHAuthSecretReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSSHAuthSecretReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSSHAuthSecretReplyValidationError{}

// Validate checks the field values on UpdateSSHAuthSecretReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSSHAuthSecretReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSSHAuthSecretReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSSHAuthSecretReqMultiError, or nil if none found.
func (m *UpdateSSHAuthSecretReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSSHAuthSecretReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := UpdateSSHAuthSecretReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := UpdateSSHAuthSecretReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := UpdateSSHAuthSecretReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := UpdateSSHAuthSecretReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := UpdateSSHAuthSecretReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := UpdateSSHAuthSecretReqValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateSSHAuthSecretReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPrivateKey()) < 1 {
		err := UpdateSSHAuthSecretReqValidationError{
			field:  "PrivateKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Immutable

	// no validation rules for Annotations

	// no validation rules for Labels

	if len(errors) > 0 {
		return UpdateSSHAuthSecretReqMultiError(errors)
	}

	return nil
}

// UpdateSSHAuthSecretReqMultiError is an error wrapping multiple validation
// errors returned by UpdateSSHAuthSecretReq.ValidateAll() if the designated
// constraints aren't met.
type UpdateSSHAuthSecretReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSSHAuthSecretReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSSHAuthSecretReqMultiError) AllErrors() []error { return m }

// UpdateSSHAuthSecretReqValidationError is the validation error returned by
// UpdateSSHAuthSecretReq.Validate if the designated constraints aren't met.
type UpdateSSHAuthSecretReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSSHAuthSecretReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSSHAuthSecretReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSSHAuthSecretReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSSHAuthSecretReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSSHAuthSecretReqValidationError) ErrorName() string {
	return "UpdateSSHAuthSecretReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSSHAuthSecretReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSSHAuthSecretReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSSHAuthSecretReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSSHAuthSecretReqValidationError{}

// Validate checks the field values on UpdateSSHAuthSecretReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSSHAuthSecretReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSSHAuthSecretReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSSHAuthSecretReplyMultiError, or nil if none found.
func (m *UpdateSSHAuthSecretReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSSHAuthSecretReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return UpdateSSHAuthSecretReplyMultiError(errors)
	}

	return nil
}

// UpdateSSHAuthSecretReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateSSHAuthSecretReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateSSHAuthSecretReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSSHAuthSecretReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSSHAuthSecretReplyMultiError) AllErrors() []error { return m }

// UpdateSSHAuthSecretReplyValidationError is the validation error returned by
// UpdateSSHAuthSecretReply.Validate if the designated constraints aren't met.
type UpdateSSHAuthSecretReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSSHAuthSecretReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSSHAuthSecretReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSSHAuthSecretReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSSHAuthSecretReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSSHAuthSecretReplyValidationError) ErrorName() string {
	return "UpdateSSHAuthSecretReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSSHAuthSecretReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSSHAuthSecretReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSSHAuthSecretReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSSHAuthSecretReplyValidationError{}

// Validate checks the field values on CreateBasicAuthSecretReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBasicAuthSecretReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBasicAuthSecretReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBasicAuthSecretReqMultiError, or nil if none found.
func (m *CreateBasicAuthSecretReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBasicAuthSecretReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := CreateBasicAuthSecretReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := CreateBasicAuthSecretReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := CreateBasicAuthSecretReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := CreateBasicAuthSecretReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := CreateBasicAuthSecretReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := CreateBasicAuthSecretReqValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateBasicAuthSecretReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUsername()) < 1 {
		err := CreateBasicAuthSecretReqValidationError{
			field:  "Username",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 1 {
		err := CreateBasicAuthSecretReqValidationError{
			field:  "Password",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Immutable

	// no validation rules for Annotations

	// no validation rules for Labels

	if len(errors) > 0 {
		return CreateBasicAuthSecretReqMultiError(errors)
	}

	return nil
}

// CreateBasicAuthSecretReqMultiError is an error wrapping multiple validation
// errors returned by CreateBasicAuthSecretReq.ValidateAll() if the designated
// constraints aren't met.
type CreateBasicAuthSecretReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBasicAuthSecretReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBasicAuthSecretReqMultiError) AllErrors() []error { return m }

// CreateBasicAuthSecretReqValidationError is the validation error returned by
// CreateBasicAuthSecretReq.Validate if the designated constraints aren't met.
type CreateBasicAuthSecretReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBasicAuthSecretReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBasicAuthSecretReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBasicAuthSecretReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBasicAuthSecretReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBasicAuthSecretReqValidationError) ErrorName() string {
	return "CreateBasicAuthSecretReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBasicAuthSecretReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBasicAuthSecretReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBasicAuthSecretReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBasicAuthSecretReqValidationError{}

// Validate checks the field values on CreateBasicAuthSecretReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBasicAuthSecretReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBasicAuthSecretReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBasicAuthSecretReplyMultiError, or nil if none found.
func (m *CreateBasicAuthSecretReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBasicAuthSecretReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return CreateBasicAuthSecretReplyMultiError(errors)
	}

	return nil
}

// CreateBasicAuthSecretReplyMultiError is an error wrapping multiple
// validation errors returned by CreateBasicAuthSecretReply.ValidateAll() if
// the designated constraints aren't met.
type CreateBasicAuthSecretReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBasicAuthSecretReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBasicAuthSecretReplyMultiError) AllErrors() []error { return m }

// CreateBasicAuthSecretReplyValidationError is the validation error returned
// by CreateBasicAuthSecretReply.Validate if the designated constraints aren't met.
type CreateBasicAuthSecretReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBasicAuthSecretReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBasicAuthSecretReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBasicAuthSecretReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBasicAuthSecretReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBasicAuthSecretReplyValidationError) ErrorName() string {
	return "CreateBasicAuthSecretReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBasicAuthSecretReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBasicAuthSecretReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBasicAuthSecretReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBasicAuthSecretReplyValidationError{}

// Validate checks the field values on UpdateBasicAuthSecretReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBasicAuthSecretReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBasicAuthSecretReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBasicAuthSecretReqMultiError, or nil if none found.
func (m *UpdateBasicAuthSecretReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBasicAuthSecretReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := UpdateBasicAuthSecretReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := UpdateBasicAuthSecretReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := UpdateBasicAuthSecretReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := UpdateBasicAuthSecretReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := UpdateBasicAuthSecretReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := UpdateBasicAuthSecretReqValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateBasicAuthSecretReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUsername()) < 1 {
		err := UpdateBasicAuthSecretReqValidationError{
			field:  "Username",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 1 {
		err := UpdateBasicAuthSecretReqValidationError{
			field:  "Password",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Immutable

	// no validation rules for Annotations

	// no validation rules for Labels

	if len(errors) > 0 {
		return UpdateBasicAuthSecretReqMultiError(errors)
	}

	return nil
}

// UpdateBasicAuthSecretReqMultiError is an error wrapping multiple validation
// errors returned by UpdateBasicAuthSecretReq.ValidateAll() if the designated
// constraints aren't met.
type UpdateBasicAuthSecretReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBasicAuthSecretReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBasicAuthSecretReqMultiError) AllErrors() []error { return m }

// UpdateBasicAuthSecretReqValidationError is the validation error returned by
// UpdateBasicAuthSecretReq.Validate if the designated constraints aren't met.
type UpdateBasicAuthSecretReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBasicAuthSecretReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBasicAuthSecretReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBasicAuthSecretReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBasicAuthSecretReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBasicAuthSecretReqValidationError) ErrorName() string {
	return "UpdateBasicAuthSecretReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBasicAuthSecretReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBasicAuthSecretReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBasicAuthSecretReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBasicAuthSecretReqValidationError{}

// Validate checks the field values on UpdateBasicAuthSecretReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBasicAuthSecretReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBasicAuthSecretReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBasicAuthSecretReplyMultiError, or nil if none found.
func (m *UpdateBasicAuthSecretReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBasicAuthSecretReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return UpdateBasicAuthSecretReplyMultiError(errors)
	}

	return nil
}

// UpdateBasicAuthSecretReplyMultiError is an error wrapping multiple
// validation errors returned by UpdateBasicAuthSecretReply.ValidateAll() if
// the designated constraints aren't met.
type UpdateBasicAuthSecretReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBasicAuthSecretReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBasicAuthSecretReplyMultiError) AllErrors() []error { return m }

// UpdateBasicAuthSecretReplyValidationError is the validation error returned
// by UpdateBasicAuthSecretReply.Validate if the designated constraints aren't met.
type UpdateBasicAuthSecretReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBasicAuthSecretReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBasicAuthSecretReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBasicAuthSecretReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBasicAuthSecretReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBasicAuthSecretReplyValidationError) ErrorName() string {
	return "UpdateBasicAuthSecretReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBasicAuthSecretReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBasicAuthSecretReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBasicAuthSecretReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBasicAuthSecretReplyValidationError{}

// Validate checks the field values on ListK8SClusterNameSpaceReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListK8SClusterNameSpaceReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListK8SClusterNameSpaceReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListK8SClusterNameSpaceReqMultiError, or nil if none found.
func (m *ListK8SClusterNameSpaceReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListK8SClusterNameSpaceReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ListK8SClusterNameSpaceReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ListK8SClusterNameSpaceReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ListK8SClusterNameSpaceReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := ListK8SClusterNameSpaceReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := ListK8SClusterNameSpaceReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListK8SClusterNameSpaceReqMultiError(errors)
	}

	return nil
}

// ListK8SClusterNameSpaceReqMultiError is an error wrapping multiple
// validation errors returned by ListK8SClusterNameSpaceReq.ValidateAll() if
// the designated constraints aren't met.
type ListK8SClusterNameSpaceReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListK8SClusterNameSpaceReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListK8SClusterNameSpaceReqMultiError) AllErrors() []error { return m }

// ListK8SClusterNameSpaceReqValidationError is the validation error returned
// by ListK8SClusterNameSpaceReq.Validate if the designated constraints aren't met.
type ListK8SClusterNameSpaceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListK8SClusterNameSpaceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListK8SClusterNameSpaceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListK8SClusterNameSpaceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListK8SClusterNameSpaceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListK8SClusterNameSpaceReqValidationError) ErrorName() string {
	return "ListK8SClusterNameSpaceReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListK8SClusterNameSpaceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListK8SClusterNameSpaceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListK8SClusterNameSpaceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListK8SClusterNameSpaceReqValidationError{}

// Validate checks the field values on ListK8SClusterNameSpaceReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListK8SClusterNameSpaceReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListK8SClusterNameSpaceReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListK8SClusterNameSpaceReplyMultiError, or nil if none found.
func (m *ListK8SClusterNameSpaceReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListK8SClusterNameSpaceReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNameSpace() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListK8SClusterNameSpaceReplyValidationError{
						field:  fmt.Sprintf("NameSpace[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListK8SClusterNameSpaceReplyValidationError{
						field:  fmt.Sprintf("NameSpace[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListK8SClusterNameSpaceReplyValidationError{
					field:  fmt.Sprintf("NameSpace[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListK8SClusterNameSpaceReplyMultiError(errors)
	}

	return nil
}

// ListK8SClusterNameSpaceReplyMultiError is an error wrapping multiple
// validation errors returned by ListK8SClusterNameSpaceReply.ValidateAll() if
// the designated constraints aren't met.
type ListK8SClusterNameSpaceReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListK8SClusterNameSpaceReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListK8SClusterNameSpaceReplyMultiError) AllErrors() []error { return m }

// ListK8SClusterNameSpaceReplyValidationError is the validation error returned
// by ListK8SClusterNameSpaceReply.Validate if the designated constraints
// aren't met.
type ListK8SClusterNameSpaceReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListK8SClusterNameSpaceReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListK8SClusterNameSpaceReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListK8SClusterNameSpaceReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListK8SClusterNameSpaceReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListK8SClusterNameSpaceReplyValidationError) ErrorName() string {
	return "ListK8SClusterNameSpaceReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListK8SClusterNameSpaceReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListK8SClusterNameSpaceReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListK8SClusterNameSpaceReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListK8SClusterNameSpaceReplyValidationError{}

// Validate checks the field values on DelK8SClusterNameSpaceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelK8SClusterNameSpaceReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelK8SClusterNameSpaceReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelK8SClusterNameSpaceReqMultiError, or nil if none found.
func (m *DelK8SClusterNameSpaceReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelK8SClusterNameSpaceReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := DelK8SClusterNameSpaceReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := DelK8SClusterNameSpaceReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := DelK8SClusterNameSpaceReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := DelK8SClusterNameSpaceReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := DelK8SClusterNameSpaceReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := DelK8SClusterNameSpaceReqValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelK8SClusterNameSpaceReqMultiError(errors)
	}

	return nil
}

// DelK8SClusterNameSpaceReqMultiError is an error wrapping multiple validation
// errors returned by DelK8SClusterNameSpaceReq.ValidateAll() if the
// designated constraints aren't met.
type DelK8SClusterNameSpaceReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelK8SClusterNameSpaceReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelK8SClusterNameSpaceReqMultiError) AllErrors() []error { return m }

// DelK8SClusterNameSpaceReqValidationError is the validation error returned by
// DelK8SClusterNameSpaceReq.Validate if the designated constraints aren't met.
type DelK8SClusterNameSpaceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelK8SClusterNameSpaceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelK8SClusterNameSpaceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelK8SClusterNameSpaceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelK8SClusterNameSpaceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelK8SClusterNameSpaceReqValidationError) ErrorName() string {
	return "DelK8SClusterNameSpaceReqValidationError"
}

// Error satisfies the builtin error interface
func (e DelK8SClusterNameSpaceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelK8SClusterNameSpaceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelK8SClusterNameSpaceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelK8SClusterNameSpaceReqValidationError{}

// Validate checks the field values on DelK8SClusterNameSpaceReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelK8SClusterNameSpaceReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelK8SClusterNameSpaceReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelK8SClusterNameSpaceReplyMultiError, or nil if none found.
func (m *DelK8SClusterNameSpaceReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DelK8SClusterNameSpaceReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return DelK8SClusterNameSpaceReplyMultiError(errors)
	}

	return nil
}

// DelK8SClusterNameSpaceReplyMultiError is an error wrapping multiple
// validation errors returned by DelK8SClusterNameSpaceReply.ValidateAll() if
// the designated constraints aren't met.
type DelK8SClusterNameSpaceReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelK8SClusterNameSpaceReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelK8SClusterNameSpaceReplyMultiError) AllErrors() []error { return m }

// DelK8SClusterNameSpaceReplyValidationError is the validation error returned
// by DelK8SClusterNameSpaceReply.Validate if the designated constraints
// aren't met.
type DelK8SClusterNameSpaceReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelK8SClusterNameSpaceReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelK8SClusterNameSpaceReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelK8SClusterNameSpaceReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelK8SClusterNameSpaceReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelK8SClusterNameSpaceReplyValidationError) ErrorName() string {
	return "DelK8SClusterNameSpaceReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DelK8SClusterNameSpaceReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelK8SClusterNameSpaceReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelK8SClusterNameSpaceReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelK8SClusterNameSpaceReplyValidationError{}

// Validate checks the field values on CreateK8SClusterNameSpaceReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateK8SClusterNameSpaceReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateK8SClusterNameSpaceReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateK8SClusterNameSpaceReqMultiError, or nil if none found.
func (m *CreateK8SClusterNameSpaceReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateK8SClusterNameSpaceReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := CreateK8SClusterNameSpaceReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := CreateK8SClusterNameSpaceReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := CreateK8SClusterNameSpaceReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := CreateK8SClusterNameSpaceReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := CreateK8SClusterNameSpaceReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := CreateK8SClusterNameSpaceReqValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateK8SClusterNameSpaceReqMultiError(errors)
	}

	return nil
}

// CreateK8SClusterNameSpaceReqMultiError is an error wrapping multiple
// validation errors returned by CreateK8SClusterNameSpaceReq.ValidateAll() if
// the designated constraints aren't met.
type CreateK8SClusterNameSpaceReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateK8SClusterNameSpaceReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateK8SClusterNameSpaceReqMultiError) AllErrors() []error { return m }

// CreateK8SClusterNameSpaceReqValidationError is the validation error returned
// by CreateK8SClusterNameSpaceReq.Validate if the designated constraints
// aren't met.
type CreateK8SClusterNameSpaceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateK8SClusterNameSpaceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateK8SClusterNameSpaceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateK8SClusterNameSpaceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateK8SClusterNameSpaceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateK8SClusterNameSpaceReqValidationError) ErrorName() string {
	return "CreateK8SClusterNameSpaceReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateK8SClusterNameSpaceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateK8SClusterNameSpaceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateK8SClusterNameSpaceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateK8SClusterNameSpaceReqValidationError{}

// Validate checks the field values on CreateK8SClusterNameSpaceReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateK8SClusterNameSpaceReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateK8SClusterNameSpaceReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateK8SClusterNameSpaceReplyMultiError, or nil if none found.
func (m *CreateK8SClusterNameSpaceReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateK8SClusterNameSpaceReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return CreateK8SClusterNameSpaceReplyMultiError(errors)
	}

	return nil
}

// CreateK8SClusterNameSpaceReplyMultiError is an error wrapping multiple
// validation errors returned by CreateK8SClusterNameSpaceReply.ValidateAll()
// if the designated constraints aren't met.
type CreateK8SClusterNameSpaceReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateK8SClusterNameSpaceReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateK8SClusterNameSpaceReplyMultiError) AllErrors() []error { return m }

// CreateK8SClusterNameSpaceReplyValidationError is the validation error
// returned by CreateK8SClusterNameSpaceReply.Validate if the designated
// constraints aren't met.
type CreateK8SClusterNameSpaceReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateK8SClusterNameSpaceReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateK8SClusterNameSpaceReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateK8SClusterNameSpaceReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateK8SClusterNameSpaceReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateK8SClusterNameSpaceReplyValidationError) ErrorName() string {
	return "CreateK8SClusterNameSpaceReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateK8SClusterNameSpaceReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateK8SClusterNameSpaceReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateK8SClusterNameSpaceReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateK8SClusterNameSpaceReplyValidationError{}

// Validate checks the field values on ListK8SClusterDeploymentReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListK8SClusterDeploymentReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListK8SClusterDeploymentReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListK8SClusterDeploymentReqMultiError, or nil if none found.
func (m *ListK8SClusterDeploymentReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListK8SClusterDeploymentReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ListK8SClusterDeploymentReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ListK8SClusterDeploymentReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ListK8SClusterDeploymentReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := ListK8SClusterDeploymentReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := ListK8SClusterDeploymentReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := ListK8SClusterDeploymentReqValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Limit

	// no validation rules for Continue

	// no validation rules for LabelSelector

	if len(errors) > 0 {
		return ListK8SClusterDeploymentReqMultiError(errors)
	}

	return nil
}

// ListK8SClusterDeploymentReqMultiError is an error wrapping multiple
// validation errors returned by ListK8SClusterDeploymentReq.ValidateAll() if
// the designated constraints aren't met.
type ListK8SClusterDeploymentReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListK8SClusterDeploymentReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListK8SClusterDeploymentReqMultiError) AllErrors() []error { return m }

// ListK8SClusterDeploymentReqValidationError is the validation error returned
// by ListK8SClusterDeploymentReq.Validate if the designated constraints
// aren't met.
type ListK8SClusterDeploymentReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListK8SClusterDeploymentReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListK8SClusterDeploymentReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListK8SClusterDeploymentReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListK8SClusterDeploymentReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListK8SClusterDeploymentReqValidationError) ErrorName() string {
	return "ListK8SClusterDeploymentReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListK8SClusterDeploymentReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListK8SClusterDeploymentReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListK8SClusterDeploymentReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListK8SClusterDeploymentReqValidationError{}

// Validate checks the field values on ListK8SClusterDeploymentReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListK8SClusterDeploymentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListK8SClusterDeploymentReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListK8SClusterDeploymentReplyMultiError, or nil if none found.
func (m *ListK8SClusterDeploymentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListK8SClusterDeploymentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Continue

	for idx, item := range m.GetDeployment() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListK8SClusterDeploymentReplyValidationError{
						field:  fmt.Sprintf("Deployment[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListK8SClusterDeploymentReplyValidationError{
						field:  fmt.Sprintf("Deployment[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListK8SClusterDeploymentReplyValidationError{
					field:  fmt.Sprintf("Deployment[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListK8SClusterDeploymentReplyMultiError(errors)
	}

	return nil
}

// ListK8SClusterDeploymentReplyMultiError is an error wrapping multiple
// validation errors returned by ListK8SClusterDeploymentReply.ValidateAll()
// if the designated constraints aren't met.
type ListK8SClusterDeploymentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListK8SClusterDeploymentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListK8SClusterDeploymentReplyMultiError) AllErrors() []error { return m }

// ListK8SClusterDeploymentReplyValidationError is the validation error
// returned by ListK8SClusterDeploymentReply.Validate if the designated
// constraints aren't met.
type ListK8SClusterDeploymentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListK8SClusterDeploymentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListK8SClusterDeploymentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListK8SClusterDeploymentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListK8SClusterDeploymentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListK8SClusterDeploymentReplyValidationError) ErrorName() string {
	return "ListK8SClusterDeploymentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListK8SClusterDeploymentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListK8SClusterDeploymentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListK8SClusterDeploymentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListK8SClusterDeploymentReplyValidationError{}

// Validate checks the field values on GetK8SClusterDeploymentReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetK8SClusterDeploymentReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetK8SClusterDeploymentReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetK8SClusterDeploymentReqMultiError, or nil if none found.
func (m *GetK8SClusterDeploymentReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetK8SClusterDeploymentReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := GetK8SClusterDeploymentReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := GetK8SClusterDeploymentReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := GetK8SClusterDeploymentReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := GetK8SClusterDeploymentReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := GetK8SClusterDeploymentReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := GetK8SClusterDeploymentReqValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDeployment()) < 1 {
		err := GetK8SClusterDeploymentReqValidationError{
			field:  "Deployment",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetK8SClusterDeploymentReqMultiError(errors)
	}

	return nil
}

// GetK8SClusterDeploymentReqMultiError is an error wrapping multiple
// validation errors returned by GetK8SClusterDeploymentReq.ValidateAll() if
// the designated constraints aren't met.
type GetK8SClusterDeploymentReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetK8SClusterDeploymentReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetK8SClusterDeploymentReqMultiError) AllErrors() []error { return m }

// GetK8SClusterDeploymentReqValidationError is the validation error returned
// by GetK8SClusterDeploymentReq.Validate if the designated constraints aren't met.
type GetK8SClusterDeploymentReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetK8SClusterDeploymentReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetK8SClusterDeploymentReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetK8SClusterDeploymentReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetK8SClusterDeploymentReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetK8SClusterDeploymentReqValidationError) ErrorName() string {
	return "GetK8SClusterDeploymentReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetK8SClusterDeploymentReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetK8SClusterDeploymentReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetK8SClusterDeploymentReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetK8SClusterDeploymentReqValidationError{}

// Validate checks the field values on GetK8SClusterDeploymentReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetK8SClusterDeploymentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetK8SClusterDeploymentReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetK8SClusterDeploymentReplyMultiError, or nil if none found.
func (m *GetK8SClusterDeploymentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetK8SClusterDeploymentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Deployments

	if len(errors) > 0 {
		return GetK8SClusterDeploymentReplyMultiError(errors)
	}

	return nil
}

// GetK8SClusterDeploymentReplyMultiError is an error wrapping multiple
// validation errors returned by GetK8SClusterDeploymentReply.ValidateAll() if
// the designated constraints aren't met.
type GetK8SClusterDeploymentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetK8SClusterDeploymentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetK8SClusterDeploymentReplyMultiError) AllErrors() []error { return m }

// GetK8SClusterDeploymentReplyValidationError is the validation error returned
// by GetK8SClusterDeploymentReply.Validate if the designated constraints
// aren't met.
type GetK8SClusterDeploymentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetK8SClusterDeploymentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetK8SClusterDeploymentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetK8SClusterDeploymentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetK8SClusterDeploymentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetK8SClusterDeploymentReplyValidationError) ErrorName() string {
	return "GetK8SClusterDeploymentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetK8SClusterDeploymentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetK8SClusterDeploymentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetK8SClusterDeploymentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetK8SClusterDeploymentReplyValidationError{}

// Validate checks the field values on UpdateK8SClusterDeploymentReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateK8SClusterDeploymentReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateK8SClusterDeploymentReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateK8SClusterDeploymentReqMultiError, or nil if none found.
func (m *UpdateK8SClusterDeploymentReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateK8SClusterDeploymentReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateK8SClusterDeploymentReqMultiError(errors)
	}

	return nil
}

// UpdateK8SClusterDeploymentReqMultiError is an error wrapping multiple
// validation errors returned by UpdateK8SClusterDeploymentReq.ValidateAll()
// if the designated constraints aren't met.
type UpdateK8SClusterDeploymentReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateK8SClusterDeploymentReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateK8SClusterDeploymentReqMultiError) AllErrors() []error { return m }

// UpdateK8SClusterDeploymentReqValidationError is the validation error
// returned by UpdateK8SClusterDeploymentReq.Validate if the designated
// constraints aren't met.
type UpdateK8SClusterDeploymentReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateK8SClusterDeploymentReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateK8SClusterDeploymentReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateK8SClusterDeploymentReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateK8SClusterDeploymentReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateK8SClusterDeploymentReqValidationError) ErrorName() string {
	return "UpdateK8SClusterDeploymentReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateK8SClusterDeploymentReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateK8SClusterDeploymentReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateK8SClusterDeploymentReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateK8SClusterDeploymentReqValidationError{}

// Validate checks the field values on UpdateK8SClusterDeploymentReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateK8SClusterDeploymentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateK8SClusterDeploymentReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateK8SClusterDeploymentReplyMultiError, or nil if none found.
func (m *UpdateK8SClusterDeploymentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateK8SClusterDeploymentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateK8SClusterDeploymentReplyMultiError(errors)
	}

	return nil
}

// UpdateK8SClusterDeploymentReplyMultiError is an error wrapping multiple
// validation errors returned by UpdateK8SClusterDeploymentReply.ValidateAll()
// if the designated constraints aren't met.
type UpdateK8SClusterDeploymentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateK8SClusterDeploymentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateK8SClusterDeploymentReplyMultiError) AllErrors() []error { return m }

// UpdateK8SClusterDeploymentReplyValidationError is the validation error
// returned by UpdateK8SClusterDeploymentReply.Validate if the designated
// constraints aren't met.
type UpdateK8SClusterDeploymentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateK8SClusterDeploymentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateK8SClusterDeploymentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateK8SClusterDeploymentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateK8SClusterDeploymentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateK8SClusterDeploymentReplyValidationError) ErrorName() string {
	return "UpdateK8SClusterDeploymentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateK8SClusterDeploymentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateK8SClusterDeploymentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateK8SClusterDeploymentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateK8SClusterDeploymentReplyValidationError{}

// Validate checks the field values on DelK8SClusterDeploymentReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelK8SClusterDeploymentReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelK8SClusterDeploymentReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelK8SClusterDeploymentReqMultiError, or nil if none found.
func (m *DelK8SClusterDeploymentReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelK8SClusterDeploymentReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := DelK8SClusterDeploymentReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := DelK8SClusterDeploymentReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := DelK8SClusterDeploymentReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := DelK8SClusterDeploymentReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := DelK8SClusterDeploymentReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := DelK8SClusterDeploymentReqValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDeployment()) < 1 {
		err := DelK8SClusterDeploymentReqValidationError{
			field:  "Deployment",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelK8SClusterDeploymentReqMultiError(errors)
	}

	return nil
}

// DelK8SClusterDeploymentReqMultiError is an error wrapping multiple
// validation errors returned by DelK8SClusterDeploymentReq.ValidateAll() if
// the designated constraints aren't met.
type DelK8SClusterDeploymentReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelK8SClusterDeploymentReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelK8SClusterDeploymentReqMultiError) AllErrors() []error { return m }

// DelK8SClusterDeploymentReqValidationError is the validation error returned
// by DelK8SClusterDeploymentReq.Validate if the designated constraints aren't met.
type DelK8SClusterDeploymentReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelK8SClusterDeploymentReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelK8SClusterDeploymentReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelK8SClusterDeploymentReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelK8SClusterDeploymentReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelK8SClusterDeploymentReqValidationError) ErrorName() string {
	return "DelK8SClusterDeploymentReqValidationError"
}

// Error satisfies the builtin error interface
func (e DelK8SClusterDeploymentReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelK8SClusterDeploymentReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelK8SClusterDeploymentReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelK8SClusterDeploymentReqValidationError{}

// Validate checks the field values on DelK8SClusterDeploymentReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelK8SClusterDeploymentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelK8SClusterDeploymentReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelK8SClusterDeploymentReplyMultiError, or nil if none found.
func (m *DelK8SClusterDeploymentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DelK8SClusterDeploymentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return DelK8SClusterDeploymentReplyMultiError(errors)
	}

	return nil
}

// DelK8SClusterDeploymentReplyMultiError is an error wrapping multiple
// validation errors returned by DelK8SClusterDeploymentReply.ValidateAll() if
// the designated constraints aren't met.
type DelK8SClusterDeploymentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelK8SClusterDeploymentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelK8SClusterDeploymentReplyMultiError) AllErrors() []error { return m }

// DelK8SClusterDeploymentReplyValidationError is the validation error returned
// by DelK8SClusterDeploymentReply.Validate if the designated constraints
// aren't met.
type DelK8SClusterDeploymentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelK8SClusterDeploymentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelK8SClusterDeploymentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelK8SClusterDeploymentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelK8SClusterDeploymentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelK8SClusterDeploymentReplyValidationError) ErrorName() string {
	return "DelK8SClusterDeploymentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DelK8SClusterDeploymentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelK8SClusterDeploymentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelK8SClusterDeploymentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelK8SClusterDeploymentReplyValidationError{}

// Validate checks the field values on UpdateK8SClusterDeploymentReplicaSetReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateK8SClusterDeploymentReplicaSetReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateK8SClusterDeploymentReplicaSetReq with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// UpdateK8SClusterDeploymentReplicaSetReqMultiError, or nil if none found.
func (m *UpdateK8SClusterDeploymentReplicaSetReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateK8SClusterDeploymentReplicaSetReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := UpdateK8SClusterDeploymentReplicaSetReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := UpdateK8SClusterDeploymentReplicaSetReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := UpdateK8SClusterDeploymentReplicaSetReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := UpdateK8SClusterDeploymentReplicaSetReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := UpdateK8SClusterDeploymentReplicaSetReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := UpdateK8SClusterDeploymentReplicaSetReqValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateK8SClusterDeploymentReplicaSetReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetReplicas() <= 0 {
		err := UpdateK8SClusterDeploymentReplicaSetReqValidationError{
			field:  "Replicas",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateK8SClusterDeploymentReplicaSetReqMultiError(errors)
	}

	return nil
}

// UpdateK8SClusterDeploymentReplicaSetReqMultiError is an error wrapping
// multiple validation errors returned by
// UpdateK8SClusterDeploymentReplicaSetReq.ValidateAll() if the designated
// constraints aren't met.
type UpdateK8SClusterDeploymentReplicaSetReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateK8SClusterDeploymentReplicaSetReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateK8SClusterDeploymentReplicaSetReqMultiError) AllErrors() []error { return m }

// UpdateK8SClusterDeploymentReplicaSetReqValidationError is the validation
// error returned by UpdateK8SClusterDeploymentReplicaSetReq.Validate if the
// designated constraints aren't met.
type UpdateK8SClusterDeploymentReplicaSetReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateK8SClusterDeploymentReplicaSetReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateK8SClusterDeploymentReplicaSetReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateK8SClusterDeploymentReplicaSetReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateK8SClusterDeploymentReplicaSetReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateK8SClusterDeploymentReplicaSetReqValidationError) ErrorName() string {
	return "UpdateK8SClusterDeploymentReplicaSetReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateK8SClusterDeploymentReplicaSetReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateK8SClusterDeploymentReplicaSetReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateK8SClusterDeploymentReplicaSetReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateK8SClusterDeploymentReplicaSetReqValidationError{}

// Validate checks the field values on
// UpdateK8SClusterDeploymentReplicaSetReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateK8SClusterDeploymentReplicaSetReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateK8SClusterDeploymentReplicaSetReply with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// UpdateK8SClusterDeploymentReplicaSetReplyMultiError, or nil if none found.
func (m *UpdateK8SClusterDeploymentReplicaSetReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateK8SClusterDeploymentReplicaSetReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return UpdateK8SClusterDeploymentReplicaSetReplyMultiError(errors)
	}

	return nil
}

// UpdateK8SClusterDeploymentReplicaSetReplyMultiError is an error wrapping
// multiple validation errors returned by
// UpdateK8SClusterDeploymentReplicaSetReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateK8SClusterDeploymentReplicaSetReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateK8SClusterDeploymentReplicaSetReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateK8SClusterDeploymentReplicaSetReplyMultiError) AllErrors() []error { return m }

// UpdateK8SClusterDeploymentReplicaSetReplyValidationError is the validation
// error returned by UpdateK8SClusterDeploymentReplicaSetReply.Validate if the
// designated constraints aren't met.
type UpdateK8SClusterDeploymentReplicaSetReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateK8SClusterDeploymentReplicaSetReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateK8SClusterDeploymentReplicaSetReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateK8SClusterDeploymentReplicaSetReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateK8SClusterDeploymentReplicaSetReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateK8SClusterDeploymentReplicaSetReplyValidationError) ErrorName() string {
	return "UpdateK8SClusterDeploymentReplicaSetReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateK8SClusterDeploymentReplicaSetReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateK8SClusterDeploymentReplicaSetReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateK8SClusterDeploymentReplicaSetReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateK8SClusterDeploymentReplicaSetReplyValidationError{}

// Validate checks the field values on ServicePort with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServicePort) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServicePort with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServicePortMultiError, or
// nil if none found.
func (m *ServicePort) ValidateAll() error {
	return m.validate(true)
}

func (m *ServicePort) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Protocol

	// no validation rules for Port

	// no validation rules for TargetPort

	if len(errors) > 0 {
		return ServicePortMultiError(errors)
	}

	return nil
}

// ServicePortMultiError is an error wrapping multiple validation errors
// returned by ServicePort.ValidateAll() if the designated constraints aren't met.
type ServicePortMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServicePortMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServicePortMultiError) AllErrors() []error { return m }

// ServicePortValidationError is the validation error returned by
// ServicePort.Validate if the designated constraints aren't met.
type ServicePortValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServicePortValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServicePortValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServicePortValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServicePortValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServicePortValidationError) ErrorName() string { return "ServicePortValidationError" }

// Error satisfies the builtin error interface
func (e ServicePortValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServicePort.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServicePortValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServicePortValidationError{}

// Validate checks the field values on CreateK8SServiceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateK8SServiceReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateK8SServiceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateK8SServiceReqMultiError, or nil if none found.
func (m *CreateK8SServiceReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateK8SServiceReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := CreateK8SServiceReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := CreateK8SServiceReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := CreateK8SServiceReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := CreateK8SServiceReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := CreateK8SServiceReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := CreateK8SServiceReqValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateK8SServiceReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetServiceType()) < 1 {
		err := CreateK8SServiceReqValidationError{
			field:  "ServiceType",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Selector

	for idx, item := range m.GetPorts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateK8SServiceReqValidationError{
						field:  fmt.Sprintf("Ports[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateK8SServiceReqValidationError{
						field:  fmt.Sprintf("Ports[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateK8SServiceReqValidationError{
					field:  fmt.Sprintf("Ports[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Annotations

	if len(errors) > 0 {
		return CreateK8SServiceReqMultiError(errors)
	}

	return nil
}

// CreateK8SServiceReqMultiError is an error wrapping multiple validation
// errors returned by CreateK8SServiceReq.ValidateAll() if the designated
// constraints aren't met.
type CreateK8SServiceReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateK8SServiceReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateK8SServiceReqMultiError) AllErrors() []error { return m }

// CreateK8SServiceReqValidationError is the validation error returned by
// CreateK8SServiceReq.Validate if the designated constraints aren't met.
type CreateK8SServiceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateK8SServiceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateK8SServiceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateK8SServiceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateK8SServiceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateK8SServiceReqValidationError) ErrorName() string {
	return "CreateK8SServiceReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateK8SServiceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateK8SServiceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateK8SServiceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateK8SServiceReqValidationError{}

// Validate checks the field values on CreateK8SServiceReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateK8SServiceReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateK8SServiceReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateK8SServiceReplyMultiError, or nil if none found.
func (m *CreateK8SServiceReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateK8SServiceReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return CreateK8SServiceReplyMultiError(errors)
	}

	return nil
}

// CreateK8SServiceReplyMultiError is an error wrapping multiple validation
// errors returned by CreateK8SServiceReply.ValidateAll() if the designated
// constraints aren't met.
type CreateK8SServiceReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateK8SServiceReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateK8SServiceReplyMultiError) AllErrors() []error { return m }

// CreateK8SServiceReplyValidationError is the validation error returned by
// CreateK8SServiceReply.Validate if the designated constraints aren't met.
type CreateK8SServiceReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateK8SServiceReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateK8SServiceReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateK8SServiceReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateK8SServiceReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateK8SServiceReplyValidationError) ErrorName() string {
	return "CreateK8SServiceReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateK8SServiceReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateK8SServiceReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateK8SServiceReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateK8SServiceReplyValidationError{}

// Validate checks the field values on ListK8SServiceReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListK8SServiceReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListK8SServiceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListK8SServiceReqMultiError, or nil if none found.
func (m *ListK8SServiceReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListK8SServiceReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ListK8SServiceReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ListK8SServiceReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ListK8SServiceReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := ListK8SServiceReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := ListK8SServiceReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := ListK8SServiceReqValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListK8SServiceReqMultiError(errors)
	}

	return nil
}

// ListK8SServiceReqMultiError is an error wrapping multiple validation errors
// returned by ListK8SServiceReq.ValidateAll() if the designated constraints
// aren't met.
type ListK8SServiceReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListK8SServiceReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListK8SServiceReqMultiError) AllErrors() []error { return m }

// ListK8SServiceReqValidationError is the validation error returned by
// ListK8SServiceReq.Validate if the designated constraints aren't met.
type ListK8SServiceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListK8SServiceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListK8SServiceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListK8SServiceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListK8SServiceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListK8SServiceReqValidationError) ErrorName() string {
	return "ListK8SServiceReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListK8SServiceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListK8SServiceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListK8SServiceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListK8SServiceReqValidationError{}

// Validate checks the field values on ListK8SServiceReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListK8SServiceReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListK8SServiceReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListK8SServiceReplyMultiError, or nil if none found.
func (m *ListK8SServiceReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListK8SServiceReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetService() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListK8SServiceReplyValidationError{
						field:  fmt.Sprintf("Service[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListK8SServiceReplyValidationError{
						field:  fmt.Sprintf("Service[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListK8SServiceReplyValidationError{
					field:  fmt.Sprintf("Service[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListK8SServiceReplyMultiError(errors)
	}

	return nil
}

// ListK8SServiceReplyMultiError is an error wrapping multiple validation
// errors returned by ListK8SServiceReply.ValidateAll() if the designated
// constraints aren't met.
type ListK8SServiceReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListK8SServiceReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListK8SServiceReplyMultiError) AllErrors() []error { return m }

// ListK8SServiceReplyValidationError is the validation error returned by
// ListK8SServiceReply.Validate if the designated constraints aren't met.
type ListK8SServiceReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListK8SServiceReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListK8SServiceReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListK8SServiceReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListK8SServiceReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListK8SServiceReplyValidationError) ErrorName() string {
	return "ListK8SServiceReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListK8SServiceReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListK8SServiceReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListK8SServiceReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListK8SServiceReplyValidationError{}

// Validate checks the field values on GetK8SServiceReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetK8SServiceReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetK8SServiceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetK8SServiceReqMultiError, or nil if none found.
func (m *GetK8SServiceReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetK8SServiceReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := GetK8SServiceReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := GetK8SServiceReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := GetK8SServiceReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := GetK8SServiceReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := GetK8SServiceReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := GetK8SServiceReqValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := GetK8SServiceReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetK8SServiceReqMultiError(errors)
	}

	return nil
}

// GetK8SServiceReqMultiError is an error wrapping multiple validation errors
// returned by GetK8SServiceReq.ValidateAll() if the designated constraints
// aren't met.
type GetK8SServiceReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetK8SServiceReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetK8SServiceReqMultiError) AllErrors() []error { return m }

// GetK8SServiceReqValidationError is the validation error returned by
// GetK8SServiceReq.Validate if the designated constraints aren't met.
type GetK8SServiceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetK8SServiceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetK8SServiceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetK8SServiceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetK8SServiceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetK8SServiceReqValidationError) ErrorName() string { return "GetK8SServiceReqValidationError" }

// Error satisfies the builtin error interface
func (e GetK8SServiceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetK8SServiceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetK8SServiceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetK8SServiceReqValidationError{}

// Validate checks the field values on GetK8SServiceReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetK8SServiceReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetK8SServiceReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetK8SServiceReplyMultiError, or nil if none found.
func (m *GetK8SServiceReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetK8SServiceReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Namespace

	// no validation rules for ResourceVersion

	// no validation rules for ClusterIP

	// no validation rules for SessionAffinity

	// no validation rules for Type

	// no validation rules for Labels

	// no validation rules for Annotations

	for idx, item := range m.GetPorts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetK8SServiceReplyValidationError{
						field:  fmt.Sprintf("Ports[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetK8SServiceReplyValidationError{
						field:  fmt.Sprintf("Ports[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetK8SServiceReplyValidationError{
					field:  fmt.Sprintf("Ports[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetK8SServiceReplyMultiError(errors)
	}

	return nil
}

// GetK8SServiceReplyMultiError is an error wrapping multiple validation errors
// returned by GetK8SServiceReply.ValidateAll() if the designated constraints
// aren't met.
type GetK8SServiceReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetK8SServiceReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetK8SServiceReplyMultiError) AllErrors() []error { return m }

// GetK8SServiceReplyValidationError is the validation error returned by
// GetK8SServiceReply.Validate if the designated constraints aren't met.
type GetK8SServiceReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetK8SServiceReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetK8SServiceReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetK8SServiceReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetK8SServiceReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetK8SServiceReplyValidationError) ErrorName() string {
	return "GetK8SServiceReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetK8SServiceReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetK8SServiceReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetK8SServiceReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetK8SServiceReplyValidationError{}

// Validate checks the field values on DelK8SServiceReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DelK8SServiceReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelK8SServiceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelK8SServiceReqMultiError, or nil if none found.
func (m *DelK8SServiceReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelK8SServiceReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := DelK8SServiceReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := DelK8SServiceReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := DelK8SServiceReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := DelK8SServiceReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := DelK8SServiceReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := DelK8SServiceReqValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := DelK8SServiceReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelK8SServiceReqMultiError(errors)
	}

	return nil
}

// DelK8SServiceReqMultiError is an error wrapping multiple validation errors
// returned by DelK8SServiceReq.ValidateAll() if the designated constraints
// aren't met.
type DelK8SServiceReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelK8SServiceReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelK8SServiceReqMultiError) AllErrors() []error { return m }

// DelK8SServiceReqValidationError is the validation error returned by
// DelK8SServiceReq.Validate if the designated constraints aren't met.
type DelK8SServiceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelK8SServiceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelK8SServiceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelK8SServiceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelK8SServiceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelK8SServiceReqValidationError) ErrorName() string { return "DelK8SServiceReqValidationError" }

// Error satisfies the builtin error interface
func (e DelK8SServiceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelK8SServiceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelK8SServiceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelK8SServiceReqValidationError{}

// Validate checks the field values on DelK8SServiceReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelK8SServiceReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelK8SServiceReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelK8SServiceReplyMultiError, or nil if none found.
func (m *DelK8SServiceReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DelK8SServiceReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return DelK8SServiceReplyMultiError(errors)
	}

	return nil
}

// DelK8SServiceReplyMultiError is an error wrapping multiple validation errors
// returned by DelK8SServiceReply.ValidateAll() if the designated constraints
// aren't met.
type DelK8SServiceReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelK8SServiceReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelK8SServiceReplyMultiError) AllErrors() []error { return m }

// DelK8SServiceReplyValidationError is the validation error returned by
// DelK8SServiceReply.Validate if the designated constraints aren't met.
type DelK8SServiceReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelK8SServiceReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelK8SServiceReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelK8SServiceReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelK8SServiceReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelK8SServiceReplyValidationError) ErrorName() string {
	return "DelK8SServiceReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DelK8SServiceReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelK8SServiceReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelK8SServiceReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelK8SServiceReplyValidationError{}

// Validate checks the field values on CreateK8SIngressReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateK8SIngressReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateK8SIngressReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateK8SIngressReqMultiError, or nil if none found.
func (m *CreateK8SIngressReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateK8SIngressReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := CreateK8SIngressReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := CreateK8SIngressReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := CreateK8SIngressReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := CreateK8SIngressReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := CreateK8SIngressReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := CreateK8SIngressReqValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateK8SIngressReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Annotations

	// no validation rules for Labels

	{
		sorted_keys := make([]string, len(m.GetService()))
		i := 0
		for key := range m.GetService() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetService()[key]
			_ = val

			// no validation rules for Service[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CreateK8SIngressReqValidationError{
							field:  fmt.Sprintf("Service[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CreateK8SIngressReqValidationError{
							field:  fmt.Sprintf("Service[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CreateK8SIngressReqValidationError{
						field:  fmt.Sprintf("Service[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return CreateK8SIngressReqMultiError(errors)
	}

	return nil
}

// CreateK8SIngressReqMultiError is an error wrapping multiple validation
// errors returned by CreateK8SIngressReq.ValidateAll() if the designated
// constraints aren't met.
type CreateK8SIngressReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateK8SIngressReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateK8SIngressReqMultiError) AllErrors() []error { return m }

// CreateK8SIngressReqValidationError is the validation error returned by
// CreateK8SIngressReq.Validate if the designated constraints aren't met.
type CreateK8SIngressReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateK8SIngressReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateK8SIngressReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateK8SIngressReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateK8SIngressReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateK8SIngressReqValidationError) ErrorName() string {
	return "CreateK8SIngressReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateK8SIngressReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateK8SIngressReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateK8SIngressReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateK8SIngressReqValidationError{}

// Validate checks the field values on CreateK8SIngressReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateK8SIngressReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateK8SIngressReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateK8SIngressReplyMultiError, or nil if none found.
func (m *CreateK8SIngressReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateK8SIngressReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return CreateK8SIngressReplyMultiError(errors)
	}

	return nil
}

// CreateK8SIngressReplyMultiError is an error wrapping multiple validation
// errors returned by CreateK8SIngressReply.ValidateAll() if the designated
// constraints aren't met.
type CreateK8SIngressReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateK8SIngressReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateK8SIngressReplyMultiError) AllErrors() []error { return m }

// CreateK8SIngressReplyValidationError is the validation error returned by
// CreateK8SIngressReply.Validate if the designated constraints aren't met.
type CreateK8SIngressReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateK8SIngressReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateK8SIngressReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateK8SIngressReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateK8SIngressReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateK8SIngressReplyValidationError) ErrorName() string {
	return "CreateK8SIngressReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateK8SIngressReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateK8SIngressReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateK8SIngressReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateK8SIngressReplyValidationError{}

// Validate checks the field values on ListK8SIngressReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListK8SIngressReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListK8SIngressReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListK8SIngressReqMultiError, or nil if none found.
func (m *ListK8SIngressReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListK8SIngressReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ListK8SIngressReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ListK8SIngressReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ListK8SIngressReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := ListK8SIngressReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := ListK8SIngressReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := ListK8SIngressReqValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListK8SIngressReqMultiError(errors)
	}

	return nil
}

// ListK8SIngressReqMultiError is an error wrapping multiple validation errors
// returned by ListK8SIngressReq.ValidateAll() if the designated constraints
// aren't met.
type ListK8SIngressReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListK8SIngressReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListK8SIngressReqMultiError) AllErrors() []error { return m }

// ListK8SIngressReqValidationError is the validation error returned by
// ListK8SIngressReq.Validate if the designated constraints aren't met.
type ListK8SIngressReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListK8SIngressReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListK8SIngressReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListK8SIngressReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListK8SIngressReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListK8SIngressReqValidationError) ErrorName() string {
	return "ListK8SIngressReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListK8SIngressReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListK8SIngressReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListK8SIngressReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListK8SIngressReqValidationError{}

// Validate checks the field values on ListK8SIngressReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListK8SIngressReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListK8SIngressReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListK8SIngressReplyMultiError, or nil if none found.
func (m *ListK8SIngressReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListK8SIngressReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetIngress() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListK8SIngressReplyValidationError{
						field:  fmt.Sprintf("Ingress[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListK8SIngressReplyValidationError{
						field:  fmt.Sprintf("Ingress[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListK8SIngressReplyValidationError{
					field:  fmt.Sprintf("Ingress[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListK8SIngressReplyMultiError(errors)
	}

	return nil
}

// ListK8SIngressReplyMultiError is an error wrapping multiple validation
// errors returned by ListK8SIngressReply.ValidateAll() if the designated
// constraints aren't met.
type ListK8SIngressReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListK8SIngressReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListK8SIngressReplyMultiError) AllErrors() []error { return m }

// ListK8SIngressReplyValidationError is the validation error returned by
// ListK8SIngressReply.Validate if the designated constraints aren't met.
type ListK8SIngressReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListK8SIngressReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListK8SIngressReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListK8SIngressReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListK8SIngressReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListK8SIngressReplyValidationError) ErrorName() string {
	return "ListK8SIngressReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListK8SIngressReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListK8SIngressReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListK8SIngressReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListK8SIngressReplyValidationError{}

// Validate checks the field values on GetK8SIngressReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetK8SIngressReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetK8SIngressReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetK8SIngressReqMultiError, or nil if none found.
func (m *GetK8SIngressReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetK8SIngressReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := GetK8SIngressReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := GetK8SIngressReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := GetK8SIngressReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := GetK8SIngressReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := GetK8SIngressReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := GetK8SIngressReqValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := GetK8SIngressReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetK8SIngressReqMultiError(errors)
	}

	return nil
}

// GetK8SIngressReqMultiError is an error wrapping multiple validation errors
// returned by GetK8SIngressReq.ValidateAll() if the designated constraints
// aren't met.
type GetK8SIngressReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetK8SIngressReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetK8SIngressReqMultiError) AllErrors() []error { return m }

// GetK8SIngressReqValidationError is the validation error returned by
// GetK8SIngressReq.Validate if the designated constraints aren't met.
type GetK8SIngressReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetK8SIngressReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetK8SIngressReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetK8SIngressReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetK8SIngressReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetK8SIngressReqValidationError) ErrorName() string { return "GetK8SIngressReqValidationError" }

// Error satisfies the builtin error interface
func (e GetK8SIngressReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetK8SIngressReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetK8SIngressReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetK8SIngressReqValidationError{}

// Validate checks the field values on GetK8SIngressReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetK8SIngressReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetK8SIngressReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetK8SIngressReplyMultiError, or nil if none found.
func (m *GetK8SIngressReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetK8SIngressReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Namespace

	// no validation rules for Labels

	{
		sorted_keys := make([]string, len(m.GetService()))
		i := 0
		for key := range m.GetService() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetService()[key]
			_ = val

			// no validation rules for Service[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, GetK8SIngressReplyValidationError{
							field:  fmt.Sprintf("Service[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, GetK8SIngressReplyValidationError{
							field:  fmt.Sprintf("Service[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return GetK8SIngressReplyValidationError{
						field:  fmt.Sprintf("Service[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return GetK8SIngressReplyMultiError(errors)
	}

	return nil
}

// GetK8SIngressReplyMultiError is an error wrapping multiple validation errors
// returned by GetK8SIngressReply.ValidateAll() if the designated constraints
// aren't met.
type GetK8SIngressReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetK8SIngressReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetK8SIngressReplyMultiError) AllErrors() []error { return m }

// GetK8SIngressReplyValidationError is the validation error returned by
// GetK8SIngressReply.Validate if the designated constraints aren't met.
type GetK8SIngressReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetK8SIngressReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetK8SIngressReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetK8SIngressReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetK8SIngressReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetK8SIngressReplyValidationError) ErrorName() string {
	return "GetK8SIngressReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetK8SIngressReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetK8SIngressReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetK8SIngressReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetK8SIngressReplyValidationError{}

// Validate checks the field values on DelK8SIngressReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DelK8SIngressReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelK8SIngressReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelK8SIngressReqMultiError, or nil if none found.
func (m *DelK8SIngressReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelK8SIngressReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := DelK8SIngressReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := DelK8SIngressReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := DelK8SIngressReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := DelK8SIngressReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := DelK8SIngressReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := DelK8SIngressReqValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := DelK8SIngressReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelK8SIngressReqMultiError(errors)
	}

	return nil
}

// DelK8SIngressReqMultiError is an error wrapping multiple validation errors
// returned by DelK8SIngressReq.ValidateAll() if the designated constraints
// aren't met.
type DelK8SIngressReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelK8SIngressReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelK8SIngressReqMultiError) AllErrors() []error { return m }

// DelK8SIngressReqValidationError is the validation error returned by
// DelK8SIngressReq.Validate if the designated constraints aren't met.
type DelK8SIngressReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelK8SIngressReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelK8SIngressReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelK8SIngressReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelK8SIngressReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelK8SIngressReqValidationError) ErrorName() string { return "DelK8SIngressReqValidationError" }

// Error satisfies the builtin error interface
func (e DelK8SIngressReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelK8SIngressReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelK8SIngressReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelK8SIngressReqValidationError{}

// Validate checks the field values on DelK8SIngressReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelK8SIngressReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelK8SIngressReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelK8SIngressReplyMultiError, or nil if none found.
func (m *DelK8SIngressReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DelK8SIngressReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return DelK8SIngressReplyMultiError(errors)
	}

	return nil
}

// DelK8SIngressReplyMultiError is an error wrapping multiple validation errors
// returned by DelK8SIngressReply.ValidateAll() if the designated constraints
// aren't met.
type DelK8SIngressReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelK8SIngressReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelK8SIngressReplyMultiError) AllErrors() []error { return m }

// DelK8SIngressReplyValidationError is the validation error returned by
// DelK8SIngressReply.Validate if the designated constraints aren't met.
type DelK8SIngressReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelK8SIngressReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelK8SIngressReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelK8SIngressReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelK8SIngressReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelK8SIngressReplyValidationError) ErrorName() string {
	return "DelK8SIngressReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DelK8SIngressReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelK8SIngressReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelK8SIngressReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelK8SIngressReplyValidationError{}

// Validate checks the field values on UpdateK8SIngressReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateK8SIngressReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateK8SIngressReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateK8SIngressReqMultiError, or nil if none found.
func (m *UpdateK8SIngressReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateK8SIngressReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := UpdateK8SIngressReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := UpdateK8SIngressReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := UpdateK8SIngressReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := UpdateK8SIngressReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetK8SClusterUuid()) < 1 {
		err := UpdateK8SIngressReqValidationError{
			field:  "K8SClusterUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		err := UpdateK8SIngressReqValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateK8SIngressReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Annotations

	// no validation rules for Labels

	{
		sorted_keys := make([]string, len(m.GetService()))
		i := 0
		for key := range m.GetService() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetService()[key]
			_ = val

			// no validation rules for Service[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, UpdateK8SIngressReqValidationError{
							field:  fmt.Sprintf("Service[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, UpdateK8SIngressReqValidationError{
							field:  fmt.Sprintf("Service[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return UpdateK8SIngressReqValidationError{
						field:  fmt.Sprintf("Service[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return UpdateK8SIngressReqMultiError(errors)
	}

	return nil
}

// UpdateK8SIngressReqMultiError is an error wrapping multiple validation
// errors returned by UpdateK8SIngressReq.ValidateAll() if the designated
// constraints aren't met.
type UpdateK8SIngressReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateK8SIngressReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateK8SIngressReqMultiError) AllErrors() []error { return m }

// UpdateK8SIngressReqValidationError is the validation error returned by
// UpdateK8SIngressReq.Validate if the designated constraints aren't met.
type UpdateK8SIngressReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateK8SIngressReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateK8SIngressReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateK8SIngressReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateK8SIngressReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateK8SIngressReqValidationError) ErrorName() string {
	return "UpdateK8SIngressReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateK8SIngressReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateK8SIngressReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateK8SIngressReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateK8SIngressReqValidationError{}

// Validate checks the field values on UpdateK8SIngressReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateK8SIngressReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateK8SIngressReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateK8SIngressReplyMultiError, or nil if none found.
func (m *UpdateK8SIngressReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateK8SIngressReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return UpdateK8SIngressReplyMultiError(errors)
	}

	return nil
}

// UpdateK8SIngressReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateK8SIngressReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateK8SIngressReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateK8SIngressReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateK8SIngressReplyMultiError) AllErrors() []error { return m }

// UpdateK8SIngressReplyValidationError is the validation error returned by
// UpdateK8SIngressReply.Validate if the designated constraints aren't met.
type UpdateK8SIngressReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateK8SIngressReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateK8SIngressReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateK8SIngressReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateK8SIngressReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateK8SIngressReplyValidationError) ErrorName() string {
	return "UpdateK8SIngressReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateK8SIngressReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateK8SIngressReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateK8SIngressReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateK8SIngressReplyValidationError{}

// Validate checks the field values on Program with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Program) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Program with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ProgramMultiError, or nil if none found.
func (m *Program) ValidateAll() error {
	return m.validate(true)
}

func (m *Program) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for Name

	// no validation rules for RepoType

	// no validation rules for RepoUuid

	// no validation rules for Branch

	// no validation rules for CommitId

	// no validation rules for ProductUuid

	// no validation rules for CiUuid

	// no validation rules for Publisher

	for idx, item := range m.GetRelease() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProgramValidationError{
						field:  fmt.Sprintf("Release[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProgramValidationError{
						field:  fmt.Sprintf("Release[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProgramValidationError{
					field:  fmt.Sprintf("Release[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProgramMultiError(errors)
	}

	return nil
}

// ProgramMultiError is an error wrapping multiple validation errors returned
// by Program.ValidateAll() if the designated constraints aren't met.
type ProgramMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProgramMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProgramMultiError) AllErrors() []error { return m }

// ProgramValidationError is the validation error returned by Program.Validate
// if the designated constraints aren't met.
type ProgramValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProgramValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProgramValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProgramValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProgramValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProgramValidationError) ErrorName() string { return "ProgramValidationError" }

// Error satisfies the builtin error interface
func (e ProgramValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProgram.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProgramValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProgramValidationError{}

// Validate checks the field values on CreateProgramReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateProgramReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProgramReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProgramReqMultiError, or nil if none found.
func (m *CreateProgramReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProgramReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := CreateProgramReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateProgramReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for RepoType

	// no validation rules for RepoUuid

	// no validation rules for Branch

	// no validation rules for CommitId

	// no validation rules for ProductUuid

	// no validation rules for CiUuid

	if len(errors) > 0 {
		return CreateProgramReqMultiError(errors)
	}

	return nil
}

// CreateProgramReqMultiError is an error wrapping multiple validation errors
// returned by CreateProgramReq.ValidateAll() if the designated constraints
// aren't met.
type CreateProgramReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProgramReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProgramReqMultiError) AllErrors() []error { return m }

// CreateProgramReqValidationError is the validation error returned by
// CreateProgramReq.Validate if the designated constraints aren't met.
type CreateProgramReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProgramReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProgramReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProgramReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProgramReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProgramReqValidationError) ErrorName() string { return "CreateProgramReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateProgramReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProgramReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProgramReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProgramReqValidationError{}

// Validate checks the field values on CreateProgramReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProgramReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProgramReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProgramReplyMultiError, or nil if none found.
func (m *CreateProgramReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProgramReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return CreateProgramReplyMultiError(errors)
	}

	return nil
}

// CreateProgramReplyMultiError is an error wrapping multiple validation errors
// returned by CreateProgramReply.ValidateAll() if the designated constraints
// aren't met.
type CreateProgramReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProgramReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProgramReplyMultiError) AllErrors() []error { return m }

// CreateProgramReplyValidationError is the validation error returned by
// CreateProgramReply.Validate if the designated constraints aren't met.
type CreateProgramReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProgramReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProgramReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProgramReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProgramReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProgramReplyValidationError) ErrorName() string {
	return "CreateProgramReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProgramReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProgramReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProgramReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProgramReplyValidationError{}

// Validate checks the field values on GetProgramByUuidReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProgramByUuidReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProgramByUuidReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProgramByUuidReqMultiError, or nil if none found.
func (m *GetProgramByUuidReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProgramByUuidReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := GetProgramByUuidReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := GetProgramByUuidReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUuid()) < 1 {
		err := GetProgramByUuidReqValidationError{
			field:  "Uuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetProgramByUuidReqMultiError(errors)
	}

	return nil
}

// GetProgramByUuidReqMultiError is an error wrapping multiple validation
// errors returned by GetProgramByUuidReq.ValidateAll() if the designated
// constraints aren't met.
type GetProgramByUuidReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProgramByUuidReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProgramByUuidReqMultiError) AllErrors() []error { return m }

// GetProgramByUuidReqValidationError is the validation error returned by
// GetProgramByUuidReq.Validate if the designated constraints aren't met.
type GetProgramByUuidReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProgramByUuidReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProgramByUuidReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProgramByUuidReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProgramByUuidReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProgramByUuidReqValidationError) ErrorName() string {
	return "GetProgramByUuidReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetProgramByUuidReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProgramByUuidReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProgramByUuidReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProgramByUuidReqValidationError{}

// Validate checks the field values on GetProgramByUuidReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProgramByUuidReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProgramByUuidReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProgramByUuidReplyMultiError, or nil if none found.
func (m *GetProgramByUuidReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProgramByUuidReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProgram()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProgramByUuidReplyValidationError{
					field:  "Program",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProgramByUuidReplyValidationError{
					field:  "Program",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProgram()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProgramByUuidReplyValidationError{
				field:  "Program",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProgramByUuidReplyMultiError(errors)
	}

	return nil
}

// GetProgramByUuidReplyMultiError is an error wrapping multiple validation
// errors returned by GetProgramByUuidReply.ValidateAll() if the designated
// constraints aren't met.
type GetProgramByUuidReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProgramByUuidReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProgramByUuidReplyMultiError) AllErrors() []error { return m }

// GetProgramByUuidReplyValidationError is the validation error returned by
// GetProgramByUuidReply.Validate if the designated constraints aren't met.
type GetProgramByUuidReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProgramByUuidReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProgramByUuidReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProgramByUuidReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProgramByUuidReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProgramByUuidReplyValidationError) ErrorName() string {
	return "GetProgramByUuidReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetProgramByUuidReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProgramByUuidReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProgramByUuidReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProgramByUuidReplyValidationError{}

// Validate checks the field values on GetSelfProgramReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSelfProgramReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSelfProgramReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSelfProgramReqMultiError, or nil if none found.
func (m *GetSelfProgramReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSelfProgramReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := GetSelfProgramReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := GetSelfProgramReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetSelfProgramReqMultiError(errors)
	}

	return nil
}

// GetSelfProgramReqMultiError is an error wrapping multiple validation errors
// returned by GetSelfProgramReq.ValidateAll() if the designated constraints
// aren't met.
type GetSelfProgramReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSelfProgramReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSelfProgramReqMultiError) AllErrors() []error { return m }

// GetSelfProgramReqValidationError is the validation error returned by
// GetSelfProgramReq.Validate if the designated constraints aren't met.
type GetSelfProgramReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSelfProgramReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSelfProgramReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSelfProgramReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSelfProgramReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSelfProgramReqValidationError) ErrorName() string {
	return "GetSelfProgramReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetSelfProgramReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSelfProgramReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSelfProgramReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSelfProgramReqValidationError{}

// Validate checks the field values on GetSelfProgramReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSelfProgramReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSelfProgramReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSelfProgramReplyMultiError, or nil if none found.
func (m *GetSelfProgramReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSelfProgramReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProgram() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSelfProgramReplyValidationError{
						field:  fmt.Sprintf("Program[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSelfProgramReplyValidationError{
						field:  fmt.Sprintf("Program[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSelfProgramReplyValidationError{
					field:  fmt.Sprintf("Program[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSelfProgramReplyMultiError(errors)
	}

	return nil
}

// GetSelfProgramReplyMultiError is an error wrapping multiple validation
// errors returned by GetSelfProgramReply.ValidateAll() if the designated
// constraints aren't met.
type GetSelfProgramReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSelfProgramReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSelfProgramReplyMultiError) AllErrors() []error { return m }

// GetSelfProgramReplyValidationError is the validation error returned by
// GetSelfProgramReply.Validate if the designated constraints aren't met.
type GetSelfProgramReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSelfProgramReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSelfProgramReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSelfProgramReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSelfProgramReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSelfProgramReplyValidationError) ErrorName() string {
	return "GetSelfProgramReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetSelfProgramReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSelfProgramReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSelfProgramReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSelfProgramReplyValidationError{}

// Validate checks the field values on SearchProgramReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SearchProgramReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchProgramReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchProgramReqMultiError, or nil if none found.
func (m *SearchProgramReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchProgramReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := SearchProgramReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := SearchProgramReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for LikeName

	if len(errors) > 0 {
		return SearchProgramReqMultiError(errors)
	}

	return nil
}

// SearchProgramReqMultiError is an error wrapping multiple validation errors
// returned by SearchProgramReq.ValidateAll() if the designated constraints
// aren't met.
type SearchProgramReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchProgramReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchProgramReqMultiError) AllErrors() []error { return m }

// SearchProgramReqValidationError is the validation error returned by
// SearchProgramReq.Validate if the designated constraints aren't met.
type SearchProgramReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchProgramReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchProgramReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchProgramReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchProgramReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchProgramReqValidationError) ErrorName() string { return "SearchProgramReqValidationError" }

// Error satisfies the builtin error interface
func (e SearchProgramReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchProgramReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchProgramReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchProgramReqValidationError{}

// Validate checks the field values on SearchProgramReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchProgramReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchProgramReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchProgramReplyMultiError, or nil if none found.
func (m *SearchProgramReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchProgramReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProgram() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchProgramReplyValidationError{
						field:  fmt.Sprintf("Program[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchProgramReplyValidationError{
						field:  fmt.Sprintf("Program[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchProgramReplyValidationError{
					field:  fmt.Sprintf("Program[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchProgramReplyMultiError(errors)
	}

	return nil
}

// SearchProgramReplyMultiError is an error wrapping multiple validation errors
// returned by SearchProgramReply.ValidateAll() if the designated constraints
// aren't met.
type SearchProgramReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchProgramReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchProgramReplyMultiError) AllErrors() []error { return m }

// SearchProgramReplyValidationError is the validation error returned by
// SearchProgramReply.Validate if the designated constraints aren't met.
type SearchProgramReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchProgramReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchProgramReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchProgramReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchProgramReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchProgramReplyValidationError) ErrorName() string {
	return "SearchProgramReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SearchProgramReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchProgramReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchProgramReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchProgramReplyValidationError{}

// Validate checks the field values on ProgramMarket with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProgramMarket) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProgramMarket with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProgramMarketMultiError, or
// nil if none found.
func (m *ProgramMarket) ValidateAll() error {
	return m.validate(true)
}

func (m *ProgramMarket) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for Name

	// no validation rules for RepoType

	// no validation rules for RepoUuid

	// no validation rules for Branch

	// no validation rules for CommitId

	// no validation rules for ProductUuid

	// no validation rules for CiUuid

	// no validation rules for Publisher

	for idx, item := range m.GetRelease() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProgramMarketValidationError{
						field:  fmt.Sprintf("Release[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProgramMarketValidationError{
						field:  fmt.Sprintf("Release[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProgramMarketValidationError{
					field:  fmt.Sprintf("Release[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProgramMarketMultiError(errors)
	}

	return nil
}

// ProgramMarketMultiError is an error wrapping multiple validation errors
// returned by ProgramMarket.ValidateAll() if the designated constraints
// aren't met.
type ProgramMarketMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProgramMarketMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProgramMarketMultiError) AllErrors() []error { return m }

// ProgramMarketValidationError is the validation error returned by
// ProgramMarket.Validate if the designated constraints aren't met.
type ProgramMarketValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProgramMarketValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProgramMarketValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProgramMarketValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProgramMarketValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProgramMarketValidationError) ErrorName() string { return "ProgramMarketValidationError" }

// Error satisfies the builtin error interface
func (e ProgramMarketValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProgramMarket.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProgramMarketValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProgramMarketValidationError{}

// Validate checks the field values on CreateProgramMarketReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProgramMarketReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProgramMarketReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProgramMarketReqMultiError, or nil if none found.
func (m *CreateProgramMarketReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProgramMarketReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := CreateProgramMarketReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateProgramMarketReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for RepoType

	// no validation rules for RepoUuid

	// no validation rules for Branch

	// no validation rules for CommitId

	// no validation rules for CiUuid

	if len(errors) > 0 {
		return CreateProgramMarketReqMultiError(errors)
	}

	return nil
}

// CreateProgramMarketReqMultiError is an error wrapping multiple validation
// errors returned by CreateProgramMarketReq.ValidateAll() if the designated
// constraints aren't met.
type CreateProgramMarketReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProgramMarketReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProgramMarketReqMultiError) AllErrors() []error { return m }

// CreateProgramMarketReqValidationError is the validation error returned by
// CreateProgramMarketReq.Validate if the designated constraints aren't met.
type CreateProgramMarketReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProgramMarketReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProgramMarketReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProgramMarketReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProgramMarketReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProgramMarketReqValidationError) ErrorName() string {
	return "CreateProgramMarketReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProgramMarketReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProgramMarketReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProgramMarketReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProgramMarketReqValidationError{}

// Validate checks the field values on CreateProgramMarketReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProgramMarketReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProgramMarketReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProgramMarketReplyMultiError, or nil if none found.
func (m *CreateProgramMarketReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProgramMarketReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return CreateProgramMarketReplyMultiError(errors)
	}

	return nil
}

// CreateProgramMarketReplyMultiError is an error wrapping multiple validation
// errors returned by CreateProgramMarketReply.ValidateAll() if the designated
// constraints aren't met.
type CreateProgramMarketReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProgramMarketReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProgramMarketReplyMultiError) AllErrors() []error { return m }

// CreateProgramMarketReplyValidationError is the validation error returned by
// CreateProgramMarketReply.Validate if the designated constraints aren't met.
type CreateProgramMarketReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProgramMarketReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProgramMarketReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProgramMarketReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProgramMarketReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProgramMarketReplyValidationError) ErrorName() string {
	return "CreateProgramMarketReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProgramMarketReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProgramMarketReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProgramMarketReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProgramMarketReplyValidationError{}

// Validate checks the field values on GetProgramMarketByUuidReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProgramMarketByUuidReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProgramMarketByUuidReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProgramMarketByUuidReqMultiError, or nil if none found.
func (m *GetProgramMarketByUuidReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProgramMarketByUuidReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := GetProgramMarketByUuidReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUuid()) < 1 {
		err := GetProgramMarketByUuidReqValidationError{
			field:  "Uuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetProgramMarketByUuidReqMultiError(errors)
	}

	return nil
}

// GetProgramMarketByUuidReqMultiError is an error wrapping multiple validation
// errors returned by GetProgramMarketByUuidReq.ValidateAll() if the
// designated constraints aren't met.
type GetProgramMarketByUuidReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProgramMarketByUuidReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProgramMarketByUuidReqMultiError) AllErrors() []error { return m }

// GetProgramMarketByUuidReqValidationError is the validation error returned by
// GetProgramMarketByUuidReq.Validate if the designated constraints aren't met.
type GetProgramMarketByUuidReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProgramMarketByUuidReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProgramMarketByUuidReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProgramMarketByUuidReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProgramMarketByUuidReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProgramMarketByUuidReqValidationError) ErrorName() string {
	return "GetProgramMarketByUuidReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetProgramMarketByUuidReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProgramMarketByUuidReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProgramMarketByUuidReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProgramMarketByUuidReqValidationError{}

// Validate checks the field values on GetProgramMarketByUuidReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProgramMarketByUuidReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProgramMarketByUuidReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProgramMarketByUuidReplyMultiError, or nil if none found.
func (m *GetProgramMarketByUuidReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProgramMarketByUuidReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProgramMarket() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetProgramMarketByUuidReplyValidationError{
						field:  fmt.Sprintf("ProgramMarket[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetProgramMarketByUuidReplyValidationError{
						field:  fmt.Sprintf("ProgramMarket[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetProgramMarketByUuidReplyValidationError{
					field:  fmt.Sprintf("ProgramMarket[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetProgramMarketByUuidReplyMultiError(errors)
	}

	return nil
}

// GetProgramMarketByUuidReplyMultiError is an error wrapping multiple
// validation errors returned by GetProgramMarketByUuidReply.ValidateAll() if
// the designated constraints aren't met.
type GetProgramMarketByUuidReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProgramMarketByUuidReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProgramMarketByUuidReplyMultiError) AllErrors() []error { return m }

// GetProgramMarketByUuidReplyValidationError is the validation error returned
// by GetProgramMarketByUuidReply.Validate if the designated constraints
// aren't met.
type GetProgramMarketByUuidReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProgramMarketByUuidReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProgramMarketByUuidReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProgramMarketByUuidReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProgramMarketByUuidReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProgramMarketByUuidReplyValidationError) ErrorName() string {
	return "GetProgramMarketByUuidReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetProgramMarketByUuidReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProgramMarketByUuidReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProgramMarketByUuidReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProgramMarketByUuidReplyValidationError{}

// Validate checks the field values on GetSelfProgramMarketReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSelfProgramMarketReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSelfProgramMarketReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSelfProgramMarketReqMultiError, or nil if none found.
func (m *GetSelfProgramMarketReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSelfProgramMarketReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := GetSelfProgramMarketReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetSelfProgramMarketReqMultiError(errors)
	}

	return nil
}

// GetSelfProgramMarketReqMultiError is an error wrapping multiple validation
// errors returned by GetSelfProgramMarketReq.ValidateAll() if the designated
// constraints aren't met.
type GetSelfProgramMarketReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSelfProgramMarketReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSelfProgramMarketReqMultiError) AllErrors() []error { return m }

// GetSelfProgramMarketReqValidationError is the validation error returned by
// GetSelfProgramMarketReq.Validate if the designated constraints aren't met.
type GetSelfProgramMarketReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSelfProgramMarketReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSelfProgramMarketReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSelfProgramMarketReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSelfProgramMarketReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSelfProgramMarketReqValidationError) ErrorName() string {
	return "GetSelfProgramMarketReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetSelfProgramMarketReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSelfProgramMarketReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSelfProgramMarketReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSelfProgramMarketReqValidationError{}

// Validate checks the field values on GetSelfProgramMarketReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSelfProgramMarketReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSelfProgramMarketReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSelfProgramMarketReplyMultiError, or nil if none found.
func (m *GetSelfProgramMarketReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSelfProgramMarketReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProgramMarket() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSelfProgramMarketReplyValidationError{
						field:  fmt.Sprintf("ProgramMarket[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSelfProgramMarketReplyValidationError{
						field:  fmt.Sprintf("ProgramMarket[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSelfProgramMarketReplyValidationError{
					field:  fmt.Sprintf("ProgramMarket[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSelfProgramMarketReplyMultiError(errors)
	}

	return nil
}

// GetSelfProgramMarketReplyMultiError is an error wrapping multiple validation
// errors returned by GetSelfProgramMarketReply.ValidateAll() if the
// designated constraints aren't met.
type GetSelfProgramMarketReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSelfProgramMarketReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSelfProgramMarketReplyMultiError) AllErrors() []error { return m }

// GetSelfProgramMarketReplyValidationError is the validation error returned by
// GetSelfProgramMarketReply.Validate if the designated constraints aren't met.
type GetSelfProgramMarketReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSelfProgramMarketReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSelfProgramMarketReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSelfProgramMarketReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSelfProgramMarketReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSelfProgramMarketReplyValidationError) ErrorName() string {
	return "GetSelfProgramMarketReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetSelfProgramMarketReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSelfProgramMarketReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSelfProgramMarketReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSelfProgramMarketReplyValidationError{}

// Validate checks the field values on SearchProgramMarketReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchProgramMarketReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchProgramMarketReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchProgramMarketReqMultiError, or nil if none found.
func (m *SearchProgramMarketReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchProgramMarketReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := SearchProgramMarketReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for LikeName

	if len(errors) > 0 {
		return SearchProgramMarketReqMultiError(errors)
	}

	return nil
}

// SearchProgramMarketReqMultiError is an error wrapping multiple validation
// errors returned by SearchProgramMarketReq.ValidateAll() if the designated
// constraints aren't met.
type SearchProgramMarketReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchProgramMarketReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchProgramMarketReqMultiError) AllErrors() []error { return m }

// SearchProgramMarketReqValidationError is the validation error returned by
// SearchProgramMarketReq.Validate if the designated constraints aren't met.
type SearchProgramMarketReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchProgramMarketReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchProgramMarketReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchProgramMarketReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchProgramMarketReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchProgramMarketReqValidationError) ErrorName() string {
	return "SearchProgramMarketReqValidationError"
}

// Error satisfies the builtin error interface
func (e SearchProgramMarketReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchProgramMarketReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchProgramMarketReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchProgramMarketReqValidationError{}

// Validate checks the field values on SearchProgramMarketReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchProgramMarketReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchProgramMarketReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchProgramMarketReplyMultiError, or nil if none found.
func (m *SearchProgramMarketReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchProgramMarketReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProgramMarket() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchProgramMarketReplyValidationError{
						field:  fmt.Sprintf("ProgramMarket[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchProgramMarketReplyValidationError{
						field:  fmt.Sprintf("ProgramMarket[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchProgramMarketReplyValidationError{
					field:  fmt.Sprintf("ProgramMarket[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchProgramMarketReplyMultiError(errors)
	}

	return nil
}

// SearchProgramMarketReplyMultiError is an error wrapping multiple validation
// errors returned by SearchProgramMarketReply.ValidateAll() if the designated
// constraints aren't met.
type SearchProgramMarketReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchProgramMarketReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchProgramMarketReplyMultiError) AllErrors() []error { return m }

// SearchProgramMarketReplyValidationError is the validation error returned by
// SearchProgramMarketReply.Validate if the designated constraints aren't met.
type SearchProgramMarketReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchProgramMarketReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchProgramMarketReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchProgramMarketReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchProgramMarketReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchProgramMarketReplyValidationError) ErrorName() string {
	return "SearchProgramMarketReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SearchProgramMarketReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchProgramMarketReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchProgramMarketReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchProgramMarketReplyValidationError{}

// Validate checks the field values on Release with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Release) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Release with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ReleaseMultiError, or nil if none found.
func (m *Release) ValidateAll() error {
	return m.validate(true)
}

func (m *Release) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for ProgramUuid

	// no validation rules for Url

	// no validation rules for Sha

	// no validation rules for Arch

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return ReleaseMultiError(errors)
	}

	return nil
}

// ReleaseMultiError is an error wrapping multiple validation errors returned
// by Release.ValidateAll() if the designated constraints aren't met.
type ReleaseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReleaseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReleaseMultiError) AllErrors() []error { return m }

// ReleaseValidationError is the validation error returned by Release.Validate
// if the designated constraints aren't met.
type ReleaseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseValidationError) ErrorName() string { return "ReleaseValidationError" }

// Error satisfies the builtin error interface
func (e ReleaseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRelease.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseValidationError{}

// Validate checks the field values on CreateSelfGitlabPlatformReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSelfGitlabPlatformReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSelfGitlabPlatformReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSelfGitlabPlatformReqMultiError, or nil if none found.
func (m *CreateSelfGitlabPlatformReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSelfGitlabPlatformReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := CreateSelfGitlabPlatformReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := CreateSelfGitlabPlatformReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := CreateSelfGitlabPlatformReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Protocol

	if utf8.RuneCountInString(m.GetHostname()) < 1 {
		err := CreateSelfGitlabPlatformReqValidationError{
			field:  "Hostname",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Describe

	if len(errors) > 0 {
		return CreateSelfGitlabPlatformReqMultiError(errors)
	}

	return nil
}

// CreateSelfGitlabPlatformReqMultiError is an error wrapping multiple
// validation errors returned by CreateSelfGitlabPlatformReq.ValidateAll() if
// the designated constraints aren't met.
type CreateSelfGitlabPlatformReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSelfGitlabPlatformReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSelfGitlabPlatformReqMultiError) AllErrors() []error { return m }

// CreateSelfGitlabPlatformReqValidationError is the validation error returned
// by CreateSelfGitlabPlatformReq.Validate if the designated constraints
// aren't met.
type CreateSelfGitlabPlatformReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSelfGitlabPlatformReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSelfGitlabPlatformReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSelfGitlabPlatformReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSelfGitlabPlatformReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSelfGitlabPlatformReqValidationError) ErrorName() string {
	return "CreateSelfGitlabPlatformReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSelfGitlabPlatformReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSelfGitlabPlatformReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSelfGitlabPlatformReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSelfGitlabPlatformReqValidationError{}

// Validate checks the field values on CreateSelfGitlabPlatformReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSelfGitlabPlatformReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSelfGitlabPlatformReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateSelfGitlabPlatformReplyMultiError, or nil if none found.
func (m *CreateSelfGitlabPlatformReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSelfGitlabPlatformReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return CreateSelfGitlabPlatformReplyMultiError(errors)
	}

	return nil
}

// CreateSelfGitlabPlatformReplyMultiError is an error wrapping multiple
// validation errors returned by CreateSelfGitlabPlatformReply.ValidateAll()
// if the designated constraints aren't met.
type CreateSelfGitlabPlatformReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSelfGitlabPlatformReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSelfGitlabPlatformReplyMultiError) AllErrors() []error { return m }

// CreateSelfGitlabPlatformReplyValidationError is the validation error
// returned by CreateSelfGitlabPlatformReply.Validate if the designated
// constraints aren't met.
type CreateSelfGitlabPlatformReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSelfGitlabPlatformReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSelfGitlabPlatformReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSelfGitlabPlatformReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSelfGitlabPlatformReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSelfGitlabPlatformReplyValidationError) ErrorName() string {
	return "CreateSelfGitlabPlatformReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSelfGitlabPlatformReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSelfGitlabPlatformReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSelfGitlabPlatformReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSelfGitlabPlatformReplyValidationError{}

// Validate checks the field values on ListSelfGitlabPlatformReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSelfGitlabPlatformReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSelfGitlabPlatformReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSelfGitlabPlatformReqMultiError, or nil if none found.
func (m *ListSelfGitlabPlatformReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSelfGitlabPlatformReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ListSelfGitlabPlatformReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ListSelfGitlabPlatformReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ListSelfGitlabPlatformReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListSelfGitlabPlatformReqMultiError(errors)
	}

	return nil
}

// ListSelfGitlabPlatformReqMultiError is an error wrapping multiple validation
// errors returned by ListSelfGitlabPlatformReq.ValidateAll() if the
// designated constraints aren't met.
type ListSelfGitlabPlatformReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSelfGitlabPlatformReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSelfGitlabPlatformReqMultiError) AllErrors() []error { return m }

// ListSelfGitlabPlatformReqValidationError is the validation error returned by
// ListSelfGitlabPlatformReq.Validate if the designated constraints aren't met.
type ListSelfGitlabPlatformReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSelfGitlabPlatformReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSelfGitlabPlatformReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSelfGitlabPlatformReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSelfGitlabPlatformReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSelfGitlabPlatformReqValidationError) ErrorName() string {
	return "ListSelfGitlabPlatformReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListSelfGitlabPlatformReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSelfGitlabPlatformReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSelfGitlabPlatformReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSelfGitlabPlatformReqValidationError{}

// Validate checks the field values on ListSelfGitlabPlatformReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSelfGitlabPlatformReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSelfGitlabPlatformReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSelfGitlabPlatformReplyMultiError, or nil if none found.
func (m *ListSelfGitlabPlatformReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSelfGitlabPlatformReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGitlabPlatform() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSelfGitlabPlatformReplyValidationError{
						field:  fmt.Sprintf("GitlabPlatform[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSelfGitlabPlatformReplyValidationError{
						field:  fmt.Sprintf("GitlabPlatform[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSelfGitlabPlatformReplyValidationError{
					field:  fmt.Sprintf("GitlabPlatform[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSelfGitlabPlatformReplyMultiError(errors)
	}

	return nil
}

// ListSelfGitlabPlatformReplyMultiError is an error wrapping multiple
// validation errors returned by ListSelfGitlabPlatformReply.ValidateAll() if
// the designated constraints aren't met.
type ListSelfGitlabPlatformReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSelfGitlabPlatformReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSelfGitlabPlatformReplyMultiError) AllErrors() []error { return m }

// ListSelfGitlabPlatformReplyValidationError is the validation error returned
// by ListSelfGitlabPlatformReply.Validate if the designated constraints
// aren't met.
type ListSelfGitlabPlatformReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSelfGitlabPlatformReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSelfGitlabPlatformReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSelfGitlabPlatformReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSelfGitlabPlatformReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSelfGitlabPlatformReplyValidationError) ErrorName() string {
	return "ListSelfGitlabPlatformReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListSelfGitlabPlatformReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSelfGitlabPlatformReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSelfGitlabPlatformReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSelfGitlabPlatformReplyValidationError{}

// Validate checks the field values on DelSelfGitlabPlatformReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelSelfGitlabPlatformReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelSelfGitlabPlatformReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelSelfGitlabPlatformReqMultiError, or nil if none found.
func (m *DelSelfGitlabPlatformReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelSelfGitlabPlatformReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := DelSelfGitlabPlatformReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := DelSelfGitlabPlatformReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := DelSelfGitlabPlatformReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUuid()) < 1 {
		err := DelSelfGitlabPlatformReqValidationError{
			field:  "Uuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelSelfGitlabPlatformReqMultiError(errors)
	}

	return nil
}

// DelSelfGitlabPlatformReqMultiError is an error wrapping multiple validation
// errors returned by DelSelfGitlabPlatformReq.ValidateAll() if the designated
// constraints aren't met.
type DelSelfGitlabPlatformReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelSelfGitlabPlatformReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelSelfGitlabPlatformReqMultiError) AllErrors() []error { return m }

// DelSelfGitlabPlatformReqValidationError is the validation error returned by
// DelSelfGitlabPlatformReq.Validate if the designated constraints aren't met.
type DelSelfGitlabPlatformReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelSelfGitlabPlatformReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelSelfGitlabPlatformReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelSelfGitlabPlatformReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelSelfGitlabPlatformReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelSelfGitlabPlatformReqValidationError) ErrorName() string {
	return "DelSelfGitlabPlatformReqValidationError"
}

// Error satisfies the builtin error interface
func (e DelSelfGitlabPlatformReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelSelfGitlabPlatformReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelSelfGitlabPlatformReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelSelfGitlabPlatformReqValidationError{}

// Validate checks the field values on DelSelfGitlabPlatformReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelSelfGitlabPlatformReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelSelfGitlabPlatformReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelSelfGitlabPlatformReplyMultiError, or nil if none found.
func (m *DelSelfGitlabPlatformReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DelSelfGitlabPlatformReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return DelSelfGitlabPlatformReplyMultiError(errors)
	}

	return nil
}

// DelSelfGitlabPlatformReplyMultiError is an error wrapping multiple
// validation errors returned by DelSelfGitlabPlatformReply.ValidateAll() if
// the designated constraints aren't met.
type DelSelfGitlabPlatformReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelSelfGitlabPlatformReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelSelfGitlabPlatformReplyMultiError) AllErrors() []error { return m }

// DelSelfGitlabPlatformReplyValidationError is the validation error returned
// by DelSelfGitlabPlatformReply.Validate if the designated constraints aren't met.
type DelSelfGitlabPlatformReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelSelfGitlabPlatformReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelSelfGitlabPlatformReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelSelfGitlabPlatformReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelSelfGitlabPlatformReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelSelfGitlabPlatformReplyValidationError) ErrorName() string {
	return "DelSelfGitlabPlatformReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DelSelfGitlabPlatformReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelSelfGitlabPlatformReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelSelfGitlabPlatformReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelSelfGitlabPlatformReplyValidationError{}

// Validate checks the field values on CreateSelfGitlabTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSelfGitlabTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSelfGitlabTokenReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSelfGitlabTokenReqMultiError, or nil if none found.
func (m *CreateSelfGitlabTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSelfGitlabTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := CreateSelfGitlabTokenReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := CreateSelfGitlabTokenReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := CreateSelfGitlabTokenReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPlatformUuid()) < 1 {
		err := CreateSelfGitlabTokenReqValidationError{
			field:  "PlatformUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateSelfGitlabTokenReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPrivateToken()) < 1 {
		err := CreateSelfGitlabTokenReqValidationError{
			field:  "PrivateToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Describe

	if len(errors) > 0 {
		return CreateSelfGitlabTokenReqMultiError(errors)
	}

	return nil
}

// CreateSelfGitlabTokenReqMultiError is an error wrapping multiple validation
// errors returned by CreateSelfGitlabTokenReq.ValidateAll() if the designated
// constraints aren't met.
type CreateSelfGitlabTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSelfGitlabTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSelfGitlabTokenReqMultiError) AllErrors() []error { return m }

// CreateSelfGitlabTokenReqValidationError is the validation error returned by
// CreateSelfGitlabTokenReq.Validate if the designated constraints aren't met.
type CreateSelfGitlabTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSelfGitlabTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSelfGitlabTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSelfGitlabTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSelfGitlabTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSelfGitlabTokenReqValidationError) ErrorName() string {
	return "CreateSelfGitlabTokenReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSelfGitlabTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSelfGitlabTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSelfGitlabTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSelfGitlabTokenReqValidationError{}

// Validate checks the field values on CreateSelfGitlabTokenReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSelfGitlabTokenReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSelfGitlabTokenReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSelfGitlabTokenReplyMultiError, or nil if none found.
func (m *CreateSelfGitlabTokenReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSelfGitlabTokenReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return CreateSelfGitlabTokenReplyMultiError(errors)
	}

	return nil
}

// CreateSelfGitlabTokenReplyMultiError is an error wrapping multiple
// validation errors returned by CreateSelfGitlabTokenReply.ValidateAll() if
// the designated constraints aren't met.
type CreateSelfGitlabTokenReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSelfGitlabTokenReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSelfGitlabTokenReplyMultiError) AllErrors() []error { return m }

// CreateSelfGitlabTokenReplyValidationError is the validation error returned
// by CreateSelfGitlabTokenReply.Validate if the designated constraints aren't met.
type CreateSelfGitlabTokenReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSelfGitlabTokenReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSelfGitlabTokenReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSelfGitlabTokenReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSelfGitlabTokenReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSelfGitlabTokenReplyValidationError) ErrorName() string {
	return "CreateSelfGitlabTokenReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSelfGitlabTokenReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSelfGitlabTokenReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSelfGitlabTokenReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSelfGitlabTokenReplyValidationError{}

// Validate checks the field values on ListSelfGitlabTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSelfGitlabTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSelfGitlabTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSelfGitlabTokenReqMultiError, or nil if none found.
func (m *ListSelfGitlabTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSelfGitlabTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ListSelfGitlabTokenReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ListSelfGitlabTokenReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ListSelfGitlabTokenReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PlatformUuid

	if len(errors) > 0 {
		return ListSelfGitlabTokenReqMultiError(errors)
	}

	return nil
}

// ListSelfGitlabTokenReqMultiError is an error wrapping multiple validation
// errors returned by ListSelfGitlabTokenReq.ValidateAll() if the designated
// constraints aren't met.
type ListSelfGitlabTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSelfGitlabTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSelfGitlabTokenReqMultiError) AllErrors() []error { return m }

// ListSelfGitlabTokenReqValidationError is the validation error returned by
// ListSelfGitlabTokenReq.Validate if the designated constraints aren't met.
type ListSelfGitlabTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSelfGitlabTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSelfGitlabTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSelfGitlabTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSelfGitlabTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSelfGitlabTokenReqValidationError) ErrorName() string {
	return "ListSelfGitlabTokenReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListSelfGitlabTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSelfGitlabTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSelfGitlabTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSelfGitlabTokenReqValidationError{}

// Validate checks the field values on ListSelfGitlabTokenReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSelfGitlabTokenReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSelfGitlabTokenReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSelfGitlabTokenReplyMultiError, or nil if none found.
func (m *ListSelfGitlabTokenReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSelfGitlabTokenReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGitlabToken() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSelfGitlabTokenReplyValidationError{
						field:  fmt.Sprintf("GitlabToken[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSelfGitlabTokenReplyValidationError{
						field:  fmt.Sprintf("GitlabToken[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSelfGitlabTokenReplyValidationError{
					field:  fmt.Sprintf("GitlabToken[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSelfGitlabTokenReplyMultiError(errors)
	}

	return nil
}

// ListSelfGitlabTokenReplyMultiError is an error wrapping multiple validation
// errors returned by ListSelfGitlabTokenReply.ValidateAll() if the designated
// constraints aren't met.
type ListSelfGitlabTokenReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSelfGitlabTokenReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSelfGitlabTokenReplyMultiError) AllErrors() []error { return m }

// ListSelfGitlabTokenReplyValidationError is the validation error returned by
// ListSelfGitlabTokenReply.Validate if the designated constraints aren't met.
type ListSelfGitlabTokenReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSelfGitlabTokenReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSelfGitlabTokenReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSelfGitlabTokenReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSelfGitlabTokenReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSelfGitlabTokenReplyValidationError) ErrorName() string {
	return "ListSelfGitlabTokenReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListSelfGitlabTokenReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSelfGitlabTokenReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSelfGitlabTokenReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSelfGitlabTokenReplyValidationError{}

// Validate checks the field values on DelSelfGitlabTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelSelfGitlabTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelSelfGitlabTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelSelfGitlabTokenReqMultiError, or nil if none found.
func (m *DelSelfGitlabTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelSelfGitlabTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := DelSelfGitlabTokenReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := DelSelfGitlabTokenReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := DelSelfGitlabTokenReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPlatformUuid()) < 1 {
		err := DelSelfGitlabTokenReqValidationError{
			field:  "PlatformUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTokenUuid()) < 1 {
		err := DelSelfGitlabTokenReqValidationError{
			field:  "TokenUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelSelfGitlabTokenReqMultiError(errors)
	}

	return nil
}

// DelSelfGitlabTokenReqMultiError is an error wrapping multiple validation
// errors returned by DelSelfGitlabTokenReq.ValidateAll() if the designated
// constraints aren't met.
type DelSelfGitlabTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelSelfGitlabTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelSelfGitlabTokenReqMultiError) AllErrors() []error { return m }

// DelSelfGitlabTokenReqValidationError is the validation error returned by
// DelSelfGitlabTokenReq.Validate if the designated constraints aren't met.
type DelSelfGitlabTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelSelfGitlabTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelSelfGitlabTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelSelfGitlabTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelSelfGitlabTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelSelfGitlabTokenReqValidationError) ErrorName() string {
	return "DelSelfGitlabTokenReqValidationError"
}

// Error satisfies the builtin error interface
func (e DelSelfGitlabTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelSelfGitlabTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelSelfGitlabTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelSelfGitlabTokenReqValidationError{}

// Validate checks the field values on DelSelfGitlabTokenReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelSelfGitlabTokenReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelSelfGitlabTokenReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelSelfGitlabTokenReplyMultiError, or nil if none found.
func (m *DelSelfGitlabTokenReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DelSelfGitlabTokenReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return DelSelfGitlabTokenReplyMultiError(errors)
	}

	return nil
}

// DelSelfGitlabTokenReplyMultiError is an error wrapping multiple validation
// errors returned by DelSelfGitlabTokenReply.ValidateAll() if the designated
// constraints aren't met.
type DelSelfGitlabTokenReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelSelfGitlabTokenReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelSelfGitlabTokenReplyMultiError) AllErrors() []error { return m }

// DelSelfGitlabTokenReplyValidationError is the validation error returned by
// DelSelfGitlabTokenReply.Validate if the designated constraints aren't met.
type DelSelfGitlabTokenReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelSelfGitlabTokenReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelSelfGitlabTokenReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelSelfGitlabTokenReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelSelfGitlabTokenReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelSelfGitlabTokenReplyValidationError) ErrorName() string {
	return "DelSelfGitlabTokenReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DelSelfGitlabTokenReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelSelfGitlabTokenReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelSelfGitlabTokenReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelSelfGitlabTokenReplyValidationError{}

// Validate checks the field values on CreateSelfGitlabGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSelfGitlabGroupReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSelfGitlabGroupReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSelfGitlabGroupReqMultiError, or nil if none found.
func (m *CreateSelfGitlabGroupReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSelfGitlabGroupReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := CreateSelfGitlabGroupReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := CreateSelfGitlabGroupReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := CreateSelfGitlabGroupReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPlatformUuid()) < 1 {
		err := CreateSelfGitlabGroupReqValidationError{
			field:  "PlatformUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPlatformTokenUuid()) < 1 {
		err := CreateSelfGitlabGroupReqValidationError{
			field:  "PlatformTokenUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateSelfGitlabGroupReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Describe

	if len(errors) > 0 {
		return CreateSelfGitlabGroupReqMultiError(errors)
	}

	return nil
}

// CreateSelfGitlabGroupReqMultiError is an error wrapping multiple validation
// errors returned by CreateSelfGitlabGroupReq.ValidateAll() if the designated
// constraints aren't met.
type CreateSelfGitlabGroupReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSelfGitlabGroupReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSelfGitlabGroupReqMultiError) AllErrors() []error { return m }

// CreateSelfGitlabGroupReqValidationError is the validation error returned by
// CreateSelfGitlabGroupReq.Validate if the designated constraints aren't met.
type CreateSelfGitlabGroupReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSelfGitlabGroupReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSelfGitlabGroupReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSelfGitlabGroupReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSelfGitlabGroupReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSelfGitlabGroupReqValidationError) ErrorName() string {
	return "CreateSelfGitlabGroupReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSelfGitlabGroupReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSelfGitlabGroupReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSelfGitlabGroupReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSelfGitlabGroupReqValidationError{}

// Validate checks the field values on CreateSelfGitlabGroupReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSelfGitlabGroupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSelfGitlabGroupReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSelfGitlabGroupReplyMultiError, or nil if none found.
func (m *CreateSelfGitlabGroupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSelfGitlabGroupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return CreateSelfGitlabGroupReplyMultiError(errors)
	}

	return nil
}

// CreateSelfGitlabGroupReplyMultiError is an error wrapping multiple
// validation errors returned by CreateSelfGitlabGroupReply.ValidateAll() if
// the designated constraints aren't met.
type CreateSelfGitlabGroupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSelfGitlabGroupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSelfGitlabGroupReplyMultiError) AllErrors() []error { return m }

// CreateSelfGitlabGroupReplyValidationError is the validation error returned
// by CreateSelfGitlabGroupReply.Validate if the designated constraints aren't met.
type CreateSelfGitlabGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSelfGitlabGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSelfGitlabGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSelfGitlabGroupReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSelfGitlabGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSelfGitlabGroupReplyValidationError) ErrorName() string {
	return "CreateSelfGitlabGroupReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSelfGitlabGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSelfGitlabGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSelfGitlabGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSelfGitlabGroupReplyValidationError{}

// Validate checks the field values on ListSelfGitlabGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSelfGitlabGroupReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSelfGitlabGroupReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSelfGitlabGroupReqMultiError, or nil if none found.
func (m *ListSelfGitlabGroupReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSelfGitlabGroupReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ListSelfGitlabGroupReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ListSelfGitlabGroupReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ListSelfGitlabGroupReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPlatformUuid()) < 1 {
		err := ListSelfGitlabGroupReqValidationError{
			field:  "PlatformUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPlatformTokenUuid()) < 1 {
		err := ListSelfGitlabGroupReqValidationError{
			field:  "PlatformTokenUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListSelfGitlabGroupReqMultiError(errors)
	}

	return nil
}

// ListSelfGitlabGroupReqMultiError is an error wrapping multiple validation
// errors returned by ListSelfGitlabGroupReq.ValidateAll() if the designated
// constraints aren't met.
type ListSelfGitlabGroupReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSelfGitlabGroupReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSelfGitlabGroupReqMultiError) AllErrors() []error { return m }

// ListSelfGitlabGroupReqValidationError is the validation error returned by
// ListSelfGitlabGroupReq.Validate if the designated constraints aren't met.
type ListSelfGitlabGroupReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSelfGitlabGroupReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSelfGitlabGroupReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSelfGitlabGroupReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSelfGitlabGroupReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSelfGitlabGroupReqValidationError) ErrorName() string {
	return "ListSelfGitlabGroupReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListSelfGitlabGroupReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSelfGitlabGroupReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSelfGitlabGroupReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSelfGitlabGroupReqValidationError{}

// Validate checks the field values on ListSelfGitlabGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSelfGitlabGroupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSelfGitlabGroupReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSelfGitlabGroupReplyMultiError, or nil if none found.
func (m *ListSelfGitlabGroupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSelfGitlabGroupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSelfGitlabGroupReplyValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSelfGitlabGroupReplyValidationError{
						field:  fmt.Sprintf("Groups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSelfGitlabGroupReplyValidationError{
					field:  fmt.Sprintf("Groups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSelfGitlabGroupReplyMultiError(errors)
	}

	return nil
}

// ListSelfGitlabGroupReplyMultiError is an error wrapping multiple validation
// errors returned by ListSelfGitlabGroupReply.ValidateAll() if the designated
// constraints aren't met.
type ListSelfGitlabGroupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSelfGitlabGroupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSelfGitlabGroupReplyMultiError) AllErrors() []error { return m }

// ListSelfGitlabGroupReplyValidationError is the validation error returned by
// ListSelfGitlabGroupReply.Validate if the designated constraints aren't met.
type ListSelfGitlabGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSelfGitlabGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSelfGitlabGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSelfGitlabGroupReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSelfGitlabGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSelfGitlabGroupReplyValidationError) ErrorName() string {
	return "ListSelfGitlabGroupReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListSelfGitlabGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSelfGitlabGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSelfGitlabGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSelfGitlabGroupReplyValidationError{}

// Validate checks the field values on ImportSelfGitlabRepoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportSelfGitlabRepoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportSelfGitlabRepoReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportSelfGitlabRepoReqMultiError, or nil if none found.
func (m *ImportSelfGitlabRepoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportSelfGitlabRepoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ImportSelfGitlabRepoReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ImportSelfGitlabRepoReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ImportSelfGitlabRepoReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPlatformUuid()) < 1 {
		err := ImportSelfGitlabRepoReqValidationError{
			field:  "PlatformUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPlatformTokenUuid()) < 1 {
		err := ImportSelfGitlabRepoReqValidationError{
			field:  "PlatformTokenUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProjectId() <= 0 {
		err := ImportSelfGitlabRepoReqValidationError{
			field:  "ProjectId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ImportSelfGitlabRepoReqMultiError(errors)
	}

	return nil
}

// ImportSelfGitlabRepoReqMultiError is an error wrapping multiple validation
// errors returned by ImportSelfGitlabRepoReq.ValidateAll() if the designated
// constraints aren't met.
type ImportSelfGitlabRepoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportSelfGitlabRepoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportSelfGitlabRepoReqMultiError) AllErrors() []error { return m }

// ImportSelfGitlabRepoReqValidationError is the validation error returned by
// ImportSelfGitlabRepoReq.Validate if the designated constraints aren't met.
type ImportSelfGitlabRepoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportSelfGitlabRepoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportSelfGitlabRepoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportSelfGitlabRepoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportSelfGitlabRepoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportSelfGitlabRepoReqValidationError) ErrorName() string {
	return "ImportSelfGitlabRepoReqValidationError"
}

// Error satisfies the builtin error interface
func (e ImportSelfGitlabRepoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportSelfGitlabRepoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportSelfGitlabRepoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportSelfGitlabRepoReqValidationError{}

// Validate checks the field values on ImportSelfGitlabRepoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportSelfGitlabRepoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportSelfGitlabRepoReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportSelfGitlabRepoReplyMultiError, or nil if none found.
func (m *ImportSelfGitlabRepoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportSelfGitlabRepoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return ImportSelfGitlabRepoReplyMultiError(errors)
	}

	return nil
}

// ImportSelfGitlabRepoReplyMultiError is an error wrapping multiple validation
// errors returned by ImportSelfGitlabRepoReply.ValidateAll() if the
// designated constraints aren't met.
type ImportSelfGitlabRepoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportSelfGitlabRepoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportSelfGitlabRepoReplyMultiError) AllErrors() []error { return m }

// ImportSelfGitlabRepoReplyValidationError is the validation error returned by
// ImportSelfGitlabRepoReply.Validate if the designated constraints aren't met.
type ImportSelfGitlabRepoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportSelfGitlabRepoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportSelfGitlabRepoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportSelfGitlabRepoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportSelfGitlabRepoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportSelfGitlabRepoReplyValidationError) ErrorName() string {
	return "ImportSelfGitlabRepoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ImportSelfGitlabRepoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportSelfGitlabRepoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportSelfGitlabRepoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportSelfGitlabRepoReplyValidationError{}

// Validate checks the field values on CreateSelfGitlabRepoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSelfGitlabRepoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSelfGitlabRepoReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSelfGitlabRepoReqMultiError, or nil if none found.
func (m *CreateSelfGitlabRepoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSelfGitlabRepoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := CreateSelfGitlabRepoReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := CreateSelfGitlabRepoReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := CreateSelfGitlabRepoReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPlatformUuid()) < 1 {
		err := CreateSelfGitlabRepoReqValidationError{
			field:  "PlatformUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPlatformTokenUuid()) < 1 {
		err := CreateSelfGitlabRepoReqValidationError{
			field:  "PlatformTokenUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProjectName()) < 1 {
		err := CreateSelfGitlabRepoReqValidationError{
			field:  "ProjectName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for GroupId

	// no validation rules for Describe

	if len(errors) > 0 {
		return CreateSelfGitlabRepoReqMultiError(errors)
	}

	return nil
}

// CreateSelfGitlabRepoReqMultiError is an error wrapping multiple validation
// errors returned by CreateSelfGitlabRepoReq.ValidateAll() if the designated
// constraints aren't met.
type CreateSelfGitlabRepoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSelfGitlabRepoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSelfGitlabRepoReqMultiError) AllErrors() []error { return m }

// CreateSelfGitlabRepoReqValidationError is the validation error returned by
// CreateSelfGitlabRepoReq.Validate if the designated constraints aren't met.
type CreateSelfGitlabRepoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSelfGitlabRepoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSelfGitlabRepoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSelfGitlabRepoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSelfGitlabRepoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSelfGitlabRepoReqValidationError) ErrorName() string {
	return "CreateSelfGitlabRepoReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSelfGitlabRepoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSelfGitlabRepoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSelfGitlabRepoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSelfGitlabRepoReqValidationError{}

// Validate checks the field values on CreateSelfGitlabRepoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSelfGitlabRepoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSelfGitlabRepoReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSelfGitlabRepoReplyMultiError, or nil if none found.
func (m *CreateSelfGitlabRepoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSelfGitlabRepoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return CreateSelfGitlabRepoReplyMultiError(errors)
	}

	return nil
}

// CreateSelfGitlabRepoReplyMultiError is an error wrapping multiple validation
// errors returned by CreateSelfGitlabRepoReply.ValidateAll() if the
// designated constraints aren't met.
type CreateSelfGitlabRepoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSelfGitlabRepoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSelfGitlabRepoReplyMultiError) AllErrors() []error { return m }

// CreateSelfGitlabRepoReplyValidationError is the validation error returned by
// CreateSelfGitlabRepoReply.Validate if the designated constraints aren't met.
type CreateSelfGitlabRepoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSelfGitlabRepoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSelfGitlabRepoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSelfGitlabRepoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSelfGitlabRepoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSelfGitlabRepoReplyValidationError) ErrorName() string {
	return "CreateSelfGitlabRepoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSelfGitlabRepoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSelfGitlabRepoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSelfGitlabRepoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSelfGitlabRepoReplyValidationError{}

// Validate checks the field values on ListSelfGitlabRepoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSelfGitlabRepoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSelfGitlabRepoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSelfGitlabRepoReqMultiError, or nil if none found.
func (m *ListSelfGitlabRepoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSelfGitlabRepoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ListSelfGitlabRepoReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ListSelfGitlabRepoReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ListSelfGitlabRepoReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PlatformUuid

	// no validation rules for PlatformTokenUuid

	if len(errors) > 0 {
		return ListSelfGitlabRepoReqMultiError(errors)
	}

	return nil
}

// ListSelfGitlabRepoReqMultiError is an error wrapping multiple validation
// errors returned by ListSelfGitlabRepoReq.ValidateAll() if the designated
// constraints aren't met.
type ListSelfGitlabRepoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSelfGitlabRepoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSelfGitlabRepoReqMultiError) AllErrors() []error { return m }

// ListSelfGitlabRepoReqValidationError is the validation error returned by
// ListSelfGitlabRepoReq.Validate if the designated constraints aren't met.
type ListSelfGitlabRepoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSelfGitlabRepoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSelfGitlabRepoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSelfGitlabRepoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSelfGitlabRepoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSelfGitlabRepoReqValidationError) ErrorName() string {
	return "ListSelfGitlabRepoReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListSelfGitlabRepoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSelfGitlabRepoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSelfGitlabRepoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSelfGitlabRepoReqValidationError{}

// Validate checks the field values on ListSelfGitlabRepoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSelfGitlabRepoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSelfGitlabRepoReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSelfGitlabRepoReplyMultiError, or nil if none found.
func (m *ListSelfGitlabRepoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSelfGitlabRepoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGitlabRepo() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSelfGitlabRepoReplyValidationError{
						field:  fmt.Sprintf("GitlabRepo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSelfGitlabRepoReplyValidationError{
						field:  fmt.Sprintf("GitlabRepo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSelfGitlabRepoReplyValidationError{
					field:  fmt.Sprintf("GitlabRepo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSelfGitlabRepoReplyMultiError(errors)
	}

	return nil
}

// ListSelfGitlabRepoReplyMultiError is an error wrapping multiple validation
// errors returned by ListSelfGitlabRepoReply.ValidateAll() if the designated
// constraints aren't met.
type ListSelfGitlabRepoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSelfGitlabRepoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSelfGitlabRepoReplyMultiError) AllErrors() []error { return m }

// ListSelfGitlabRepoReplyValidationError is the validation error returned by
// ListSelfGitlabRepoReply.Validate if the designated constraints aren't met.
type ListSelfGitlabRepoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSelfGitlabRepoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSelfGitlabRepoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSelfGitlabRepoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSelfGitlabRepoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSelfGitlabRepoReplyValidationError) ErrorName() string {
	return "ListSelfGitlabRepoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListSelfGitlabRepoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSelfGitlabRepoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSelfGitlabRepoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSelfGitlabRepoReplyValidationError{}

// Validate checks the field values on DelSelfGitlabRepoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelSelfGitlabRepoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelSelfGitlabRepoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelSelfGitlabRepoReqMultiError, or nil if none found.
func (m *DelSelfGitlabRepoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelSelfGitlabRepoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := DelSelfGitlabRepoReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := DelSelfGitlabRepoReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := DelSelfGitlabRepoReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUuid()) < 1 {
		err := DelSelfGitlabRepoReqValidationError{
			field:  "Uuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelSelfGitlabRepoReqMultiError(errors)
	}

	return nil
}

// DelSelfGitlabRepoReqMultiError is an error wrapping multiple validation
// errors returned by DelSelfGitlabRepoReq.ValidateAll() if the designated
// constraints aren't met.
type DelSelfGitlabRepoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelSelfGitlabRepoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelSelfGitlabRepoReqMultiError) AllErrors() []error { return m }

// DelSelfGitlabRepoReqValidationError is the validation error returned by
// DelSelfGitlabRepoReq.Validate if the designated constraints aren't met.
type DelSelfGitlabRepoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelSelfGitlabRepoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelSelfGitlabRepoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelSelfGitlabRepoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelSelfGitlabRepoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelSelfGitlabRepoReqValidationError) ErrorName() string {
	return "DelSelfGitlabRepoReqValidationError"
}

// Error satisfies the builtin error interface
func (e DelSelfGitlabRepoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelSelfGitlabRepoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelSelfGitlabRepoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelSelfGitlabRepoReqValidationError{}

// Validate checks the field values on DelSelfGitlabRepoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelSelfGitlabRepoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelSelfGitlabRepoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelSelfGitlabRepoReplyMultiError, or nil if none found.
func (m *DelSelfGitlabRepoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DelSelfGitlabRepoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return DelSelfGitlabRepoReplyMultiError(errors)
	}

	return nil
}

// DelSelfGitlabRepoReplyMultiError is an error wrapping multiple validation
// errors returned by DelSelfGitlabRepoReply.ValidateAll() if the designated
// constraints aren't met.
type DelSelfGitlabRepoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelSelfGitlabRepoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelSelfGitlabRepoReplyMultiError) AllErrors() []error { return m }

// DelSelfGitlabRepoReplyValidationError is the validation error returned by
// DelSelfGitlabRepoReply.Validate if the designated constraints aren't met.
type DelSelfGitlabRepoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelSelfGitlabRepoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelSelfGitlabRepoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelSelfGitlabRepoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelSelfGitlabRepoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelSelfGitlabRepoReplyValidationError) ErrorName() string {
	return "DelSelfGitlabRepoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DelSelfGitlabRepoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelSelfGitlabRepoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelSelfGitlabRepoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelSelfGitlabRepoReplyValidationError{}

// Validate checks the field values on ArchiveSelfGitlabRepoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArchiveSelfGitlabRepoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArchiveSelfGitlabRepoReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArchiveSelfGitlabRepoReqMultiError, or nil if none found.
func (m *ArchiveSelfGitlabRepoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ArchiveSelfGitlabRepoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ArchiveSelfGitlabRepoReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ArchiveSelfGitlabRepoReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ArchiveSelfGitlabRepoReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRepoUuid()) < 1 {
		err := ArchiveSelfGitlabRepoReqValidationError{
			field:  "RepoUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ArchiveSelfGitlabRepoReqMultiError(errors)
	}

	return nil
}

// ArchiveSelfGitlabRepoReqMultiError is an error wrapping multiple validation
// errors returned by ArchiveSelfGitlabRepoReq.ValidateAll() if the designated
// constraints aren't met.
type ArchiveSelfGitlabRepoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArchiveSelfGitlabRepoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArchiveSelfGitlabRepoReqMultiError) AllErrors() []error { return m }

// ArchiveSelfGitlabRepoReqValidationError is the validation error returned by
// ArchiveSelfGitlabRepoReq.Validate if the designated constraints aren't met.
type ArchiveSelfGitlabRepoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArchiveSelfGitlabRepoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArchiveSelfGitlabRepoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArchiveSelfGitlabRepoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArchiveSelfGitlabRepoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArchiveSelfGitlabRepoReqValidationError) ErrorName() string {
	return "ArchiveSelfGitlabRepoReqValidationError"
}

// Error satisfies the builtin error interface
func (e ArchiveSelfGitlabRepoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArchiveSelfGitlabRepoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArchiveSelfGitlabRepoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArchiveSelfGitlabRepoReqValidationError{}

// Validate checks the field values on ArchiveSelfGitlabRepoReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArchiveSelfGitlabRepoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArchiveSelfGitlabRepoReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArchiveSelfGitlabRepoReplyMultiError, or nil if none found.
func (m *ArchiveSelfGitlabRepoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ArchiveSelfGitlabRepoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return ArchiveSelfGitlabRepoReplyMultiError(errors)
	}

	return nil
}

// ArchiveSelfGitlabRepoReplyMultiError is an error wrapping multiple
// validation errors returned by ArchiveSelfGitlabRepoReply.ValidateAll() if
// the designated constraints aren't met.
type ArchiveSelfGitlabRepoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArchiveSelfGitlabRepoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArchiveSelfGitlabRepoReplyMultiError) AllErrors() []error { return m }

// ArchiveSelfGitlabRepoReplyValidationError is the validation error returned
// by ArchiveSelfGitlabRepoReply.Validate if the designated constraints aren't met.
type ArchiveSelfGitlabRepoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArchiveSelfGitlabRepoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArchiveSelfGitlabRepoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArchiveSelfGitlabRepoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArchiveSelfGitlabRepoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArchiveSelfGitlabRepoReplyValidationError) ErrorName() string {
	return "ArchiveSelfGitlabRepoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ArchiveSelfGitlabRepoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArchiveSelfGitlabRepoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArchiveSelfGitlabRepoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArchiveSelfGitlabRepoReplyValidationError{}

// Validate checks the field values on MergeSelfGitlabRepoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MergeSelfGitlabRepoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MergeSelfGitlabRepoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MergeSelfGitlabRepoReqMultiError, or nil if none found.
func (m *MergeSelfGitlabRepoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *MergeSelfGitlabRepoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := MergeSelfGitlabRepoReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := MergeSelfGitlabRepoReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := MergeSelfGitlabRepoReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRepoUuid()) < 1 {
		err := MergeSelfGitlabRepoReqValidationError{
			field:  "RepoUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSourceBranch()) < 1 {
		err := MergeSelfGitlabRepoReqValidationError{
			field:  "SourceBranch",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTargetBranch()) < 1 {
		err := MergeSelfGitlabRepoReqValidationError{
			field:  "TargetBranch",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMessage()) < 1 {
		err := MergeSelfGitlabRepoReqValidationError{
			field:  "Message",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MergeSelfGitlabRepoReqMultiError(errors)
	}

	return nil
}

// MergeSelfGitlabRepoReqMultiError is an error wrapping multiple validation
// errors returned by MergeSelfGitlabRepoReq.ValidateAll() if the designated
// constraints aren't met.
type MergeSelfGitlabRepoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MergeSelfGitlabRepoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MergeSelfGitlabRepoReqMultiError) AllErrors() []error { return m }

// MergeSelfGitlabRepoReqValidationError is the validation error returned by
// MergeSelfGitlabRepoReq.Validate if the designated constraints aren't met.
type MergeSelfGitlabRepoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MergeSelfGitlabRepoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MergeSelfGitlabRepoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MergeSelfGitlabRepoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MergeSelfGitlabRepoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MergeSelfGitlabRepoReqValidationError) ErrorName() string {
	return "MergeSelfGitlabRepoReqValidationError"
}

// Error satisfies the builtin error interface
func (e MergeSelfGitlabRepoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMergeSelfGitlabRepoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MergeSelfGitlabRepoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MergeSelfGitlabRepoReqValidationError{}

// Validate checks the field values on MergeSelfGitlabRepoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MergeSelfGitlabRepoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MergeSelfGitlabRepoReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MergeSelfGitlabRepoReplyMultiError, or nil if none found.
func (m *MergeSelfGitlabRepoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *MergeSelfGitlabRepoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return MergeSelfGitlabRepoReplyMultiError(errors)
	}

	return nil
}

// MergeSelfGitlabRepoReplyMultiError is an error wrapping multiple validation
// errors returned by MergeSelfGitlabRepoReply.ValidateAll() if the designated
// constraints aren't met.
type MergeSelfGitlabRepoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MergeSelfGitlabRepoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MergeSelfGitlabRepoReplyMultiError) AllErrors() []error { return m }

// MergeSelfGitlabRepoReplyValidationError is the validation error returned by
// MergeSelfGitlabRepoReply.Validate if the designated constraints aren't met.
type MergeSelfGitlabRepoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MergeSelfGitlabRepoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MergeSelfGitlabRepoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MergeSelfGitlabRepoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MergeSelfGitlabRepoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MergeSelfGitlabRepoReplyValidationError) ErrorName() string {
	return "MergeSelfGitlabRepoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e MergeSelfGitlabRepoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMergeSelfGitlabRepoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MergeSelfGitlabRepoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MergeSelfGitlabRepoReplyValidationError{}

// Validate checks the field values on SelfGitlabRepoMergeHisReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SelfGitlabRepoMergeHisReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SelfGitlabRepoMergeHisReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SelfGitlabRepoMergeHisReqMultiError, or nil if none found.
func (m *SelfGitlabRepoMergeHisReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SelfGitlabRepoMergeHisReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := SelfGitlabRepoMergeHisReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := SelfGitlabRepoMergeHisReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := SelfGitlabRepoMergeHisReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRepoUuid()) < 1 {
		err := SelfGitlabRepoMergeHisReqValidationError{
			field:  "RepoUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for SourceBranch

	// no validation rules for TargetBranch

	if len(errors) > 0 {
		return SelfGitlabRepoMergeHisReqMultiError(errors)
	}

	return nil
}

// SelfGitlabRepoMergeHisReqMultiError is an error wrapping multiple validation
// errors returned by SelfGitlabRepoMergeHisReq.ValidateAll() if the
// designated constraints aren't met.
type SelfGitlabRepoMergeHisReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SelfGitlabRepoMergeHisReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SelfGitlabRepoMergeHisReqMultiError) AllErrors() []error { return m }

// SelfGitlabRepoMergeHisReqValidationError is the validation error returned by
// SelfGitlabRepoMergeHisReq.Validate if the designated constraints aren't met.
type SelfGitlabRepoMergeHisReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SelfGitlabRepoMergeHisReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SelfGitlabRepoMergeHisReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SelfGitlabRepoMergeHisReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SelfGitlabRepoMergeHisReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SelfGitlabRepoMergeHisReqValidationError) ErrorName() string {
	return "SelfGitlabRepoMergeHisReqValidationError"
}

// Error satisfies the builtin error interface
func (e SelfGitlabRepoMergeHisReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSelfGitlabRepoMergeHisReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SelfGitlabRepoMergeHisReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SelfGitlabRepoMergeHisReqValidationError{}

// Validate checks the field values on SelfGitlabRepoMergeHisReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SelfGitlabRepoMergeHisReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SelfGitlabRepoMergeHisReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SelfGitlabRepoMergeHisReplyMultiError, or nil if none found.
func (m *SelfGitlabRepoMergeHisReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SelfGitlabRepoMergeHisReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMerges() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SelfGitlabRepoMergeHisReplyValidationError{
						field:  fmt.Sprintf("Merges[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SelfGitlabRepoMergeHisReplyValidationError{
						field:  fmt.Sprintf("Merges[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SelfGitlabRepoMergeHisReplyValidationError{
					field:  fmt.Sprintf("Merges[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SelfGitlabRepoMergeHisReplyMultiError(errors)
	}

	return nil
}

// SelfGitlabRepoMergeHisReplyMultiError is an error wrapping multiple
// validation errors returned by SelfGitlabRepoMergeHisReply.ValidateAll() if
// the designated constraints aren't met.
type SelfGitlabRepoMergeHisReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SelfGitlabRepoMergeHisReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SelfGitlabRepoMergeHisReplyMultiError) AllErrors() []error { return m }

// SelfGitlabRepoMergeHisReplyValidationError is the validation error returned
// by SelfGitlabRepoMergeHisReply.Validate if the designated constraints
// aren't met.
type SelfGitlabRepoMergeHisReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SelfGitlabRepoMergeHisReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SelfGitlabRepoMergeHisReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SelfGitlabRepoMergeHisReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SelfGitlabRepoMergeHisReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SelfGitlabRepoMergeHisReplyValidationError) ErrorName() string {
	return "SelfGitlabRepoMergeHisReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SelfGitlabRepoMergeHisReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSelfGitlabRepoMergeHisReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SelfGitlabRepoMergeHisReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SelfGitlabRepoMergeHisReplyValidationError{}

// Validate checks the field values on CreateSelfGitlabRepoBranchReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSelfGitlabRepoBranchReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSelfGitlabRepoBranchReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateSelfGitlabRepoBranchReqMultiError, or nil if none found.
func (m *CreateSelfGitlabRepoBranchReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSelfGitlabRepoBranchReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := CreateSelfGitlabRepoBranchReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := CreateSelfGitlabRepoBranchReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := CreateSelfGitlabRepoBranchReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRepoUuid()) < 1 {
		err := CreateSelfGitlabRepoBranchReqValidationError{
			field:  "RepoUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBranchName()) < 1 {
		err := CreateSelfGitlabRepoBranchReqValidationError{
			field:  "BranchName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRef()) < 1 {
		err := CreateSelfGitlabRepoBranchReqValidationError{
			field:  "Ref",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateSelfGitlabRepoBranchReqMultiError(errors)
	}

	return nil
}

// CreateSelfGitlabRepoBranchReqMultiError is an error wrapping multiple
// validation errors returned by CreateSelfGitlabRepoBranchReq.ValidateAll()
// if the designated constraints aren't met.
type CreateSelfGitlabRepoBranchReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSelfGitlabRepoBranchReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSelfGitlabRepoBranchReqMultiError) AllErrors() []error { return m }

// CreateSelfGitlabRepoBranchReqValidationError is the validation error
// returned by CreateSelfGitlabRepoBranchReq.Validate if the designated
// constraints aren't met.
type CreateSelfGitlabRepoBranchReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSelfGitlabRepoBranchReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSelfGitlabRepoBranchReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSelfGitlabRepoBranchReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSelfGitlabRepoBranchReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSelfGitlabRepoBranchReqValidationError) ErrorName() string {
	return "CreateSelfGitlabRepoBranchReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSelfGitlabRepoBranchReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSelfGitlabRepoBranchReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSelfGitlabRepoBranchReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSelfGitlabRepoBranchReqValidationError{}

// Validate checks the field values on CreateSelfGitlabRepoBranchReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSelfGitlabRepoBranchReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSelfGitlabRepoBranchReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateSelfGitlabRepoBranchReplyMultiError, or nil if none found.
func (m *CreateSelfGitlabRepoBranchReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSelfGitlabRepoBranchReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return CreateSelfGitlabRepoBranchReplyMultiError(errors)
	}

	return nil
}

// CreateSelfGitlabRepoBranchReplyMultiError is an error wrapping multiple
// validation errors returned by CreateSelfGitlabRepoBranchReply.ValidateAll()
// if the designated constraints aren't met.
type CreateSelfGitlabRepoBranchReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSelfGitlabRepoBranchReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSelfGitlabRepoBranchReplyMultiError) AllErrors() []error { return m }

// CreateSelfGitlabRepoBranchReplyValidationError is the validation error
// returned by CreateSelfGitlabRepoBranchReply.Validate if the designated
// constraints aren't met.
type CreateSelfGitlabRepoBranchReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSelfGitlabRepoBranchReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSelfGitlabRepoBranchReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSelfGitlabRepoBranchReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSelfGitlabRepoBranchReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSelfGitlabRepoBranchReplyValidationError) ErrorName() string {
	return "CreateSelfGitlabRepoBranchReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSelfGitlabRepoBranchReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSelfGitlabRepoBranchReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSelfGitlabRepoBranchReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSelfGitlabRepoBranchReplyValidationError{}

// Validate checks the field values on ListSelfGitlabRepoBranchReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSelfGitlabRepoBranchReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSelfGitlabRepoBranchReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSelfGitlabRepoBranchReqMultiError, or nil if none found.
func (m *ListSelfGitlabRepoBranchReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSelfGitlabRepoBranchReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ListSelfGitlabRepoBranchReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ListSelfGitlabRepoBranchReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ListSelfGitlabRepoBranchReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRepoUuid()) < 1 {
		err := ListSelfGitlabRepoBranchReqValidationError{
			field:  "RepoUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListSelfGitlabRepoBranchReqMultiError(errors)
	}

	return nil
}

// ListSelfGitlabRepoBranchReqMultiError is an error wrapping multiple
// validation errors returned by ListSelfGitlabRepoBranchReq.ValidateAll() if
// the designated constraints aren't met.
type ListSelfGitlabRepoBranchReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSelfGitlabRepoBranchReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSelfGitlabRepoBranchReqMultiError) AllErrors() []error { return m }

// ListSelfGitlabRepoBranchReqValidationError is the validation error returned
// by ListSelfGitlabRepoBranchReq.Validate if the designated constraints
// aren't met.
type ListSelfGitlabRepoBranchReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSelfGitlabRepoBranchReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSelfGitlabRepoBranchReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSelfGitlabRepoBranchReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSelfGitlabRepoBranchReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSelfGitlabRepoBranchReqValidationError) ErrorName() string {
	return "ListSelfGitlabRepoBranchReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListSelfGitlabRepoBranchReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSelfGitlabRepoBranchReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSelfGitlabRepoBranchReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSelfGitlabRepoBranchReqValidationError{}

// Validate checks the field values on ListSelfGitlabRepoBranchReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSelfGitlabRepoBranchReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSelfGitlabRepoBranchReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListSelfGitlabRepoBranchReplyMultiError, or nil if none found.
func (m *ListSelfGitlabRepoBranchReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSelfGitlabRepoBranchReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBranch() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSelfGitlabRepoBranchReplyValidationError{
						field:  fmt.Sprintf("Branch[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSelfGitlabRepoBranchReplyValidationError{
						field:  fmt.Sprintf("Branch[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSelfGitlabRepoBranchReplyValidationError{
					field:  fmt.Sprintf("Branch[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSelfGitlabRepoBranchReplyMultiError(errors)
	}

	return nil
}

// ListSelfGitlabRepoBranchReplyMultiError is an error wrapping multiple
// validation errors returned by ListSelfGitlabRepoBranchReply.ValidateAll()
// if the designated constraints aren't met.
type ListSelfGitlabRepoBranchReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSelfGitlabRepoBranchReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSelfGitlabRepoBranchReplyMultiError) AllErrors() []error { return m }

// ListSelfGitlabRepoBranchReplyValidationError is the validation error
// returned by ListSelfGitlabRepoBranchReply.Validate if the designated
// constraints aren't met.
type ListSelfGitlabRepoBranchReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSelfGitlabRepoBranchReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSelfGitlabRepoBranchReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSelfGitlabRepoBranchReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSelfGitlabRepoBranchReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSelfGitlabRepoBranchReplyValidationError) ErrorName() string {
	return "ListSelfGitlabRepoBranchReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListSelfGitlabRepoBranchReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSelfGitlabRepoBranchReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSelfGitlabRepoBranchReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSelfGitlabRepoBranchReplyValidationError{}

// Validate checks the field values on DelSelfGitlabRepoBranchReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelSelfGitlabRepoBranchReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelSelfGitlabRepoBranchReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelSelfGitlabRepoBranchReqMultiError, or nil if none found.
func (m *DelSelfGitlabRepoBranchReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelSelfGitlabRepoBranchReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := DelSelfGitlabRepoBranchReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := DelSelfGitlabRepoBranchReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := DelSelfGitlabRepoBranchReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRepoUuid()) < 1 {
		err := DelSelfGitlabRepoBranchReqValidationError{
			field:  "RepoUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBranchName()) < 1 {
		err := DelSelfGitlabRepoBranchReqValidationError{
			field:  "BranchName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelSelfGitlabRepoBranchReqMultiError(errors)
	}

	return nil
}

// DelSelfGitlabRepoBranchReqMultiError is an error wrapping multiple
// validation errors returned by DelSelfGitlabRepoBranchReq.ValidateAll() if
// the designated constraints aren't met.
type DelSelfGitlabRepoBranchReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelSelfGitlabRepoBranchReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelSelfGitlabRepoBranchReqMultiError) AllErrors() []error { return m }

// DelSelfGitlabRepoBranchReqValidationError is the validation error returned
// by DelSelfGitlabRepoBranchReq.Validate if the designated constraints aren't met.
type DelSelfGitlabRepoBranchReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelSelfGitlabRepoBranchReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelSelfGitlabRepoBranchReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelSelfGitlabRepoBranchReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelSelfGitlabRepoBranchReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelSelfGitlabRepoBranchReqValidationError) ErrorName() string {
	return "DelSelfGitlabRepoBranchReqValidationError"
}

// Error satisfies the builtin error interface
func (e DelSelfGitlabRepoBranchReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelSelfGitlabRepoBranchReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelSelfGitlabRepoBranchReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelSelfGitlabRepoBranchReqValidationError{}

// Validate checks the field values on DelSelfGitlabRepoBranchReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelSelfGitlabRepoBranchReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelSelfGitlabRepoBranchReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelSelfGitlabRepoBranchReplyMultiError, or nil if none found.
func (m *DelSelfGitlabRepoBranchReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DelSelfGitlabRepoBranchReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return DelSelfGitlabRepoBranchReplyMultiError(errors)
	}

	return nil
}

// DelSelfGitlabRepoBranchReplyMultiError is an error wrapping multiple
// validation errors returned by DelSelfGitlabRepoBranchReply.ValidateAll() if
// the designated constraints aren't met.
type DelSelfGitlabRepoBranchReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelSelfGitlabRepoBranchReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelSelfGitlabRepoBranchReplyMultiError) AllErrors() []error { return m }

// DelSelfGitlabRepoBranchReplyValidationError is the validation error returned
// by DelSelfGitlabRepoBranchReply.Validate if the designated constraints
// aren't met.
type DelSelfGitlabRepoBranchReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelSelfGitlabRepoBranchReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelSelfGitlabRepoBranchReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelSelfGitlabRepoBranchReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelSelfGitlabRepoBranchReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelSelfGitlabRepoBranchReplyValidationError) ErrorName() string {
	return "DelSelfGitlabRepoBranchReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DelSelfGitlabRepoBranchReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelSelfGitlabRepoBranchReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelSelfGitlabRepoBranchReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelSelfGitlabRepoBranchReplyValidationError{}

// Validate checks the field values on ProtectSelfGitlabRepoBranchReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProtectSelfGitlabRepoBranchReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProtectSelfGitlabRepoBranchReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ProtectSelfGitlabRepoBranchReqMultiError, or nil if none found.
func (m *ProtectSelfGitlabRepoBranchReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ProtectSelfGitlabRepoBranchReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ProtectSelfGitlabRepoBranchReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ProtectSelfGitlabRepoBranchReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ProtectSelfGitlabRepoBranchReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRepoUuid()) < 1 {
		err := ProtectSelfGitlabRepoBranchReqValidationError{
			field:  "RepoUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBranchName()) < 1 {
		err := ProtectSelfGitlabRepoBranchReqValidationError{
			field:  "BranchName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ProtectSelfGitlabRepoBranchReqMultiError(errors)
	}

	return nil
}

// ProtectSelfGitlabRepoBranchReqMultiError is an error wrapping multiple
// validation errors returned by ProtectSelfGitlabRepoBranchReq.ValidateAll()
// if the designated constraints aren't met.
type ProtectSelfGitlabRepoBranchReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProtectSelfGitlabRepoBranchReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProtectSelfGitlabRepoBranchReqMultiError) AllErrors() []error { return m }

// ProtectSelfGitlabRepoBranchReqValidationError is the validation error
// returned by ProtectSelfGitlabRepoBranchReq.Validate if the designated
// constraints aren't met.
type ProtectSelfGitlabRepoBranchReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProtectSelfGitlabRepoBranchReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProtectSelfGitlabRepoBranchReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProtectSelfGitlabRepoBranchReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProtectSelfGitlabRepoBranchReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProtectSelfGitlabRepoBranchReqValidationError) ErrorName() string {
	return "ProtectSelfGitlabRepoBranchReqValidationError"
}

// Error satisfies the builtin error interface
func (e ProtectSelfGitlabRepoBranchReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProtectSelfGitlabRepoBranchReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProtectSelfGitlabRepoBranchReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProtectSelfGitlabRepoBranchReqValidationError{}

// Validate checks the field values on ProtectSelfGitlabRepoBranchReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ProtectSelfGitlabRepoBranchReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProtectSelfGitlabRepoBranchReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ProtectSelfGitlabRepoBranchReplyMultiError, or nil if none found.
func (m *ProtectSelfGitlabRepoBranchReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ProtectSelfGitlabRepoBranchReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return ProtectSelfGitlabRepoBranchReplyMultiError(errors)
	}

	return nil
}

// ProtectSelfGitlabRepoBranchReplyMultiError is an error wrapping multiple
// validation errors returned by
// ProtectSelfGitlabRepoBranchReply.ValidateAll() if the designated
// constraints aren't met.
type ProtectSelfGitlabRepoBranchReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProtectSelfGitlabRepoBranchReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProtectSelfGitlabRepoBranchReplyMultiError) AllErrors() []error { return m }

// ProtectSelfGitlabRepoBranchReplyValidationError is the validation error
// returned by ProtectSelfGitlabRepoBranchReply.Validate if the designated
// constraints aren't met.
type ProtectSelfGitlabRepoBranchReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProtectSelfGitlabRepoBranchReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProtectSelfGitlabRepoBranchReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProtectSelfGitlabRepoBranchReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProtectSelfGitlabRepoBranchReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProtectSelfGitlabRepoBranchReplyValidationError) ErrorName() string {
	return "ProtectSelfGitlabRepoBranchReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ProtectSelfGitlabRepoBranchReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProtectSelfGitlabRepoBranchReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProtectSelfGitlabRepoBranchReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProtectSelfGitlabRepoBranchReplyValidationError{}

// Validate checks the field values on UnprotectSelfGitlabRepoBranchReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UnprotectSelfGitlabRepoBranchReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnprotectSelfGitlabRepoBranchReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UnprotectSelfGitlabRepoBranchReqMultiError, or nil if none found.
func (m *UnprotectSelfGitlabRepoBranchReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UnprotectSelfGitlabRepoBranchReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := UnprotectSelfGitlabRepoBranchReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := UnprotectSelfGitlabRepoBranchReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := UnprotectSelfGitlabRepoBranchReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRepoUuid()) < 1 {
		err := UnprotectSelfGitlabRepoBranchReqValidationError{
			field:  "RepoUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBranchName()) < 1 {
		err := UnprotectSelfGitlabRepoBranchReqValidationError{
			field:  "BranchName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UnprotectSelfGitlabRepoBranchReqMultiError(errors)
	}

	return nil
}

// UnprotectSelfGitlabRepoBranchReqMultiError is an error wrapping multiple
// validation errors returned by
// UnprotectSelfGitlabRepoBranchReq.ValidateAll() if the designated
// constraints aren't met.
type UnprotectSelfGitlabRepoBranchReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnprotectSelfGitlabRepoBranchReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnprotectSelfGitlabRepoBranchReqMultiError) AllErrors() []error { return m }

// UnprotectSelfGitlabRepoBranchReqValidationError is the validation error
// returned by UnprotectSelfGitlabRepoBranchReq.Validate if the designated
// constraints aren't met.
type UnprotectSelfGitlabRepoBranchReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnprotectSelfGitlabRepoBranchReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnprotectSelfGitlabRepoBranchReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnprotectSelfGitlabRepoBranchReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnprotectSelfGitlabRepoBranchReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnprotectSelfGitlabRepoBranchReqValidationError) ErrorName() string {
	return "UnprotectSelfGitlabRepoBranchReqValidationError"
}

// Error satisfies the builtin error interface
func (e UnprotectSelfGitlabRepoBranchReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnprotectSelfGitlabRepoBranchReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnprotectSelfGitlabRepoBranchReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnprotectSelfGitlabRepoBranchReqValidationError{}

// Validate checks the field values on UnprotectSelfGitlabRepoBranchReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UnprotectSelfGitlabRepoBranchReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnprotectSelfGitlabRepoBranchReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UnprotectSelfGitlabRepoBranchReplyMultiError, or nil if none found.
func (m *UnprotectSelfGitlabRepoBranchReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UnprotectSelfGitlabRepoBranchReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return UnprotectSelfGitlabRepoBranchReplyMultiError(errors)
	}

	return nil
}

// UnprotectSelfGitlabRepoBranchReplyMultiError is an error wrapping multiple
// validation errors returned by
// UnprotectSelfGitlabRepoBranchReply.ValidateAll() if the designated
// constraints aren't met.
type UnprotectSelfGitlabRepoBranchReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnprotectSelfGitlabRepoBranchReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnprotectSelfGitlabRepoBranchReplyMultiError) AllErrors() []error { return m }

// UnprotectSelfGitlabRepoBranchReplyValidationError is the validation error
// returned by UnprotectSelfGitlabRepoBranchReply.Validate if the designated
// constraints aren't met.
type UnprotectSelfGitlabRepoBranchReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnprotectSelfGitlabRepoBranchReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnprotectSelfGitlabRepoBranchReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnprotectSelfGitlabRepoBranchReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnprotectSelfGitlabRepoBranchReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnprotectSelfGitlabRepoBranchReplyValidationError) ErrorName() string {
	return "UnprotectSelfGitlabRepoBranchReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UnprotectSelfGitlabRepoBranchReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnprotectSelfGitlabRepoBranchReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnprotectSelfGitlabRepoBranchReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnprotectSelfGitlabRepoBranchReplyValidationError{}

// Validate checks the field values on ListSelfGitlabRepoBranchCommitsReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListSelfGitlabRepoBranchCommitsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSelfGitlabRepoBranchCommitsReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListSelfGitlabRepoBranchCommitsReqMultiError, or nil if none found.
func (m *ListSelfGitlabRepoBranchCommitsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSelfGitlabRepoBranchCommitsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ListSelfGitlabRepoBranchCommitsReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ListSelfGitlabRepoBranchCommitsReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ListSelfGitlabRepoBranchCommitsReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRepoUuid()) < 1 {
		err := ListSelfGitlabRepoBranchCommitsReqValidationError{
			field:  "RepoUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBranchName()) < 1 {
		err := ListSelfGitlabRepoBranchCommitsReqValidationError{
			field:  "BranchName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListSelfGitlabRepoBranchCommitsReqMultiError(errors)
	}

	return nil
}

// ListSelfGitlabRepoBranchCommitsReqMultiError is an error wrapping multiple
// validation errors returned by
// ListSelfGitlabRepoBranchCommitsReq.ValidateAll() if the designated
// constraints aren't met.
type ListSelfGitlabRepoBranchCommitsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSelfGitlabRepoBranchCommitsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSelfGitlabRepoBranchCommitsReqMultiError) AllErrors() []error { return m }

// ListSelfGitlabRepoBranchCommitsReqValidationError is the validation error
// returned by ListSelfGitlabRepoBranchCommitsReq.Validate if the designated
// constraints aren't met.
type ListSelfGitlabRepoBranchCommitsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSelfGitlabRepoBranchCommitsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSelfGitlabRepoBranchCommitsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSelfGitlabRepoBranchCommitsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSelfGitlabRepoBranchCommitsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSelfGitlabRepoBranchCommitsReqValidationError) ErrorName() string {
	return "ListSelfGitlabRepoBranchCommitsReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListSelfGitlabRepoBranchCommitsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSelfGitlabRepoBranchCommitsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSelfGitlabRepoBranchCommitsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSelfGitlabRepoBranchCommitsReqValidationError{}

// Validate checks the field values on ListSelfGitlabRepoBranchCommitsReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListSelfGitlabRepoBranchCommitsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSelfGitlabRepoBranchCommitsReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListSelfGitlabRepoBranchCommitsReplyMultiError, or nil if none found.
func (m *ListSelfGitlabRepoBranchCommitsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSelfGitlabRepoBranchCommitsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCommits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSelfGitlabRepoBranchCommitsReplyValidationError{
						field:  fmt.Sprintf("Commits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSelfGitlabRepoBranchCommitsReplyValidationError{
						field:  fmt.Sprintf("Commits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSelfGitlabRepoBranchCommitsReplyValidationError{
					field:  fmt.Sprintf("Commits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSelfGitlabRepoBranchCommitsReplyMultiError(errors)
	}

	return nil
}

// ListSelfGitlabRepoBranchCommitsReplyMultiError is an error wrapping multiple
// validation errors returned by
// ListSelfGitlabRepoBranchCommitsReply.ValidateAll() if the designated
// constraints aren't met.
type ListSelfGitlabRepoBranchCommitsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSelfGitlabRepoBranchCommitsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSelfGitlabRepoBranchCommitsReplyMultiError) AllErrors() []error { return m }

// ListSelfGitlabRepoBranchCommitsReplyValidationError is the validation error
// returned by ListSelfGitlabRepoBranchCommitsReply.Validate if the designated
// constraints aren't met.
type ListSelfGitlabRepoBranchCommitsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSelfGitlabRepoBranchCommitsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSelfGitlabRepoBranchCommitsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSelfGitlabRepoBranchCommitsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSelfGitlabRepoBranchCommitsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSelfGitlabRepoBranchCommitsReplyValidationError) ErrorName() string {
	return "ListSelfGitlabRepoBranchCommitsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListSelfGitlabRepoBranchCommitsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSelfGitlabRepoBranchCommitsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSelfGitlabRepoBranchCommitsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSelfGitlabRepoBranchCommitsReplyValidationError{}

// Validate checks the field values on CreateGitHubTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGitHubTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGitHubTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGitHubTokenReqMultiError, or nil if none found.
func (m *CreateGitHubTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGitHubTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := CreateGitHubTokenReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := CreateGitHubTokenReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := CreateGitHubTokenReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateGitHubTokenReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetToken()) < 1 {
		err := CreateGitHubTokenReqValidationError{
			field:  "Token",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Describe

	if len(errors) > 0 {
		return CreateGitHubTokenReqMultiError(errors)
	}

	return nil
}

// CreateGitHubTokenReqMultiError is an error wrapping multiple validation
// errors returned by CreateGitHubTokenReq.ValidateAll() if the designated
// constraints aren't met.
type CreateGitHubTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGitHubTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGitHubTokenReqMultiError) AllErrors() []error { return m }

// CreateGitHubTokenReqValidationError is the validation error returned by
// CreateGitHubTokenReq.Validate if the designated constraints aren't met.
type CreateGitHubTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGitHubTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGitHubTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGitHubTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGitHubTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGitHubTokenReqValidationError) ErrorName() string {
	return "CreateGitHubTokenReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGitHubTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGitHubTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGitHubTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGitHubTokenReqValidationError{}

// Validate checks the field values on CreateGitHubTokenReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGitHubTokenReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGitHubTokenReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGitHubTokenReplyMultiError, or nil if none found.
func (m *CreateGitHubTokenReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGitHubTokenReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return CreateGitHubTokenReplyMultiError(errors)
	}

	return nil
}

// CreateGitHubTokenReplyMultiError is an error wrapping multiple validation
// errors returned by CreateGitHubTokenReply.ValidateAll() if the designated
// constraints aren't met.
type CreateGitHubTokenReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGitHubTokenReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGitHubTokenReplyMultiError) AllErrors() []error { return m }

// CreateGitHubTokenReplyValidationError is the validation error returned by
// CreateGitHubTokenReply.Validate if the designated constraints aren't met.
type CreateGitHubTokenReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGitHubTokenReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGitHubTokenReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGitHubTokenReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGitHubTokenReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGitHubTokenReplyValidationError) ErrorName() string {
	return "CreateGitHubTokenReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGitHubTokenReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGitHubTokenReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGitHubTokenReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGitHubTokenReplyValidationError{}

// Validate checks the field values on ListGitHubTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGitHubTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGitHubTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGitHubTokenReqMultiError, or nil if none found.
func (m *ListGitHubTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGitHubTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ListGitHubTokenReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ListGitHubTokenReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ListGitHubTokenReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListGitHubTokenReqMultiError(errors)
	}

	return nil
}

// ListGitHubTokenReqMultiError is an error wrapping multiple validation errors
// returned by ListGitHubTokenReq.ValidateAll() if the designated constraints
// aren't met.
type ListGitHubTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGitHubTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGitHubTokenReqMultiError) AllErrors() []error { return m }

// ListGitHubTokenReqValidationError is the validation error returned by
// ListGitHubTokenReq.Validate if the designated constraints aren't met.
type ListGitHubTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGitHubTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGitHubTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGitHubTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGitHubTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGitHubTokenReqValidationError) ErrorName() string {
	return "ListGitHubTokenReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListGitHubTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGitHubTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGitHubTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGitHubTokenReqValidationError{}

// Validate checks the field values on ListGitHubTokenReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGitHubTokenReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGitHubTokenReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGitHubTokenReplyMultiError, or nil if none found.
func (m *ListGitHubTokenReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGitHubTokenReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGithubToken() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGitHubTokenReplyValidationError{
						field:  fmt.Sprintf("GithubToken[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGitHubTokenReplyValidationError{
						field:  fmt.Sprintf("GithubToken[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGitHubTokenReplyValidationError{
					field:  fmt.Sprintf("GithubToken[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListGitHubTokenReplyMultiError(errors)
	}

	return nil
}

// ListGitHubTokenReplyMultiError is an error wrapping multiple validation
// errors returned by ListGitHubTokenReply.ValidateAll() if the designated
// constraints aren't met.
type ListGitHubTokenReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGitHubTokenReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGitHubTokenReplyMultiError) AllErrors() []error { return m }

// ListGitHubTokenReplyValidationError is the validation error returned by
// ListGitHubTokenReply.Validate if the designated constraints aren't met.
type ListGitHubTokenReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGitHubTokenReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGitHubTokenReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGitHubTokenReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGitHubTokenReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGitHubTokenReplyValidationError) ErrorName() string {
	return "ListGitHubTokenReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListGitHubTokenReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGitHubTokenReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGitHubTokenReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGitHubTokenReplyValidationError{}

// Validate checks the field values on DelGitHubTokenReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DelGitHubTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelGitHubTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelGitHubTokenReqMultiError, or nil if none found.
func (m *DelGitHubTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelGitHubTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := DelGitHubTokenReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := DelGitHubTokenReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := DelGitHubTokenReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUuid()) < 1 {
		err := DelGitHubTokenReqValidationError{
			field:  "Uuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelGitHubTokenReqMultiError(errors)
	}

	return nil
}

// DelGitHubTokenReqMultiError is an error wrapping multiple validation errors
// returned by DelGitHubTokenReq.ValidateAll() if the designated constraints
// aren't met.
type DelGitHubTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelGitHubTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelGitHubTokenReqMultiError) AllErrors() []error { return m }

// DelGitHubTokenReqValidationError is the validation error returned by
// DelGitHubTokenReq.Validate if the designated constraints aren't met.
type DelGitHubTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelGitHubTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelGitHubTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelGitHubTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelGitHubTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelGitHubTokenReqValidationError) ErrorName() string {
	return "DelGitHubTokenReqValidationError"
}

// Error satisfies the builtin error interface
func (e DelGitHubTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelGitHubTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelGitHubTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelGitHubTokenReqValidationError{}

// Validate checks the field values on DelGitHubTokenReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelGitHubTokenReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelGitHubTokenReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelGitHubTokenReplyMultiError, or nil if none found.
func (m *DelGitHubTokenReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DelGitHubTokenReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return DelGitHubTokenReplyMultiError(errors)
	}

	return nil
}

// DelGitHubTokenReplyMultiError is an error wrapping multiple validation
// errors returned by DelGitHubTokenReply.ValidateAll() if the designated
// constraints aren't met.
type DelGitHubTokenReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelGitHubTokenReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelGitHubTokenReplyMultiError) AllErrors() []error { return m }

// DelGitHubTokenReplyValidationError is the validation error returned by
// DelGitHubTokenReply.Validate if the designated constraints aren't met.
type DelGitHubTokenReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelGitHubTokenReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelGitHubTokenReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelGitHubTokenReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelGitHubTokenReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelGitHubTokenReplyValidationError) ErrorName() string {
	return "DelGitHubTokenReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DelGitHubTokenReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelGitHubTokenReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelGitHubTokenReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelGitHubTokenReplyValidationError{}

// Validate checks the field values on ImportGithubRepoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportGithubRepoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportGithubRepoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportGithubRepoReqMultiError, or nil if none found.
func (m *ImportGithubRepoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportGithubRepoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ImportGithubRepoReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ImportGithubRepoReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ImportGithubRepoReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTokenUuid()) < 1 {
		err := ImportGithubRepoReqValidationError{
			field:  "TokenUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for GithubOrgName

	if utf8.RuneCountInString(m.GetRepoName()) < 1 {
		err := ImportGithubRepoReqValidationError{
			field:  "RepoName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ImportGithubRepoReqMultiError(errors)
	}

	return nil
}

// ImportGithubRepoReqMultiError is an error wrapping multiple validation
// errors returned by ImportGithubRepoReq.ValidateAll() if the designated
// constraints aren't met.
type ImportGithubRepoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportGithubRepoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportGithubRepoReqMultiError) AllErrors() []error { return m }

// ImportGithubRepoReqValidationError is the validation error returned by
// ImportGithubRepoReq.Validate if the designated constraints aren't met.
type ImportGithubRepoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportGithubRepoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportGithubRepoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportGithubRepoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportGithubRepoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportGithubRepoReqValidationError) ErrorName() string {
	return "ImportGithubRepoReqValidationError"
}

// Error satisfies the builtin error interface
func (e ImportGithubRepoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportGithubRepoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportGithubRepoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportGithubRepoReqValidationError{}

// Validate checks the field values on ImportGithubRepoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportGithubRepoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportGithubRepoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportGithubRepoReplyMultiError, or nil if none found.
func (m *ImportGithubRepoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportGithubRepoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return ImportGithubRepoReplyMultiError(errors)
	}

	return nil
}

// ImportGithubRepoReplyMultiError is an error wrapping multiple validation
// errors returned by ImportGithubRepoReply.ValidateAll() if the designated
// constraints aren't met.
type ImportGithubRepoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportGithubRepoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportGithubRepoReplyMultiError) AllErrors() []error { return m }

// ImportGithubRepoReplyValidationError is the validation error returned by
// ImportGithubRepoReply.Validate if the designated constraints aren't met.
type ImportGithubRepoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportGithubRepoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportGithubRepoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportGithubRepoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportGithubRepoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportGithubRepoReplyValidationError) ErrorName() string {
	return "ImportGithubRepoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ImportGithubRepoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportGithubRepoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportGithubRepoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportGithubRepoReplyValidationError{}

// Validate checks the field values on CreateGithubRepoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGithubRepoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGithubRepoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGithubRepoReqMultiError, or nil if none found.
func (m *CreateGithubRepoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGithubRepoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := CreateGithubRepoReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := CreateGithubRepoReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := CreateGithubRepoReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTokenUuid()) < 1 {
		err := CreateGithubRepoReqValidationError{
			field:  "TokenUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateGithubRepoReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for OrgName

	// no validation rules for Private

	// no validation rules for Describe

	if len(errors) > 0 {
		return CreateGithubRepoReqMultiError(errors)
	}

	return nil
}

// CreateGithubRepoReqMultiError is an error wrapping multiple validation
// errors returned by CreateGithubRepoReq.ValidateAll() if the designated
// constraints aren't met.
type CreateGithubRepoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGithubRepoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGithubRepoReqMultiError) AllErrors() []error { return m }

// CreateGithubRepoReqValidationError is the validation error returned by
// CreateGithubRepoReq.Validate if the designated constraints aren't met.
type CreateGithubRepoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGithubRepoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGithubRepoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGithubRepoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGithubRepoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGithubRepoReqValidationError) ErrorName() string {
	return "CreateGithubRepoReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGithubRepoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGithubRepoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGithubRepoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGithubRepoReqValidationError{}

// Validate checks the field values on CreateGithubRepoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGithubRepoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGithubRepoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGithubRepoReplyMultiError, or nil if none found.
func (m *CreateGithubRepoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGithubRepoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return CreateGithubRepoReplyMultiError(errors)
	}

	return nil
}

// CreateGithubRepoReplyMultiError is an error wrapping multiple validation
// errors returned by CreateGithubRepoReply.ValidateAll() if the designated
// constraints aren't met.
type CreateGithubRepoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGithubRepoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGithubRepoReplyMultiError) AllErrors() []error { return m }

// CreateGithubRepoReplyValidationError is the validation error returned by
// CreateGithubRepoReply.Validate if the designated constraints aren't met.
type CreateGithubRepoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGithubRepoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGithubRepoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGithubRepoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGithubRepoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGithubRepoReplyValidationError) ErrorName() string {
	return "CreateGithubRepoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGithubRepoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGithubRepoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGithubRepoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGithubRepoReplyValidationError{}

// Validate checks the field values on ListGithubRepoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListGithubRepoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGithubRepoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGithubRepoReqMultiError, or nil if none found.
func (m *ListGithubRepoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGithubRepoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ListGithubRepoReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ListGithubRepoReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ListGithubRepoReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Token

	if len(errors) > 0 {
		return ListGithubRepoReqMultiError(errors)
	}

	return nil
}

// ListGithubRepoReqMultiError is an error wrapping multiple validation errors
// returned by ListGithubRepoReq.ValidateAll() if the designated constraints
// aren't met.
type ListGithubRepoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGithubRepoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGithubRepoReqMultiError) AllErrors() []error { return m }

// ListGithubRepoReqValidationError is the validation error returned by
// ListGithubRepoReq.Validate if the designated constraints aren't met.
type ListGithubRepoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGithubRepoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGithubRepoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGithubRepoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGithubRepoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGithubRepoReqValidationError) ErrorName() string {
	return "ListGithubRepoReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListGithubRepoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGithubRepoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGithubRepoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGithubRepoReqValidationError{}

// Validate checks the field values on ListGithubRepoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGithubRepoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGithubRepoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGithubRepoReplyMultiError, or nil if none found.
func (m *ListGithubRepoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGithubRepoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRepo() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGithubRepoReplyValidationError{
						field:  fmt.Sprintf("Repo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGithubRepoReplyValidationError{
						field:  fmt.Sprintf("Repo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGithubRepoReplyValidationError{
					field:  fmt.Sprintf("Repo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListGithubRepoReplyMultiError(errors)
	}

	return nil
}

// ListGithubRepoReplyMultiError is an error wrapping multiple validation
// errors returned by ListGithubRepoReply.ValidateAll() if the designated
// constraints aren't met.
type ListGithubRepoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGithubRepoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGithubRepoReplyMultiError) AllErrors() []error { return m }

// ListGithubRepoReplyValidationError is the validation error returned by
// ListGithubRepoReply.Validate if the designated constraints aren't met.
type ListGithubRepoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGithubRepoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGithubRepoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGithubRepoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGithubRepoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGithubRepoReplyValidationError) ErrorName() string {
	return "ListGithubRepoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListGithubRepoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGithubRepoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGithubRepoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGithubRepoReplyValidationError{}

// Validate checks the field values on GetGithubRepoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetGithubRepoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGithubRepoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGithubRepoReqMultiError, or nil if none found.
func (m *GetGithubRepoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGithubRepoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := GetGithubRepoReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := GetGithubRepoReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := GetGithubRepoReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUuid()) < 1 {
		err := GetGithubRepoReqValidationError{
			field:  "Uuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetGithubRepoReqMultiError(errors)
	}

	return nil
}

// GetGithubRepoReqMultiError is an error wrapping multiple validation errors
// returned by GetGithubRepoReq.ValidateAll() if the designated constraints
// aren't met.
type GetGithubRepoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGithubRepoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGithubRepoReqMultiError) AllErrors() []error { return m }

// GetGithubRepoReqValidationError is the validation error returned by
// GetGithubRepoReq.Validate if the designated constraints aren't met.
type GetGithubRepoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGithubRepoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGithubRepoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGithubRepoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGithubRepoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGithubRepoReqValidationError) ErrorName() string { return "GetGithubRepoReqValidationError" }

// Error satisfies the builtin error interface
func (e GetGithubRepoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGithubRepoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGithubRepoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGithubRepoReqValidationError{}

// Validate checks the field values on GetGithubRepoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGithubRepoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGithubRepoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGithubRepoReplyMultiError, or nil if none found.
func (m *GetGithubRepoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGithubRepoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for FullName

	// no validation rules for HtmlUrl

	// no validation rules for CloneUrl

	// no validation rules for Description

	// no validation rules for Star

	// no validation rules for Owner

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return GetGithubRepoReplyMultiError(errors)
	}

	return nil
}

// GetGithubRepoReplyMultiError is an error wrapping multiple validation errors
// returned by GetGithubRepoReply.ValidateAll() if the designated constraints
// aren't met.
type GetGithubRepoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGithubRepoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGithubRepoReplyMultiError) AllErrors() []error { return m }

// GetGithubRepoReplyValidationError is the validation error returned by
// GetGithubRepoReply.Validate if the designated constraints aren't met.
type GetGithubRepoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGithubRepoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGithubRepoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGithubRepoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGithubRepoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGithubRepoReplyValidationError) ErrorName() string {
	return "GetGithubRepoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetGithubRepoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGithubRepoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGithubRepoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGithubRepoReplyValidationError{}

// Validate checks the field values on DelGithubRepoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DelGithubRepoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelGithubRepoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelGithubRepoReqMultiError, or nil if none found.
func (m *DelGithubRepoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelGithubRepoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := DelGithubRepoReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := DelGithubRepoReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := DelGithubRepoReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUuid()) < 1 {
		err := DelGithubRepoReqValidationError{
			field:  "Uuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelGithubRepoReqMultiError(errors)
	}

	return nil
}

// DelGithubRepoReqMultiError is an error wrapping multiple validation errors
// returned by DelGithubRepoReq.ValidateAll() if the designated constraints
// aren't met.
type DelGithubRepoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelGithubRepoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelGithubRepoReqMultiError) AllErrors() []error { return m }

// DelGithubRepoReqValidationError is the validation error returned by
// DelGithubRepoReq.Validate if the designated constraints aren't met.
type DelGithubRepoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelGithubRepoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelGithubRepoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelGithubRepoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelGithubRepoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelGithubRepoReqValidationError) ErrorName() string { return "DelGithubRepoReqValidationError" }

// Error satisfies the builtin error interface
func (e DelGithubRepoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelGithubRepoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelGithubRepoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelGithubRepoReqValidationError{}

// Validate checks the field values on DelGithubRepoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelGithubRepoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelGithubRepoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelGithubRepoReplyMultiError, or nil if none found.
func (m *DelGithubRepoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DelGithubRepoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return DelGithubRepoReplyMultiError(errors)
	}

	return nil
}

// DelGithubRepoReplyMultiError is an error wrapping multiple validation errors
// returned by DelGithubRepoReply.ValidateAll() if the designated constraints
// aren't met.
type DelGithubRepoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelGithubRepoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelGithubRepoReplyMultiError) AllErrors() []error { return m }

// DelGithubRepoReplyValidationError is the validation error returned by
// DelGithubRepoReply.Validate if the designated constraints aren't met.
type DelGithubRepoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelGithubRepoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelGithubRepoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelGithubRepoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelGithubRepoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelGithubRepoReplyValidationError) ErrorName() string {
	return "DelGithubRepoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DelGithubRepoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelGithubRepoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelGithubRepoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelGithubRepoReplyValidationError{}

// Validate checks the field values on ArchiveGithubRepoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArchiveGithubRepoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArchiveGithubRepoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArchiveGithubRepoReqMultiError, or nil if none found.
func (m *ArchiveGithubRepoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ArchiveGithubRepoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ArchiveGithubRepoReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ArchiveGithubRepoReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ArchiveGithubRepoReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUuid()) < 1 {
		err := ArchiveGithubRepoReqValidationError{
			field:  "Uuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ArchiveGithubRepoReqMultiError(errors)
	}

	return nil
}

// ArchiveGithubRepoReqMultiError is an error wrapping multiple validation
// errors returned by ArchiveGithubRepoReq.ValidateAll() if the designated
// constraints aren't met.
type ArchiveGithubRepoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArchiveGithubRepoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArchiveGithubRepoReqMultiError) AllErrors() []error { return m }

// ArchiveGithubRepoReqValidationError is the validation error returned by
// ArchiveGithubRepoReq.Validate if the designated constraints aren't met.
type ArchiveGithubRepoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArchiveGithubRepoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArchiveGithubRepoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArchiveGithubRepoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArchiveGithubRepoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArchiveGithubRepoReqValidationError) ErrorName() string {
	return "ArchiveGithubRepoReqValidationError"
}

// Error satisfies the builtin error interface
func (e ArchiveGithubRepoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArchiveGithubRepoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArchiveGithubRepoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArchiveGithubRepoReqValidationError{}

// Validate checks the field values on ArchiveGithubRepoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ArchiveGithubRepoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ArchiveGithubRepoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ArchiveGithubRepoReplyMultiError, or nil if none found.
func (m *ArchiveGithubRepoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ArchiveGithubRepoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return ArchiveGithubRepoReplyMultiError(errors)
	}

	return nil
}

// ArchiveGithubRepoReplyMultiError is an error wrapping multiple validation
// errors returned by ArchiveGithubRepoReply.ValidateAll() if the designated
// constraints aren't met.
type ArchiveGithubRepoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ArchiveGithubRepoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ArchiveGithubRepoReplyMultiError) AllErrors() []error { return m }

// ArchiveGithubRepoReplyValidationError is the validation error returned by
// ArchiveGithubRepoReply.Validate if the designated constraints aren't met.
type ArchiveGithubRepoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ArchiveGithubRepoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ArchiveGithubRepoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ArchiveGithubRepoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ArchiveGithubRepoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ArchiveGithubRepoReplyValidationError) ErrorName() string {
	return "ArchiveGithubRepoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ArchiveGithubRepoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sArchiveGithubRepoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ArchiveGithubRepoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ArchiveGithubRepoReplyValidationError{}

// Validate checks the field values on MergeGithubRepoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MergeGithubRepoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MergeGithubRepoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MergeGithubRepoReqMultiError, or nil if none found.
func (m *MergeGithubRepoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *MergeGithubRepoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := MergeGithubRepoReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := MergeGithubRepoReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := MergeGithubRepoReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRepoUuid()) < 1 {
		err := MergeGithubRepoReqValidationError{
			field:  "RepoUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSourceBranch()) < 1 {
		err := MergeGithubRepoReqValidationError{
			field:  "SourceBranch",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTargetBranch()) < 1 {
		err := MergeGithubRepoReqValidationError{
			field:  "TargetBranch",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMessage()) < 1 {
		err := MergeGithubRepoReqValidationError{
			field:  "Message",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MergeGithubRepoReqMultiError(errors)
	}

	return nil
}

// MergeGithubRepoReqMultiError is an error wrapping multiple validation errors
// returned by MergeGithubRepoReq.ValidateAll() if the designated constraints
// aren't met.
type MergeGithubRepoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MergeGithubRepoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MergeGithubRepoReqMultiError) AllErrors() []error { return m }

// MergeGithubRepoReqValidationError is the validation error returned by
// MergeGithubRepoReq.Validate if the designated constraints aren't met.
type MergeGithubRepoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MergeGithubRepoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MergeGithubRepoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MergeGithubRepoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MergeGithubRepoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MergeGithubRepoReqValidationError) ErrorName() string {
	return "MergeGithubRepoReqValidationError"
}

// Error satisfies the builtin error interface
func (e MergeGithubRepoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMergeGithubRepoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MergeGithubRepoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MergeGithubRepoReqValidationError{}

// Validate checks the field values on MergeGithubRepoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MergeGithubRepoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MergeGithubRepoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MergeGithubRepoReplyMultiError, or nil if none found.
func (m *MergeGithubRepoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *MergeGithubRepoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return MergeGithubRepoReplyMultiError(errors)
	}

	return nil
}

// MergeGithubRepoReplyMultiError is an error wrapping multiple validation
// errors returned by MergeGithubRepoReply.ValidateAll() if the designated
// constraints aren't met.
type MergeGithubRepoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MergeGithubRepoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MergeGithubRepoReplyMultiError) AllErrors() []error { return m }

// MergeGithubRepoReplyValidationError is the validation error returned by
// MergeGithubRepoReply.Validate if the designated constraints aren't met.
type MergeGithubRepoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MergeGithubRepoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MergeGithubRepoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MergeGithubRepoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MergeGithubRepoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MergeGithubRepoReplyValidationError) ErrorName() string {
	return "MergeGithubRepoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e MergeGithubRepoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMergeGithubRepoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MergeGithubRepoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MergeGithubRepoReplyValidationError{}

// Validate checks the field values on ListGithubRepoBranchReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGithubRepoBranchReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGithubRepoBranchReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGithubRepoBranchReqMultiError, or nil if none found.
func (m *ListGithubRepoBranchReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGithubRepoBranchReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ListGithubRepoBranchReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ListGithubRepoBranchReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ListGithubRepoBranchReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRepoUuid()) < 1 {
		err := ListGithubRepoBranchReqValidationError{
			field:  "RepoUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListGithubRepoBranchReqMultiError(errors)
	}

	return nil
}

// ListGithubRepoBranchReqMultiError is an error wrapping multiple validation
// errors returned by ListGithubRepoBranchReq.ValidateAll() if the designated
// constraints aren't met.
type ListGithubRepoBranchReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGithubRepoBranchReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGithubRepoBranchReqMultiError) AllErrors() []error { return m }

// ListGithubRepoBranchReqValidationError is the validation error returned by
// ListGithubRepoBranchReq.Validate if the designated constraints aren't met.
type ListGithubRepoBranchReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGithubRepoBranchReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGithubRepoBranchReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGithubRepoBranchReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGithubRepoBranchReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGithubRepoBranchReqValidationError) ErrorName() string {
	return "ListGithubRepoBranchReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListGithubRepoBranchReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGithubRepoBranchReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGithubRepoBranchReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGithubRepoBranchReqValidationError{}

// Validate checks the field values on ListGithubRepoBranchReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGithubRepoBranchReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGithubRepoBranchReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGithubRepoBranchReplyMultiError, or nil if none found.
func (m *ListGithubRepoBranchReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGithubRepoBranchReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBranch() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGithubRepoBranchReplyValidationError{
						field:  fmt.Sprintf("Branch[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGithubRepoBranchReplyValidationError{
						field:  fmt.Sprintf("Branch[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGithubRepoBranchReplyValidationError{
					field:  fmt.Sprintf("Branch[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListGithubRepoBranchReplyMultiError(errors)
	}

	return nil
}

// ListGithubRepoBranchReplyMultiError is an error wrapping multiple validation
// errors returned by ListGithubRepoBranchReply.ValidateAll() if the
// designated constraints aren't met.
type ListGithubRepoBranchReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGithubRepoBranchReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGithubRepoBranchReplyMultiError) AllErrors() []error { return m }

// ListGithubRepoBranchReplyValidationError is the validation error returned by
// ListGithubRepoBranchReply.Validate if the designated constraints aren't met.
type ListGithubRepoBranchReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGithubRepoBranchReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGithubRepoBranchReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGithubRepoBranchReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGithubRepoBranchReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGithubRepoBranchReplyValidationError) ErrorName() string {
	return "ListGithubRepoBranchReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListGithubRepoBranchReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGithubRepoBranchReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGithubRepoBranchReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGithubRepoBranchReplyValidationError{}

// Validate checks the field values on ListGithubRepoBranchCommitsReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGithubRepoBranchCommitsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGithubRepoBranchCommitsReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListGithubRepoBranchCommitsReqMultiError, or nil if none found.
func (m *ListGithubRepoBranchCommitsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGithubRepoBranchCommitsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ListGithubRepoBranchCommitsReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ListGithubRepoBranchCommitsReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ListGithubRepoBranchCommitsReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRepoUuid()) < 1 {
		err := ListGithubRepoBranchCommitsReqValidationError{
			field:  "RepoUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBranchName()) < 1 {
		err := ListGithubRepoBranchCommitsReqValidationError{
			field:  "BranchName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListGithubRepoBranchCommitsReqMultiError(errors)
	}

	return nil
}

// ListGithubRepoBranchCommitsReqMultiError is an error wrapping multiple
// validation errors returned by ListGithubRepoBranchCommitsReq.ValidateAll()
// if the designated constraints aren't met.
type ListGithubRepoBranchCommitsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGithubRepoBranchCommitsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGithubRepoBranchCommitsReqMultiError) AllErrors() []error { return m }

// ListGithubRepoBranchCommitsReqValidationError is the validation error
// returned by ListGithubRepoBranchCommitsReq.Validate if the designated
// constraints aren't met.
type ListGithubRepoBranchCommitsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGithubRepoBranchCommitsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGithubRepoBranchCommitsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGithubRepoBranchCommitsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGithubRepoBranchCommitsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGithubRepoBranchCommitsReqValidationError) ErrorName() string {
	return "ListGithubRepoBranchCommitsReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListGithubRepoBranchCommitsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGithubRepoBranchCommitsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGithubRepoBranchCommitsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGithubRepoBranchCommitsReqValidationError{}

// Validate checks the field values on ListGithubRepoBranchCommitsReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListGithubRepoBranchCommitsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGithubRepoBranchCommitsReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListGithubRepoBranchCommitsReplyMultiError, or nil if none found.
func (m *ListGithubRepoBranchCommitsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGithubRepoBranchCommitsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCommits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGithubRepoBranchCommitsReplyValidationError{
						field:  fmt.Sprintf("Commits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGithubRepoBranchCommitsReplyValidationError{
						field:  fmt.Sprintf("Commits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGithubRepoBranchCommitsReplyValidationError{
					field:  fmt.Sprintf("Commits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListGithubRepoBranchCommitsReplyMultiError(errors)
	}

	return nil
}

// ListGithubRepoBranchCommitsReplyMultiError is an error wrapping multiple
// validation errors returned by
// ListGithubRepoBranchCommitsReply.ValidateAll() if the designated
// constraints aren't met.
type ListGithubRepoBranchCommitsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGithubRepoBranchCommitsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGithubRepoBranchCommitsReplyMultiError) AllErrors() []error { return m }

// ListGithubRepoBranchCommitsReplyValidationError is the validation error
// returned by ListGithubRepoBranchCommitsReply.Validate if the designated
// constraints aren't met.
type ListGithubRepoBranchCommitsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGithubRepoBranchCommitsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGithubRepoBranchCommitsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGithubRepoBranchCommitsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGithubRepoBranchCommitsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGithubRepoBranchCommitsReplyValidationError) ErrorName() string {
	return "ListGithubRepoBranchCommitsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListGithubRepoBranchCommitsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGithubRepoBranchCommitsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGithubRepoBranchCommitsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGithubRepoBranchCommitsReplyValidationError{}

// Validate checks the field values on ProtectGithubRepoBranchReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProtectGithubRepoBranchReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProtectGithubRepoBranchReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProtectGithubRepoBranchReqMultiError, or nil if none found.
func (m *ProtectGithubRepoBranchReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ProtectGithubRepoBranchReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ProtectGithubRepoBranchReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ProtectGithubRepoBranchReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ProtectGithubRepoBranchReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRepoUuid()) < 1 {
		err := ProtectGithubRepoBranchReqValidationError{
			field:  "RepoUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBranchName()) < 1 {
		err := ProtectGithubRepoBranchReqValidationError{
			field:  "BranchName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ProtectGithubRepoBranchReqMultiError(errors)
	}

	return nil
}

// ProtectGithubRepoBranchReqMultiError is an error wrapping multiple
// validation errors returned by ProtectGithubRepoBranchReq.ValidateAll() if
// the designated constraints aren't met.
type ProtectGithubRepoBranchReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProtectGithubRepoBranchReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProtectGithubRepoBranchReqMultiError) AllErrors() []error { return m }

// ProtectGithubRepoBranchReqValidationError is the validation error returned
// by ProtectGithubRepoBranchReq.Validate if the designated constraints aren't met.
type ProtectGithubRepoBranchReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProtectGithubRepoBranchReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProtectGithubRepoBranchReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProtectGithubRepoBranchReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProtectGithubRepoBranchReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProtectGithubRepoBranchReqValidationError) ErrorName() string {
	return "ProtectGithubRepoBranchReqValidationError"
}

// Error satisfies the builtin error interface
func (e ProtectGithubRepoBranchReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProtectGithubRepoBranchReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProtectGithubRepoBranchReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProtectGithubRepoBranchReqValidationError{}

// Validate checks the field values on ProtectGithubRepoBranchReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProtectGithubRepoBranchReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProtectGithubRepoBranchReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProtectGithubRepoBranchReplyMultiError, or nil if none found.
func (m *ProtectGithubRepoBranchReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ProtectGithubRepoBranchReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return ProtectGithubRepoBranchReplyMultiError(errors)
	}

	return nil
}

// ProtectGithubRepoBranchReplyMultiError is an error wrapping multiple
// validation errors returned by ProtectGithubRepoBranchReply.ValidateAll() if
// the designated constraints aren't met.
type ProtectGithubRepoBranchReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProtectGithubRepoBranchReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProtectGithubRepoBranchReplyMultiError) AllErrors() []error { return m }

// ProtectGithubRepoBranchReplyValidationError is the validation error returned
// by ProtectGithubRepoBranchReply.Validate if the designated constraints
// aren't met.
type ProtectGithubRepoBranchReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProtectGithubRepoBranchReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProtectGithubRepoBranchReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProtectGithubRepoBranchReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProtectGithubRepoBranchReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProtectGithubRepoBranchReplyValidationError) ErrorName() string {
	return "ProtectGithubRepoBranchReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ProtectGithubRepoBranchReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProtectGithubRepoBranchReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProtectGithubRepoBranchReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProtectGithubRepoBranchReplyValidationError{}

// Validate checks the field values on UnprotectGithubRepoBranchReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnprotectGithubRepoBranchReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnprotectGithubRepoBranchReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnprotectGithubRepoBranchReqMultiError, or nil if none found.
func (m *UnprotectGithubRepoBranchReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UnprotectGithubRepoBranchReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := UnprotectGithubRepoBranchReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := UnprotectGithubRepoBranchReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := UnprotectGithubRepoBranchReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRepoUuid()) < 1 {
		err := UnprotectGithubRepoBranchReqValidationError{
			field:  "RepoUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBranchName()) < 1 {
		err := UnprotectGithubRepoBranchReqValidationError{
			field:  "BranchName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UnprotectGithubRepoBranchReqMultiError(errors)
	}

	return nil
}

// UnprotectGithubRepoBranchReqMultiError is an error wrapping multiple
// validation errors returned by UnprotectGithubRepoBranchReq.ValidateAll() if
// the designated constraints aren't met.
type UnprotectGithubRepoBranchReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnprotectGithubRepoBranchReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnprotectGithubRepoBranchReqMultiError) AllErrors() []error { return m }

// UnprotectGithubRepoBranchReqValidationError is the validation error returned
// by UnprotectGithubRepoBranchReq.Validate if the designated constraints
// aren't met.
type UnprotectGithubRepoBranchReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnprotectGithubRepoBranchReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnprotectGithubRepoBranchReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnprotectGithubRepoBranchReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnprotectGithubRepoBranchReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnprotectGithubRepoBranchReqValidationError) ErrorName() string {
	return "UnprotectGithubRepoBranchReqValidationError"
}

// Error satisfies the builtin error interface
func (e UnprotectGithubRepoBranchReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnprotectGithubRepoBranchReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnprotectGithubRepoBranchReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnprotectGithubRepoBranchReqValidationError{}

// Validate checks the field values on UnprotectGithubRepoBranchReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnprotectGithubRepoBranchReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnprotectGithubRepoBranchReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UnprotectGithubRepoBranchReplyMultiError, or nil if none found.
func (m *UnprotectGithubRepoBranchReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UnprotectGithubRepoBranchReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return UnprotectGithubRepoBranchReplyMultiError(errors)
	}

	return nil
}

// UnprotectGithubRepoBranchReplyMultiError is an error wrapping multiple
// validation errors returned by UnprotectGithubRepoBranchReply.ValidateAll()
// if the designated constraints aren't met.
type UnprotectGithubRepoBranchReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnprotectGithubRepoBranchReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnprotectGithubRepoBranchReplyMultiError) AllErrors() []error { return m }

// UnprotectGithubRepoBranchReplyValidationError is the validation error
// returned by UnprotectGithubRepoBranchReply.Validate if the designated
// constraints aren't met.
type UnprotectGithubRepoBranchReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnprotectGithubRepoBranchReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnprotectGithubRepoBranchReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnprotectGithubRepoBranchReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnprotectGithubRepoBranchReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnprotectGithubRepoBranchReplyValidationError) ErrorName() string {
	return "UnprotectGithubRepoBranchReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UnprotectGithubRepoBranchReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnprotectGithubRepoBranchReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnprotectGithubRepoBranchReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnprotectGithubRepoBranchReplyValidationError{}

// Validate checks the field values on ListGithubOrgReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListGithubOrgReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGithubOrgReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGithubOrgReqMultiError, or nil if none found.
func (m *ListGithubOrgReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGithubOrgReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ListGithubOrgReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ListGithubOrgReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ListGithubOrgReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTokenUuid()) < 1 {
		err := ListGithubOrgReqValidationError{
			field:  "TokenUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListGithubOrgReqMultiError(errors)
	}

	return nil
}

// ListGithubOrgReqMultiError is an error wrapping multiple validation errors
// returned by ListGithubOrgReq.ValidateAll() if the designated constraints
// aren't met.
type ListGithubOrgReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGithubOrgReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGithubOrgReqMultiError) AllErrors() []error { return m }

// ListGithubOrgReqValidationError is the validation error returned by
// ListGithubOrgReq.Validate if the designated constraints aren't met.
type ListGithubOrgReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGithubOrgReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGithubOrgReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGithubOrgReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGithubOrgReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGithubOrgReqValidationError) ErrorName() string { return "ListGithubOrgReqValidationError" }

// Error satisfies the builtin error interface
func (e ListGithubOrgReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGithubOrgReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGithubOrgReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGithubOrgReqValidationError{}

// Validate checks the field values on ListGithubOrgReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGithubOrgReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGithubOrgReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGithubOrgReplyMultiError, or nil if none found.
func (m *ListGithubOrgReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGithubOrgReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrgs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGithubOrgReplyValidationError{
						field:  fmt.Sprintf("Orgs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGithubOrgReplyValidationError{
						field:  fmt.Sprintf("Orgs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGithubOrgReplyValidationError{
					field:  fmt.Sprintf("Orgs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListGithubOrgReplyMultiError(errors)
	}

	return nil
}

// ListGithubOrgReplyMultiError is an error wrapping multiple validation errors
// returned by ListGithubOrgReply.ValidateAll() if the designated constraints
// aren't met.
type ListGithubOrgReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGithubOrgReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGithubOrgReplyMultiError) AllErrors() []error { return m }

// ListGithubOrgReplyValidationError is the validation error returned by
// ListGithubOrgReply.Validate if the designated constraints aren't met.
type ListGithubOrgReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGithubOrgReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGithubOrgReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGithubOrgReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGithubOrgReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGithubOrgReplyValidationError) ErrorName() string {
	return "ListGithubOrgReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListGithubOrgReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGithubOrgReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGithubOrgReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGithubOrgReplyValidationError{}

// Validate checks the field values on ListGithubRepoByOrgReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGithubRepoByOrgReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGithubRepoByOrgReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGithubRepoByOrgReqMultiError, or nil if none found.
func (m *ListGithubRepoByOrgReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGithubRepoByOrgReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ListGithubRepoByOrgReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ListGithubRepoByOrgReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ListGithubRepoByOrgReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTokenUuid()) < 1 {
		err := ListGithubRepoByOrgReqValidationError{
			field:  "TokenUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgName()) < 1 {
		err := ListGithubRepoByOrgReqValidationError{
			field:  "OrgName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for RType

	if len(errors) > 0 {
		return ListGithubRepoByOrgReqMultiError(errors)
	}

	return nil
}

// ListGithubRepoByOrgReqMultiError is an error wrapping multiple validation
// errors returned by ListGithubRepoByOrgReq.ValidateAll() if the designated
// constraints aren't met.
type ListGithubRepoByOrgReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGithubRepoByOrgReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGithubRepoByOrgReqMultiError) AllErrors() []error { return m }

// ListGithubRepoByOrgReqValidationError is the validation error returned by
// ListGithubRepoByOrgReq.Validate if the designated constraints aren't met.
type ListGithubRepoByOrgReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGithubRepoByOrgReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGithubRepoByOrgReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGithubRepoByOrgReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGithubRepoByOrgReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGithubRepoByOrgReqValidationError) ErrorName() string {
	return "ListGithubRepoByOrgReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListGithubRepoByOrgReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGithubRepoByOrgReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGithubRepoByOrgReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGithubRepoByOrgReqValidationError{}

// Validate checks the field values on ListGithubRepoByOrgReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGithubRepoByOrgReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGithubRepoByOrgReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGithubRepoByOrgReplyMultiError, or nil if none found.
func (m *ListGithubRepoByOrgReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGithubRepoByOrgReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Org

	for idx, item := range m.GetRepoOrg() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGithubRepoByOrgReplyValidationError{
						field:  fmt.Sprintf("RepoOrg[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGithubRepoByOrgReplyValidationError{
						field:  fmt.Sprintf("RepoOrg[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGithubRepoByOrgReplyValidationError{
					field:  fmt.Sprintf("RepoOrg[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListGithubRepoByOrgReplyMultiError(errors)
	}

	return nil
}

// ListGithubRepoByOrgReplyMultiError is an error wrapping multiple validation
// errors returned by ListGithubRepoByOrgReply.ValidateAll() if the designated
// constraints aren't met.
type ListGithubRepoByOrgReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGithubRepoByOrgReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGithubRepoByOrgReplyMultiError) AllErrors() []error { return m }

// ListGithubRepoByOrgReplyValidationError is the validation error returned by
// ListGithubRepoByOrgReply.Validate if the designated constraints aren't met.
type ListGithubRepoByOrgReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGithubRepoByOrgReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGithubRepoByOrgReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGithubRepoByOrgReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGithubRepoByOrgReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGithubRepoByOrgReplyValidationError) ErrorName() string {
	return "ListGithubRepoByOrgReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListGithubRepoByOrgReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGithubRepoByOrgReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGithubRepoByOrgReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGithubRepoByOrgReplyValidationError{}

// Validate checks the field values on GetGithubUserReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetGithubUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGithubUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGithubUserReqMultiError, or nil if none found.
func (m *GetGithubUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGithubUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetToken()) < 1 {
		err := GetGithubUserReqValidationError{
			field:  "Token",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetGithubUserReqMultiError(errors)
	}

	return nil
}

// GetGithubUserReqMultiError is an error wrapping multiple validation errors
// returned by GetGithubUserReq.ValidateAll() if the designated constraints
// aren't met.
type GetGithubUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGithubUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGithubUserReqMultiError) AllErrors() []error { return m }

// GetGithubUserReqValidationError is the validation error returned by
// GetGithubUserReq.Validate if the designated constraints aren't met.
type GetGithubUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGithubUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGithubUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGithubUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGithubUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGithubUserReqValidationError) ErrorName() string { return "GetGithubUserReqValidationError" }

// Error satisfies the builtin error interface
func (e GetGithubUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGithubUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGithubUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGithubUserReqValidationError{}

// Validate checks the field values on GetGithubUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGithubUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGithubUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGithubUserReplyMultiError, or nil if none found.
func (m *GetGithubUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGithubUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Email

	// no validation rules for PublicRepos

	// no validation rules for PrivateRepos

	// no validation rules for Followers

	// no validation rules for Following

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return GetGithubUserReplyMultiError(errors)
	}

	return nil
}

// GetGithubUserReplyMultiError is an error wrapping multiple validation errors
// returned by GetGithubUserReply.ValidateAll() if the designated constraints
// aren't met.
type GetGithubUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGithubUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGithubUserReplyMultiError) AllErrors() []error { return m }

// GetGithubUserReplyValidationError is the validation error returned by
// GetGithubUserReply.Validate if the designated constraints aren't met.
type GetGithubUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGithubUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGithubUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGithubUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGithubUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGithubUserReplyValidationError) ErrorName() string {
	return "GetGithubUserReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetGithubUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGithubUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGithubUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGithubUserReplyValidationError{}

// Validate checks the field values on CreateServiceUrlReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateServiceUrlReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateServiceUrlReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateServiceUrlReqMultiError, or nil if none found.
func (m *CreateServiceUrlReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateServiceUrlReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := CreateServiceUrlReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := CreateServiceUrlReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := CreateServiceUrlReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := CreateServiceUrlReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateServiceUrlReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUrl()) < 1 {
		err := CreateServiceUrlReqValidationError{
			field:  "Url",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Describe

	if len(errors) > 0 {
		return CreateServiceUrlReqMultiError(errors)
	}

	return nil
}

// CreateServiceUrlReqMultiError is an error wrapping multiple validation
// errors returned by CreateServiceUrlReq.ValidateAll() if the designated
// constraints aren't met.
type CreateServiceUrlReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateServiceUrlReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateServiceUrlReqMultiError) AllErrors() []error { return m }

// CreateServiceUrlReqValidationError is the validation error returned by
// CreateServiceUrlReq.Validate if the designated constraints aren't met.
type CreateServiceUrlReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceUrlReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceUrlReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceUrlReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceUrlReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceUrlReqValidationError) ErrorName() string {
	return "CreateServiceUrlReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceUrlReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceUrlReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceUrlReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceUrlReqValidationError{}

// Validate checks the field values on CreateServiceUrlReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateServiceUrlReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateServiceUrlReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateServiceUrlReplyMultiError, or nil if none found.
func (m *CreateServiceUrlReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateServiceUrlReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return CreateServiceUrlReplyMultiError(errors)
	}

	return nil
}

// CreateServiceUrlReplyMultiError is an error wrapping multiple validation
// errors returned by CreateServiceUrlReply.ValidateAll() if the designated
// constraints aren't met.
type CreateServiceUrlReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateServiceUrlReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateServiceUrlReplyMultiError) AllErrors() []error { return m }

// CreateServiceUrlReplyValidationError is the validation error returned by
// CreateServiceUrlReply.Validate if the designated constraints aren't met.
type CreateServiceUrlReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceUrlReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceUrlReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceUrlReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceUrlReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceUrlReplyValidationError) ErrorName() string {
	return "CreateServiceUrlReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceUrlReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceUrlReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceUrlReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceUrlReplyValidationError{}

// Validate checks the field values on ListServiceUrlReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListServiceUrlReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServiceUrlReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListServiceUrlReqMultiError, or nil if none found.
func (m *ListServiceUrlReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServiceUrlReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ListServiceUrlReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ListServiceUrlReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ListServiceUrlReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := ListServiceUrlReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListServiceUrlReqMultiError(errors)
	}

	return nil
}

// ListServiceUrlReqMultiError is an error wrapping multiple validation errors
// returned by ListServiceUrlReq.ValidateAll() if the designated constraints
// aren't met.
type ListServiceUrlReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServiceUrlReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServiceUrlReqMultiError) AllErrors() []error { return m }

// ListServiceUrlReqValidationError is the validation error returned by
// ListServiceUrlReq.Validate if the designated constraints aren't met.
type ListServiceUrlReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceUrlReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceUrlReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceUrlReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceUrlReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceUrlReqValidationError) ErrorName() string {
	return "ListServiceUrlReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceUrlReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceUrlReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceUrlReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceUrlReqValidationError{}

// Validate checks the field values on ListServiceUrlReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListServiceUrlReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServiceUrlReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListServiceUrlReplyMultiError, or nil if none found.
func (m *ListServiceUrlReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServiceUrlReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetServiceUrls() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListServiceUrlReplyValidationError{
						field:  fmt.Sprintf("ServiceUrls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListServiceUrlReplyValidationError{
						field:  fmt.Sprintf("ServiceUrls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListServiceUrlReplyValidationError{
					field:  fmt.Sprintf("ServiceUrls[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListServiceUrlReplyMultiError(errors)
	}

	return nil
}

// ListServiceUrlReplyMultiError is an error wrapping multiple validation
// errors returned by ListServiceUrlReply.ValidateAll() if the designated
// constraints aren't met.
type ListServiceUrlReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServiceUrlReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServiceUrlReplyMultiError) AllErrors() []error { return m }

// ListServiceUrlReplyValidationError is the validation error returned by
// ListServiceUrlReply.Validate if the designated constraints aren't met.
type ListServiceUrlReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceUrlReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceUrlReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceUrlReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceUrlReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceUrlReplyValidationError) ErrorName() string {
	return "ListServiceUrlReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceUrlReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceUrlReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceUrlReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceUrlReplyValidationError{}

// Validate checks the field values on DelServiceUrlReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DelServiceUrlReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelServiceUrlReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelServiceUrlReqMultiError, or nil if none found.
func (m *DelServiceUrlReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelServiceUrlReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := DelServiceUrlReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := DelServiceUrlReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := DelServiceUrlReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := DelServiceUrlReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetServiceUrlUuid()) < 1 {
		err := DelServiceUrlReqValidationError{
			field:  "ServiceUrlUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelServiceUrlReqMultiError(errors)
	}

	return nil
}

// DelServiceUrlReqMultiError is an error wrapping multiple validation errors
// returned by DelServiceUrlReq.ValidateAll() if the designated constraints
// aren't met.
type DelServiceUrlReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelServiceUrlReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelServiceUrlReqMultiError) AllErrors() []error { return m }

// DelServiceUrlReqValidationError is the validation error returned by
// DelServiceUrlReq.Validate if the designated constraints aren't met.
type DelServiceUrlReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelServiceUrlReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelServiceUrlReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelServiceUrlReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelServiceUrlReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelServiceUrlReqValidationError) ErrorName() string { return "DelServiceUrlReqValidationError" }

// Error satisfies the builtin error interface
func (e DelServiceUrlReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelServiceUrlReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelServiceUrlReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelServiceUrlReqValidationError{}

// Validate checks the field values on DelServiceUrlReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelServiceUrlReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelServiceUrlReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelServiceUrlReplyMultiError, or nil if none found.
func (m *DelServiceUrlReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DelServiceUrlReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return DelServiceUrlReplyMultiError(errors)
	}

	return nil
}

// DelServiceUrlReplyMultiError is an error wrapping multiple validation errors
// returned by DelServiceUrlReply.ValidateAll() if the designated constraints
// aren't met.
type DelServiceUrlReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelServiceUrlReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelServiceUrlReplyMultiError) AllErrors() []error { return m }

// DelServiceUrlReplyValidationError is the validation error returned by
// DelServiceUrlReply.Validate if the designated constraints aren't met.
type DelServiceUrlReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelServiceUrlReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelServiceUrlReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelServiceUrlReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelServiceUrlReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelServiceUrlReplyValidationError) ErrorName() string {
	return "DelServiceUrlReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DelServiceUrlReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelServiceUrlReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelServiceUrlReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelServiceUrlReplyValidationError{}

// Validate checks the field values on AddContainerRegistryReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddContainerRegistryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddContainerRegistryReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddContainerRegistryReqMultiError, or nil if none found.
func (m *AddContainerRegistryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddContainerRegistryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := AddContainerRegistryReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := AddContainerRegistryReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := AddContainerRegistryReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUrl()) < 1 {
		err := AddContainerRegistryReqValidationError{
			field:  "Url",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUsername()) < 1 {
		err := AddContainerRegistryReqValidationError{
			field:  "Username",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 1 {
		err := AddContainerRegistryReqValidationError{
			field:  "Password",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = AddContainerRegistryReqValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddContainerRegistryReqMultiError(errors)
	}

	return nil
}

func (m *AddContainerRegistryReq) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *AddContainerRegistryReq) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// AddContainerRegistryReqMultiError is an error wrapping multiple validation
// errors returned by AddContainerRegistryReq.ValidateAll() if the designated
// constraints aren't met.
type AddContainerRegistryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddContainerRegistryReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddContainerRegistryReqMultiError) AllErrors() []error { return m }

// AddContainerRegistryReqValidationError is the validation error returned by
// AddContainerRegistryReq.Validate if the designated constraints aren't met.
type AddContainerRegistryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddContainerRegistryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddContainerRegistryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddContainerRegistryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddContainerRegistryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddContainerRegistryReqValidationError) ErrorName() string {
	return "AddContainerRegistryReqValidationError"
}

// Error satisfies the builtin error interface
func (e AddContainerRegistryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddContainerRegistryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddContainerRegistryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddContainerRegistryReqValidationError{}

// Validate checks the field values on AddContainerRegistryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddContainerRegistryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddContainerRegistryReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddContainerRegistryReplyMultiError, or nil if none found.
func (m *AddContainerRegistryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddContainerRegistryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return AddContainerRegistryReplyMultiError(errors)
	}

	return nil
}

// AddContainerRegistryReplyMultiError is an error wrapping multiple validation
// errors returned by AddContainerRegistryReply.ValidateAll() if the
// designated constraints aren't met.
type AddContainerRegistryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddContainerRegistryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddContainerRegistryReplyMultiError) AllErrors() []error { return m }

// AddContainerRegistryReplyValidationError is the validation error returned by
// AddContainerRegistryReply.Validate if the designated constraints aren't met.
type AddContainerRegistryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddContainerRegistryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddContainerRegistryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddContainerRegistryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddContainerRegistryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddContainerRegistryReplyValidationError) ErrorName() string {
	return "AddContainerRegistryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AddContainerRegistryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddContainerRegistryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddContainerRegistryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddContainerRegistryReplyValidationError{}

// Validate checks the field values on ListContainerRegistryReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListContainerRegistryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListContainerRegistryReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListContainerRegistryReqMultiError, or nil if none found.
func (m *ListContainerRegistryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListContainerRegistryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ListContainerRegistryReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ListContainerRegistryReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ListContainerRegistryReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListContainerRegistryReqMultiError(errors)
	}

	return nil
}

// ListContainerRegistryReqMultiError is an error wrapping multiple validation
// errors returned by ListContainerRegistryReq.ValidateAll() if the designated
// constraints aren't met.
type ListContainerRegistryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListContainerRegistryReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListContainerRegistryReqMultiError) AllErrors() []error { return m }

// ListContainerRegistryReqValidationError is the validation error returned by
// ListContainerRegistryReq.Validate if the designated constraints aren't met.
type ListContainerRegistryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListContainerRegistryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListContainerRegistryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListContainerRegistryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListContainerRegistryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListContainerRegistryReqValidationError) ErrorName() string {
	return "ListContainerRegistryReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListContainerRegistryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContainerRegistryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListContainerRegistryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListContainerRegistryReqValidationError{}

// Validate checks the field values on ListContainerRegistryReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListContainerRegistryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListContainerRegistryReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListContainerRegistryReplyMultiError, or nil if none found.
func (m *ListContainerRegistryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListContainerRegistryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetContainerRegistry() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListContainerRegistryReplyValidationError{
						field:  fmt.Sprintf("ContainerRegistry[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListContainerRegistryReplyValidationError{
						field:  fmt.Sprintf("ContainerRegistry[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListContainerRegistryReplyValidationError{
					field:  fmt.Sprintf("ContainerRegistry[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListContainerRegistryReplyMultiError(errors)
	}

	return nil
}

// ListContainerRegistryReplyMultiError is an error wrapping multiple
// validation errors returned by ListContainerRegistryReply.ValidateAll() if
// the designated constraints aren't met.
type ListContainerRegistryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListContainerRegistryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListContainerRegistryReplyMultiError) AllErrors() []error { return m }

// ListContainerRegistryReplyValidationError is the validation error returned
// by ListContainerRegistryReply.Validate if the designated constraints aren't met.
type ListContainerRegistryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListContainerRegistryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListContainerRegistryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListContainerRegistryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListContainerRegistryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListContainerRegistryReplyValidationError) ErrorName() string {
	return "ListContainerRegistryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListContainerRegistryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContainerRegistryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListContainerRegistryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListContainerRegistryReplyValidationError{}

// Validate checks the field values on DelContainerRegistryReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelContainerRegistryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelContainerRegistryReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelContainerRegistryReqMultiError, or nil if none found.
func (m *DelContainerRegistryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelContainerRegistryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := DelContainerRegistryReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := DelContainerRegistryReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := DelContainerRegistryReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUuid()) < 1 {
		err := DelContainerRegistryReqValidationError{
			field:  "Uuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelContainerRegistryReqMultiError(errors)
	}

	return nil
}

// DelContainerRegistryReqMultiError is an error wrapping multiple validation
// errors returned by DelContainerRegistryReq.ValidateAll() if the designated
// constraints aren't met.
type DelContainerRegistryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelContainerRegistryReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelContainerRegistryReqMultiError) AllErrors() []error { return m }

// DelContainerRegistryReqValidationError is the validation error returned by
// DelContainerRegistryReq.Validate if the designated constraints aren't met.
type DelContainerRegistryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelContainerRegistryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelContainerRegistryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelContainerRegistryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelContainerRegistryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelContainerRegistryReqValidationError) ErrorName() string {
	return "DelContainerRegistryReqValidationError"
}

// Error satisfies the builtin error interface
func (e DelContainerRegistryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelContainerRegistryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelContainerRegistryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelContainerRegistryReqValidationError{}

// Validate checks the field values on DelContainerRegistryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelContainerRegistryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelContainerRegistryReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelContainerRegistryReplyMultiError, or nil if none found.
func (m *DelContainerRegistryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DelContainerRegistryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return DelContainerRegistryReplyMultiError(errors)
	}

	return nil
}

// DelContainerRegistryReplyMultiError is an error wrapping multiple validation
// errors returned by DelContainerRegistryReply.ValidateAll() if the
// designated constraints aren't met.
type DelContainerRegistryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelContainerRegistryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelContainerRegistryReplyMultiError) AllErrors() []error { return m }

// DelContainerRegistryReplyValidationError is the validation error returned by
// DelContainerRegistryReply.Validate if the designated constraints aren't met.
type DelContainerRegistryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelContainerRegistryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelContainerRegistryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelContainerRegistryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelContainerRegistryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelContainerRegistryReplyValidationError) ErrorName() string {
	return "DelContainerRegistryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DelContainerRegistryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelContainerRegistryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelContainerRegistryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelContainerRegistryReplyValidationError{}

// Validate checks the field values on GetContainerRegistryReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetContainerRegistryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetContainerRegistryReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetContainerRegistryReqMultiError, or nil if none found.
func (m *GetContainerRegistryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetContainerRegistryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := GetContainerRegistryReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := GetContainerRegistryReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUuid()) < 1 {
		err := GetContainerRegistryReqValidationError{
			field:  "Uuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetContainerRegistryReqMultiError(errors)
	}

	return nil
}

// GetContainerRegistryReqMultiError is an error wrapping multiple validation
// errors returned by GetContainerRegistryReq.ValidateAll() if the designated
// constraints aren't met.
type GetContainerRegistryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetContainerRegistryReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetContainerRegistryReqMultiError) AllErrors() []error { return m }

// GetContainerRegistryReqValidationError is the validation error returned by
// GetContainerRegistryReq.Validate if the designated constraints aren't met.
type GetContainerRegistryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetContainerRegistryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetContainerRegistryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetContainerRegistryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetContainerRegistryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetContainerRegistryReqValidationError) ErrorName() string {
	return "GetContainerRegistryReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetContainerRegistryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetContainerRegistryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetContainerRegistryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetContainerRegistryReqValidationError{}

// Validate checks the field values on GetContainerRegistryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetContainerRegistryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetContainerRegistryReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetContainerRegistryReplyMultiError, or nil if none found.
func (m *GetContainerRegistryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetContainerRegistryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for Url

	// no validation rules for Email

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return GetContainerRegistryReplyMultiError(errors)
	}

	return nil
}

// GetContainerRegistryReplyMultiError is an error wrapping multiple validation
// errors returned by GetContainerRegistryReply.ValidateAll() if the
// designated constraints aren't met.
type GetContainerRegistryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetContainerRegistryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetContainerRegistryReplyMultiError) AllErrors() []error { return m }

// GetContainerRegistryReplyValidationError is the validation error returned by
// GetContainerRegistryReply.Validate if the designated constraints aren't met.
type GetContainerRegistryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetContainerRegistryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetContainerRegistryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetContainerRegistryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetContainerRegistryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetContainerRegistryReplyValidationError) ErrorName() string {
	return "GetContainerRegistryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetContainerRegistryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetContainerRegistryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetContainerRegistryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetContainerRegistryReplyValidationError{}

// Validate checks the field values on AddPublicContainerImageReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddPublicContainerImageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddPublicContainerImageReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddPublicContainerImageReqMultiError, or nil if none found.
func (m *AddPublicContainerImageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddPublicContainerImageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := AddPublicContainerImageReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := AddPublicContainerImageReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := AddPublicContainerImageReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := AddPublicContainerImageReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetImageUrl()) < 1 {
		err := AddPublicContainerImageReqValidationError{
			field:  "ImageUrl",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Describe

	if len(errors) > 0 {
		return AddPublicContainerImageReqMultiError(errors)
	}

	return nil
}

// AddPublicContainerImageReqMultiError is an error wrapping multiple
// validation errors returned by AddPublicContainerImageReq.ValidateAll() if
// the designated constraints aren't met.
type AddPublicContainerImageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddPublicContainerImageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddPublicContainerImageReqMultiError) AllErrors() []error { return m }

// AddPublicContainerImageReqValidationError is the validation error returned
// by AddPublicContainerImageReq.Validate if the designated constraints aren't met.
type AddPublicContainerImageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddPublicContainerImageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddPublicContainerImageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddPublicContainerImageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddPublicContainerImageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddPublicContainerImageReqValidationError) ErrorName() string {
	return "AddPublicContainerImageReqValidationError"
}

// Error satisfies the builtin error interface
func (e AddPublicContainerImageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddPublicContainerImageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddPublicContainerImageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddPublicContainerImageReqValidationError{}

// Validate checks the field values on AddPublicContainerImageReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddPublicContainerImageReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddPublicContainerImageReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddPublicContainerImageReplyMultiError, or nil if none found.
func (m *AddPublicContainerImageReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddPublicContainerImageReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return AddPublicContainerImageReplyMultiError(errors)
	}

	return nil
}

// AddPublicContainerImageReplyMultiError is an error wrapping multiple
// validation errors returned by AddPublicContainerImageReply.ValidateAll() if
// the designated constraints aren't met.
type AddPublicContainerImageReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddPublicContainerImageReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddPublicContainerImageReplyMultiError) AllErrors() []error { return m }

// AddPublicContainerImageReplyValidationError is the validation error returned
// by AddPublicContainerImageReply.Validate if the designated constraints
// aren't met.
type AddPublicContainerImageReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddPublicContainerImageReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddPublicContainerImageReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddPublicContainerImageReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddPublicContainerImageReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddPublicContainerImageReplyValidationError) ErrorName() string {
	return "AddPublicContainerImageReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AddPublicContainerImageReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddPublicContainerImageReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddPublicContainerImageReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddPublicContainerImageReplyValidationError{}

// Validate checks the field values on ListPublicContainerImageReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPublicContainerImageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPublicContainerImageReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPublicContainerImageReqMultiError, or nil if none found.
func (m *ListPublicContainerImageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPublicContainerImageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ListPublicContainerImageReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ListPublicContainerImageReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ListPublicContainerImageReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Keyword

	if len(errors) > 0 {
		return ListPublicContainerImageReqMultiError(errors)
	}

	return nil
}

// ListPublicContainerImageReqMultiError is an error wrapping multiple
// validation errors returned by ListPublicContainerImageReq.ValidateAll() if
// the designated constraints aren't met.
type ListPublicContainerImageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPublicContainerImageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPublicContainerImageReqMultiError) AllErrors() []error { return m }

// ListPublicContainerImageReqValidationError is the validation error returned
// by ListPublicContainerImageReq.Validate if the designated constraints
// aren't met.
type ListPublicContainerImageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPublicContainerImageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPublicContainerImageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPublicContainerImageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPublicContainerImageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPublicContainerImageReqValidationError) ErrorName() string {
	return "ListPublicContainerImageReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListPublicContainerImageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPublicContainerImageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPublicContainerImageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPublicContainerImageReqValidationError{}

// Validate checks the field values on ListPublicContainerImageReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPublicContainerImageReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPublicContainerImageReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListPublicContainerImageReplyMultiError, or nil if none found.
func (m *ListPublicContainerImageReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPublicContainerImageReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetContainerImage() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPublicContainerImageReplyValidationError{
						field:  fmt.Sprintf("ContainerImage[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPublicContainerImageReplyValidationError{
						field:  fmt.Sprintf("ContainerImage[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPublicContainerImageReplyValidationError{
					field:  fmt.Sprintf("ContainerImage[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPublicContainerImageReplyMultiError(errors)
	}

	return nil
}

// ListPublicContainerImageReplyMultiError is an error wrapping multiple
// validation errors returned by ListPublicContainerImageReply.ValidateAll()
// if the designated constraints aren't met.
type ListPublicContainerImageReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPublicContainerImageReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPublicContainerImageReplyMultiError) AllErrors() []error { return m }

// ListPublicContainerImageReplyValidationError is the validation error
// returned by ListPublicContainerImageReply.Validate if the designated
// constraints aren't met.
type ListPublicContainerImageReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPublicContainerImageReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPublicContainerImageReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPublicContainerImageReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPublicContainerImageReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPublicContainerImageReplyValidationError) ErrorName() string {
	return "ListPublicContainerImageReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListPublicContainerImageReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPublicContainerImageReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPublicContainerImageReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPublicContainerImageReplyValidationError{}

// Validate checks the field values on DelPublicContainerImageReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelPublicContainerImageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelPublicContainerImageReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelPublicContainerImageReqMultiError, or nil if none found.
func (m *DelPublicContainerImageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelPublicContainerImageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := DelPublicContainerImageReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := DelPublicContainerImageReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := DelPublicContainerImageReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetContainerImageUuid()) < 1 {
		err := DelPublicContainerImageReqValidationError{
			field:  "ContainerImageUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelPublicContainerImageReqMultiError(errors)
	}

	return nil
}

// DelPublicContainerImageReqMultiError is an error wrapping multiple
// validation errors returned by DelPublicContainerImageReq.ValidateAll() if
// the designated constraints aren't met.
type DelPublicContainerImageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelPublicContainerImageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelPublicContainerImageReqMultiError) AllErrors() []error { return m }

// DelPublicContainerImageReqValidationError is the validation error returned
// by DelPublicContainerImageReq.Validate if the designated constraints aren't met.
type DelPublicContainerImageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelPublicContainerImageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelPublicContainerImageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelPublicContainerImageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelPublicContainerImageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelPublicContainerImageReqValidationError) ErrorName() string {
	return "DelPublicContainerImageReqValidationError"
}

// Error satisfies the builtin error interface
func (e DelPublicContainerImageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelPublicContainerImageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelPublicContainerImageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelPublicContainerImageReqValidationError{}

// Validate checks the field values on DelPublicContainerImageReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelPublicContainerImageReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelPublicContainerImageReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelPublicContainerImageReplyMultiError, or nil if none found.
func (m *DelPublicContainerImageReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DelPublicContainerImageReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return DelPublicContainerImageReplyMultiError(errors)
	}

	return nil
}

// DelPublicContainerImageReplyMultiError is an error wrapping multiple
// validation errors returned by DelPublicContainerImageReply.ValidateAll() if
// the designated constraints aren't met.
type DelPublicContainerImageReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelPublicContainerImageReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelPublicContainerImageReplyMultiError) AllErrors() []error { return m }

// DelPublicContainerImageReplyValidationError is the validation error returned
// by DelPublicContainerImageReply.Validate if the designated constraints
// aren't met.
type DelPublicContainerImageReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelPublicContainerImageReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelPublicContainerImageReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelPublicContainerImageReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelPublicContainerImageReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelPublicContainerImageReplyValidationError) ErrorName() string {
	return "DelPublicContainerImageReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DelPublicContainerImageReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelPublicContainerImageReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelPublicContainerImageReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelPublicContainerImageReplyValidationError{}

// Validate checks the field values on CreateReliabilityReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateReliabilityReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateReliabilityReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateReliabilityReqMultiError, or nil if none found.
func (m *CreateReliabilityReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReliabilityReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := CreateReliabilityReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for DailyTime

	// no validation rules for ReliabilityPercent

	if len(errors) > 0 {
		return CreateReliabilityReqMultiError(errors)
	}

	return nil
}

// CreateReliabilityReqMultiError is an error wrapping multiple validation
// errors returned by CreateReliabilityReq.ValidateAll() if the designated
// constraints aren't met.
type CreateReliabilityReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReliabilityReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReliabilityReqMultiError) AllErrors() []error { return m }

// CreateReliabilityReqValidationError is the validation error returned by
// CreateReliabilityReq.Validate if the designated constraints aren't met.
type CreateReliabilityReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReliabilityReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReliabilityReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReliabilityReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReliabilityReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReliabilityReqValidationError) ErrorName() string {
	return "CreateReliabilityReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateReliabilityReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReliabilityReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReliabilityReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReliabilityReqValidationError{}

// Validate checks the field values on CreateReliabilityReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateReliabilityReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateReliabilityReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateReliabilityReplyMultiError, or nil if none found.
func (m *CreateReliabilityReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReliabilityReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return CreateReliabilityReplyMultiError(errors)
	}

	return nil
}

// CreateReliabilityReplyMultiError is an error wrapping multiple validation
// errors returned by CreateReliabilityReply.ValidateAll() if the designated
// constraints aren't met.
type CreateReliabilityReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReliabilityReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReliabilityReplyMultiError) AllErrors() []error { return m }

// CreateReliabilityReplyValidationError is the validation error returned by
// CreateReliabilityReply.Validate if the designated constraints aren't met.
type CreateReliabilityReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReliabilityReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReliabilityReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReliabilityReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReliabilityReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReliabilityReplyValidationError) ErrorName() string {
	return "CreateReliabilityReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateReliabilityReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReliabilityReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReliabilityReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReliabilityReplyValidationError{}

// Validate checks the field values on GetReliabilityReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetReliabilityReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReliabilityReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReliabilityReqMultiError, or nil if none found.
func (m *GetReliabilityReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReliabilityReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := GetReliabilityReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := GetReliabilityReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Days

	if len(errors) > 0 {
		return GetReliabilityReqMultiError(errors)
	}

	return nil
}

// GetReliabilityReqMultiError is an error wrapping multiple validation errors
// returned by GetReliabilityReq.ValidateAll() if the designated constraints
// aren't met.
type GetReliabilityReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReliabilityReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReliabilityReqMultiError) AllErrors() []error { return m }

// GetReliabilityReqValidationError is the validation error returned by
// GetReliabilityReq.Validate if the designated constraints aren't met.
type GetReliabilityReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReliabilityReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReliabilityReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReliabilityReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReliabilityReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReliabilityReqValidationError) ErrorName() string {
	return "GetReliabilityReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetReliabilityReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReliabilityReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReliabilityReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReliabilityReqValidationError{}

// Validate checks the field values on GetReliabilityReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReliabilityReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReliabilityReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReliabilityReplyMultiError, or nil if none found.
func (m *GetReliabilityReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReliabilityReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetReliability() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetReliabilityReplyValidationError{
						field:  fmt.Sprintf("Reliability[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetReliabilityReplyValidationError{
						field:  fmt.Sprintf("Reliability[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetReliabilityReplyValidationError{
					field:  fmt.Sprintf("Reliability[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetReliabilityReplyMultiError(errors)
	}

	return nil
}

// GetReliabilityReplyMultiError is an error wrapping multiple validation
// errors returned by GetReliabilityReply.ValidateAll() if the designated
// constraints aren't met.
type GetReliabilityReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReliabilityReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReliabilityReplyMultiError) AllErrors() []error { return m }

// GetReliabilityReplyValidationError is the validation error returned by
// GetReliabilityReply.Validate if the designated constraints aren't met.
type GetReliabilityReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReliabilityReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReliabilityReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReliabilityReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReliabilityReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReliabilityReplyValidationError) ErrorName() string {
	return "GetReliabilityReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetReliabilityReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReliabilityReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReliabilityReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReliabilityReplyValidationError{}

// Validate checks the field values on CreateWebServiceResourceReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWebServiceResourceReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWebServiceResourceReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWebServiceResourceReqMultiError, or nil if none found.
func (m *CreateWebServiceResourceReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWebServiceResourceReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := CreateWebServiceResourceReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := CreateWebServiceResourceReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := CreateWebServiceResourceReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := CreateWebServiceResourceReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Protocol

	if utf8.RuneCountInString(m.GetServerName()) < 1 {
		err := CreateWebServiceResourceReqValidationError{
			field:  "ServerName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for HealthCheckUri

	// no validation rules for Describe

	if len(errors) > 0 {
		return CreateWebServiceResourceReqMultiError(errors)
	}

	return nil
}

// CreateWebServiceResourceReqMultiError is an error wrapping multiple
// validation errors returned by CreateWebServiceResourceReq.ValidateAll() if
// the designated constraints aren't met.
type CreateWebServiceResourceReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWebServiceResourceReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWebServiceResourceReqMultiError) AllErrors() []error { return m }

// CreateWebServiceResourceReqValidationError is the validation error returned
// by CreateWebServiceResourceReq.Validate if the designated constraints
// aren't met.
type CreateWebServiceResourceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWebServiceResourceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWebServiceResourceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWebServiceResourceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWebServiceResourceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWebServiceResourceReqValidationError) ErrorName() string {
	return "CreateWebServiceResourceReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWebServiceResourceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWebServiceResourceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWebServiceResourceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWebServiceResourceReqValidationError{}

// Validate checks the field values on CreateWebServiceResourceReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWebServiceResourceReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWebServiceResourceReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateWebServiceResourceReplyMultiError, or nil if none found.
func (m *CreateWebServiceResourceReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWebServiceResourceReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return CreateWebServiceResourceReplyMultiError(errors)
	}

	return nil
}

// CreateWebServiceResourceReplyMultiError is an error wrapping multiple
// validation errors returned by CreateWebServiceResourceReply.ValidateAll()
// if the designated constraints aren't met.
type CreateWebServiceResourceReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWebServiceResourceReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWebServiceResourceReplyMultiError) AllErrors() []error { return m }

// CreateWebServiceResourceReplyValidationError is the validation error
// returned by CreateWebServiceResourceReply.Validate if the designated
// constraints aren't met.
type CreateWebServiceResourceReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWebServiceResourceReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWebServiceResourceReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWebServiceResourceReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWebServiceResourceReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWebServiceResourceReplyValidationError) ErrorName() string {
	return "CreateWebServiceResourceReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWebServiceResourceReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWebServiceResourceReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWebServiceResourceReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWebServiceResourceReplyValidationError{}

// Validate checks the field values on ListWebServiceResourceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWebServiceResourceReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWebServiceResourceReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWebServiceResourceReqMultiError, or nil if none found.
func (m *ListWebServiceResourceReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWebServiceResourceReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ListWebServiceResourceReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ListWebServiceResourceReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ListWebServiceResourceReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := ListWebServiceResourceReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListWebServiceResourceReqMultiError(errors)
	}

	return nil
}

// ListWebServiceResourceReqMultiError is an error wrapping multiple validation
// errors returned by ListWebServiceResourceReq.ValidateAll() if the
// designated constraints aren't met.
type ListWebServiceResourceReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWebServiceResourceReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWebServiceResourceReqMultiError) AllErrors() []error { return m }

// ListWebServiceResourceReqValidationError is the validation error returned by
// ListWebServiceResourceReq.Validate if the designated constraints aren't met.
type ListWebServiceResourceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWebServiceResourceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWebServiceResourceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWebServiceResourceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWebServiceResourceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWebServiceResourceReqValidationError) ErrorName() string {
	return "ListWebServiceResourceReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListWebServiceResourceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWebServiceResourceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWebServiceResourceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWebServiceResourceReqValidationError{}

// Validate checks the field values on ListWebServiceResourceReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWebServiceResourceReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWebServiceResourceReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWebServiceResourceReplyMultiError, or nil if none found.
func (m *ListWebServiceResourceReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWebServiceResourceReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetWebServiceResource() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWebServiceResourceReplyValidationError{
						field:  fmt.Sprintf("WebServiceResource[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWebServiceResourceReplyValidationError{
						field:  fmt.Sprintf("WebServiceResource[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWebServiceResourceReplyValidationError{
					field:  fmt.Sprintf("WebServiceResource[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListWebServiceResourceReplyMultiError(errors)
	}

	return nil
}

// ListWebServiceResourceReplyMultiError is an error wrapping multiple
// validation errors returned by ListWebServiceResourceReply.ValidateAll() if
// the designated constraints aren't met.
type ListWebServiceResourceReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWebServiceResourceReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWebServiceResourceReplyMultiError) AllErrors() []error { return m }

// ListWebServiceResourceReplyValidationError is the validation error returned
// by ListWebServiceResourceReply.Validate if the designated constraints
// aren't met.
type ListWebServiceResourceReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWebServiceResourceReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWebServiceResourceReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWebServiceResourceReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWebServiceResourceReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWebServiceResourceReplyValidationError) ErrorName() string {
	return "ListWebServiceResourceReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListWebServiceResourceReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWebServiceResourceReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWebServiceResourceReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWebServiceResourceReplyValidationError{}

// Validate checks the field values on DelWebServiceResourceReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelWebServiceResourceReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelWebServiceResourceReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelWebServiceResourceReqMultiError, or nil if none found.
func (m *DelWebServiceResourceReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelWebServiceResourceReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := DelWebServiceResourceReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := DelWebServiceResourceReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := DelWebServiceResourceReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUuid()) < 1 {
		err := DelWebServiceResourceReqValidationError{
			field:  "Uuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelWebServiceResourceReqMultiError(errors)
	}

	return nil
}

// DelWebServiceResourceReqMultiError is an error wrapping multiple validation
// errors returned by DelWebServiceResourceReq.ValidateAll() if the designated
// constraints aren't met.
type DelWebServiceResourceReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelWebServiceResourceReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelWebServiceResourceReqMultiError) AllErrors() []error { return m }

// DelWebServiceResourceReqValidationError is the validation error returned by
// DelWebServiceResourceReq.Validate if the designated constraints aren't met.
type DelWebServiceResourceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelWebServiceResourceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelWebServiceResourceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelWebServiceResourceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelWebServiceResourceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelWebServiceResourceReqValidationError) ErrorName() string {
	return "DelWebServiceResourceReqValidationError"
}

// Error satisfies the builtin error interface
func (e DelWebServiceResourceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelWebServiceResourceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelWebServiceResourceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelWebServiceResourceReqValidationError{}

// Validate checks the field values on DelWebServiceResourceReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelWebServiceResourceReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelWebServiceResourceReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelWebServiceResourceReplyMultiError, or nil if none found.
func (m *DelWebServiceResourceReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DelWebServiceResourceReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return DelWebServiceResourceReplyMultiError(errors)
	}

	return nil
}

// DelWebServiceResourceReplyMultiError is an error wrapping multiple
// validation errors returned by DelWebServiceResourceReply.ValidateAll() if
// the designated constraints aren't met.
type DelWebServiceResourceReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelWebServiceResourceReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelWebServiceResourceReplyMultiError) AllErrors() []error { return m }

// DelWebServiceResourceReplyValidationError is the validation error returned
// by DelWebServiceResourceReply.Validate if the designated constraints aren't met.
type DelWebServiceResourceReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelWebServiceResourceReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelWebServiceResourceReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelWebServiceResourceReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelWebServiceResourceReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelWebServiceResourceReplyValidationError) ErrorName() string {
	return "DelWebServiceResourceReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DelWebServiceResourceReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelWebServiceResourceReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelWebServiceResourceReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelWebServiceResourceReplyValidationError{}

// Validate checks the field values on UpdateWebServiceResourceReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWebServiceResourceReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWebServiceResourceReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateWebServiceResourceReqMultiError, or nil if none found.
func (m *UpdateWebServiceResourceReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWebServiceResourceReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := UpdateWebServiceResourceReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := UpdateWebServiceResourceReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := UpdateWebServiceResourceReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUuid()) < 1 {
		err := UpdateWebServiceResourceReqValidationError{
			field:  "Uuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Protocol

	// no validation rules for ServerName

	// no validation rules for HealthCheckUri

	// no validation rules for Describe

	if len(errors) > 0 {
		return UpdateWebServiceResourceReqMultiError(errors)
	}

	return nil
}

// UpdateWebServiceResourceReqMultiError is an error wrapping multiple
// validation errors returned by UpdateWebServiceResourceReq.ValidateAll() if
// the designated constraints aren't met.
type UpdateWebServiceResourceReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWebServiceResourceReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWebServiceResourceReqMultiError) AllErrors() []error { return m }

// UpdateWebServiceResourceReqValidationError is the validation error returned
// by UpdateWebServiceResourceReq.Validate if the designated constraints
// aren't met.
type UpdateWebServiceResourceReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWebServiceResourceReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWebServiceResourceReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWebServiceResourceReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWebServiceResourceReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWebServiceResourceReqValidationError) ErrorName() string {
	return "UpdateWebServiceResourceReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWebServiceResourceReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWebServiceResourceReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWebServiceResourceReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWebServiceResourceReqValidationError{}

// Validate checks the field values on UpdateWebServiceResourceReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWebServiceResourceReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWebServiceResourceReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateWebServiceResourceReplyMultiError, or nil if none found.
func (m *UpdateWebServiceResourceReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWebServiceResourceReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return UpdateWebServiceResourceReplyMultiError(errors)
	}

	return nil
}

// UpdateWebServiceResourceReplyMultiError is an error wrapping multiple
// validation errors returned by UpdateWebServiceResourceReply.ValidateAll()
// if the designated constraints aren't met.
type UpdateWebServiceResourceReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWebServiceResourceReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWebServiceResourceReplyMultiError) AllErrors() []error { return m }

// UpdateWebServiceResourceReplyValidationError is the validation error
// returned by UpdateWebServiceResourceReply.Validate if the designated
// constraints aren't met.
type UpdateWebServiceResourceReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWebServiceResourceReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWebServiceResourceReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWebServiceResourceReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWebServiceResourceReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWebServiceResourceReplyValidationError) ErrorName() string {
	return "UpdateWebServiceResourceReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWebServiceResourceReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWebServiceResourceReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWebServiceResourceReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWebServiceResourceReplyValidationError{}

// Validate checks the field values on GetWebServiceResourcePromSDReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWebServiceResourcePromSDReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWebServiceResourcePromSDReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetWebServiceResourcePromSDReqMultiError, or nil if none found.
func (m *GetWebServiceResourcePromSDReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWebServiceResourcePromSDReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := GetWebServiceResourcePromSDReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := GetWebServiceResourcePromSDReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := GetWebServiceResourcePromSDReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetWebServiceResourcePromSDReqMultiError(errors)
	}

	return nil
}

// GetWebServiceResourcePromSDReqMultiError is an error wrapping multiple
// validation errors returned by GetWebServiceResourcePromSDReq.ValidateAll()
// if the designated constraints aren't met.
type GetWebServiceResourcePromSDReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWebServiceResourcePromSDReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWebServiceResourcePromSDReqMultiError) AllErrors() []error { return m }

// GetWebServiceResourcePromSDReqValidationError is the validation error
// returned by GetWebServiceResourcePromSDReq.Validate if the designated
// constraints aren't met.
type GetWebServiceResourcePromSDReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWebServiceResourcePromSDReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWebServiceResourcePromSDReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWebServiceResourcePromSDReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWebServiceResourcePromSDReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWebServiceResourcePromSDReqValidationError) ErrorName() string {
	return "GetWebServiceResourcePromSDReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetWebServiceResourcePromSDReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWebServiceResourcePromSDReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWebServiceResourcePromSDReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWebServiceResourcePromSDReqValidationError{}

// Validate checks the field values on GetWebServiceResourcePromSDReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetWebServiceResourcePromSDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWebServiceResourcePromSDReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetWebServiceResourcePromSDReplyMultiError, or nil if none found.
func (m *GetWebServiceResourcePromSDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWebServiceResourcePromSDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetWebServiceResource() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetWebServiceResourcePromSDReplyValidationError{
						field:  fmt.Sprintf("WebServiceResource[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetWebServiceResourcePromSDReplyValidationError{
						field:  fmt.Sprintf("WebServiceResource[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetWebServiceResourcePromSDReplyValidationError{
					field:  fmt.Sprintf("WebServiceResource[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetWebServiceResourcePromSDReplyMultiError(errors)
	}

	return nil
}

// GetWebServiceResourcePromSDReplyMultiError is an error wrapping multiple
// validation errors returned by
// GetWebServiceResourcePromSDReply.ValidateAll() if the designated
// constraints aren't met.
type GetWebServiceResourcePromSDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWebServiceResourcePromSDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWebServiceResourcePromSDReplyMultiError) AllErrors() []error { return m }

// GetWebServiceResourcePromSDReplyValidationError is the validation error
// returned by GetWebServiceResourcePromSDReply.Validate if the designated
// constraints aren't met.
type GetWebServiceResourcePromSDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWebServiceResourcePromSDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWebServiceResourcePromSDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWebServiceResourcePromSDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWebServiceResourcePromSDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWebServiceResourcePromSDReplyValidationError) ErrorName() string {
	return "GetWebServiceResourcePromSDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetWebServiceResourcePromSDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWebServiceResourcePromSDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWebServiceResourcePromSDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWebServiceResourcePromSDReplyValidationError{}

// Validate checks the field values on SelfGitlabRepoBuildContainerImageReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SelfGitlabRepoBuildContainerImageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SelfGitlabRepoBuildContainerImageReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SelfGitlabRepoBuildContainerImageReqMultiError, or nil if none found.
func (m *SelfGitlabRepoBuildContainerImageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SelfGitlabRepoBuildContainerImageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := SelfGitlabRepoBuildContainerImageReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := SelfGitlabRepoBuildContainerImageReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := SelfGitlabRepoBuildContainerImageReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPlatformUuid()) < 1 {
		err := SelfGitlabRepoBuildContainerImageReqValidationError{
			field:  "PlatformUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRepoUuid()) < 1 {
		err := SelfGitlabRepoBuildContainerImageReqValidationError{
			field:  "RepoUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBranchName()) < 1 {
		err := SelfGitlabRepoBuildContainerImageReqValidationError{
			field:  "BranchName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRegistryUuid()) < 1 {
		err := SelfGitlabRepoBuildContainerImageReqValidationError{
			field:  "RegistryUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDockerfile()) < 1 {
		err := SelfGitlabRepoBuildContainerImageReqValidationError{
			field:  "Dockerfile",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SelfGitlabRepoBuildContainerImageReqMultiError(errors)
	}

	return nil
}

// SelfGitlabRepoBuildContainerImageReqMultiError is an error wrapping multiple
// validation errors returned by
// SelfGitlabRepoBuildContainerImageReq.ValidateAll() if the designated
// constraints aren't met.
type SelfGitlabRepoBuildContainerImageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SelfGitlabRepoBuildContainerImageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SelfGitlabRepoBuildContainerImageReqMultiError) AllErrors() []error { return m }

// SelfGitlabRepoBuildContainerImageReqValidationError is the validation error
// returned by SelfGitlabRepoBuildContainerImageReq.Validate if the designated
// constraints aren't met.
type SelfGitlabRepoBuildContainerImageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SelfGitlabRepoBuildContainerImageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SelfGitlabRepoBuildContainerImageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SelfGitlabRepoBuildContainerImageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SelfGitlabRepoBuildContainerImageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SelfGitlabRepoBuildContainerImageReqValidationError) ErrorName() string {
	return "SelfGitlabRepoBuildContainerImageReqValidationError"
}

// Error satisfies the builtin error interface
func (e SelfGitlabRepoBuildContainerImageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSelfGitlabRepoBuildContainerImageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SelfGitlabRepoBuildContainerImageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SelfGitlabRepoBuildContainerImageReqValidationError{}

// Validate checks the field values on SelfGitlabRepoBuildContainerImageReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SelfGitlabRepoBuildContainerImageReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SelfGitlabRepoBuildContainerImageReply with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// SelfGitlabRepoBuildContainerImageReplyMultiError, or nil if none found.
func (m *SelfGitlabRepoBuildContainerImageReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SelfGitlabRepoBuildContainerImageReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return SelfGitlabRepoBuildContainerImageReplyMultiError(errors)
	}

	return nil
}

// SelfGitlabRepoBuildContainerImageReplyMultiError is an error wrapping
// multiple validation errors returned by
// SelfGitlabRepoBuildContainerImageReply.ValidateAll() if the designated
// constraints aren't met.
type SelfGitlabRepoBuildContainerImageReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SelfGitlabRepoBuildContainerImageReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SelfGitlabRepoBuildContainerImageReplyMultiError) AllErrors() []error { return m }

// SelfGitlabRepoBuildContainerImageReplyValidationError is the validation
// error returned by SelfGitlabRepoBuildContainerImageReply.Validate if the
// designated constraints aren't met.
type SelfGitlabRepoBuildContainerImageReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SelfGitlabRepoBuildContainerImageReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SelfGitlabRepoBuildContainerImageReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SelfGitlabRepoBuildContainerImageReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SelfGitlabRepoBuildContainerImageReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SelfGitlabRepoBuildContainerImageReplyValidationError) ErrorName() string {
	return "SelfGitlabRepoBuildContainerImageReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SelfGitlabRepoBuildContainerImageReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSelfGitlabRepoBuildContainerImageReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SelfGitlabRepoBuildContainerImageReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SelfGitlabRepoBuildContainerImageReplyValidationError{}

// Validate checks the field values on GithubRepoBuildContainerImageReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GithubRepoBuildContainerImageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GithubRepoBuildContainerImageReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GithubRepoBuildContainerImageReqMultiError, or nil if none found.
func (m *GithubRepoBuildContainerImageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GithubRepoBuildContainerImageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := GithubRepoBuildContainerImageReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := GithubRepoBuildContainerImageReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := GithubRepoBuildContainerImageReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRepoUuid()) < 1 {
		err := GithubRepoBuildContainerImageReqValidationError{
			field:  "RepoUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBranchName()) < 1 {
		err := GithubRepoBuildContainerImageReqValidationError{
			field:  "BranchName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRegistryUuid()) < 1 {
		err := GithubRepoBuildContainerImageReqValidationError{
			field:  "RegistryUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDockerfile()) < 1 {
		err := GithubRepoBuildContainerImageReqValidationError{
			field:  "Dockerfile",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GithubRepoBuildContainerImageReqMultiError(errors)
	}

	return nil
}

// GithubRepoBuildContainerImageReqMultiError is an error wrapping multiple
// validation errors returned by
// GithubRepoBuildContainerImageReq.ValidateAll() if the designated
// constraints aren't met.
type GithubRepoBuildContainerImageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GithubRepoBuildContainerImageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GithubRepoBuildContainerImageReqMultiError) AllErrors() []error { return m }

// GithubRepoBuildContainerImageReqValidationError is the validation error
// returned by GithubRepoBuildContainerImageReq.Validate if the designated
// constraints aren't met.
type GithubRepoBuildContainerImageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GithubRepoBuildContainerImageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GithubRepoBuildContainerImageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GithubRepoBuildContainerImageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GithubRepoBuildContainerImageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GithubRepoBuildContainerImageReqValidationError) ErrorName() string {
	return "GithubRepoBuildContainerImageReqValidationError"
}

// Error satisfies the builtin error interface
func (e GithubRepoBuildContainerImageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGithubRepoBuildContainerImageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GithubRepoBuildContainerImageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GithubRepoBuildContainerImageReqValidationError{}

// Validate checks the field values on GithubRepoBuildContainerImageReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GithubRepoBuildContainerImageReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GithubRepoBuildContainerImageReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GithubRepoBuildContainerImageReplyMultiError, or nil if none found.
func (m *GithubRepoBuildContainerImageReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GithubRepoBuildContainerImageReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return GithubRepoBuildContainerImageReplyMultiError(errors)
	}

	return nil
}

// GithubRepoBuildContainerImageReplyMultiError is an error wrapping multiple
// validation errors returned by
// GithubRepoBuildContainerImageReply.ValidateAll() if the designated
// constraints aren't met.
type GithubRepoBuildContainerImageReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GithubRepoBuildContainerImageReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GithubRepoBuildContainerImageReplyMultiError) AllErrors() []error { return m }

// GithubRepoBuildContainerImageReplyValidationError is the validation error
// returned by GithubRepoBuildContainerImageReply.Validate if the designated
// constraints aren't met.
type GithubRepoBuildContainerImageReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GithubRepoBuildContainerImageReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GithubRepoBuildContainerImageReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GithubRepoBuildContainerImageReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GithubRepoBuildContainerImageReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GithubRepoBuildContainerImageReplyValidationError) ErrorName() string {
	return "GithubRepoBuildContainerImageReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GithubRepoBuildContainerImageReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGithubRepoBuildContainerImageReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GithubRepoBuildContainerImageReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GithubRepoBuildContainerImageReplyValidationError{}

// Validate checks the field values on ListOrgProductReply_Product with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrgProductReply_Product) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrgProductReply_Product with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrgProductReply_ProductMultiError, or nil if none found.
func (m *ListOrgProductReply_Product) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrgProductReply_Product) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for OrgUuid

	// no validation rules for ProductName

	// no validation rules for Logo

	// no validation rules for Describe

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return ListOrgProductReply_ProductMultiError(errors)
	}

	return nil
}

// ListOrgProductReply_ProductMultiError is an error wrapping multiple
// validation errors returned by ListOrgProductReply_Product.ValidateAll() if
// the designated constraints aren't met.
type ListOrgProductReply_ProductMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrgProductReply_ProductMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrgProductReply_ProductMultiError) AllErrors() []error { return m }

// ListOrgProductReply_ProductValidationError is the validation error returned
// by ListOrgProductReply_Product.Validate if the designated constraints
// aren't met.
type ListOrgProductReply_ProductValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrgProductReply_ProductValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrgProductReply_ProductValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrgProductReply_ProductValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrgProductReply_ProductValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrgProductReply_ProductValidationError) ErrorName() string {
	return "ListOrgProductReply_ProductValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrgProductReply_ProductValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrgProductReply_Product.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrgProductReply_ProductValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrgProductReply_ProductValidationError{}

// Validate checks the field values on
// ListOrgProductGroupMemberReply_ProductGroupMember with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListOrgProductGroupMemberReply_ProductGroupMember) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListOrgProductGroupMemberReply_ProductGroupMember with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// ListOrgProductGroupMemberReply_ProductGroupMemberMultiError, or nil if none found.
func (m *ListOrgProductGroupMemberReply_ProductGroupMember) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrgProductGroupMemberReply_ProductGroupMember) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for UserUuid

	// no validation rules for UserName

	if len(errors) > 0 {
		return ListOrgProductGroupMemberReply_ProductGroupMemberMultiError(errors)
	}

	return nil
}

// ListOrgProductGroupMemberReply_ProductGroupMemberMultiError is an error
// wrapping multiple validation errors returned by
// ListOrgProductGroupMemberReply_ProductGroupMember.ValidateAll() if the
// designated constraints aren't met.
type ListOrgProductGroupMemberReply_ProductGroupMemberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrgProductGroupMemberReply_ProductGroupMemberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrgProductGroupMemberReply_ProductGroupMemberMultiError) AllErrors() []error { return m }

// ListOrgProductGroupMemberReply_ProductGroupMemberValidationError is the
// validation error returned by
// ListOrgProductGroupMemberReply_ProductGroupMember.Validate if the
// designated constraints aren't met.
type ListOrgProductGroupMemberReply_ProductGroupMemberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrgProductGroupMemberReply_ProductGroupMemberValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ListOrgProductGroupMemberReply_ProductGroupMemberValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListOrgProductGroupMemberReply_ProductGroupMemberValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ListOrgProductGroupMemberReply_ProductGroupMemberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrgProductGroupMemberReply_ProductGroupMemberValidationError) ErrorName() string {
	return "ListOrgProductGroupMemberReply_ProductGroupMemberValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrgProductGroupMemberReply_ProductGroupMemberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrgProductGroupMemberReply_ProductGroupMember.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrgProductGroupMemberReply_ProductGroupMemberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrgProductGroupMemberReply_ProductGroupMemberValidationError{}

// Validate checks the field values on ListOrgProductEnvReply_Env with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrgProductEnvReply_Env) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrgProductEnvReply_Env with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrgProductEnvReply_EnvMultiError, or nil if none found.
func (m *ListOrgProductEnvReply_Env) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrgProductEnvReply_Env) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for ProductUuid

	// no validation rules for EnvName

	// no validation rules for Priority

	// no validation rules for Describe

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return ListOrgProductEnvReply_EnvMultiError(errors)
	}

	return nil
}

// ListOrgProductEnvReply_EnvMultiError is an error wrapping multiple
// validation errors returned by ListOrgProductEnvReply_Env.ValidateAll() if
// the designated constraints aren't met.
type ListOrgProductEnvReply_EnvMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrgProductEnvReply_EnvMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrgProductEnvReply_EnvMultiError) AllErrors() []error { return m }

// ListOrgProductEnvReply_EnvValidationError is the validation error returned
// by ListOrgProductEnvReply_Env.Validate if the designated constraints aren't met.
type ListOrgProductEnvReply_EnvValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrgProductEnvReply_EnvValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrgProductEnvReply_EnvValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrgProductEnvReply_EnvValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrgProductEnvReply_EnvValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrgProductEnvReply_EnvValidationError) ErrorName() string {
	return "ListOrgProductEnvReply_EnvValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrgProductEnvReply_EnvValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrgProductEnvReply_Env.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrgProductEnvReply_EnvValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrgProductEnvReply_EnvValidationError{}

// Validate checks the field values on GetK8SClusterNodeReply_Capacity with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetK8SClusterNodeReply_Capacity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetK8SClusterNodeReply_Capacity with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetK8SClusterNodeReply_CapacityMultiError, or nil if none found.
func (m *GetK8SClusterNodeReply_Capacity) ValidateAll() error {
	return m.validate(true)
}

func (m *GetK8SClusterNodeReply_Capacity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cpu

	// no validation rules for Memory

	// no validation rules for Storage

	// no validation rules for StorageEphemeral

	if len(errors) > 0 {
		return GetK8SClusterNodeReply_CapacityMultiError(errors)
	}

	return nil
}

// GetK8SClusterNodeReply_CapacityMultiError is an error wrapping multiple
// validation errors returned by GetK8SClusterNodeReply_Capacity.ValidateAll()
// if the designated constraints aren't met.
type GetK8SClusterNodeReply_CapacityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetK8SClusterNodeReply_CapacityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetK8SClusterNodeReply_CapacityMultiError) AllErrors() []error { return m }

// GetK8SClusterNodeReply_CapacityValidationError is the validation error
// returned by GetK8SClusterNodeReply_Capacity.Validate if the designated
// constraints aren't met.
type GetK8SClusterNodeReply_CapacityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetK8SClusterNodeReply_CapacityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetK8SClusterNodeReply_CapacityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetK8SClusterNodeReply_CapacityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetK8SClusterNodeReply_CapacityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetK8SClusterNodeReply_CapacityValidationError) ErrorName() string {
	return "GetK8SClusterNodeReply_CapacityValidationError"
}

// Error satisfies the builtin error interface
func (e GetK8SClusterNodeReply_CapacityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetK8SClusterNodeReply_Capacity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetK8SClusterNodeReply_CapacityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetK8SClusterNodeReply_CapacityValidationError{}

// Validate checks the field values on GetK8SClusterNodeReply_Allocatable with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetK8SClusterNodeReply_Allocatable) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetK8SClusterNodeReply_Allocatable
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetK8SClusterNodeReply_AllocatableMultiError, or nil if none found.
func (m *GetK8SClusterNodeReply_Allocatable) ValidateAll() error {
	return m.validate(true)
}

func (m *GetK8SClusterNodeReply_Allocatable) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cpu

	// no validation rules for Memory

	// no validation rules for Storage

	// no validation rules for StorageEphemeral

	if len(errors) > 0 {
		return GetK8SClusterNodeReply_AllocatableMultiError(errors)
	}

	return nil
}

// GetK8SClusterNodeReply_AllocatableMultiError is an error wrapping multiple
// validation errors returned by
// GetK8SClusterNodeReply_Allocatable.ValidateAll() if the designated
// constraints aren't met.
type GetK8SClusterNodeReply_AllocatableMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetK8SClusterNodeReply_AllocatableMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetK8SClusterNodeReply_AllocatableMultiError) AllErrors() []error { return m }

// GetK8SClusterNodeReply_AllocatableValidationError is the validation error
// returned by GetK8SClusterNodeReply_Allocatable.Validate if the designated
// constraints aren't met.
type GetK8SClusterNodeReply_AllocatableValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetK8SClusterNodeReply_AllocatableValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetK8SClusterNodeReply_AllocatableValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetK8SClusterNodeReply_AllocatableValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetK8SClusterNodeReply_AllocatableValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetK8SClusterNodeReply_AllocatableValidationError) ErrorName() string {
	return "GetK8SClusterNodeReply_AllocatableValidationError"
}

// Error satisfies the builtin error interface
func (e GetK8SClusterNodeReply_AllocatableValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetK8SClusterNodeReply_Allocatable.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetK8SClusterNodeReply_AllocatableValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetK8SClusterNodeReply_AllocatableValidationError{}

// Validate checks the field values on ListK8SClusterNodeReply_Node with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListK8SClusterNodeReply_Node) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListK8SClusterNodeReply_Node with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListK8SClusterNodeReply_NodeMultiError, or nil if none found.
func (m *ListK8SClusterNodeReply_Node) ValidateAll() error {
	return m.validate(true)
}

func (m *ListK8SClusterNodeReply_Node) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for CreationTimestamp

	// no validation rules for ContainerRuntimeVersion

	// no validation rules for KernelVersion

	// no validation rules for KubeProxyVersion

	// no validation rules for KubeletVersion

	// no validation rules for KubeletEndpoint

	// no validation rules for OsImage

	// no validation rules for Labels

	// no validation rules for Annotations

	if all {
		switch v := interface{}(m.GetCapacity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListK8SClusterNodeReply_NodeValidationError{
					field:  "Capacity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListK8SClusterNodeReply_NodeValidationError{
					field:  "Capacity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCapacity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListK8SClusterNodeReply_NodeValidationError{
				field:  "Capacity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAllocatable()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListK8SClusterNodeReply_NodeValidationError{
					field:  "Allocatable",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListK8SClusterNodeReply_NodeValidationError{
					field:  "Allocatable",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAllocatable()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListK8SClusterNodeReply_NodeValidationError{
				field:  "Allocatable",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListK8SClusterNodeReply_NodeMultiError(errors)
	}

	return nil
}

// ListK8SClusterNodeReply_NodeMultiError is an error wrapping multiple
// validation errors returned by ListK8SClusterNodeReply_Node.ValidateAll() if
// the designated constraints aren't met.
type ListK8SClusterNodeReply_NodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListK8SClusterNodeReply_NodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListK8SClusterNodeReply_NodeMultiError) AllErrors() []error { return m }

// ListK8SClusterNodeReply_NodeValidationError is the validation error returned
// by ListK8SClusterNodeReply_Node.Validate if the designated constraints
// aren't met.
type ListK8SClusterNodeReply_NodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListK8SClusterNodeReply_NodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListK8SClusterNodeReply_NodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListK8SClusterNodeReply_NodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListK8SClusterNodeReply_NodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListK8SClusterNodeReply_NodeValidationError) ErrorName() string {
	return "ListK8SClusterNodeReply_NodeValidationError"
}

// Error satisfies the builtin error interface
func (e ListK8SClusterNodeReply_NodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListK8SClusterNodeReply_Node.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListK8SClusterNodeReply_NodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListK8SClusterNodeReply_NodeValidationError{}

// Validate checks the field values on ListK8SClusterNodeReply_Node_Capacity
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListK8SClusterNodeReply_Node_Capacity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListK8SClusterNodeReply_Node_Capacity
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListK8SClusterNodeReply_Node_CapacityMultiError, or nil if none found.
func (m *ListK8SClusterNodeReply_Node_Capacity) ValidateAll() error {
	return m.validate(true)
}

func (m *ListK8SClusterNodeReply_Node_Capacity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cpu

	// no validation rules for Memory

	// no validation rules for Storage

	// no validation rules for StorageEphemeral

	if len(errors) > 0 {
		return ListK8SClusterNodeReply_Node_CapacityMultiError(errors)
	}

	return nil
}

// ListK8SClusterNodeReply_Node_CapacityMultiError is an error wrapping
// multiple validation errors returned by
// ListK8SClusterNodeReply_Node_Capacity.ValidateAll() if the designated
// constraints aren't met.
type ListK8SClusterNodeReply_Node_CapacityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListK8SClusterNodeReply_Node_CapacityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListK8SClusterNodeReply_Node_CapacityMultiError) AllErrors() []error { return m }

// ListK8SClusterNodeReply_Node_CapacityValidationError is the validation error
// returned by ListK8SClusterNodeReply_Node_Capacity.Validate if the
// designated constraints aren't met.
type ListK8SClusterNodeReply_Node_CapacityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListK8SClusterNodeReply_Node_CapacityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListK8SClusterNodeReply_Node_CapacityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListK8SClusterNodeReply_Node_CapacityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListK8SClusterNodeReply_Node_CapacityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListK8SClusterNodeReply_Node_CapacityValidationError) ErrorName() string {
	return "ListK8SClusterNodeReply_Node_CapacityValidationError"
}

// Error satisfies the builtin error interface
func (e ListK8SClusterNodeReply_Node_CapacityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListK8SClusterNodeReply_Node_Capacity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListK8SClusterNodeReply_Node_CapacityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListK8SClusterNodeReply_Node_CapacityValidationError{}

// Validate checks the field values on ListK8SClusterNodeReply_Node_Allocatable
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListK8SClusterNodeReply_Node_Allocatable) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListK8SClusterNodeReply_Node_Allocatable with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListK8SClusterNodeReply_Node_AllocatableMultiError, or nil if none found.
func (m *ListK8SClusterNodeReply_Node_Allocatable) ValidateAll() error {
	return m.validate(true)
}

func (m *ListK8SClusterNodeReply_Node_Allocatable) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cpu

	// no validation rules for Memory

	// no validation rules for Storage

	// no validation rules for StorageEphemeral

	if len(errors) > 0 {
		return ListK8SClusterNodeReply_Node_AllocatableMultiError(errors)
	}

	return nil
}

// ListK8SClusterNodeReply_Node_AllocatableMultiError is an error wrapping
// multiple validation errors returned by
// ListK8SClusterNodeReply_Node_Allocatable.ValidateAll() if the designated
// constraints aren't met.
type ListK8SClusterNodeReply_Node_AllocatableMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListK8SClusterNodeReply_Node_AllocatableMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListK8SClusterNodeReply_Node_AllocatableMultiError) AllErrors() []error { return m }

// ListK8SClusterNodeReply_Node_AllocatableValidationError is the validation
// error returned by ListK8SClusterNodeReply_Node_Allocatable.Validate if the
// designated constraints aren't met.
type ListK8SClusterNodeReply_Node_AllocatableValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListK8SClusterNodeReply_Node_AllocatableValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListK8SClusterNodeReply_Node_AllocatableValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListK8SClusterNodeReply_Node_AllocatableValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListK8SClusterNodeReply_Node_AllocatableValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListK8SClusterNodeReply_Node_AllocatableValidationError) ErrorName() string {
	return "ListK8SClusterNodeReply_Node_AllocatableValidationError"
}

// Error satisfies the builtin error interface
func (e ListK8SClusterNodeReply_Node_AllocatableValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListK8SClusterNodeReply_Node_Allocatable.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListK8SClusterNodeReply_Node_AllocatableValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListK8SClusterNodeReply_Node_AllocatableValidationError{}

// Validate checks the field values on ListK8SPodReply_Pod with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListK8SPodReply_Pod) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListK8SPodReply_Pod with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListK8SPodReply_PodMultiError, or nil if none found.
func (m *ListK8SPodReply_Pod) ValidateAll() error {
	return m.validate(true)
}

func (m *ListK8SPodReply_Pod) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for Name

	// no validation rules for CreationTimestamp

	// no validation rules for Reason

	// no validation rules for Phase

	// no validation rules for HostIP

	// no validation rules for PodIP

	// no validation rules for Labels

	// no validation rules for Envs

	for idx, item := range m.GetContainer() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListK8SPodReply_PodValidationError{
						field:  fmt.Sprintf("Container[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListK8SPodReply_PodValidationError{
						field:  fmt.Sprintf("Container[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListK8SPodReply_PodValidationError{
					field:  fmt.Sprintf("Container[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListK8SPodReply_PodMultiError(errors)
	}

	return nil
}

// ListK8SPodReply_PodMultiError is an error wrapping multiple validation
// errors returned by ListK8SPodReply_Pod.ValidateAll() if the designated
// constraints aren't met.
type ListK8SPodReply_PodMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListK8SPodReply_PodMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListK8SPodReply_PodMultiError) AllErrors() []error { return m }

// ListK8SPodReply_PodValidationError is the validation error returned by
// ListK8SPodReply_Pod.Validate if the designated constraints aren't met.
type ListK8SPodReply_PodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListK8SPodReply_PodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListK8SPodReply_PodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListK8SPodReply_PodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListK8SPodReply_PodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListK8SPodReply_PodValidationError) ErrorName() string {
	return "ListK8SPodReply_PodValidationError"
}

// Error satisfies the builtin error interface
func (e ListK8SPodReply_PodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListK8SPodReply_Pod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListK8SPodReply_PodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListK8SPodReply_PodValidationError{}

// Validate checks the field values on ListK8SPodReply_Pod_Container with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListK8SPodReply_Pod_Container) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListK8SPodReply_Pod_Container with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListK8SPodReply_Pod_ContainerMultiError, or nil if none found.
func (m *ListK8SPodReply_Pod_Container) ValidateAll() error {
	return m.validate(true)
}

func (m *ListK8SPodReply_Pod_Container) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Image

	// no validation rules for WorkingDir

	// no validation rules for Command

	// no validation rules for SecurityContext

	// no validation rules for RequestsCpu

	// no validation rules for RequestsMemory

	// no validation rules for RequestsStorage

	// no validation rules for RequestsStorageEphemeral

	// no validation rules for LimitCpu

	// no validation rules for LimitMemory

	// no validation rules for LimitStorage

	// no validation rules for LimitStorageEphemeral

	// no validation rules for StartupProbe

	// no validation rules for LivenessProbe

	// no validation rules for ReadinessProbe

	// no validation rules for RestartCount

	// no validation rules for Ready

	if len(errors) > 0 {
		return ListK8SPodReply_Pod_ContainerMultiError(errors)
	}

	return nil
}

// ListK8SPodReply_Pod_ContainerMultiError is an error wrapping multiple
// validation errors returned by ListK8SPodReply_Pod_Container.ValidateAll()
// if the designated constraints aren't met.
type ListK8SPodReply_Pod_ContainerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListK8SPodReply_Pod_ContainerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListK8SPodReply_Pod_ContainerMultiError) AllErrors() []error { return m }

// ListK8SPodReply_Pod_ContainerValidationError is the validation error
// returned by ListK8SPodReply_Pod_Container.Validate if the designated
// constraints aren't met.
type ListK8SPodReply_Pod_ContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListK8SPodReply_Pod_ContainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListK8SPodReply_Pod_ContainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListK8SPodReply_Pod_ContainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListK8SPodReply_Pod_ContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListK8SPodReply_Pod_ContainerValidationError) ErrorName() string {
	return "ListK8SPodReply_Pod_ContainerValidationError"
}

// Error satisfies the builtin error interface
func (e ListK8SPodReply_Pod_ContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListK8SPodReply_Pod_Container.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListK8SPodReply_Pod_ContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListK8SPodReply_Pod_ContainerValidationError{}

// Validate checks the field values on GetK8SPodReply_Container with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetK8SPodReply_Container) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetK8SPodReply_Container with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetK8SPodReply_ContainerMultiError, or nil if none found.
func (m *GetK8SPodReply_Container) ValidateAll() error {
	return m.validate(true)
}

func (m *GetK8SPodReply_Container) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Image

	// no validation rules for WorkingDir

	// no validation rules for Command

	// no validation rules for SecurityContext

	// no validation rules for RequestsCpu

	// no validation rules for RequestsMemory

	// no validation rules for RequestsStorage

	// no validation rules for RequestsStorageEphemeral

	// no validation rules for LimitCpu

	// no validation rules for LimitMemory

	// no validation rules for LimitStorage

	// no validation rules for LimitStorageEphemeral

	// no validation rules for StartupProbe

	// no validation rules for LivenessProbe

	// no validation rules for ReadinessProbe

	// no validation rules for RestartCount

	// no validation rules for Ready

	if len(errors) > 0 {
		return GetK8SPodReply_ContainerMultiError(errors)
	}

	return nil
}

// GetK8SPodReply_ContainerMultiError is an error wrapping multiple validation
// errors returned by GetK8SPodReply_Container.ValidateAll() if the designated
// constraints aren't met.
type GetK8SPodReply_ContainerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetK8SPodReply_ContainerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetK8SPodReply_ContainerMultiError) AllErrors() []error { return m }

// GetK8SPodReply_ContainerValidationError is the validation error returned by
// GetK8SPodReply_Container.Validate if the designated constraints aren't met.
type GetK8SPodReply_ContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetK8SPodReply_ContainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetK8SPodReply_ContainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetK8SPodReply_ContainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetK8SPodReply_ContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetK8SPodReply_ContainerValidationError) ErrorName() string {
	return "GetK8SPodReply_ContainerValidationError"
}

// Error satisfies the builtin error interface
func (e GetK8SPodReply_ContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetK8SPodReply_Container.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetK8SPodReply_ContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetK8SPodReply_ContainerValidationError{}

// Validate checks the field values on SearchK8SPodReply_Pod with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchK8SPodReply_Pod) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchK8SPodReply_Pod with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchK8SPodReply_PodMultiError, or nil if none found.
func (m *SearchK8SPodReply_Pod) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchK8SPodReply_Pod) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for Name

	// no validation rules for CreationTimestamp

	// no validation rules for Reason

	// no validation rules for Phase

	// no validation rules for HostIP

	// no validation rules for PodIP

	// no validation rules for Labels

	// no validation rules for Envs

	for idx, item := range m.GetContainer() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchK8SPodReply_PodValidationError{
						field:  fmt.Sprintf("Container[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchK8SPodReply_PodValidationError{
						field:  fmt.Sprintf("Container[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchK8SPodReply_PodValidationError{
					field:  fmt.Sprintf("Container[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchK8SPodReply_PodMultiError(errors)
	}

	return nil
}

// SearchK8SPodReply_PodMultiError is an error wrapping multiple validation
// errors returned by SearchK8SPodReply_Pod.ValidateAll() if the designated
// constraints aren't met.
type SearchK8SPodReply_PodMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchK8SPodReply_PodMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchK8SPodReply_PodMultiError) AllErrors() []error { return m }

// SearchK8SPodReply_PodValidationError is the validation error returned by
// SearchK8SPodReply_Pod.Validate if the designated constraints aren't met.
type SearchK8SPodReply_PodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchK8SPodReply_PodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchK8SPodReply_PodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchK8SPodReply_PodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchK8SPodReply_PodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchK8SPodReply_PodValidationError) ErrorName() string {
	return "SearchK8SPodReply_PodValidationError"
}

// Error satisfies the builtin error interface
func (e SearchK8SPodReply_PodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchK8SPodReply_Pod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchK8SPodReply_PodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchK8SPodReply_PodValidationError{}

// Validate checks the field values on SearchK8SPodReply_Pod_Container with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchK8SPodReply_Pod_Container) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchK8SPodReply_Pod_Container with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SearchK8SPodReply_Pod_ContainerMultiError, or nil if none found.
func (m *SearchK8SPodReply_Pod_Container) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchK8SPodReply_Pod_Container) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Image

	// no validation rules for WorkingDir

	// no validation rules for Command

	// no validation rules for SecurityContext

	// no validation rules for RequestsCpu

	// no validation rules for RequestsMemory

	// no validation rules for RequestsStorage

	// no validation rules for RequestsStorageEphemeral

	// no validation rules for LimitCpu

	// no validation rules for LimitMemory

	// no validation rules for LimitStorage

	// no validation rules for LimitStorageEphemeral

	// no validation rules for StartupProbe

	// no validation rules for LivenessProbe

	// no validation rules for ReadinessProbe

	// no validation rules for RestartCount

	// no validation rules for Ready

	if len(errors) > 0 {
		return SearchK8SPodReply_Pod_ContainerMultiError(errors)
	}

	return nil
}

// SearchK8SPodReply_Pod_ContainerMultiError is an error wrapping multiple
// validation errors returned by SearchK8SPodReply_Pod_Container.ValidateAll()
// if the designated constraints aren't met.
type SearchK8SPodReply_Pod_ContainerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchK8SPodReply_Pod_ContainerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchK8SPodReply_Pod_ContainerMultiError) AllErrors() []error { return m }

// SearchK8SPodReply_Pod_ContainerValidationError is the validation error
// returned by SearchK8SPodReply_Pod_Container.Validate if the designated
// constraints aren't met.
type SearchK8SPodReply_Pod_ContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchK8SPodReply_Pod_ContainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchK8SPodReply_Pod_ContainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchK8SPodReply_Pod_ContainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchK8SPodReply_Pod_ContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchK8SPodReply_Pod_ContainerValidationError) ErrorName() string {
	return "SearchK8SPodReply_Pod_ContainerValidationError"
}

// Error satisfies the builtin error interface
func (e SearchK8SPodReply_Pod_ContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchK8SPodReply_Pod_Container.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchK8SPodReply_Pod_ContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchK8SPodReply_Pod_ContainerValidationError{}

// Validate checks the field values on ListSecretReply_Secret with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSecretReply_Secret) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSecretReply_Secret with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSecretReply_SecretMultiError, or nil if none found.
func (m *ListSecretReply_Secret) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSecretReply_Secret) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for Name

	// no validation rules for Annotations

	// no validation rules for Labels

	// no validation rules for Immutable

	// no validation rules for Type

	// no validation rules for CreationTimestamp

	// no validation rules for StringData

	// no validation rules for Data

	if len(errors) > 0 {
		return ListSecretReply_SecretMultiError(errors)
	}

	return nil
}

// ListSecretReply_SecretMultiError is an error wrapping multiple validation
// errors returned by ListSecretReply_Secret.ValidateAll() if the designated
// constraints aren't met.
type ListSecretReply_SecretMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSecretReply_SecretMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSecretReply_SecretMultiError) AllErrors() []error { return m }

// ListSecretReply_SecretValidationError is the validation error returned by
// ListSecretReply_Secret.Validate if the designated constraints aren't met.
type ListSecretReply_SecretValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSecretReply_SecretValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSecretReply_SecretValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSecretReply_SecretValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSecretReply_SecretValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSecretReply_SecretValidationError) ErrorName() string {
	return "ListSecretReply_SecretValidationError"
}

// Error satisfies the builtin error interface
func (e ListSecretReply_SecretValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSecretReply_Secret.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSecretReply_SecretValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSecretReply_SecretValidationError{}

// Validate checks the field values on ListK8SClusterNameSpaceReply_NameSpace
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListK8SClusterNameSpaceReply_NameSpace) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListK8SClusterNameSpaceReply_NameSpace with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListK8SClusterNameSpaceReply_NameSpaceMultiError, or nil if none found.
func (m *ListK8SClusterNameSpaceReply_NameSpace) ValidateAll() error {
	return m.validate(true)
}

func (m *ListK8SClusterNameSpaceReply_NameSpace) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Status

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return ListK8SClusterNameSpaceReply_NameSpaceMultiError(errors)
	}

	return nil
}

// ListK8SClusterNameSpaceReply_NameSpaceMultiError is an error wrapping
// multiple validation errors returned by
// ListK8SClusterNameSpaceReply_NameSpace.ValidateAll() if the designated
// constraints aren't met.
type ListK8SClusterNameSpaceReply_NameSpaceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListK8SClusterNameSpaceReply_NameSpaceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListK8SClusterNameSpaceReply_NameSpaceMultiError) AllErrors() []error { return m }

// ListK8SClusterNameSpaceReply_NameSpaceValidationError is the validation
// error returned by ListK8SClusterNameSpaceReply_NameSpace.Validate if the
// designated constraints aren't met.
type ListK8SClusterNameSpaceReply_NameSpaceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListK8SClusterNameSpaceReply_NameSpaceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListK8SClusterNameSpaceReply_NameSpaceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListK8SClusterNameSpaceReply_NameSpaceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListK8SClusterNameSpaceReply_NameSpaceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListK8SClusterNameSpaceReply_NameSpaceValidationError) ErrorName() string {
	return "ListK8SClusterNameSpaceReply_NameSpaceValidationError"
}

// Error satisfies the builtin error interface
func (e ListK8SClusterNameSpaceReply_NameSpaceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListK8SClusterNameSpaceReply_NameSpace.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListK8SClusterNameSpaceReply_NameSpaceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListK8SClusterNameSpaceReply_NameSpaceValidationError{}

// Validate checks the field values on
// ListK8SClusterDeploymentReply_DeploymentStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListK8SClusterDeploymentReply_DeploymentStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListK8SClusterDeploymentReply_DeploymentStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// ListK8SClusterDeploymentReply_DeploymentStatusMultiError, or nil if none found.
func (m *ListK8SClusterDeploymentReply_DeploymentStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *ListK8SClusterDeploymentReply_DeploymentStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Namespace

	// no validation rules for Replicas

	// no validation rules for AvailableReplicas

	// no validation rules for UnavailableReplicas

	// no validation rules for UpdatedReplicas

	// no validation rules for ReadyReplicas

	if len(errors) > 0 {
		return ListK8SClusterDeploymentReply_DeploymentStatusMultiError(errors)
	}

	return nil
}

// ListK8SClusterDeploymentReply_DeploymentStatusMultiError is an error
// wrapping multiple validation errors returned by
// ListK8SClusterDeploymentReply_DeploymentStatus.ValidateAll() if the
// designated constraints aren't met.
type ListK8SClusterDeploymentReply_DeploymentStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListK8SClusterDeploymentReply_DeploymentStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListK8SClusterDeploymentReply_DeploymentStatusMultiError) AllErrors() []error { return m }

// ListK8SClusterDeploymentReply_DeploymentStatusValidationError is the
// validation error returned by
// ListK8SClusterDeploymentReply_DeploymentStatus.Validate if the designated
// constraints aren't met.
type ListK8SClusterDeploymentReply_DeploymentStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListK8SClusterDeploymentReply_DeploymentStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListK8SClusterDeploymentReply_DeploymentStatusValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListK8SClusterDeploymentReply_DeploymentStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListK8SClusterDeploymentReply_DeploymentStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListK8SClusterDeploymentReply_DeploymentStatusValidationError) ErrorName() string {
	return "ListK8SClusterDeploymentReply_DeploymentStatusValidationError"
}

// Error satisfies the builtin error interface
func (e ListK8SClusterDeploymentReply_DeploymentStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListK8SClusterDeploymentReply_DeploymentStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListK8SClusterDeploymentReply_DeploymentStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListK8SClusterDeploymentReply_DeploymentStatusValidationError{}

// Validate checks the field values on ListK8SServiceReply_Service with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListK8SServiceReply_Service) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListK8SServiceReply_Service with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListK8SServiceReply_ServiceMultiError, or nil if none found.
func (m *ListK8SServiceReply_Service) ValidateAll() error {
	return m.validate(true)
}

func (m *ListK8SServiceReply_Service) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Namespace

	// no validation rules for ResourceVersion

	// no validation rules for Annotations

	// no validation rules for ClusterIP

	// no validation rules for SessionAffinity

	// no validation rules for Type

	// no validation rules for Labels

	for idx, item := range m.GetPorts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListK8SServiceReply_ServiceValidationError{
						field:  fmt.Sprintf("Ports[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListK8SServiceReply_ServiceValidationError{
						field:  fmt.Sprintf("Ports[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListK8SServiceReply_ServiceValidationError{
					field:  fmt.Sprintf("Ports[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListK8SServiceReply_ServiceMultiError(errors)
	}

	return nil
}

// ListK8SServiceReply_ServiceMultiError is an error wrapping multiple
// validation errors returned by ListK8SServiceReply_Service.ValidateAll() if
// the designated constraints aren't met.
type ListK8SServiceReply_ServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListK8SServiceReply_ServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListK8SServiceReply_ServiceMultiError) AllErrors() []error { return m }

// ListK8SServiceReply_ServiceValidationError is the validation error returned
// by ListK8SServiceReply_Service.Validate if the designated constraints
// aren't met.
type ListK8SServiceReply_ServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListK8SServiceReply_ServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListK8SServiceReply_ServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListK8SServiceReply_ServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListK8SServiceReply_ServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListK8SServiceReply_ServiceValidationError) ErrorName() string {
	return "ListK8SServiceReply_ServiceValidationError"
}

// Error satisfies the builtin error interface
func (e ListK8SServiceReply_ServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListK8SServiceReply_Service.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListK8SServiceReply_ServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListK8SServiceReply_ServiceValidationError{}

// Validate checks the field values on CreateK8SIngressReq_Service with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateK8SIngressReq_Service) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateK8SIngressReq_Service with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateK8SIngressReq_ServiceMultiError, or nil if none found.
func (m *CreateK8SIngressReq_Service) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateK8SIngressReq_Service) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TlsSecret

	{
		sorted_keys := make([]string, len(m.GetPath()))
		i := 0
		for key := range m.GetPath() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetPath()[key]
			_ = val

			// no validation rules for Path[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CreateK8SIngressReq_ServiceValidationError{
							field:  fmt.Sprintf("Path[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CreateK8SIngressReq_ServiceValidationError{
							field:  fmt.Sprintf("Path[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CreateK8SIngressReq_ServiceValidationError{
						field:  fmt.Sprintf("Path[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return CreateK8SIngressReq_ServiceMultiError(errors)
	}

	return nil
}

// CreateK8SIngressReq_ServiceMultiError is an error wrapping multiple
// validation errors returned by CreateK8SIngressReq_Service.ValidateAll() if
// the designated constraints aren't met.
type CreateK8SIngressReq_ServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateK8SIngressReq_ServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateK8SIngressReq_ServiceMultiError) AllErrors() []error { return m }

// CreateK8SIngressReq_ServiceValidationError is the validation error returned
// by CreateK8SIngressReq_Service.Validate if the designated constraints
// aren't met.
type CreateK8SIngressReq_ServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateK8SIngressReq_ServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateK8SIngressReq_ServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateK8SIngressReq_ServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateK8SIngressReq_ServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateK8SIngressReq_ServiceValidationError) ErrorName() string {
	return "CreateK8SIngressReq_ServiceValidationError"
}

// Error satisfies the builtin error interface
func (e CreateK8SIngressReq_ServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateK8SIngressReq_Service.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateK8SIngressReq_ServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateK8SIngressReq_ServiceValidationError{}

// Validate checks the field values on CreateK8SIngressReq_Service_Path with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateK8SIngressReq_Service_Path) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateK8SIngressReq_Service_Path with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateK8SIngressReq_Service_PathMultiError, or nil if none found.
func (m *CreateK8SIngressReq_Service_Path) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateK8SIngressReq_Service_Path) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PathType

	// no validation rules for ServiceName

	// no validation rules for ServicePort

	if len(errors) > 0 {
		return CreateK8SIngressReq_Service_PathMultiError(errors)
	}

	return nil
}

// CreateK8SIngressReq_Service_PathMultiError is an error wrapping multiple
// validation errors returned by
// CreateK8SIngressReq_Service_Path.ValidateAll() if the designated
// constraints aren't met.
type CreateK8SIngressReq_Service_PathMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateK8SIngressReq_Service_PathMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateK8SIngressReq_Service_PathMultiError) AllErrors() []error { return m }

// CreateK8SIngressReq_Service_PathValidationError is the validation error
// returned by CreateK8SIngressReq_Service_Path.Validate if the designated
// constraints aren't met.
type CreateK8SIngressReq_Service_PathValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateK8SIngressReq_Service_PathValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateK8SIngressReq_Service_PathValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateK8SIngressReq_Service_PathValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateK8SIngressReq_Service_PathValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateK8SIngressReq_Service_PathValidationError) ErrorName() string {
	return "CreateK8SIngressReq_Service_PathValidationError"
}

// Error satisfies the builtin error interface
func (e CreateK8SIngressReq_Service_PathValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateK8SIngressReq_Service_Path.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateK8SIngressReq_Service_PathValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateK8SIngressReq_Service_PathValidationError{}

// Validate checks the field values on ListK8SIngressReply_Ingress with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListK8SIngressReply_Ingress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListK8SIngressReply_Ingress with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListK8SIngressReply_IngressMultiError, or nil if none found.
func (m *ListK8SIngressReply_Ingress) ValidateAll() error {
	return m.validate(true)
}

func (m *ListK8SIngressReply_Ingress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Namespace

	// no validation rules for Labels

	{
		sorted_keys := make([]string, len(m.GetService()))
		i := 0
		for key := range m.GetService() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetService()[key]
			_ = val

			// no validation rules for Service[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ListK8SIngressReply_IngressValidationError{
							field:  fmt.Sprintf("Service[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ListK8SIngressReply_IngressValidationError{
							field:  fmt.Sprintf("Service[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ListK8SIngressReply_IngressValidationError{
						field:  fmt.Sprintf("Service[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return ListK8SIngressReply_IngressMultiError(errors)
	}

	return nil
}

// ListK8SIngressReply_IngressMultiError is an error wrapping multiple
// validation errors returned by ListK8SIngressReply_Ingress.ValidateAll() if
// the designated constraints aren't met.
type ListK8SIngressReply_IngressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListK8SIngressReply_IngressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListK8SIngressReply_IngressMultiError) AllErrors() []error { return m }

// ListK8SIngressReply_IngressValidationError is the validation error returned
// by ListK8SIngressReply_Ingress.Validate if the designated constraints
// aren't met.
type ListK8SIngressReply_IngressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListK8SIngressReply_IngressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListK8SIngressReply_IngressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListK8SIngressReply_IngressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListK8SIngressReply_IngressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListK8SIngressReply_IngressValidationError) ErrorName() string {
	return "ListK8SIngressReply_IngressValidationError"
}

// Error satisfies the builtin error interface
func (e ListK8SIngressReply_IngressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListK8SIngressReply_Ingress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListK8SIngressReply_IngressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListK8SIngressReply_IngressValidationError{}

// Validate checks the field values on
// ListK8SIngressReply_Ingress_IngressService with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListK8SIngressReply_Ingress_IngressService) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListK8SIngressReply_Ingress_IngressService with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListK8SIngressReply_Ingress_IngressServiceMultiError, or nil if none found.
func (m *ListK8SIngressReply_Ingress_IngressService) ValidateAll() error {
	return m.validate(true)
}

func (m *ListK8SIngressReply_Ingress_IngressService) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TlsSecret

	{
		sorted_keys := make([]string, len(m.GetPath()))
		i := 0
		for key := range m.GetPath() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetPath()[key]
			_ = val

			// no validation rules for Path[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ListK8SIngressReply_Ingress_IngressServiceValidationError{
							field:  fmt.Sprintf("Path[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ListK8SIngressReply_Ingress_IngressServiceValidationError{
							field:  fmt.Sprintf("Path[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ListK8SIngressReply_Ingress_IngressServiceValidationError{
						field:  fmt.Sprintf("Path[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return ListK8SIngressReply_Ingress_IngressServiceMultiError(errors)
	}

	return nil
}

// ListK8SIngressReply_Ingress_IngressServiceMultiError is an error wrapping
// multiple validation errors returned by
// ListK8SIngressReply_Ingress_IngressService.ValidateAll() if the designated
// constraints aren't met.
type ListK8SIngressReply_Ingress_IngressServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListK8SIngressReply_Ingress_IngressServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListK8SIngressReply_Ingress_IngressServiceMultiError) AllErrors() []error { return m }

// ListK8SIngressReply_Ingress_IngressServiceValidationError is the validation
// error returned by ListK8SIngressReply_Ingress_IngressService.Validate if
// the designated constraints aren't met.
type ListK8SIngressReply_Ingress_IngressServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListK8SIngressReply_Ingress_IngressServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListK8SIngressReply_Ingress_IngressServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListK8SIngressReply_Ingress_IngressServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListK8SIngressReply_Ingress_IngressServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListK8SIngressReply_Ingress_IngressServiceValidationError) ErrorName() string {
	return "ListK8SIngressReply_Ingress_IngressServiceValidationError"
}

// Error satisfies the builtin error interface
func (e ListK8SIngressReply_Ingress_IngressServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListK8SIngressReply_Ingress_IngressService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListK8SIngressReply_Ingress_IngressServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListK8SIngressReply_Ingress_IngressServiceValidationError{}

// Validate checks the field values on
// ListK8SIngressReply_Ingress_IngressService_IngressServicePath with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListK8SIngressReply_Ingress_IngressService_IngressServicePath) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListK8SIngressReply_Ingress_IngressService_IngressServicePath with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListK8SIngressReply_Ingress_IngressService_IngressServicePathMultiError, or
// nil if none found.
func (m *ListK8SIngressReply_Ingress_IngressService_IngressServicePath) ValidateAll() error {
	return m.validate(true)
}

func (m *ListK8SIngressReply_Ingress_IngressService_IngressServicePath) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PathType

	// no validation rules for ServiceName

	// no validation rules for ServicePort

	if len(errors) > 0 {
		return ListK8SIngressReply_Ingress_IngressService_IngressServicePathMultiError(errors)
	}

	return nil
}

// ListK8SIngressReply_Ingress_IngressService_IngressServicePathMultiError is
// an error wrapping multiple validation errors returned by
// ListK8SIngressReply_Ingress_IngressService_IngressServicePath.ValidateAll()
// if the designated constraints aren't met.
type ListK8SIngressReply_Ingress_IngressService_IngressServicePathMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListK8SIngressReply_Ingress_IngressService_IngressServicePathMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListK8SIngressReply_Ingress_IngressService_IngressServicePathMultiError) AllErrors() []error {
	return m
}

// ListK8SIngressReply_Ingress_IngressService_IngressServicePathValidationError
// is the validation error returned by
// ListK8SIngressReply_Ingress_IngressService_IngressServicePath.Validate if
// the designated constraints aren't met.
type ListK8SIngressReply_Ingress_IngressService_IngressServicePathValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListK8SIngressReply_Ingress_IngressService_IngressServicePathValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ListK8SIngressReply_Ingress_IngressService_IngressServicePathValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListK8SIngressReply_Ingress_IngressService_IngressServicePathValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ListK8SIngressReply_Ingress_IngressService_IngressServicePathValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e ListK8SIngressReply_Ingress_IngressService_IngressServicePathValidationError) ErrorName() string {
	return "ListK8SIngressReply_Ingress_IngressService_IngressServicePathValidationError"
}

// Error satisfies the builtin error interface
func (e ListK8SIngressReply_Ingress_IngressService_IngressServicePathValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListK8SIngressReply_Ingress_IngressService_IngressServicePath.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListK8SIngressReply_Ingress_IngressService_IngressServicePathValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListK8SIngressReply_Ingress_IngressService_IngressServicePathValidationError{}

// Validate checks the field values on GetK8SIngressReply_IngressService with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetK8SIngressReply_IngressService) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetK8SIngressReply_IngressService
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetK8SIngressReply_IngressServiceMultiError, or nil if none found.
func (m *GetK8SIngressReply_IngressService) ValidateAll() error {
	return m.validate(true)
}

func (m *GetK8SIngressReply_IngressService) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TlsSecret

	{
		sorted_keys := make([]string, len(m.GetPath()))
		i := 0
		for key := range m.GetPath() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetPath()[key]
			_ = val

			// no validation rules for Path[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, GetK8SIngressReply_IngressServiceValidationError{
							field:  fmt.Sprintf("Path[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, GetK8SIngressReply_IngressServiceValidationError{
							field:  fmt.Sprintf("Path[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return GetK8SIngressReply_IngressServiceValidationError{
						field:  fmt.Sprintf("Path[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return GetK8SIngressReply_IngressServiceMultiError(errors)
	}

	return nil
}

// GetK8SIngressReply_IngressServiceMultiError is an error wrapping multiple
// validation errors returned by
// GetK8SIngressReply_IngressService.ValidateAll() if the designated
// constraints aren't met.
type GetK8SIngressReply_IngressServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetK8SIngressReply_IngressServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetK8SIngressReply_IngressServiceMultiError) AllErrors() []error { return m }

// GetK8SIngressReply_IngressServiceValidationError is the validation error
// returned by GetK8SIngressReply_IngressService.Validate if the designated
// constraints aren't met.
type GetK8SIngressReply_IngressServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetK8SIngressReply_IngressServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetK8SIngressReply_IngressServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetK8SIngressReply_IngressServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetK8SIngressReply_IngressServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetK8SIngressReply_IngressServiceValidationError) ErrorName() string {
	return "GetK8SIngressReply_IngressServiceValidationError"
}

// Error satisfies the builtin error interface
func (e GetK8SIngressReply_IngressServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetK8SIngressReply_IngressService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetK8SIngressReply_IngressServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetK8SIngressReply_IngressServiceValidationError{}

// Validate checks the field values on
// GetK8SIngressReply_IngressService_IngressServicePath with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetK8SIngressReply_IngressService_IngressServicePath) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetK8SIngressReply_IngressService_IngressServicePath with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// GetK8SIngressReply_IngressService_IngressServicePathMultiError, or nil if
// none found.
func (m *GetK8SIngressReply_IngressService_IngressServicePath) ValidateAll() error {
	return m.validate(true)
}

func (m *GetK8SIngressReply_IngressService_IngressServicePath) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PathType

	// no validation rules for ServiceName

	// no validation rules for ServicePort

	if len(errors) > 0 {
		return GetK8SIngressReply_IngressService_IngressServicePathMultiError(errors)
	}

	return nil
}

// GetK8SIngressReply_IngressService_IngressServicePathMultiError is an error
// wrapping multiple validation errors returned by
// GetK8SIngressReply_IngressService_IngressServicePath.ValidateAll() if the
// designated constraints aren't met.
type GetK8SIngressReply_IngressService_IngressServicePathMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetK8SIngressReply_IngressService_IngressServicePathMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetK8SIngressReply_IngressService_IngressServicePathMultiError) AllErrors() []error { return m }

// GetK8SIngressReply_IngressService_IngressServicePathValidationError is the
// validation error returned by
// GetK8SIngressReply_IngressService_IngressServicePath.Validate if the
// designated constraints aren't met.
type GetK8SIngressReply_IngressService_IngressServicePathValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetK8SIngressReply_IngressService_IngressServicePathValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetK8SIngressReply_IngressService_IngressServicePathValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetK8SIngressReply_IngressService_IngressServicePathValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetK8SIngressReply_IngressService_IngressServicePathValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetK8SIngressReply_IngressService_IngressServicePathValidationError) ErrorName() string {
	return "GetK8SIngressReply_IngressService_IngressServicePathValidationError"
}

// Error satisfies the builtin error interface
func (e GetK8SIngressReply_IngressService_IngressServicePathValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetK8SIngressReply_IngressService_IngressServicePath.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetK8SIngressReply_IngressService_IngressServicePathValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetK8SIngressReply_IngressService_IngressServicePathValidationError{}

// Validate checks the field values on UpdateK8SIngressReq_Service with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateK8SIngressReq_Service) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateK8SIngressReq_Service with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateK8SIngressReq_ServiceMultiError, or nil if none found.
func (m *UpdateK8SIngressReq_Service) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateK8SIngressReq_Service) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TlsSecret

	{
		sorted_keys := make([]string, len(m.GetPath()))
		i := 0
		for key := range m.GetPath() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetPath()[key]
			_ = val

			// no validation rules for Path[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, UpdateK8SIngressReq_ServiceValidationError{
							field:  fmt.Sprintf("Path[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, UpdateK8SIngressReq_ServiceValidationError{
							field:  fmt.Sprintf("Path[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return UpdateK8SIngressReq_ServiceValidationError{
						field:  fmt.Sprintf("Path[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return UpdateK8SIngressReq_ServiceMultiError(errors)
	}

	return nil
}

// UpdateK8SIngressReq_ServiceMultiError is an error wrapping multiple
// validation errors returned by UpdateK8SIngressReq_Service.ValidateAll() if
// the designated constraints aren't met.
type UpdateK8SIngressReq_ServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateK8SIngressReq_ServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateK8SIngressReq_ServiceMultiError) AllErrors() []error { return m }

// UpdateK8SIngressReq_ServiceValidationError is the validation error returned
// by UpdateK8SIngressReq_Service.Validate if the designated constraints
// aren't met.
type UpdateK8SIngressReq_ServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateK8SIngressReq_ServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateK8SIngressReq_ServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateK8SIngressReq_ServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateK8SIngressReq_ServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateK8SIngressReq_ServiceValidationError) ErrorName() string {
	return "UpdateK8SIngressReq_ServiceValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateK8SIngressReq_ServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateK8SIngressReq_Service.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateK8SIngressReq_ServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateK8SIngressReq_ServiceValidationError{}

// Validate checks the field values on UpdateK8SIngressReq_Service_Path with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateK8SIngressReq_Service_Path) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateK8SIngressReq_Service_Path with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateK8SIngressReq_Service_PathMultiError, or nil if none found.
func (m *UpdateK8SIngressReq_Service_Path) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateK8SIngressReq_Service_Path) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PathType

	// no validation rules for ServiceName

	// no validation rules for ServicePort

	if len(errors) > 0 {
		return UpdateK8SIngressReq_Service_PathMultiError(errors)
	}

	return nil
}

// UpdateK8SIngressReq_Service_PathMultiError is an error wrapping multiple
// validation errors returned by
// UpdateK8SIngressReq_Service_Path.ValidateAll() if the designated
// constraints aren't met.
type UpdateK8SIngressReq_Service_PathMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateK8SIngressReq_Service_PathMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateK8SIngressReq_Service_PathMultiError) AllErrors() []error { return m }

// UpdateK8SIngressReq_Service_PathValidationError is the validation error
// returned by UpdateK8SIngressReq_Service_Path.Validate if the designated
// constraints aren't met.
type UpdateK8SIngressReq_Service_PathValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateK8SIngressReq_Service_PathValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateK8SIngressReq_Service_PathValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateK8SIngressReq_Service_PathValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateK8SIngressReq_Service_PathValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateK8SIngressReq_Service_PathValidationError) ErrorName() string {
	return "UpdateK8SIngressReq_Service_PathValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateK8SIngressReq_Service_PathValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateK8SIngressReq_Service_Path.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateK8SIngressReq_Service_PathValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateK8SIngressReq_Service_PathValidationError{}

// Validate checks the field values on
// ListSelfGitlabPlatformReply_GitlabPlatform with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListSelfGitlabPlatformReply_GitlabPlatform) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListSelfGitlabPlatformReply_GitlabPlatform with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListSelfGitlabPlatformReply_GitlabPlatformMultiError, or nil if none found.
func (m *ListSelfGitlabPlatformReply_GitlabPlatform) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSelfGitlabPlatformReply_GitlabPlatform) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for Protocol

	// no validation rules for Hostname

	// no validation rules for Describe

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return ListSelfGitlabPlatformReply_GitlabPlatformMultiError(errors)
	}

	return nil
}

// ListSelfGitlabPlatformReply_GitlabPlatformMultiError is an error wrapping
// multiple validation errors returned by
// ListSelfGitlabPlatformReply_GitlabPlatform.ValidateAll() if the designated
// constraints aren't met.
type ListSelfGitlabPlatformReply_GitlabPlatformMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSelfGitlabPlatformReply_GitlabPlatformMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSelfGitlabPlatformReply_GitlabPlatformMultiError) AllErrors() []error { return m }

// ListSelfGitlabPlatformReply_GitlabPlatformValidationError is the validation
// error returned by ListSelfGitlabPlatformReply_GitlabPlatform.Validate if
// the designated constraints aren't met.
type ListSelfGitlabPlatformReply_GitlabPlatformValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSelfGitlabPlatformReply_GitlabPlatformValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSelfGitlabPlatformReply_GitlabPlatformValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSelfGitlabPlatformReply_GitlabPlatformValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSelfGitlabPlatformReply_GitlabPlatformValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSelfGitlabPlatformReply_GitlabPlatformValidationError) ErrorName() string {
	return "ListSelfGitlabPlatformReply_GitlabPlatformValidationError"
}

// Error satisfies the builtin error interface
func (e ListSelfGitlabPlatformReply_GitlabPlatformValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSelfGitlabPlatformReply_GitlabPlatform.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSelfGitlabPlatformReply_GitlabPlatformValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSelfGitlabPlatformReply_GitlabPlatformValidationError{}

// Validate checks the field values on ListSelfGitlabTokenReply_GitlabToken
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListSelfGitlabTokenReply_GitlabToken) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSelfGitlabTokenReply_GitlabToken
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListSelfGitlabTokenReply_GitlabTokenMultiError, or nil if none found.
func (m *ListSelfGitlabTokenReply_GitlabToken) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSelfGitlabTokenReply_GitlabToken) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for PlatformUuid

	// no validation rules for Name

	// no validation rules for PrivateToken

	// no validation rules for Describe

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return ListSelfGitlabTokenReply_GitlabTokenMultiError(errors)
	}

	return nil
}

// ListSelfGitlabTokenReply_GitlabTokenMultiError is an error wrapping multiple
// validation errors returned by
// ListSelfGitlabTokenReply_GitlabToken.ValidateAll() if the designated
// constraints aren't met.
type ListSelfGitlabTokenReply_GitlabTokenMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSelfGitlabTokenReply_GitlabTokenMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSelfGitlabTokenReply_GitlabTokenMultiError) AllErrors() []error { return m }

// ListSelfGitlabTokenReply_GitlabTokenValidationError is the validation error
// returned by ListSelfGitlabTokenReply_GitlabToken.Validate if the designated
// constraints aren't met.
type ListSelfGitlabTokenReply_GitlabTokenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSelfGitlabTokenReply_GitlabTokenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSelfGitlabTokenReply_GitlabTokenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSelfGitlabTokenReply_GitlabTokenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSelfGitlabTokenReply_GitlabTokenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSelfGitlabTokenReply_GitlabTokenValidationError) ErrorName() string {
	return "ListSelfGitlabTokenReply_GitlabTokenValidationError"
}

// Error satisfies the builtin error interface
func (e ListSelfGitlabTokenReply_GitlabTokenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSelfGitlabTokenReply_GitlabToken.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSelfGitlabTokenReply_GitlabTokenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSelfGitlabTokenReply_GitlabTokenValidationError{}

// Validate checks the field values on ListSelfGitlabGroupReply_Group with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSelfGitlabGroupReply_Group) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSelfGitlabGroupReply_Group with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListSelfGitlabGroupReply_GroupMultiError, or nil if none found.
func (m *ListSelfGitlabGroupReply_Group) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSelfGitlabGroupReply_Group) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for GroupId

	// no validation rules for Describe

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return ListSelfGitlabGroupReply_GroupMultiError(errors)
	}

	return nil
}

// ListSelfGitlabGroupReply_GroupMultiError is an error wrapping multiple
// validation errors returned by ListSelfGitlabGroupReply_Group.ValidateAll()
// if the designated constraints aren't met.
type ListSelfGitlabGroupReply_GroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSelfGitlabGroupReply_GroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSelfGitlabGroupReply_GroupMultiError) AllErrors() []error { return m }

// ListSelfGitlabGroupReply_GroupValidationError is the validation error
// returned by ListSelfGitlabGroupReply_Group.Validate if the designated
// constraints aren't met.
type ListSelfGitlabGroupReply_GroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSelfGitlabGroupReply_GroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSelfGitlabGroupReply_GroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSelfGitlabGroupReply_GroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSelfGitlabGroupReply_GroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSelfGitlabGroupReply_GroupValidationError) ErrorName() string {
	return "ListSelfGitlabGroupReply_GroupValidationError"
}

// Error satisfies the builtin error interface
func (e ListSelfGitlabGroupReply_GroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSelfGitlabGroupReply_Group.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSelfGitlabGroupReply_GroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSelfGitlabGroupReply_GroupValidationError{}

// Validate checks the field values on ListSelfGitlabRepoReply_GitlabRepo with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListSelfGitlabRepoReply_GitlabRepo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSelfGitlabRepoReply_GitlabRepo
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListSelfGitlabRepoReply_GitlabRepoMultiError, or nil if none found.
func (m *ListSelfGitlabRepoReply_GitlabRepo) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSelfGitlabRepoReply_GitlabRepo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for PlatformUuid

	// no validation rules for Name

	// no validation rules for ProjectId

	// no validation rules for WebUrl

	// no validation rules for HttpCloneUrl

	// no validation rules for SshCloneUrl

	// no validation rules for DefaultBranch

	// no validation rules for Namespace

	// no validation rules for Archived

	// no validation rules for Describe

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return ListSelfGitlabRepoReply_GitlabRepoMultiError(errors)
	}

	return nil
}

// ListSelfGitlabRepoReply_GitlabRepoMultiError is an error wrapping multiple
// validation errors returned by
// ListSelfGitlabRepoReply_GitlabRepo.ValidateAll() if the designated
// constraints aren't met.
type ListSelfGitlabRepoReply_GitlabRepoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSelfGitlabRepoReply_GitlabRepoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSelfGitlabRepoReply_GitlabRepoMultiError) AllErrors() []error { return m }

// ListSelfGitlabRepoReply_GitlabRepoValidationError is the validation error
// returned by ListSelfGitlabRepoReply_GitlabRepo.Validate if the designated
// constraints aren't met.
type ListSelfGitlabRepoReply_GitlabRepoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSelfGitlabRepoReply_GitlabRepoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSelfGitlabRepoReply_GitlabRepoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSelfGitlabRepoReply_GitlabRepoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSelfGitlabRepoReply_GitlabRepoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSelfGitlabRepoReply_GitlabRepoValidationError) ErrorName() string {
	return "ListSelfGitlabRepoReply_GitlabRepoValidationError"
}

// Error satisfies the builtin error interface
func (e ListSelfGitlabRepoReply_GitlabRepoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSelfGitlabRepoReply_GitlabRepo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSelfGitlabRepoReply_GitlabRepoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSelfGitlabRepoReply_GitlabRepoValidationError{}

// Validate checks the field values on SelfGitlabRepoMergeHisReply_Merge with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SelfGitlabRepoMergeHisReply_Merge) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SelfGitlabRepoMergeHisReply_Merge
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SelfGitlabRepoMergeHisReply_MergeMultiError, or nil if none found.
func (m *SelfGitlabRepoMergeHisReply_Merge) ValidateAll() error {
	return m.validate(true)
}

func (m *SelfGitlabRepoMergeHisReply_Merge) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Author

	// no validation rules for MergedBy

	// no validation rules for ClosedBy

	// no validation rules for MergeCommitSHA

	// no validation rules for Message

	// no validation rules for SourceBranch

	// no validation rules for TargetBranch

	// no validation rules for MergedAt

	// no validation rules for ClosedAt

	// no validation rules for MergeStatus

	if len(errors) > 0 {
		return SelfGitlabRepoMergeHisReply_MergeMultiError(errors)
	}

	return nil
}

// SelfGitlabRepoMergeHisReply_MergeMultiError is an error wrapping multiple
// validation errors returned by
// SelfGitlabRepoMergeHisReply_Merge.ValidateAll() if the designated
// constraints aren't met.
type SelfGitlabRepoMergeHisReply_MergeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SelfGitlabRepoMergeHisReply_MergeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SelfGitlabRepoMergeHisReply_MergeMultiError) AllErrors() []error { return m }

// SelfGitlabRepoMergeHisReply_MergeValidationError is the validation error
// returned by SelfGitlabRepoMergeHisReply_Merge.Validate if the designated
// constraints aren't met.
type SelfGitlabRepoMergeHisReply_MergeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SelfGitlabRepoMergeHisReply_MergeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SelfGitlabRepoMergeHisReply_MergeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SelfGitlabRepoMergeHisReply_MergeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SelfGitlabRepoMergeHisReply_MergeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SelfGitlabRepoMergeHisReply_MergeValidationError) ErrorName() string {
	return "SelfGitlabRepoMergeHisReply_MergeValidationError"
}

// Error satisfies the builtin error interface
func (e SelfGitlabRepoMergeHisReply_MergeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSelfGitlabRepoMergeHisReply_Merge.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SelfGitlabRepoMergeHisReply_MergeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SelfGitlabRepoMergeHisReply_MergeValidationError{}

// Validate checks the field values on ListSelfGitlabRepoBranchReply_Branch
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListSelfGitlabRepoBranchReply_Branch) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSelfGitlabRepoBranchReply_Branch
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListSelfGitlabRepoBranchReply_BranchMultiError, or nil if none found.
func (m *ListSelfGitlabRepoBranchReply_Branch) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSelfGitlabRepoBranchReply_Branch) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Protected

	// no validation rules for CommitSha

	// no validation rules for CommitMessage

	// no validation rules for Merged

	// no validation rules for IsDefault

	// no validation rules for CanPush

	// no validation rules for DevelopersCanPush

	// no validation rules for DevelopersCanMerge

	// no validation rules for WebURL

	if len(errors) > 0 {
		return ListSelfGitlabRepoBranchReply_BranchMultiError(errors)
	}

	return nil
}

// ListSelfGitlabRepoBranchReply_BranchMultiError is an error wrapping multiple
// validation errors returned by
// ListSelfGitlabRepoBranchReply_Branch.ValidateAll() if the designated
// constraints aren't met.
type ListSelfGitlabRepoBranchReply_BranchMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSelfGitlabRepoBranchReply_BranchMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSelfGitlabRepoBranchReply_BranchMultiError) AllErrors() []error { return m }

// ListSelfGitlabRepoBranchReply_BranchValidationError is the validation error
// returned by ListSelfGitlabRepoBranchReply_Branch.Validate if the designated
// constraints aren't met.
type ListSelfGitlabRepoBranchReply_BranchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSelfGitlabRepoBranchReply_BranchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSelfGitlabRepoBranchReply_BranchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSelfGitlabRepoBranchReply_BranchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSelfGitlabRepoBranchReply_BranchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSelfGitlabRepoBranchReply_BranchValidationError) ErrorName() string {
	return "ListSelfGitlabRepoBranchReply_BranchValidationError"
}

// Error satisfies the builtin error interface
func (e ListSelfGitlabRepoBranchReply_BranchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSelfGitlabRepoBranchReply_Branch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSelfGitlabRepoBranchReply_BranchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSelfGitlabRepoBranchReply_BranchValidationError{}

// Validate checks the field values on
// ListSelfGitlabRepoBranchCommitsReply_Commit with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListSelfGitlabRepoBranchCommitsReply_Commit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListSelfGitlabRepoBranchCommitsReply_Commit with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListSelfGitlabRepoBranchCommitsReply_CommitMultiError, or nil if none found.
func (m *ListSelfGitlabRepoBranchCommitsReply_Commit) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSelfGitlabRepoBranchCommitsReply_Commit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sha

	// no validation rules for Author

	// no validation rules for Message

	// no validation rules for Committer

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return ListSelfGitlabRepoBranchCommitsReply_CommitMultiError(errors)
	}

	return nil
}

// ListSelfGitlabRepoBranchCommitsReply_CommitMultiError is an error wrapping
// multiple validation errors returned by
// ListSelfGitlabRepoBranchCommitsReply_Commit.ValidateAll() if the designated
// constraints aren't met.
type ListSelfGitlabRepoBranchCommitsReply_CommitMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSelfGitlabRepoBranchCommitsReply_CommitMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSelfGitlabRepoBranchCommitsReply_CommitMultiError) AllErrors() []error { return m }

// ListSelfGitlabRepoBranchCommitsReply_CommitValidationError is the validation
// error returned by ListSelfGitlabRepoBranchCommitsReply_Commit.Validate if
// the designated constraints aren't met.
type ListSelfGitlabRepoBranchCommitsReply_CommitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSelfGitlabRepoBranchCommitsReply_CommitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSelfGitlabRepoBranchCommitsReply_CommitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSelfGitlabRepoBranchCommitsReply_CommitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSelfGitlabRepoBranchCommitsReply_CommitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSelfGitlabRepoBranchCommitsReply_CommitValidationError) ErrorName() string {
	return "ListSelfGitlabRepoBranchCommitsReply_CommitValidationError"
}

// Error satisfies the builtin error interface
func (e ListSelfGitlabRepoBranchCommitsReply_CommitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSelfGitlabRepoBranchCommitsReply_Commit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSelfGitlabRepoBranchCommitsReply_CommitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSelfGitlabRepoBranchCommitsReply_CommitValidationError{}

// Validate checks the field values on ListGitHubTokenReply_GithubToken with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListGitHubTokenReply_GithubToken) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGitHubTokenReply_GithubToken with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListGitHubTokenReply_GithubTokenMultiError, or nil if none found.
func (m *ListGitHubTokenReply_GithubToken) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGitHubTokenReply_GithubToken) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for Name

	// no validation rules for PrivateToken

	// no validation rules for Describe

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return ListGitHubTokenReply_GithubTokenMultiError(errors)
	}

	return nil
}

// ListGitHubTokenReply_GithubTokenMultiError is an error wrapping multiple
// validation errors returned by
// ListGitHubTokenReply_GithubToken.ValidateAll() if the designated
// constraints aren't met.
type ListGitHubTokenReply_GithubTokenMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGitHubTokenReply_GithubTokenMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGitHubTokenReply_GithubTokenMultiError) AllErrors() []error { return m }

// ListGitHubTokenReply_GithubTokenValidationError is the validation error
// returned by ListGitHubTokenReply_GithubToken.Validate if the designated
// constraints aren't met.
type ListGitHubTokenReply_GithubTokenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGitHubTokenReply_GithubTokenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGitHubTokenReply_GithubTokenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGitHubTokenReply_GithubTokenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGitHubTokenReply_GithubTokenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGitHubTokenReply_GithubTokenValidationError) ErrorName() string {
	return "ListGitHubTokenReply_GithubTokenValidationError"
}

// Error satisfies the builtin error interface
func (e ListGitHubTokenReply_GithubTokenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGitHubTokenReply_GithubToken.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGitHubTokenReply_GithubTokenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGitHubTokenReply_GithubTokenValidationError{}

// Validate checks the field values on ListGithubRepoReply_Repo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGithubRepoReply_Repo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGithubRepoReply_Repo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGithubRepoReply_RepoMultiError, or nil if none found.
func (m *ListGithubRepoReply_Repo) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGithubRepoReply_Repo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for OrgUuid

	// no validation rules for ProductUuid

	// no validation rules for Name

	// no validation rules for FullName

	// no validation rules for DefaultBranch

	// no validation rules for HttpCloneUrl

	// no validation rules for SshCloneUrl

	// no validation rules for WebUrl

	// no validation rules for Describe

	// no validation rules for Star

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return ListGithubRepoReply_RepoMultiError(errors)
	}

	return nil
}

// ListGithubRepoReply_RepoMultiError is an error wrapping multiple validation
// errors returned by ListGithubRepoReply_Repo.ValidateAll() if the designated
// constraints aren't met.
type ListGithubRepoReply_RepoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGithubRepoReply_RepoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGithubRepoReply_RepoMultiError) AllErrors() []error { return m }

// ListGithubRepoReply_RepoValidationError is the validation error returned by
// ListGithubRepoReply_Repo.Validate if the designated constraints aren't met.
type ListGithubRepoReply_RepoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGithubRepoReply_RepoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGithubRepoReply_RepoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGithubRepoReply_RepoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGithubRepoReply_RepoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGithubRepoReply_RepoValidationError) ErrorName() string {
	return "ListGithubRepoReply_RepoValidationError"
}

// Error satisfies the builtin error interface
func (e ListGithubRepoReply_RepoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGithubRepoReply_Repo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGithubRepoReply_RepoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGithubRepoReply_RepoValidationError{}

// Validate checks the field values on ListGithubRepoBranchReply_Branch with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListGithubRepoBranchReply_Branch) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGithubRepoBranchReply_Branch with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListGithubRepoBranchReply_BranchMultiError, or nil if none found.
func (m *ListGithubRepoBranchReply_Branch) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGithubRepoBranchReply_Branch) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Protected

	// no validation rules for CommitSha

	// no validation rules for CommitMessage

	if len(errors) > 0 {
		return ListGithubRepoBranchReply_BranchMultiError(errors)
	}

	return nil
}

// ListGithubRepoBranchReply_BranchMultiError is an error wrapping multiple
// validation errors returned by
// ListGithubRepoBranchReply_Branch.ValidateAll() if the designated
// constraints aren't met.
type ListGithubRepoBranchReply_BranchMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGithubRepoBranchReply_BranchMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGithubRepoBranchReply_BranchMultiError) AllErrors() []error { return m }

// ListGithubRepoBranchReply_BranchValidationError is the validation error
// returned by ListGithubRepoBranchReply_Branch.Validate if the designated
// constraints aren't met.
type ListGithubRepoBranchReply_BranchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGithubRepoBranchReply_BranchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGithubRepoBranchReply_BranchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGithubRepoBranchReply_BranchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGithubRepoBranchReply_BranchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGithubRepoBranchReply_BranchValidationError) ErrorName() string {
	return "ListGithubRepoBranchReply_BranchValidationError"
}

// Error satisfies the builtin error interface
func (e ListGithubRepoBranchReply_BranchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGithubRepoBranchReply_Branch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGithubRepoBranchReply_BranchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGithubRepoBranchReply_BranchValidationError{}

// Validate checks the field values on ListGithubRepoBranchCommitsReply_Commit
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListGithubRepoBranchCommitsReply_Commit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListGithubRepoBranchCommitsReply_Commit with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListGithubRepoBranchCommitsReply_CommitMultiError, or nil if none found.
func (m *ListGithubRepoBranchCommitsReply_Commit) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGithubRepoBranchCommitsReply_Commit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sha

	// no validation rules for Author

	// no validation rules for Message

	// no validation rules for Committer

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return ListGithubRepoBranchCommitsReply_CommitMultiError(errors)
	}

	return nil
}

// ListGithubRepoBranchCommitsReply_CommitMultiError is an error wrapping
// multiple validation errors returned by
// ListGithubRepoBranchCommitsReply_Commit.ValidateAll() if the designated
// constraints aren't met.
type ListGithubRepoBranchCommitsReply_CommitMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGithubRepoBranchCommitsReply_CommitMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGithubRepoBranchCommitsReply_CommitMultiError) AllErrors() []error { return m }

// ListGithubRepoBranchCommitsReply_CommitValidationError is the validation
// error returned by ListGithubRepoBranchCommitsReply_Commit.Validate if the
// designated constraints aren't met.
type ListGithubRepoBranchCommitsReply_CommitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGithubRepoBranchCommitsReply_CommitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGithubRepoBranchCommitsReply_CommitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGithubRepoBranchCommitsReply_CommitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGithubRepoBranchCommitsReply_CommitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGithubRepoBranchCommitsReply_CommitValidationError) ErrorName() string {
	return "ListGithubRepoBranchCommitsReply_CommitValidationError"
}

// Error satisfies the builtin error interface
func (e ListGithubRepoBranchCommitsReply_CommitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGithubRepoBranchCommitsReply_Commit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGithubRepoBranchCommitsReply_CommitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGithubRepoBranchCommitsReply_CommitValidationError{}

// Validate checks the field values on ListGithubOrgReply_Org with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGithubOrgReply_Org) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGithubOrgReply_Org with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGithubOrgReply_OrgMultiError, or nil if none found.
func (m *ListGithubOrgReply_Org) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGithubOrgReply_Org) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return ListGithubOrgReply_OrgMultiError(errors)
	}

	return nil
}

// ListGithubOrgReply_OrgMultiError is an error wrapping multiple validation
// errors returned by ListGithubOrgReply_Org.ValidateAll() if the designated
// constraints aren't met.
type ListGithubOrgReply_OrgMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGithubOrgReply_OrgMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGithubOrgReply_OrgMultiError) AllErrors() []error { return m }

// ListGithubOrgReply_OrgValidationError is the validation error returned by
// ListGithubOrgReply_Org.Validate if the designated constraints aren't met.
type ListGithubOrgReply_OrgValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGithubOrgReply_OrgValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGithubOrgReply_OrgValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGithubOrgReply_OrgValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGithubOrgReply_OrgValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGithubOrgReply_OrgValidationError) ErrorName() string {
	return "ListGithubOrgReply_OrgValidationError"
}

// Error satisfies the builtin error interface
func (e ListGithubOrgReply_OrgValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGithubOrgReply_Org.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGithubOrgReply_OrgValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGithubOrgReply_OrgValidationError{}

// Validate checks the field values on ListGithubRepoByOrgReply_RepoOrg with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListGithubRepoByOrgReply_RepoOrg) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGithubRepoByOrgReply_RepoOrg with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListGithubRepoByOrgReply_RepoOrgMultiError, or nil if none found.
func (m *ListGithubRepoByOrgReply_RepoOrg) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGithubRepoByOrgReply_RepoOrg) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for FullName

	// no validation rules for HtmlUrl

	// no validation rules for CloneUrl

	// no validation rules for Description

	// no validation rules for Star

	// no validation rules for Owner

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return ListGithubRepoByOrgReply_RepoOrgMultiError(errors)
	}

	return nil
}

// ListGithubRepoByOrgReply_RepoOrgMultiError is an error wrapping multiple
// validation errors returned by
// ListGithubRepoByOrgReply_RepoOrg.ValidateAll() if the designated
// constraints aren't met.
type ListGithubRepoByOrgReply_RepoOrgMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGithubRepoByOrgReply_RepoOrgMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGithubRepoByOrgReply_RepoOrgMultiError) AllErrors() []error { return m }

// ListGithubRepoByOrgReply_RepoOrgValidationError is the validation error
// returned by ListGithubRepoByOrgReply_RepoOrg.Validate if the designated
// constraints aren't met.
type ListGithubRepoByOrgReply_RepoOrgValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGithubRepoByOrgReply_RepoOrgValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGithubRepoByOrgReply_RepoOrgValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGithubRepoByOrgReply_RepoOrgValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGithubRepoByOrgReply_RepoOrgValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGithubRepoByOrgReply_RepoOrgValidationError) ErrorName() string {
	return "ListGithubRepoByOrgReply_RepoOrgValidationError"
}

// Error satisfies the builtin error interface
func (e ListGithubRepoByOrgReply_RepoOrgValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGithubRepoByOrgReply_RepoOrg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGithubRepoByOrgReply_RepoOrgValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGithubRepoByOrgReply_RepoOrgValidationError{}

// Validate checks the field values on ListServiceUrlReply_ServiceUrl with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListServiceUrlReply_ServiceUrl) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServiceUrlReply_ServiceUrl with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListServiceUrlReply_ServiceUrlMultiError, or nil if none found.
func (m *ListServiceUrlReply_ServiceUrl) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServiceUrlReply_ServiceUrl) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for OrgUuid

	// no validation rules for ProductUuid

	// no validation rules for ProductEnvUuid

	// no validation rules for Name

	// no validation rules for Url

	// no validation rules for Describe

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return ListServiceUrlReply_ServiceUrlMultiError(errors)
	}

	return nil
}

// ListServiceUrlReply_ServiceUrlMultiError is an error wrapping multiple
// validation errors returned by ListServiceUrlReply_ServiceUrl.ValidateAll()
// if the designated constraints aren't met.
type ListServiceUrlReply_ServiceUrlMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServiceUrlReply_ServiceUrlMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServiceUrlReply_ServiceUrlMultiError) AllErrors() []error { return m }

// ListServiceUrlReply_ServiceUrlValidationError is the validation error
// returned by ListServiceUrlReply_ServiceUrl.Validate if the designated
// constraints aren't met.
type ListServiceUrlReply_ServiceUrlValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceUrlReply_ServiceUrlValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceUrlReply_ServiceUrlValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceUrlReply_ServiceUrlValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceUrlReply_ServiceUrlValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceUrlReply_ServiceUrlValidationError) ErrorName() string {
	return "ListServiceUrlReply_ServiceUrlValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceUrlReply_ServiceUrlValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceUrlReply_ServiceUrl.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceUrlReply_ServiceUrlValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceUrlReply_ServiceUrlValidationError{}

// Validate checks the field values on
// ListContainerRegistryReply_ContainerRegistry with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListContainerRegistryReply_ContainerRegistry) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListContainerRegistryReply_ContainerRegistry with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListContainerRegistryReply_ContainerRegistryMultiError, or nil if none found.
func (m *ListContainerRegistryReply_ContainerRegistry) ValidateAll() error {
	return m.validate(true)
}

func (m *ListContainerRegistryReply_ContainerRegistry) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for Username

	// no validation rules for Url

	// no validation rules for Email

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return ListContainerRegistryReply_ContainerRegistryMultiError(errors)
	}

	return nil
}

// ListContainerRegistryReply_ContainerRegistryMultiError is an error wrapping
// multiple validation errors returned by
// ListContainerRegistryReply_ContainerRegistry.ValidateAll() if the
// designated constraints aren't met.
type ListContainerRegistryReply_ContainerRegistryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListContainerRegistryReply_ContainerRegistryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListContainerRegistryReply_ContainerRegistryMultiError) AllErrors() []error { return m }

// ListContainerRegistryReply_ContainerRegistryValidationError is the
// validation error returned by
// ListContainerRegistryReply_ContainerRegistry.Validate if the designated
// constraints aren't met.
type ListContainerRegistryReply_ContainerRegistryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListContainerRegistryReply_ContainerRegistryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListContainerRegistryReply_ContainerRegistryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListContainerRegistryReply_ContainerRegistryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListContainerRegistryReply_ContainerRegistryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListContainerRegistryReply_ContainerRegistryValidationError) ErrorName() string {
	return "ListContainerRegistryReply_ContainerRegistryValidationError"
}

// Error satisfies the builtin error interface
func (e ListContainerRegistryReply_ContainerRegistryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContainerRegistryReply_ContainerRegistry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListContainerRegistryReply_ContainerRegistryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListContainerRegistryReply_ContainerRegistryValidationError{}

// Validate checks the field values on
// ListPublicContainerImageReply_ContainerImage with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListPublicContainerImageReply_ContainerImage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListPublicContainerImageReply_ContainerImage with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListPublicContainerImageReply_ContainerImageMultiError, or nil if none found.
func (m *ListPublicContainerImageReply_ContainerImage) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPublicContainerImageReply_ContainerImage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for OrgUuid

	// no validation rules for ProductUuid

	// no validation rules for Name

	// no validation rules for ImageUrl

	// no validation rules for AuthorUuid

	// no validation rules for Describe

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return ListPublicContainerImageReply_ContainerImageMultiError(errors)
	}

	return nil
}

// ListPublicContainerImageReply_ContainerImageMultiError is an error wrapping
// multiple validation errors returned by
// ListPublicContainerImageReply_ContainerImage.ValidateAll() if the
// designated constraints aren't met.
type ListPublicContainerImageReply_ContainerImageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPublicContainerImageReply_ContainerImageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPublicContainerImageReply_ContainerImageMultiError) AllErrors() []error { return m }

// ListPublicContainerImageReply_ContainerImageValidationError is the
// validation error returned by
// ListPublicContainerImageReply_ContainerImage.Validate if the designated
// constraints aren't met.
type ListPublicContainerImageReply_ContainerImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPublicContainerImageReply_ContainerImageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPublicContainerImageReply_ContainerImageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPublicContainerImageReply_ContainerImageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPublicContainerImageReply_ContainerImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPublicContainerImageReply_ContainerImageValidationError) ErrorName() string {
	return "ListPublicContainerImageReply_ContainerImageValidationError"
}

// Error satisfies the builtin error interface
func (e ListPublicContainerImageReply_ContainerImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPublicContainerImageReply_ContainerImage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPublicContainerImageReply_ContainerImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPublicContainerImageReply_ContainerImageValidationError{}

// Validate checks the field values on GetReliabilityReply_Reliability with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReliabilityReply_Reliability) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReliabilityReply_Reliability with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetReliabilityReply_ReliabilityMultiError, or nil if none found.
func (m *GetReliabilityReply_Reliability) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReliabilityReply_Reliability) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for ProductUuid

	// no validation rules for DailyTime

	// no validation rules for ReliabilityPercent

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return GetReliabilityReply_ReliabilityMultiError(errors)
	}

	return nil
}

// GetReliabilityReply_ReliabilityMultiError is an error wrapping multiple
// validation errors returned by GetReliabilityReply_Reliability.ValidateAll()
// if the designated constraints aren't met.
type GetReliabilityReply_ReliabilityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReliabilityReply_ReliabilityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReliabilityReply_ReliabilityMultiError) AllErrors() []error { return m }

// GetReliabilityReply_ReliabilityValidationError is the validation error
// returned by GetReliabilityReply_Reliability.Validate if the designated
// constraints aren't met.
type GetReliabilityReply_ReliabilityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReliabilityReply_ReliabilityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReliabilityReply_ReliabilityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReliabilityReply_ReliabilityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReliabilityReply_ReliabilityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReliabilityReply_ReliabilityValidationError) ErrorName() string {
	return "GetReliabilityReply_ReliabilityValidationError"
}

// Error satisfies the builtin error interface
func (e GetReliabilityReply_ReliabilityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReliabilityReply_Reliability.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReliabilityReply_ReliabilityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReliabilityReply_ReliabilityValidationError{}

// Validate checks the field values on
// ListWebServiceResourceReply_WebServiceResource with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListWebServiceResourceReply_WebServiceResource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListWebServiceResourceReply_WebServiceResource with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// ListWebServiceResourceReply_WebServiceResourceMultiError, or nil if none found.
func (m *ListWebServiceResourceReply_WebServiceResource) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWebServiceResourceReply_WebServiceResource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for Protocol

	// no validation rules for ServerName

	// no validation rules for HealthCheckUri

	// no validation rules for Describe

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return ListWebServiceResourceReply_WebServiceResourceMultiError(errors)
	}

	return nil
}

// ListWebServiceResourceReply_WebServiceResourceMultiError is an error
// wrapping multiple validation errors returned by
// ListWebServiceResourceReply_WebServiceResource.ValidateAll() if the
// designated constraints aren't met.
type ListWebServiceResourceReply_WebServiceResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWebServiceResourceReply_WebServiceResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWebServiceResourceReply_WebServiceResourceMultiError) AllErrors() []error { return m }

// ListWebServiceResourceReply_WebServiceResourceValidationError is the
// validation error returned by
// ListWebServiceResourceReply_WebServiceResource.Validate if the designated
// constraints aren't met.
type ListWebServiceResourceReply_WebServiceResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWebServiceResourceReply_WebServiceResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWebServiceResourceReply_WebServiceResourceValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListWebServiceResourceReply_WebServiceResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWebServiceResourceReply_WebServiceResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWebServiceResourceReply_WebServiceResourceValidationError) ErrorName() string {
	return "ListWebServiceResourceReply_WebServiceResourceValidationError"
}

// Error satisfies the builtin error interface
func (e ListWebServiceResourceReply_WebServiceResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWebServiceResourceReply_WebServiceResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWebServiceResourceReply_WebServiceResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWebServiceResourceReply_WebServiceResourceValidationError{}

// Validate checks the field values on
// GetWebServiceResourcePromSDReply_WebServiceResource with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetWebServiceResourcePromSDReply_WebServiceResource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetWebServiceResourcePromSDReply_WebServiceResource with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// GetWebServiceResourcePromSDReply_WebServiceResourceMultiError, or nil if
// none found.
func (m *GetWebServiceResourcePromSDReply_WebServiceResource) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWebServiceResourcePromSDReply_WebServiceResource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for Protocol

	// no validation rules for ServerName

	// no validation rules for HealthCheckUri

	// no validation rules for Describe

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return GetWebServiceResourcePromSDReply_WebServiceResourceMultiError(errors)
	}

	return nil
}

// GetWebServiceResourcePromSDReply_WebServiceResourceMultiError is an error
// wrapping multiple validation errors returned by
// GetWebServiceResourcePromSDReply_WebServiceResource.ValidateAll() if the
// designated constraints aren't met.
type GetWebServiceResourcePromSDReply_WebServiceResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWebServiceResourcePromSDReply_WebServiceResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWebServiceResourcePromSDReply_WebServiceResourceMultiError) AllErrors() []error { return m }

// GetWebServiceResourcePromSDReply_WebServiceResourceValidationError is the
// validation error returned by
// GetWebServiceResourcePromSDReply_WebServiceResource.Validate if the
// designated constraints aren't met.
type GetWebServiceResourcePromSDReply_WebServiceResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWebServiceResourcePromSDReply_WebServiceResourceValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetWebServiceResourcePromSDReply_WebServiceResourceValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetWebServiceResourcePromSDReply_WebServiceResourceValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetWebServiceResourcePromSDReply_WebServiceResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWebServiceResourcePromSDReply_WebServiceResourceValidationError) ErrorName() string {
	return "GetWebServiceResourcePromSDReply_WebServiceResourceValidationError"
}

// Error satisfies the builtin error interface
func (e GetWebServiceResourcePromSDReply_WebServiceResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWebServiceResourcePromSDReply_WebServiceResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWebServiceResourcePromSDReply_WebServiceResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWebServiceResourcePromSDReply_WebServiceResourceValidationError{}
