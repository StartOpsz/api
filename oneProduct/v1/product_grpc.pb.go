// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.14.0
// source: oneProduct/v1/product.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Product_CreateOrgProduct_FullMethodName                     = "/product.v1.Product/CreateOrgProduct"
	Product_ListOrgProduct_FullMethodName                       = "/product.v1.Product/ListOrgProduct"
	Product_DelOrgProduct_FullMethodName                        = "/product.v1.Product/DelOrgProduct"
	Product_VerifyProductInOrg_FullMethodName                   = "/product.v1.Product/VerifyProductInOrg"
	Product_GetOrgProduct_FullMethodName                        = "/product.v1.Product/GetOrgProduct"
	Product_CreateOrgProductGroup_FullMethodName                = "/product.v1.Product/CreateOrgProductGroup"
	Product_ListOrgProductGroup_FullMethodName                  = "/product.v1.Product/ListOrgProductGroup"
	Product_DelOrgProductGroup_FullMethodName                   = "/product.v1.Product/DelOrgProductGroup"
	Product_AddOrgProductGroupMember_FullMethodName             = "/product.v1.Product/AddOrgProductGroupMember"
	Product_ListOrgProductGroupMember_FullMethodName            = "/product.v1.Product/ListOrgProductGroupMember"
	Product_EvictOrgProductGroupMember_FullMethodName           = "/product.v1.Product/EvictOrgProductGroupMember"
	Product_LeaveOrgProductGroupMember_FullMethodName           = "/product.v1.Product/LeaveOrgProductGroupMember"
	Product_AddOrgProductEnv_FullMethodName                     = "/product.v1.Product/AddOrgProductEnv"
	Product_ListOrgProductEnv_FullMethodName                    = "/product.v1.Product/ListOrgProductEnv"
	Product_DelOrgProductEnv_FullMethodName                     = "/product.v1.Product/DelOrgProductEnv"
	Product_GetOrgProductEnv_FullMethodName                     = "/product.v1.Product/GetOrgProductEnv"
	Product_AddK8SCluster_FullMethodName                        = "/product.v1.Product/AddK8SCluster"
	Product_ListK8SCluster_FullMethodName                       = "/product.v1.Product/ListK8SCluster"
	Product_ExistK8SCluster_FullMethodName                      = "/product.v1.Product/ExistK8SCluster"
	Product_DelK8SCluster_FullMethodName                        = "/product.v1.Product/DelK8SCluster"
	Product_AddK8SClusterEdge_FullMethodName                    = "/product.v1.Product/AddK8SClusterEdge"
	Product_GetK8SClusterEdge_FullMethodName                    = "/product.v1.Product/GetK8SClusterEdge"
	Product_DelK8SClusterEdge_FullMethodName                    = "/product.v1.Product/DelK8SClusterEdge"
	Product_ListK8SClusterNameSpace_FullMethodName              = "/product.v1.Product/ListK8SClusterNameSpace"
	Product_DelK8SClusterNameSpace_FullMethodName               = "/product.v1.Product/DelK8SClusterNameSpace"
	Product_CreateK8SClusterNameSpace_FullMethodName            = "/product.v1.Product/CreateK8SClusterNameSpace"
	Product_GetK8SClusterNode_FullMethodName                    = "/product.v1.Product/GetK8SClusterNode"
	Product_ListK8SClusterNode_FullMethodName                   = "/product.v1.Product/ListK8SClusterNode"
	Product_ListK8SPod_FullMethodName                           = "/product.v1.Product/ListK8SPod"
	Product_GetK8SPod_FullMethodName                            = "/product.v1.Product/GetK8SPod"
	Product_SearchK8SPod_FullMethodName                         = "/product.v1.Product/SearchK8SPod"
	Product_EvictK8SPod_FullMethodName                          = "/product.v1.Product/EvictK8SPod"
	Product_DelK8SPod_FullMethodName                            = "/product.v1.Product/DelK8SPod"
	Product_CleanEvictK8SPod_FullMethodName                     = "/product.v1.Product/CleanEvictK8SPod"
	Product_CreateK8SClusterConfigMap_FullMethodName            = "/product.v1.Product/CreateK8SClusterConfigMap"
	Product_ListK8SClusterConfigMap_FullMethodName              = "/product.v1.Product/ListK8SClusterConfigMap"
	Product_GetK8SClusterConfigMap_FullMethodName               = "/product.v1.Product/GetK8SClusterConfigMap"
	Product_UpdateK8SClusterConfigMap_FullMethodName            = "/product.v1.Product/UpdateK8SClusterConfigMap"
	Product_DelK8SClusterConfigMap_FullMethodName               = "/product.v1.Product/DelK8SClusterConfigMap"
	Product_ListSecret_FullMethodName                           = "/product.v1.Product/ListSecret"
	Product_GetSecret_FullMethodName                            = "/product.v1.Product/GetSecret"
	Product_DelSecret_FullMethodName                            = "/product.v1.Product/DelSecret"
	Product_CreateDockerSecret_FullMethodName                   = "/product.v1.Product/CreateDockerSecret"
	Product_UpdateDockerSecret_FullMethodName                   = "/product.v1.Product/UpdateDockerSecret"
	Product_CreateTlsSecret_FullMethodName                      = "/product.v1.Product/CreateTlsSecret"
	Product_UpdateTlsSecret_FullMethodName                      = "/product.v1.Product/UpdateTlsSecret"
	Product_CreateOpaqueSecret_FullMethodName                   = "/product.v1.Product/CreateOpaqueSecret"
	Product_UpdateOpaqueSecret_FullMethodName                   = "/product.v1.Product/UpdateOpaqueSecret"
	Product_CreateSSHAuthSecret_FullMethodName                  = "/product.v1.Product/CreateSSHAuthSecret"
	Product_UpdateSSHAuthSecret_FullMethodName                  = "/product.v1.Product/UpdateSSHAuthSecret"
	Product_CreateBasicAuthSecret_FullMethodName                = "/product.v1.Product/CreateBasicAuthSecret"
	Product_UpdateBasicAuthSecret_FullMethodName                = "/product.v1.Product/UpdateBasicAuthSecret"
	Product_ListK8SClusterDeployment_FullMethodName             = "/product.v1.Product/ListK8SClusterDeployment"
	Product_GetK8SClusterDeployment_FullMethodName              = "/product.v1.Product/GetK8SClusterDeployment"
	Product_DelK8SClusterDeployment_FullMethodName              = "/product.v1.Product/DelK8SClusterDeployment"
	Product_UpdateK8SClusterDeployment_FullMethodName           = "/product.v1.Product/UpdateK8SClusterDeployment"
	Product_UpdateK8SClusterDeploymentReplicaSet_FullMethodName = "/product.v1.Product/UpdateK8SClusterDeploymentReplicaSet"
	Product_CreateK8SService_FullMethodName                     = "/product.v1.Product/CreateK8SService"
	Product_ListK8SService_FullMethodName                       = "/product.v1.Product/ListK8SService"
	Product_GetK8SService_FullMethodName                        = "/product.v1.Product/GetK8SService"
	Product_DelK8SService_FullMethodName                        = "/product.v1.Product/DelK8SService"
	Product_CreateK8SIngress_FullMethodName                     = "/product.v1.Product/CreateK8SIngress"
	Product_ListK8SIngress_FullMethodName                       = "/product.v1.Product/ListK8SIngress"
	Product_GetK8SIngress_FullMethodName                        = "/product.v1.Product/GetK8SIngress"
	Product_DelK8SIngress_FullMethodName                        = "/product.v1.Product/DelK8SIngress"
	Product_UpdateK8SIngress_FullMethodName                     = "/product.v1.Product/UpdateK8SIngress"
	Product_ListK8SObjectPublicTemplate_FullMethodName          = "/product.v1.Product/ListK8SObjectPublicTemplate"
	Product_GetK8SObjectPublicTemplate_FullMethodName           = "/product.v1.Product/GetK8SObjectPublicTemplate"
	Product_CreateK8SObjectPrivateTemplate_FullMethodName       = "/product.v1.Product/CreateK8SObjectPrivateTemplate"
	Product_ListK8SObjectPrivateTemplate_FullMethodName         = "/product.v1.Product/ListK8SObjectPrivateTemplate"
	Product_GetK8SObjectPrivateTemplate_FullMethodName          = "/product.v1.Product/GetK8SObjectPrivateTemplate"
	Product_DelK8SObjectPrivateTemplate_FullMethodName          = "/product.v1.Product/DelK8SObjectPrivateTemplate"
	Product_CreateServiceUrl_FullMethodName                     = "/product.v1.Product/CreateServiceUrl"
	Product_ListServiceUrl_FullMethodName                       = "/product.v1.Product/ListServiceUrl"
	Product_DelServiceUrl_FullMethodName                        = "/product.v1.Product/DelServiceUrl"
	Product_GenerateServiceUrlAuthKey_FullMethodName            = "/product.v1.Product/GenerateServiceUrlAuthKey"
	Product_ListServiceUrlAuthKey_FullMethodName                = "/product.v1.Product/ListServiceUrlAuthKey"
	Product_DelServiceUrlAuthKey_FullMethodName                 = "/product.v1.Product/DelServiceUrlAuthKey"
	Product_GenerateServiceUrlAuthUrl_FullMethodName            = "/product.v1.Product/GenerateServiceUrlAuthUrl"
	Product_AddContainerRegistry_FullMethodName                 = "/product.v1.Product/AddContainerRegistry"
	Product_ListContainerRegistry_FullMethodName                = "/product.v1.Product/ListContainerRegistry"
	Product_DelContainerRegistry_FullMethodName                 = "/product.v1.Product/DelContainerRegistry"
	Product_GetContainerRegistry_FullMethodName                 = "/product.v1.Product/GetContainerRegistry"
	Product_AddPublicContainerImage_FullMethodName              = "/product.v1.Product/AddPublicContainerImage"
	Product_ListPublicContainerImage_FullMethodName             = "/product.v1.Product/ListPublicContainerImage"
	Product_DelPublicContainerImage_FullMethodName              = "/product.v1.Product/DelPublicContainerImage"
	Product_CreateSelfGitlabPlatform_FullMethodName             = "/product.v1.Product/CreateSelfGitlabPlatform"
	Product_ListSelfGitlabPlatform_FullMethodName               = "/product.v1.Product/ListSelfGitlabPlatform"
	Product_DelSelfGitlabPlatform_FullMethodName                = "/product.v1.Product/DelSelfGitlabPlatform"
	Product_CreateSelfGitlabToken_FullMethodName                = "/product.v1.Product/CreateSelfGitlabToken"
	Product_ListSelfGitlabToken_FullMethodName                  = "/product.v1.Product/ListSelfGitlabToken"
	Product_DelSelfGitlabToken_FullMethodName                   = "/product.v1.Product/DelSelfGitlabToken"
	Product_CreateSelfGitlabRepo_FullMethodName                 = "/product.v1.Product/CreateSelfGitlabRepo"
	Product_ImportSelfGitlabRepo_FullMethodName                 = "/product.v1.Product/ImportSelfGitlabRepo"
	Product_ListSelfGitlabRepo_FullMethodName                   = "/product.v1.Product/ListSelfGitlabRepo"
	Product_DelSelfGitlabRepo_FullMethodName                    = "/product.v1.Product/DelSelfGitlabRepo"
	Product_ArchiveSelfGitlabRepo_FullMethodName                = "/product.v1.Product/ArchiveSelfGitlabRepo"
	Product_MergeSelfGitlabRepo_FullMethodName                  = "/product.v1.Product/MergeSelfGitlabRepo"
	Product_SelfGitlabRepoMergeHis_FullMethodName               = "/product.v1.Product/SelfGitlabRepoMergeHis"
	Product_ListSelfGitlabRepoBranch_FullMethodName             = "/product.v1.Product/ListSelfGitlabRepoBranch"
	Product_CreateSelfGitlabRepoBranch_FullMethodName           = "/product.v1.Product/CreateSelfGitlabRepoBranch"
	Product_DelSelfGitlabRepoBranch_FullMethodName              = "/product.v1.Product/DelSelfGitlabRepoBranch"
	Product_ProtectSelfGitlabRepoBranch_FullMethodName          = "/product.v1.Product/ProtectSelfGitlabRepoBranch"
	Product_UnprotectSelfGitlabRepoBranch_FullMethodName        = "/product.v1.Product/UnprotectSelfGitlabRepoBranch"
	Product_ListSelfGitlabRepoBranchCommits_FullMethodName      = "/product.v1.Product/ListSelfGitlabRepoBranchCommits"
	Product_CreateSelfGitlabGroup_FullMethodName                = "/product.v1.Product/CreateSelfGitlabGroup"
	Product_ListSelfGitlabGroup_FullMethodName                  = "/product.v1.Product/ListSelfGitlabGroup"
	Product_CreateGitHubToken_FullMethodName                    = "/product.v1.Product/CreateGitHubToken"
	Product_ListGitHubToken_FullMethodName                      = "/product.v1.Product/ListGitHubToken"
	Product_DelGitHubToken_FullMethodName                       = "/product.v1.Product/DelGitHubToken"
	Product_ImportGithubRepo_FullMethodName                     = "/product.v1.Product/ImportGithubRepo"
	Product_CreateGithubRepo_FullMethodName                     = "/product.v1.Product/CreateGithubRepo"
	Product_ListGithubRepo_FullMethodName                       = "/product.v1.Product/ListGithubRepo"
	Product_DelGithubRepo_FullMethodName                        = "/product.v1.Product/DelGithubRepo"
	Product_ArchiveGithubRepo_FullMethodName                    = "/product.v1.Product/ArchiveGithubRepo"
	Product_MergeGithubRepo_FullMethodName                      = "/product.v1.Product/MergeGithubRepo"
	Product_ProtectGithubRepoBranch_FullMethodName              = "/product.v1.Product/ProtectGithubRepoBranch"
	Product_UnprotectGithubRepoBranch_FullMethodName            = "/product.v1.Product/UnprotectGithubRepoBranch"
	Product_ListGithubOrg_FullMethodName                        = "/product.v1.Product/ListGithubOrg"
	Product_ListGithubRepoByOrg_FullMethodName                  = "/product.v1.Product/ListGithubRepoByOrg"
	Product_ListGithubRepoBranch_FullMethodName                 = "/product.v1.Product/ListGithubRepoBranch"
	Product_GetGithubUser_FullMethodName                        = "/product.v1.Product/GetGithubUser"
	Product_ListGithubRepoBranchCommits_FullMethodName          = "/product.v1.Product/ListGithubRepoBranchCommits"
	Product_SelfGitlabRepoBuildContainerImage_FullMethodName    = "/product.v1.Product/SelfGitlabRepoBuildContainerImage"
	Product_GithubRepoBuildContainerImage_FullMethodName        = "/product.v1.Product/GithubRepoBuildContainerImage"
	Product_SelfGitlabRepoExecCiTemplate_FullMethodName         = "/product.v1.Product/SelfGitlabRepoExecCiTemplate"
	Product_GithubRepoExecCiTemplate_FullMethodName             = "/product.v1.Product/GithubRepoExecCiTemplate"
	Product_CreateProgram_FullMethodName                        = "/product.v1.Product/CreateProgram"
	Product_GetProgramByUuid_FullMethodName                     = "/product.v1.Product/GetProgramByUuid"
	Product_GetSelfProgram_FullMethodName                       = "/product.v1.Product/GetSelfProgram"
	Product_SearchProgram_FullMethodName                        = "/product.v1.Product/SearchProgram"
	Product_CreateProgramMarket_FullMethodName                  = "/product.v1.Product/CreateProgramMarket"
	Product_GetProgramMarketByUuid_FullMethodName               = "/product.v1.Product/GetProgramMarketByUuid"
	Product_GetSelfProgramMarket_FullMethodName                 = "/product.v1.Product/GetSelfProgramMarket"
	Product_SearchProgramMarket_FullMethodName                  = "/product.v1.Product/SearchProgramMarket"
	Product_CreateReliability_FullMethodName                    = "/product.v1.Product/CreateReliability"
	Product_GetReliability_FullMethodName                       = "/product.v1.Product/GetReliability"
	Product_CreateWebServiceResource_FullMethodName             = "/product.v1.Product/CreateWebServiceResource"
	Product_ListWebServiceResource_FullMethodName               = "/product.v1.Product/ListWebServiceResource"
	Product_DelWebServiceResource_FullMethodName                = "/product.v1.Product/DelWebServiceResource"
	Product_UpdateWebServiceResource_FullMethodName             = "/product.v1.Product/UpdateWebServiceResource"
	Product_GetWebServiceResourcePromSD_FullMethodName          = "/product.v1.Product/GetWebServiceResourcePromSD"
)

// ProductClient is the client API for Product service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductClient interface {
	// 产品
	// 创建产品
	CreateOrgProduct(ctx context.Context, in *CreateOrgProductReq, opts ...grpc.CallOption) (*CreateOrgProductReply, error)
	// 获取产品
	ListOrgProduct(ctx context.Context, in *ListOrgProductReq, opts ...grpc.CallOption) (*ListOrgProductReply, error)
	// 删除产品 - 暂时不支持删除，需要做资源清理
	DelOrgProduct(ctx context.Context, in *DelOrgProductReq, opts ...grpc.CallOption) (*DelOrgProductReply, error)
	// 验证产品是否在组织内
	VerifyProductInOrg(ctx context.Context, in *VerifyProductInOrgReq, opts ...grpc.CallOption) (*VerifyProductInOrgReply, error)
	// 获取产品信息 - inside
	GetOrgProduct(ctx context.Context, in *GetOrgProductReq, opts ...grpc.CallOption) (*GetOrgProductReply, error)
	// 产品组
	// 创建组织产品组
	CreateOrgProductGroup(ctx context.Context, in *CreateOrgProductGroupReq, opts ...grpc.CallOption) (*CreateOrgProductGroupReply, error)
	// 列出组织产品组
	ListOrgProductGroup(ctx context.Context, in *ListOrgProductGroupReq, opts ...grpc.CallOption) (*ListOrgProductGroupReply, error)
	// 删除组织产品组
	DelOrgProductGroup(ctx context.Context, in *DelOrgProductGroupReq, opts ...grpc.CallOption) (*DelOrgProductGroupReply, error)
	// 产品组成员
	// 添加组织产品组成员
	AddOrgProductGroupMember(ctx context.Context, in *AddOrgProductGroupMemberReq, opts ...grpc.CallOption) (*AddOrgProductGroupMemberReply, error)
	// 列出组织产品组成员
	ListOrgProductGroupMember(ctx context.Context, in *ListOrgProductGroupMemberReq, opts ...grpc.CallOption) (*ListOrgProductGroupMemberReply, error)
	// 驱逐组织产品组成员
	EvictOrgProductGroupMember(ctx context.Context, in *EvictOrgProductGroupMemberReq, opts ...grpc.CallOption) (*EvictOrgProductGroupMemberReply, error)
	// 组织产品组成员离开组织产品组
	LeaveOrgProductGroupMember(ctx context.Context, in *LeaveOrgProductGroupMemberReq, opts ...grpc.CallOption) (*LeaveOrgProductGroupMemberReply, error)
	// 产品环境
	// 添加产品环境
	AddOrgProductEnv(ctx context.Context, in *AddOrgProductEnvReq, opts ...grpc.CallOption) (*AddOrgProductEnvReply, error)
	// 获取产品环境
	ListOrgProductEnv(ctx context.Context, in *ListOrgProductEnvReq, opts ...grpc.CallOption) (*ListOrgProductEnvReply, error)
	// 删除产品环境
	DelOrgProductEnv(ctx context.Context, in *DelOrgProductEnvReq, opts ...grpc.CallOption) (*DelOrgProductEnvReply, error)
	// 获取产品环境信息 - inside
	GetOrgProductEnv(ctx context.Context, in *GetOrgProductEnvReq, opts ...grpc.CallOption) (*GetOrgProductEnvReply, error)
	// K8S集群
	// 添加K8S集群
	AddK8SCluster(ctx context.Context, in *AddK8SClusterReq, opts ...grpc.CallOption) (*AddK8SClusterReply, error)
	// 列出K8S集群
	ListK8SCluster(ctx context.Context, in *ListK8SClusterReq, opts ...grpc.CallOption) (*ListK8SClusterReply, error)
	// 验证K8S集群是否存在
	ExistK8SCluster(ctx context.Context, in *ExistK8SClusterReq, opts ...grpc.CallOption) (*ExistK8SClusterReply, error)
	// 获取K8S集群
	// rpc GetK8SCluster (GetK8SClusterReq) returns (GetK8SClusterReply) {};
	// 删除K8S集群
	DelK8SCluster(ctx context.Context, in *DelK8SClusterReq, opts ...grpc.CallOption) (*DelK8SClusterReply, error)
	// 添加K8S集群KubeEdge
	AddK8SClusterEdge(ctx context.Context, in *AddK8SClusterEdgeReq, opts ...grpc.CallOption) (*AddK8SClusterEdgeReply, error)
	// 获取K8S集群KubeEdge
	GetK8SClusterEdge(ctx context.Context, in *GetK8SClusterEdgeReq, opts ...grpc.CallOption) (*GetK8SClusterEdgeReply, error)
	// 删除K8S集群KubeEdge
	DelK8SClusterEdge(ctx context.Context, in *DelK8SClusterEdgeReq, opts ...grpc.CallOption) (*DelK8SClusterEdgeReply, error)
	// 列出K8S集群NameSpace
	ListK8SClusterNameSpace(ctx context.Context, in *ListK8SClusterNameSpaceReq, opts ...grpc.CallOption) (*ListK8SClusterNameSpaceReply, error)
	// 删除K8S集群NameSpace
	DelK8SClusterNameSpace(ctx context.Context, in *DelK8SClusterNameSpaceReq, opts ...grpc.CallOption) (*DelK8SClusterNameSpaceReply, error)
	// 创建K8S集群NameSpace
	CreateK8SClusterNameSpace(ctx context.Context, in *CreateK8SClusterNameSpaceReq, opts ...grpc.CallOption) (*CreateK8SClusterNameSpaceReply, error)
	// 获取K8S集群节点
	GetK8SClusterNode(ctx context.Context, in *GetK8SClusterNodeReq, opts ...grpc.CallOption) (*GetK8SClusterNodeReply, error)
	// 列出K8S集群节点
	ListK8SClusterNode(ctx context.Context, in *ListK8SClusterNodeReq, opts ...grpc.CallOption) (*ListK8SClusterNodeReply, error)
	// 列出K8S集群Pod
	ListK8SPod(ctx context.Context, in *ListK8SPodReq, opts ...grpc.CallOption) (*ListK8SPodReply, error)
	// 获取K8S集群Pod
	GetK8SPod(ctx context.Context, in *GetK8SPodReq, opts ...grpc.CallOption) (*GetK8SPodReply, error)
	// 搜索K8S集群Pod
	SearchK8SPod(ctx context.Context, in *SearchK8SPodReq, opts ...grpc.CallOption) (*SearchK8SPodReply, error)
	// 驱逐K8S集群Pod
	EvictK8SPod(ctx context.Context, in *EvictK8SPodReq, opts ...grpc.CallOption) (*EvictK8SPodReply, error)
	// 删除K8S集群Pod
	DelK8SPod(ctx context.Context, in *DelK8SPodReq, opts ...grpc.CallOption) (*DelK8SPodReply, error)
	// 清理被驱逐的Pod
	CleanEvictK8SPod(ctx context.Context, in *CleanEvictK8SPodReq, opts ...grpc.CallOption) (*CleanEvictK8SPodReply, error)
	// 创建K8S集群ConfigMap
	CreateK8SClusterConfigMap(ctx context.Context, in *CreateK8SClusterConfigMapReq, opts ...grpc.CallOption) (*CreateK8SClusterConfigMapReply, error)
	// 列出K8S集群ConfigMap
	ListK8SClusterConfigMap(ctx context.Context, in *ListK8SClusterConfigMapReq, opts ...grpc.CallOption) (*ListK8SClusterConfigMapReply, error)
	// 获取K8S集群ConfigMap
	GetK8SClusterConfigMap(ctx context.Context, in *GetK8SClusterConfigMapReq, opts ...grpc.CallOption) (*GetK8SClusterConfigMapReply, error)
	// 更新K8S集群ConfigMap
	UpdateK8SClusterConfigMap(ctx context.Context, in *UpdateK8SClusterConfigMapReq, opts ...grpc.CallOption) (*UpdateK8SClusterConfigMapReply, error)
	// 删除K8S集群ConfigMap
	DelK8SClusterConfigMap(ctx context.Context, in *DelK8SClusterConfigMapReq, opts ...grpc.CallOption) (*DelK8SClusterConfigMapReply, error)
	// 列出K8S集群Secret
	ListSecret(ctx context.Context, in *ListSecretReq, opts ...grpc.CallOption) (*ListSecretReply, error)
	// 获取K8S集群Secret
	GetSecret(ctx context.Context, in *GetSecretReq, opts ...grpc.CallOption) (*GetSecretReply, error)
	// 删除K8S集群Secret
	DelSecret(ctx context.Context, in *DelSecretReq, opts ...grpc.CallOption) (*DelSecretReply, error)
	// 创建K8S集群Docker Secret
	CreateDockerSecret(ctx context.Context, in *CreateDockerSecretReq, opts ...grpc.CallOption) (*CreateDockerSecretReply, error)
	// 更新K8S集群Docker Secret
	UpdateDockerSecret(ctx context.Context, in *UpdateDockerSecretReq, opts ...grpc.CallOption) (*UpdateDockerSecretReply, error)
	// 创建K8S集群Tls Secret
	CreateTlsSecret(ctx context.Context, in *CreateTlsSecretReq, opts ...grpc.CallOption) (*CreateTlsSecretReply, error)
	// 更新K8S集群Tls Secret
	UpdateTlsSecret(ctx context.Context, in *UpdateTlsSecretReq, opts ...grpc.CallOption) (*UpdateTlsSecretReply, error)
	// 创建K8S集群Opaque Secret
	CreateOpaqueSecret(ctx context.Context, in *CreateOpaqueSecretReq, opts ...grpc.CallOption) (*CreateOpaqueSecretReply, error)
	// 更新K8S集群Opaque Secret
	UpdateOpaqueSecret(ctx context.Context, in *UpdateOpaqueSecretReq, opts ...grpc.CallOption) (*UpdateOpaqueSecretReply, error)
	// 创建K8S集群SSHAuth Secret
	CreateSSHAuthSecret(ctx context.Context, in *CreateSSHAuthSecretReq, opts ...grpc.CallOption) (*CreateSSHAuthSecretReply, error)
	// 更新K8S集群SSHAuth Secret
	UpdateSSHAuthSecret(ctx context.Context, in *UpdateSSHAuthSecretReq, opts ...grpc.CallOption) (*UpdateSSHAuthSecretReply, error)
	// 创建K8S集群 Basic Auth Secret
	CreateBasicAuthSecret(ctx context.Context, in *CreateBasicAuthSecretReq, opts ...grpc.CallOption) (*CreateBasicAuthSecretReply, error)
	// 更新K8S集群 Basic Auth Secret
	UpdateBasicAuthSecret(ctx context.Context, in *UpdateBasicAuthSecretReq, opts ...grpc.CallOption) (*UpdateBasicAuthSecretReply, error)
	// 列出K8S集群Deployment
	ListK8SClusterDeployment(ctx context.Context, in *ListK8SClusterDeploymentReq, opts ...grpc.CallOption) (*ListK8SClusterDeploymentReply, error)
	// 获取K8S集群Deployment
	GetK8SClusterDeployment(ctx context.Context, in *GetK8SClusterDeploymentReq, opts ...grpc.CallOption) (*GetK8SClusterDeploymentReply, error)
	// 删除K8S集群Deployment
	DelK8SClusterDeployment(ctx context.Context, in *DelK8SClusterDeploymentReq, opts ...grpc.CallOption) (*DelK8SClusterDeploymentReply, error)
	// 更新K8S集群Deployment
	UpdateK8SClusterDeployment(ctx context.Context, in *UpdateK8SClusterDeploymentReq, opts ...grpc.CallOption) (*UpdateK8SClusterDeploymentReply, error)
	// 更新K8S集群Deployment ReplicaSet
	UpdateK8SClusterDeploymentReplicaSet(ctx context.Context, in *UpdateK8SClusterDeploymentReplicaSetReq, opts ...grpc.CallOption) (*UpdateK8SClusterDeploymentReplicaSetReply, error)
	// 创建K8S集群Service
	CreateK8SService(ctx context.Context, in *CreateK8SServiceReq, opts ...grpc.CallOption) (*CreateK8SServiceReply, error)
	// 列出K8S集群Service
	ListK8SService(ctx context.Context, in *ListK8SServiceReq, opts ...grpc.CallOption) (*ListK8SServiceReply, error)
	// 获取K8S集群Service
	GetK8SService(ctx context.Context, in *GetK8SServiceReq, opts ...grpc.CallOption) (*GetK8SServiceReply, error)
	// 删除K8S集群Service
	DelK8SService(ctx context.Context, in *DelK8SServiceReq, opts ...grpc.CallOption) (*DelK8SServiceReply, error)
	// 创建K8S集群Ingress
	CreateK8SIngress(ctx context.Context, in *CreateK8SIngressReq, opts ...grpc.CallOption) (*CreateK8SIngressReply, error)
	ListK8SIngress(ctx context.Context, in *ListK8SIngressReq, opts ...grpc.CallOption) (*ListK8SIngressReply, error)
	GetK8SIngress(ctx context.Context, in *GetK8SIngressReq, opts ...grpc.CallOption) (*GetK8SIngressReply, error)
	DelK8SIngress(ctx context.Context, in *DelK8SIngressReq, opts ...grpc.CallOption) (*DelK8SIngressReply, error)
	UpdateK8SIngress(ctx context.Context, in *UpdateK8SIngressReq, opts ...grpc.CallOption) (*UpdateK8SIngressReply, error)
	// k8s 对象模版
	// 列出 k8s 对象公共模版
	ListK8SObjectPublicTemplate(ctx context.Context, in *ListK8SObjectPublicTemplateReq, opts ...grpc.CallOption) (*ListK8SObjectPublicTemplateReply, error)
	// 获取 k8s 对象公共模版
	GetK8SObjectPublicTemplate(ctx context.Context, in *GetK8SObjectPublicTemplateReq, opts ...grpc.CallOption) (*GetK8SObjectPublicTemplateReply, error)
	// 创建 k8s 对象私有模版
	CreateK8SObjectPrivateTemplate(ctx context.Context, in *CreateK8SObjectPrivateTemplateReq, opts ...grpc.CallOption) (*CreateK8SObjectPrivateTemplateReply, error)
	// 列出 k8s 对象私有模版
	ListK8SObjectPrivateTemplate(ctx context.Context, in *ListK8SObjectPrivateTemplateReq, opts ...grpc.CallOption) (*ListK8SObjectPrivateTemplateReply, error)
	// 获取 k8s 对象私有模版
	GetK8SObjectPrivateTemplate(ctx context.Context, in *GetK8SObjectPrivateTemplateReq, opts ...grpc.CallOption) (*GetK8SObjectPrivateTemplateReply, error)
	// 删除 k8s 对象私有模版
	DelK8SObjectPrivateTemplate(ctx context.Context, in *DelK8SObjectPrivateTemplateReq, opts ...grpc.CallOption) (*DelK8SObjectPrivateTemplateReply, error)
	// serviceUrl
	// serviceUrl - 添加服务Url
	CreateServiceUrl(ctx context.Context, in *CreateServiceUrlReq, opts ...grpc.CallOption) (*CreateServiceUrlReply, error)
	// serviceUrl - 列出服务Url
	ListServiceUrl(ctx context.Context, in *ListServiceUrlReq, opts ...grpc.CallOption) (*ListServiceUrlReply, error)
	// serviceUrl - 删除服务Url
	DelServiceUrl(ctx context.Context, in *DelServiceUrlReq, opts ...grpc.CallOption) (*DelServiceUrlReply, error)
	GenerateServiceUrlAuthKey(ctx context.Context, in *GenerateServiceUrlAuthKeyReq, opts ...grpc.CallOption) (*GenerateServiceUrlAuthKeyReply, error)
	ListServiceUrlAuthKey(ctx context.Context, in *ListServiceUrlAuthKeyReq, opts ...grpc.CallOption) (*ListServiceUrlAuthKeyReply, error)
	DelServiceUrlAuthKey(ctx context.Context, in *DelServiceUrlAuthKeyReq, opts ...grpc.CallOption) (*DelServiceUrlAuthKeyReply, error)
	GenerateServiceUrlAuthUrl(ctx context.Context, in *GenerateServiceUrlAuthUrlReq, opts ...grpc.CallOption) (*GenerateServiceUrlAuthUrlReply, error)
	// container_registry - 容器仓库
	// 添加容器仓库账号
	AddContainerRegistry(ctx context.Context, in *AddContainerRegistryReq, opts ...grpc.CallOption) (*AddContainerRegistryReply, error)
	// 列出容器仓库账号
	ListContainerRegistry(ctx context.Context, in *ListContainerRegistryReq, opts ...grpc.CallOption) (*ListContainerRegistryReply, error)
	// 删除容器仓库账户
	DelContainerRegistry(ctx context.Context, in *DelContainerRegistryReq, opts ...grpc.CallOption) (*DelContainerRegistryReply, error)
	// 提供内部使用
	GetContainerRegistry(ctx context.Context, in *GetContainerRegistryReq, opts ...grpc.CallOption) (*GetContainerRegistryReply, error)
	// 容器镜像
	// 添加容器镜像
	AddPublicContainerImage(ctx context.Context, in *AddPublicContainerImageReq, opts ...grpc.CallOption) (*AddPublicContainerImageReply, error)
	// 列出容器镜像
	ListPublicContainerImage(ctx context.Context, in *ListPublicContainerImageReq, opts ...grpc.CallOption) (*ListPublicContainerImageReply, error)
	// 删除容器镜像
	DelPublicContainerImage(ctx context.Context, in *DelPublicContainerImageReq, opts ...grpc.CallOption) (*DelPublicContainerImageReply, error)
	// gitlab
	// 添加gitlab平台
	CreateSelfGitlabPlatform(ctx context.Context, in *CreateSelfGitlabPlatformReq, opts ...grpc.CallOption) (*CreateSelfGitlabPlatformReply, error)
	// 列出gitlab平台
	ListSelfGitlabPlatform(ctx context.Context, in *ListSelfGitlabPlatformReq, opts ...grpc.CallOption) (*ListSelfGitlabPlatformReply, error)
	// 删除gitlab平台
	DelSelfGitlabPlatform(ctx context.Context, in *DelSelfGitlabPlatformReq, opts ...grpc.CallOption) (*DelSelfGitlabPlatformReply, error)
	// 添加gitlab token
	CreateSelfGitlabToken(ctx context.Context, in *CreateSelfGitlabTokenReq, opts ...grpc.CallOption) (*CreateSelfGitlabTokenReply, error)
	// 列出gitlab token
	ListSelfGitlabToken(ctx context.Context, in *ListSelfGitlabTokenReq, opts ...grpc.CallOption) (*ListSelfGitlabTokenReply, error)
	// 删除gitlab token
	DelSelfGitlabToken(ctx context.Context, in *DelSelfGitlabTokenReq, opts ...grpc.CallOption) (*DelSelfGitlabTokenReply, error)
	// 添加gitlab仓库
	CreateSelfGitlabRepo(ctx context.Context, in *CreateSelfGitlabRepoReq, opts ...grpc.CallOption) (*CreateSelfGitlabRepoReply, error)
	// 倒入gitlab仓库
	ImportSelfGitlabRepo(ctx context.Context, in *ImportSelfGitlabRepoReq, opts ...grpc.CallOption) (*ImportSelfGitlabRepoReply, error)
	// 列出gitlab仓库
	ListSelfGitlabRepo(ctx context.Context, in *ListSelfGitlabRepoReq, opts ...grpc.CallOption) (*ListSelfGitlabRepoReply, error)
	// 删除gitlab仓库
	DelSelfGitlabRepo(ctx context.Context, in *DelSelfGitlabRepoReq, opts ...grpc.CallOption) (*DelSelfGitlabRepoReply, error)
	// 归档gitlab仓库
	ArchiveSelfGitlabRepo(ctx context.Context, in *ArchiveSelfGitlabRepoReq, opts ...grpc.CallOption) (*ArchiveSelfGitlabRepoReply, error)
	// 合并gitlab仓库
	MergeSelfGitlabRepo(ctx context.Context, in *MergeSelfGitlabRepoReq, opts ...grpc.CallOption) (*MergeSelfGitlabRepoReply, error)
	SelfGitlabRepoMergeHis(ctx context.Context, in *SelfGitlabRepoMergeHisReq, opts ...grpc.CallOption) (*SelfGitlabRepoMergeHisReply, error)
	// 列出gitlab仓库分支
	ListSelfGitlabRepoBranch(ctx context.Context, in *ListSelfGitlabRepoBranchReq, opts ...grpc.CallOption) (*ListSelfGitlabRepoBranchReply, error)
	// 创建gitlab仓库分支
	CreateSelfGitlabRepoBranch(ctx context.Context, in *CreateSelfGitlabRepoBranchReq, opts ...grpc.CallOption) (*CreateSelfGitlabRepoBranchReply, error)
	// 删除gitlab仓库分支
	DelSelfGitlabRepoBranch(ctx context.Context, in *DelSelfGitlabRepoBranchReq, opts ...grpc.CallOption) (*DelSelfGitlabRepoBranchReply, error)
	// 保护gitlab仓库分支
	ProtectSelfGitlabRepoBranch(ctx context.Context, in *ProtectSelfGitlabRepoBranchReq, opts ...grpc.CallOption) (*ProtectSelfGitlabRepoBranchReply, error)
	// 无保护gitlab仓库分支
	UnprotectSelfGitlabRepoBranch(ctx context.Context, in *UnprotectSelfGitlabRepoBranchReq, opts ...grpc.CallOption) (*UnprotectSelfGitlabRepoBranchReply, error)
	// 列出gitlab仓库分支Commits
	ListSelfGitlabRepoBranchCommits(ctx context.Context, in *ListSelfGitlabRepoBranchCommitsReq, opts ...grpc.CallOption) (*ListSelfGitlabRepoBranchCommitsReply, error)
	// 创建gitlab组
	CreateSelfGitlabGroup(ctx context.Context, in *CreateSelfGitlabGroupReq, opts ...grpc.CallOption) (*CreateSelfGitlabGroupReply, error)
	// 列出gitlab组
	ListSelfGitlabGroup(ctx context.Context, in *ListSelfGitlabGroupReq, opts ...grpc.CallOption) (*ListSelfGitlabGroupReply, error)
	// Github
	// 添加Github token
	CreateGitHubToken(ctx context.Context, in *CreateGitHubTokenReq, opts ...grpc.CallOption) (*CreateGitHubTokenReply, error)
	// 列出Github token
	ListGitHubToken(ctx context.Context, in *ListGitHubTokenReq, opts ...grpc.CallOption) (*ListGitHubTokenReply, error)
	// 删除Github token
	DelGitHubToken(ctx context.Context, in *DelGitHubTokenReq, opts ...grpc.CallOption) (*DelGitHubTokenReply, error)
	// 导入Github仓库
	ImportGithubRepo(ctx context.Context, in *ImportGithubRepoReq, opts ...grpc.CallOption) (*ImportGithubRepoReply, error)
	// 创建Github仓库
	CreateGithubRepo(ctx context.Context, in *CreateGithubRepoReq, opts ...grpc.CallOption) (*CreateGithubRepoReply, error)
	// 列出Github仓库
	ListGithubRepo(ctx context.Context, in *ListGithubRepoReq, opts ...grpc.CallOption) (*ListGithubRepoReply, error)
	// 删除github仓库
	DelGithubRepo(ctx context.Context, in *DelGithubRepoReq, opts ...grpc.CallOption) (*DelGithubRepoReply, error)
	// 归档gitHub仓库
	ArchiveGithubRepo(ctx context.Context, in *ArchiveGithubRepoReq, opts ...grpc.CallOption) (*ArchiveGithubRepoReply, error)
	// 合并github仓库
	MergeGithubRepo(ctx context.Context, in *MergeGithubRepoReq, opts ...grpc.CallOption) (*MergeGithubRepoReply, error)
	// 保护github仓库分支
	ProtectGithubRepoBranch(ctx context.Context, in *ProtectGithubRepoBranchReq, opts ...grpc.CallOption) (*ProtectGithubRepoBranchReply, error)
	// 无保护github仓库分支
	UnprotectGithubRepoBranch(ctx context.Context, in *UnprotectGithubRepoBranchReq, opts ...grpc.CallOption) (*UnprotectGithubRepoBranchReply, error)
	// 列出Github组织
	ListGithubOrg(ctx context.Context, in *ListGithubOrgReq, opts ...grpc.CallOption) (*ListGithubOrgReply, error)
	// 列出Github仓库 (By Org)
	ListGithubRepoByOrg(ctx context.Context, in *ListGithubRepoByOrgReq, opts ...grpc.CallOption) (*ListGithubRepoByOrgReply, error)
	// 列出Github仓库分支
	ListGithubRepoBranch(ctx context.Context, in *ListGithubRepoBranchReq, opts ...grpc.CallOption) (*ListGithubRepoBranchReply, error)
	// 获取Github用户信息
	GetGithubUser(ctx context.Context, in *GetGithubUserReq, opts ...grpc.CallOption) (*GetGithubUserReply, error)
	ListGithubRepoBranchCommits(ctx context.Context, in *ListGithubRepoBranchCommitsReq, opts ...grpc.CallOption) (*ListGithubRepoBranchCommitsReply, error)
	// CI - 构建容器镜像
	SelfGitlabRepoBuildContainerImage(ctx context.Context, in *SelfGitlabRepoBuildContainerImageReq, opts ...grpc.CallOption) (*SelfGitlabRepoBuildContainerImageReply, error)
	GithubRepoBuildContainerImage(ctx context.Context, in *GithubRepoBuildContainerImageReq, opts ...grpc.CallOption) (*GithubRepoBuildContainerImageReply, error)
	SelfGitlabRepoExecCiTemplate(ctx context.Context, in *SelfGitlabRepoExecCiTemplateReq, opts ...grpc.CallOption) (*SelfGitlabRepoExecCiTemplateReply, error)
	GithubRepoExecCiTemplate(ctx context.Context, in *GithubRepoExecCiTemplateReq, opts ...grpc.CallOption) (*GithubRepoExecCiTemplateReply, error)
	// 程序
	CreateProgram(ctx context.Context, in *CreateProgramReq, opts ...grpc.CallOption) (*CreateProgramReply, error)
	GetProgramByUuid(ctx context.Context, in *GetProgramByUuidReq, opts ...grpc.CallOption) (*GetProgramByUuidReply, error)
	GetSelfProgram(ctx context.Context, in *GetSelfProgramReq, opts ...grpc.CallOption) (*GetSelfProgramReply, error)
	SearchProgram(ctx context.Context, in *SearchProgramReq, opts ...grpc.CallOption) (*SearchProgramReply, error)
	// 市场程序
	CreateProgramMarket(ctx context.Context, in *CreateProgramMarketReq, opts ...grpc.CallOption) (*CreateProgramMarketReply, error)
	GetProgramMarketByUuid(ctx context.Context, in *GetProgramMarketByUuidReq, opts ...grpc.CallOption) (*GetProgramMarketByUuidReply, error)
	GetSelfProgramMarket(ctx context.Context, in *GetSelfProgramMarketReq, opts ...grpc.CallOption) (*GetSelfProgramMarketReply, error)
	SearchProgramMarket(ctx context.Context, in *SearchProgramMarketReq, opts ...grpc.CallOption) (*SearchProgramMarketReply, error)
	// 可用性
	CreateReliability(ctx context.Context, in *CreateReliabilityReq, opts ...grpc.CallOption) (*CreateReliabilityReply, error)
	GetReliability(ctx context.Context, in *GetReliabilityReq, opts ...grpc.CallOption) (*GetReliabilityReply, error)
	// WebServiceResource
	CreateWebServiceResource(ctx context.Context, in *CreateWebServiceResourceReq, opts ...grpc.CallOption) (*CreateWebServiceResourceReply, error)
	ListWebServiceResource(ctx context.Context, in *ListWebServiceResourceReq, opts ...grpc.CallOption) (*ListWebServiceResourceReply, error)
	DelWebServiceResource(ctx context.Context, in *DelWebServiceResourceReq, opts ...grpc.CallOption) (*DelWebServiceResourceReply, error)
	UpdateWebServiceResource(ctx context.Context, in *UpdateWebServiceResourceReq, opts ...grpc.CallOption) (*UpdateWebServiceResourceReply, error)
	GetWebServiceResourcePromSD(ctx context.Context, in *GetWebServiceResourcePromSDReq, opts ...grpc.CallOption) (*GetWebServiceResourcePromSDReply, error)
}

type productClient struct {
	cc grpc.ClientConnInterface
}

func NewProductClient(cc grpc.ClientConnInterface) ProductClient {
	return &productClient{cc}
}

func (c *productClient) CreateOrgProduct(ctx context.Context, in *CreateOrgProductReq, opts ...grpc.CallOption) (*CreateOrgProductReply, error) {
	out := new(CreateOrgProductReply)
	err := c.cc.Invoke(ctx, Product_CreateOrgProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ListOrgProduct(ctx context.Context, in *ListOrgProductReq, opts ...grpc.CallOption) (*ListOrgProductReply, error) {
	out := new(ListOrgProductReply)
	err := c.cc.Invoke(ctx, Product_ListOrgProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) DelOrgProduct(ctx context.Context, in *DelOrgProductReq, opts ...grpc.CallOption) (*DelOrgProductReply, error) {
	out := new(DelOrgProductReply)
	err := c.cc.Invoke(ctx, Product_DelOrgProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) VerifyProductInOrg(ctx context.Context, in *VerifyProductInOrgReq, opts ...grpc.CallOption) (*VerifyProductInOrgReply, error) {
	out := new(VerifyProductInOrgReply)
	err := c.cc.Invoke(ctx, Product_VerifyProductInOrg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetOrgProduct(ctx context.Context, in *GetOrgProductReq, opts ...grpc.CallOption) (*GetOrgProductReply, error) {
	out := new(GetOrgProductReply)
	err := c.cc.Invoke(ctx, Product_GetOrgProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CreateOrgProductGroup(ctx context.Context, in *CreateOrgProductGroupReq, opts ...grpc.CallOption) (*CreateOrgProductGroupReply, error) {
	out := new(CreateOrgProductGroupReply)
	err := c.cc.Invoke(ctx, Product_CreateOrgProductGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ListOrgProductGroup(ctx context.Context, in *ListOrgProductGroupReq, opts ...grpc.CallOption) (*ListOrgProductGroupReply, error) {
	out := new(ListOrgProductGroupReply)
	err := c.cc.Invoke(ctx, Product_ListOrgProductGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) DelOrgProductGroup(ctx context.Context, in *DelOrgProductGroupReq, opts ...grpc.CallOption) (*DelOrgProductGroupReply, error) {
	out := new(DelOrgProductGroupReply)
	err := c.cc.Invoke(ctx, Product_DelOrgProductGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) AddOrgProductGroupMember(ctx context.Context, in *AddOrgProductGroupMemberReq, opts ...grpc.CallOption) (*AddOrgProductGroupMemberReply, error) {
	out := new(AddOrgProductGroupMemberReply)
	err := c.cc.Invoke(ctx, Product_AddOrgProductGroupMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ListOrgProductGroupMember(ctx context.Context, in *ListOrgProductGroupMemberReq, opts ...grpc.CallOption) (*ListOrgProductGroupMemberReply, error) {
	out := new(ListOrgProductGroupMemberReply)
	err := c.cc.Invoke(ctx, Product_ListOrgProductGroupMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) EvictOrgProductGroupMember(ctx context.Context, in *EvictOrgProductGroupMemberReq, opts ...grpc.CallOption) (*EvictOrgProductGroupMemberReply, error) {
	out := new(EvictOrgProductGroupMemberReply)
	err := c.cc.Invoke(ctx, Product_EvictOrgProductGroupMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) LeaveOrgProductGroupMember(ctx context.Context, in *LeaveOrgProductGroupMemberReq, opts ...grpc.CallOption) (*LeaveOrgProductGroupMemberReply, error) {
	out := new(LeaveOrgProductGroupMemberReply)
	err := c.cc.Invoke(ctx, Product_LeaveOrgProductGroupMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) AddOrgProductEnv(ctx context.Context, in *AddOrgProductEnvReq, opts ...grpc.CallOption) (*AddOrgProductEnvReply, error) {
	out := new(AddOrgProductEnvReply)
	err := c.cc.Invoke(ctx, Product_AddOrgProductEnv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ListOrgProductEnv(ctx context.Context, in *ListOrgProductEnvReq, opts ...grpc.CallOption) (*ListOrgProductEnvReply, error) {
	out := new(ListOrgProductEnvReply)
	err := c.cc.Invoke(ctx, Product_ListOrgProductEnv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) DelOrgProductEnv(ctx context.Context, in *DelOrgProductEnvReq, opts ...grpc.CallOption) (*DelOrgProductEnvReply, error) {
	out := new(DelOrgProductEnvReply)
	err := c.cc.Invoke(ctx, Product_DelOrgProductEnv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetOrgProductEnv(ctx context.Context, in *GetOrgProductEnvReq, opts ...grpc.CallOption) (*GetOrgProductEnvReply, error) {
	out := new(GetOrgProductEnvReply)
	err := c.cc.Invoke(ctx, Product_GetOrgProductEnv_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) AddK8SCluster(ctx context.Context, in *AddK8SClusterReq, opts ...grpc.CallOption) (*AddK8SClusterReply, error) {
	out := new(AddK8SClusterReply)
	err := c.cc.Invoke(ctx, Product_AddK8SCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ListK8SCluster(ctx context.Context, in *ListK8SClusterReq, opts ...grpc.CallOption) (*ListK8SClusterReply, error) {
	out := new(ListK8SClusterReply)
	err := c.cc.Invoke(ctx, Product_ListK8SCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ExistK8SCluster(ctx context.Context, in *ExistK8SClusterReq, opts ...grpc.CallOption) (*ExistK8SClusterReply, error) {
	out := new(ExistK8SClusterReply)
	err := c.cc.Invoke(ctx, Product_ExistK8SCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) DelK8SCluster(ctx context.Context, in *DelK8SClusterReq, opts ...grpc.CallOption) (*DelK8SClusterReply, error) {
	out := new(DelK8SClusterReply)
	err := c.cc.Invoke(ctx, Product_DelK8SCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) AddK8SClusterEdge(ctx context.Context, in *AddK8SClusterEdgeReq, opts ...grpc.CallOption) (*AddK8SClusterEdgeReply, error) {
	out := new(AddK8SClusterEdgeReply)
	err := c.cc.Invoke(ctx, Product_AddK8SClusterEdge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetK8SClusterEdge(ctx context.Context, in *GetK8SClusterEdgeReq, opts ...grpc.CallOption) (*GetK8SClusterEdgeReply, error) {
	out := new(GetK8SClusterEdgeReply)
	err := c.cc.Invoke(ctx, Product_GetK8SClusterEdge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) DelK8SClusterEdge(ctx context.Context, in *DelK8SClusterEdgeReq, opts ...grpc.CallOption) (*DelK8SClusterEdgeReply, error) {
	out := new(DelK8SClusterEdgeReply)
	err := c.cc.Invoke(ctx, Product_DelK8SClusterEdge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ListK8SClusterNameSpace(ctx context.Context, in *ListK8SClusterNameSpaceReq, opts ...grpc.CallOption) (*ListK8SClusterNameSpaceReply, error) {
	out := new(ListK8SClusterNameSpaceReply)
	err := c.cc.Invoke(ctx, Product_ListK8SClusterNameSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) DelK8SClusterNameSpace(ctx context.Context, in *DelK8SClusterNameSpaceReq, opts ...grpc.CallOption) (*DelK8SClusterNameSpaceReply, error) {
	out := new(DelK8SClusterNameSpaceReply)
	err := c.cc.Invoke(ctx, Product_DelK8SClusterNameSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CreateK8SClusterNameSpace(ctx context.Context, in *CreateK8SClusterNameSpaceReq, opts ...grpc.CallOption) (*CreateK8SClusterNameSpaceReply, error) {
	out := new(CreateK8SClusterNameSpaceReply)
	err := c.cc.Invoke(ctx, Product_CreateK8SClusterNameSpace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetK8SClusterNode(ctx context.Context, in *GetK8SClusterNodeReq, opts ...grpc.CallOption) (*GetK8SClusterNodeReply, error) {
	out := new(GetK8SClusterNodeReply)
	err := c.cc.Invoke(ctx, Product_GetK8SClusterNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ListK8SClusterNode(ctx context.Context, in *ListK8SClusterNodeReq, opts ...grpc.CallOption) (*ListK8SClusterNodeReply, error) {
	out := new(ListK8SClusterNodeReply)
	err := c.cc.Invoke(ctx, Product_ListK8SClusterNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ListK8SPod(ctx context.Context, in *ListK8SPodReq, opts ...grpc.CallOption) (*ListK8SPodReply, error) {
	out := new(ListK8SPodReply)
	err := c.cc.Invoke(ctx, Product_ListK8SPod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetK8SPod(ctx context.Context, in *GetK8SPodReq, opts ...grpc.CallOption) (*GetK8SPodReply, error) {
	out := new(GetK8SPodReply)
	err := c.cc.Invoke(ctx, Product_GetK8SPod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) SearchK8SPod(ctx context.Context, in *SearchK8SPodReq, opts ...grpc.CallOption) (*SearchK8SPodReply, error) {
	out := new(SearchK8SPodReply)
	err := c.cc.Invoke(ctx, Product_SearchK8SPod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) EvictK8SPod(ctx context.Context, in *EvictK8SPodReq, opts ...grpc.CallOption) (*EvictK8SPodReply, error) {
	out := new(EvictK8SPodReply)
	err := c.cc.Invoke(ctx, Product_EvictK8SPod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) DelK8SPod(ctx context.Context, in *DelK8SPodReq, opts ...grpc.CallOption) (*DelK8SPodReply, error) {
	out := new(DelK8SPodReply)
	err := c.cc.Invoke(ctx, Product_DelK8SPod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CleanEvictK8SPod(ctx context.Context, in *CleanEvictK8SPodReq, opts ...grpc.CallOption) (*CleanEvictK8SPodReply, error) {
	out := new(CleanEvictK8SPodReply)
	err := c.cc.Invoke(ctx, Product_CleanEvictK8SPod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CreateK8SClusterConfigMap(ctx context.Context, in *CreateK8SClusterConfigMapReq, opts ...grpc.CallOption) (*CreateK8SClusterConfigMapReply, error) {
	out := new(CreateK8SClusterConfigMapReply)
	err := c.cc.Invoke(ctx, Product_CreateK8SClusterConfigMap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ListK8SClusterConfigMap(ctx context.Context, in *ListK8SClusterConfigMapReq, opts ...grpc.CallOption) (*ListK8SClusterConfigMapReply, error) {
	out := new(ListK8SClusterConfigMapReply)
	err := c.cc.Invoke(ctx, Product_ListK8SClusterConfigMap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetK8SClusterConfigMap(ctx context.Context, in *GetK8SClusterConfigMapReq, opts ...grpc.CallOption) (*GetK8SClusterConfigMapReply, error) {
	out := new(GetK8SClusterConfigMapReply)
	err := c.cc.Invoke(ctx, Product_GetK8SClusterConfigMap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) UpdateK8SClusterConfigMap(ctx context.Context, in *UpdateK8SClusterConfigMapReq, opts ...grpc.CallOption) (*UpdateK8SClusterConfigMapReply, error) {
	out := new(UpdateK8SClusterConfigMapReply)
	err := c.cc.Invoke(ctx, Product_UpdateK8SClusterConfigMap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) DelK8SClusterConfigMap(ctx context.Context, in *DelK8SClusterConfigMapReq, opts ...grpc.CallOption) (*DelK8SClusterConfigMapReply, error) {
	out := new(DelK8SClusterConfigMapReply)
	err := c.cc.Invoke(ctx, Product_DelK8SClusterConfigMap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ListSecret(ctx context.Context, in *ListSecretReq, opts ...grpc.CallOption) (*ListSecretReply, error) {
	out := new(ListSecretReply)
	err := c.cc.Invoke(ctx, Product_ListSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetSecret(ctx context.Context, in *GetSecretReq, opts ...grpc.CallOption) (*GetSecretReply, error) {
	out := new(GetSecretReply)
	err := c.cc.Invoke(ctx, Product_GetSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) DelSecret(ctx context.Context, in *DelSecretReq, opts ...grpc.CallOption) (*DelSecretReply, error) {
	out := new(DelSecretReply)
	err := c.cc.Invoke(ctx, Product_DelSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CreateDockerSecret(ctx context.Context, in *CreateDockerSecretReq, opts ...grpc.CallOption) (*CreateDockerSecretReply, error) {
	out := new(CreateDockerSecretReply)
	err := c.cc.Invoke(ctx, Product_CreateDockerSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) UpdateDockerSecret(ctx context.Context, in *UpdateDockerSecretReq, opts ...grpc.CallOption) (*UpdateDockerSecretReply, error) {
	out := new(UpdateDockerSecretReply)
	err := c.cc.Invoke(ctx, Product_UpdateDockerSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CreateTlsSecret(ctx context.Context, in *CreateTlsSecretReq, opts ...grpc.CallOption) (*CreateTlsSecretReply, error) {
	out := new(CreateTlsSecretReply)
	err := c.cc.Invoke(ctx, Product_CreateTlsSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) UpdateTlsSecret(ctx context.Context, in *UpdateTlsSecretReq, opts ...grpc.CallOption) (*UpdateTlsSecretReply, error) {
	out := new(UpdateTlsSecretReply)
	err := c.cc.Invoke(ctx, Product_UpdateTlsSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CreateOpaqueSecret(ctx context.Context, in *CreateOpaqueSecretReq, opts ...grpc.CallOption) (*CreateOpaqueSecretReply, error) {
	out := new(CreateOpaqueSecretReply)
	err := c.cc.Invoke(ctx, Product_CreateOpaqueSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) UpdateOpaqueSecret(ctx context.Context, in *UpdateOpaqueSecretReq, opts ...grpc.CallOption) (*UpdateOpaqueSecretReply, error) {
	out := new(UpdateOpaqueSecretReply)
	err := c.cc.Invoke(ctx, Product_UpdateOpaqueSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CreateSSHAuthSecret(ctx context.Context, in *CreateSSHAuthSecretReq, opts ...grpc.CallOption) (*CreateSSHAuthSecretReply, error) {
	out := new(CreateSSHAuthSecretReply)
	err := c.cc.Invoke(ctx, Product_CreateSSHAuthSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) UpdateSSHAuthSecret(ctx context.Context, in *UpdateSSHAuthSecretReq, opts ...grpc.CallOption) (*UpdateSSHAuthSecretReply, error) {
	out := new(UpdateSSHAuthSecretReply)
	err := c.cc.Invoke(ctx, Product_UpdateSSHAuthSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CreateBasicAuthSecret(ctx context.Context, in *CreateBasicAuthSecretReq, opts ...grpc.CallOption) (*CreateBasicAuthSecretReply, error) {
	out := new(CreateBasicAuthSecretReply)
	err := c.cc.Invoke(ctx, Product_CreateBasicAuthSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) UpdateBasicAuthSecret(ctx context.Context, in *UpdateBasicAuthSecretReq, opts ...grpc.CallOption) (*UpdateBasicAuthSecretReply, error) {
	out := new(UpdateBasicAuthSecretReply)
	err := c.cc.Invoke(ctx, Product_UpdateBasicAuthSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ListK8SClusterDeployment(ctx context.Context, in *ListK8SClusterDeploymentReq, opts ...grpc.CallOption) (*ListK8SClusterDeploymentReply, error) {
	out := new(ListK8SClusterDeploymentReply)
	err := c.cc.Invoke(ctx, Product_ListK8SClusterDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetK8SClusterDeployment(ctx context.Context, in *GetK8SClusterDeploymentReq, opts ...grpc.CallOption) (*GetK8SClusterDeploymentReply, error) {
	out := new(GetK8SClusterDeploymentReply)
	err := c.cc.Invoke(ctx, Product_GetK8SClusterDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) DelK8SClusterDeployment(ctx context.Context, in *DelK8SClusterDeploymentReq, opts ...grpc.CallOption) (*DelK8SClusterDeploymentReply, error) {
	out := new(DelK8SClusterDeploymentReply)
	err := c.cc.Invoke(ctx, Product_DelK8SClusterDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) UpdateK8SClusterDeployment(ctx context.Context, in *UpdateK8SClusterDeploymentReq, opts ...grpc.CallOption) (*UpdateK8SClusterDeploymentReply, error) {
	out := new(UpdateK8SClusterDeploymentReply)
	err := c.cc.Invoke(ctx, Product_UpdateK8SClusterDeployment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) UpdateK8SClusterDeploymentReplicaSet(ctx context.Context, in *UpdateK8SClusterDeploymentReplicaSetReq, opts ...grpc.CallOption) (*UpdateK8SClusterDeploymentReplicaSetReply, error) {
	out := new(UpdateK8SClusterDeploymentReplicaSetReply)
	err := c.cc.Invoke(ctx, Product_UpdateK8SClusterDeploymentReplicaSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CreateK8SService(ctx context.Context, in *CreateK8SServiceReq, opts ...grpc.CallOption) (*CreateK8SServiceReply, error) {
	out := new(CreateK8SServiceReply)
	err := c.cc.Invoke(ctx, Product_CreateK8SService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ListK8SService(ctx context.Context, in *ListK8SServiceReq, opts ...grpc.CallOption) (*ListK8SServiceReply, error) {
	out := new(ListK8SServiceReply)
	err := c.cc.Invoke(ctx, Product_ListK8SService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetK8SService(ctx context.Context, in *GetK8SServiceReq, opts ...grpc.CallOption) (*GetK8SServiceReply, error) {
	out := new(GetK8SServiceReply)
	err := c.cc.Invoke(ctx, Product_GetK8SService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) DelK8SService(ctx context.Context, in *DelK8SServiceReq, opts ...grpc.CallOption) (*DelK8SServiceReply, error) {
	out := new(DelK8SServiceReply)
	err := c.cc.Invoke(ctx, Product_DelK8SService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CreateK8SIngress(ctx context.Context, in *CreateK8SIngressReq, opts ...grpc.CallOption) (*CreateK8SIngressReply, error) {
	out := new(CreateK8SIngressReply)
	err := c.cc.Invoke(ctx, Product_CreateK8SIngress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ListK8SIngress(ctx context.Context, in *ListK8SIngressReq, opts ...grpc.CallOption) (*ListK8SIngressReply, error) {
	out := new(ListK8SIngressReply)
	err := c.cc.Invoke(ctx, Product_ListK8SIngress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetK8SIngress(ctx context.Context, in *GetK8SIngressReq, opts ...grpc.CallOption) (*GetK8SIngressReply, error) {
	out := new(GetK8SIngressReply)
	err := c.cc.Invoke(ctx, Product_GetK8SIngress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) DelK8SIngress(ctx context.Context, in *DelK8SIngressReq, opts ...grpc.CallOption) (*DelK8SIngressReply, error) {
	out := new(DelK8SIngressReply)
	err := c.cc.Invoke(ctx, Product_DelK8SIngress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) UpdateK8SIngress(ctx context.Context, in *UpdateK8SIngressReq, opts ...grpc.CallOption) (*UpdateK8SIngressReply, error) {
	out := new(UpdateK8SIngressReply)
	err := c.cc.Invoke(ctx, Product_UpdateK8SIngress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ListK8SObjectPublicTemplate(ctx context.Context, in *ListK8SObjectPublicTemplateReq, opts ...grpc.CallOption) (*ListK8SObjectPublicTemplateReply, error) {
	out := new(ListK8SObjectPublicTemplateReply)
	err := c.cc.Invoke(ctx, Product_ListK8SObjectPublicTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetK8SObjectPublicTemplate(ctx context.Context, in *GetK8SObjectPublicTemplateReq, opts ...grpc.CallOption) (*GetK8SObjectPublicTemplateReply, error) {
	out := new(GetK8SObjectPublicTemplateReply)
	err := c.cc.Invoke(ctx, Product_GetK8SObjectPublicTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CreateK8SObjectPrivateTemplate(ctx context.Context, in *CreateK8SObjectPrivateTemplateReq, opts ...grpc.CallOption) (*CreateK8SObjectPrivateTemplateReply, error) {
	out := new(CreateK8SObjectPrivateTemplateReply)
	err := c.cc.Invoke(ctx, Product_CreateK8SObjectPrivateTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ListK8SObjectPrivateTemplate(ctx context.Context, in *ListK8SObjectPrivateTemplateReq, opts ...grpc.CallOption) (*ListK8SObjectPrivateTemplateReply, error) {
	out := new(ListK8SObjectPrivateTemplateReply)
	err := c.cc.Invoke(ctx, Product_ListK8SObjectPrivateTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetK8SObjectPrivateTemplate(ctx context.Context, in *GetK8SObjectPrivateTemplateReq, opts ...grpc.CallOption) (*GetK8SObjectPrivateTemplateReply, error) {
	out := new(GetK8SObjectPrivateTemplateReply)
	err := c.cc.Invoke(ctx, Product_GetK8SObjectPrivateTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) DelK8SObjectPrivateTemplate(ctx context.Context, in *DelK8SObjectPrivateTemplateReq, opts ...grpc.CallOption) (*DelK8SObjectPrivateTemplateReply, error) {
	out := new(DelK8SObjectPrivateTemplateReply)
	err := c.cc.Invoke(ctx, Product_DelK8SObjectPrivateTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CreateServiceUrl(ctx context.Context, in *CreateServiceUrlReq, opts ...grpc.CallOption) (*CreateServiceUrlReply, error) {
	out := new(CreateServiceUrlReply)
	err := c.cc.Invoke(ctx, Product_CreateServiceUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ListServiceUrl(ctx context.Context, in *ListServiceUrlReq, opts ...grpc.CallOption) (*ListServiceUrlReply, error) {
	out := new(ListServiceUrlReply)
	err := c.cc.Invoke(ctx, Product_ListServiceUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) DelServiceUrl(ctx context.Context, in *DelServiceUrlReq, opts ...grpc.CallOption) (*DelServiceUrlReply, error) {
	out := new(DelServiceUrlReply)
	err := c.cc.Invoke(ctx, Product_DelServiceUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GenerateServiceUrlAuthKey(ctx context.Context, in *GenerateServiceUrlAuthKeyReq, opts ...grpc.CallOption) (*GenerateServiceUrlAuthKeyReply, error) {
	out := new(GenerateServiceUrlAuthKeyReply)
	err := c.cc.Invoke(ctx, Product_GenerateServiceUrlAuthKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ListServiceUrlAuthKey(ctx context.Context, in *ListServiceUrlAuthKeyReq, opts ...grpc.CallOption) (*ListServiceUrlAuthKeyReply, error) {
	out := new(ListServiceUrlAuthKeyReply)
	err := c.cc.Invoke(ctx, Product_ListServiceUrlAuthKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) DelServiceUrlAuthKey(ctx context.Context, in *DelServiceUrlAuthKeyReq, opts ...grpc.CallOption) (*DelServiceUrlAuthKeyReply, error) {
	out := new(DelServiceUrlAuthKeyReply)
	err := c.cc.Invoke(ctx, Product_DelServiceUrlAuthKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GenerateServiceUrlAuthUrl(ctx context.Context, in *GenerateServiceUrlAuthUrlReq, opts ...grpc.CallOption) (*GenerateServiceUrlAuthUrlReply, error) {
	out := new(GenerateServiceUrlAuthUrlReply)
	err := c.cc.Invoke(ctx, Product_GenerateServiceUrlAuthUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) AddContainerRegistry(ctx context.Context, in *AddContainerRegistryReq, opts ...grpc.CallOption) (*AddContainerRegistryReply, error) {
	out := new(AddContainerRegistryReply)
	err := c.cc.Invoke(ctx, Product_AddContainerRegistry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ListContainerRegistry(ctx context.Context, in *ListContainerRegistryReq, opts ...grpc.CallOption) (*ListContainerRegistryReply, error) {
	out := new(ListContainerRegistryReply)
	err := c.cc.Invoke(ctx, Product_ListContainerRegistry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) DelContainerRegistry(ctx context.Context, in *DelContainerRegistryReq, opts ...grpc.CallOption) (*DelContainerRegistryReply, error) {
	out := new(DelContainerRegistryReply)
	err := c.cc.Invoke(ctx, Product_DelContainerRegistry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetContainerRegistry(ctx context.Context, in *GetContainerRegistryReq, opts ...grpc.CallOption) (*GetContainerRegistryReply, error) {
	out := new(GetContainerRegistryReply)
	err := c.cc.Invoke(ctx, Product_GetContainerRegistry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) AddPublicContainerImage(ctx context.Context, in *AddPublicContainerImageReq, opts ...grpc.CallOption) (*AddPublicContainerImageReply, error) {
	out := new(AddPublicContainerImageReply)
	err := c.cc.Invoke(ctx, Product_AddPublicContainerImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ListPublicContainerImage(ctx context.Context, in *ListPublicContainerImageReq, opts ...grpc.CallOption) (*ListPublicContainerImageReply, error) {
	out := new(ListPublicContainerImageReply)
	err := c.cc.Invoke(ctx, Product_ListPublicContainerImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) DelPublicContainerImage(ctx context.Context, in *DelPublicContainerImageReq, opts ...grpc.CallOption) (*DelPublicContainerImageReply, error) {
	out := new(DelPublicContainerImageReply)
	err := c.cc.Invoke(ctx, Product_DelPublicContainerImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CreateSelfGitlabPlatform(ctx context.Context, in *CreateSelfGitlabPlatformReq, opts ...grpc.CallOption) (*CreateSelfGitlabPlatformReply, error) {
	out := new(CreateSelfGitlabPlatformReply)
	err := c.cc.Invoke(ctx, Product_CreateSelfGitlabPlatform_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ListSelfGitlabPlatform(ctx context.Context, in *ListSelfGitlabPlatformReq, opts ...grpc.CallOption) (*ListSelfGitlabPlatformReply, error) {
	out := new(ListSelfGitlabPlatformReply)
	err := c.cc.Invoke(ctx, Product_ListSelfGitlabPlatform_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) DelSelfGitlabPlatform(ctx context.Context, in *DelSelfGitlabPlatformReq, opts ...grpc.CallOption) (*DelSelfGitlabPlatformReply, error) {
	out := new(DelSelfGitlabPlatformReply)
	err := c.cc.Invoke(ctx, Product_DelSelfGitlabPlatform_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CreateSelfGitlabToken(ctx context.Context, in *CreateSelfGitlabTokenReq, opts ...grpc.CallOption) (*CreateSelfGitlabTokenReply, error) {
	out := new(CreateSelfGitlabTokenReply)
	err := c.cc.Invoke(ctx, Product_CreateSelfGitlabToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ListSelfGitlabToken(ctx context.Context, in *ListSelfGitlabTokenReq, opts ...grpc.CallOption) (*ListSelfGitlabTokenReply, error) {
	out := new(ListSelfGitlabTokenReply)
	err := c.cc.Invoke(ctx, Product_ListSelfGitlabToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) DelSelfGitlabToken(ctx context.Context, in *DelSelfGitlabTokenReq, opts ...grpc.CallOption) (*DelSelfGitlabTokenReply, error) {
	out := new(DelSelfGitlabTokenReply)
	err := c.cc.Invoke(ctx, Product_DelSelfGitlabToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CreateSelfGitlabRepo(ctx context.Context, in *CreateSelfGitlabRepoReq, opts ...grpc.CallOption) (*CreateSelfGitlabRepoReply, error) {
	out := new(CreateSelfGitlabRepoReply)
	err := c.cc.Invoke(ctx, Product_CreateSelfGitlabRepo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ImportSelfGitlabRepo(ctx context.Context, in *ImportSelfGitlabRepoReq, opts ...grpc.CallOption) (*ImportSelfGitlabRepoReply, error) {
	out := new(ImportSelfGitlabRepoReply)
	err := c.cc.Invoke(ctx, Product_ImportSelfGitlabRepo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ListSelfGitlabRepo(ctx context.Context, in *ListSelfGitlabRepoReq, opts ...grpc.CallOption) (*ListSelfGitlabRepoReply, error) {
	out := new(ListSelfGitlabRepoReply)
	err := c.cc.Invoke(ctx, Product_ListSelfGitlabRepo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) DelSelfGitlabRepo(ctx context.Context, in *DelSelfGitlabRepoReq, opts ...grpc.CallOption) (*DelSelfGitlabRepoReply, error) {
	out := new(DelSelfGitlabRepoReply)
	err := c.cc.Invoke(ctx, Product_DelSelfGitlabRepo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ArchiveSelfGitlabRepo(ctx context.Context, in *ArchiveSelfGitlabRepoReq, opts ...grpc.CallOption) (*ArchiveSelfGitlabRepoReply, error) {
	out := new(ArchiveSelfGitlabRepoReply)
	err := c.cc.Invoke(ctx, Product_ArchiveSelfGitlabRepo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) MergeSelfGitlabRepo(ctx context.Context, in *MergeSelfGitlabRepoReq, opts ...grpc.CallOption) (*MergeSelfGitlabRepoReply, error) {
	out := new(MergeSelfGitlabRepoReply)
	err := c.cc.Invoke(ctx, Product_MergeSelfGitlabRepo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) SelfGitlabRepoMergeHis(ctx context.Context, in *SelfGitlabRepoMergeHisReq, opts ...grpc.CallOption) (*SelfGitlabRepoMergeHisReply, error) {
	out := new(SelfGitlabRepoMergeHisReply)
	err := c.cc.Invoke(ctx, Product_SelfGitlabRepoMergeHis_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ListSelfGitlabRepoBranch(ctx context.Context, in *ListSelfGitlabRepoBranchReq, opts ...grpc.CallOption) (*ListSelfGitlabRepoBranchReply, error) {
	out := new(ListSelfGitlabRepoBranchReply)
	err := c.cc.Invoke(ctx, Product_ListSelfGitlabRepoBranch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CreateSelfGitlabRepoBranch(ctx context.Context, in *CreateSelfGitlabRepoBranchReq, opts ...grpc.CallOption) (*CreateSelfGitlabRepoBranchReply, error) {
	out := new(CreateSelfGitlabRepoBranchReply)
	err := c.cc.Invoke(ctx, Product_CreateSelfGitlabRepoBranch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) DelSelfGitlabRepoBranch(ctx context.Context, in *DelSelfGitlabRepoBranchReq, opts ...grpc.CallOption) (*DelSelfGitlabRepoBranchReply, error) {
	out := new(DelSelfGitlabRepoBranchReply)
	err := c.cc.Invoke(ctx, Product_DelSelfGitlabRepoBranch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ProtectSelfGitlabRepoBranch(ctx context.Context, in *ProtectSelfGitlabRepoBranchReq, opts ...grpc.CallOption) (*ProtectSelfGitlabRepoBranchReply, error) {
	out := new(ProtectSelfGitlabRepoBranchReply)
	err := c.cc.Invoke(ctx, Product_ProtectSelfGitlabRepoBranch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) UnprotectSelfGitlabRepoBranch(ctx context.Context, in *UnprotectSelfGitlabRepoBranchReq, opts ...grpc.CallOption) (*UnprotectSelfGitlabRepoBranchReply, error) {
	out := new(UnprotectSelfGitlabRepoBranchReply)
	err := c.cc.Invoke(ctx, Product_UnprotectSelfGitlabRepoBranch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ListSelfGitlabRepoBranchCommits(ctx context.Context, in *ListSelfGitlabRepoBranchCommitsReq, opts ...grpc.CallOption) (*ListSelfGitlabRepoBranchCommitsReply, error) {
	out := new(ListSelfGitlabRepoBranchCommitsReply)
	err := c.cc.Invoke(ctx, Product_ListSelfGitlabRepoBranchCommits_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CreateSelfGitlabGroup(ctx context.Context, in *CreateSelfGitlabGroupReq, opts ...grpc.CallOption) (*CreateSelfGitlabGroupReply, error) {
	out := new(CreateSelfGitlabGroupReply)
	err := c.cc.Invoke(ctx, Product_CreateSelfGitlabGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ListSelfGitlabGroup(ctx context.Context, in *ListSelfGitlabGroupReq, opts ...grpc.CallOption) (*ListSelfGitlabGroupReply, error) {
	out := new(ListSelfGitlabGroupReply)
	err := c.cc.Invoke(ctx, Product_ListSelfGitlabGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CreateGitHubToken(ctx context.Context, in *CreateGitHubTokenReq, opts ...grpc.CallOption) (*CreateGitHubTokenReply, error) {
	out := new(CreateGitHubTokenReply)
	err := c.cc.Invoke(ctx, Product_CreateGitHubToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ListGitHubToken(ctx context.Context, in *ListGitHubTokenReq, opts ...grpc.CallOption) (*ListGitHubTokenReply, error) {
	out := new(ListGitHubTokenReply)
	err := c.cc.Invoke(ctx, Product_ListGitHubToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) DelGitHubToken(ctx context.Context, in *DelGitHubTokenReq, opts ...grpc.CallOption) (*DelGitHubTokenReply, error) {
	out := new(DelGitHubTokenReply)
	err := c.cc.Invoke(ctx, Product_DelGitHubToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ImportGithubRepo(ctx context.Context, in *ImportGithubRepoReq, opts ...grpc.CallOption) (*ImportGithubRepoReply, error) {
	out := new(ImportGithubRepoReply)
	err := c.cc.Invoke(ctx, Product_ImportGithubRepo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CreateGithubRepo(ctx context.Context, in *CreateGithubRepoReq, opts ...grpc.CallOption) (*CreateGithubRepoReply, error) {
	out := new(CreateGithubRepoReply)
	err := c.cc.Invoke(ctx, Product_CreateGithubRepo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ListGithubRepo(ctx context.Context, in *ListGithubRepoReq, opts ...grpc.CallOption) (*ListGithubRepoReply, error) {
	out := new(ListGithubRepoReply)
	err := c.cc.Invoke(ctx, Product_ListGithubRepo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) DelGithubRepo(ctx context.Context, in *DelGithubRepoReq, opts ...grpc.CallOption) (*DelGithubRepoReply, error) {
	out := new(DelGithubRepoReply)
	err := c.cc.Invoke(ctx, Product_DelGithubRepo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ArchiveGithubRepo(ctx context.Context, in *ArchiveGithubRepoReq, opts ...grpc.CallOption) (*ArchiveGithubRepoReply, error) {
	out := new(ArchiveGithubRepoReply)
	err := c.cc.Invoke(ctx, Product_ArchiveGithubRepo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) MergeGithubRepo(ctx context.Context, in *MergeGithubRepoReq, opts ...grpc.CallOption) (*MergeGithubRepoReply, error) {
	out := new(MergeGithubRepoReply)
	err := c.cc.Invoke(ctx, Product_MergeGithubRepo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ProtectGithubRepoBranch(ctx context.Context, in *ProtectGithubRepoBranchReq, opts ...grpc.CallOption) (*ProtectGithubRepoBranchReply, error) {
	out := new(ProtectGithubRepoBranchReply)
	err := c.cc.Invoke(ctx, Product_ProtectGithubRepoBranch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) UnprotectGithubRepoBranch(ctx context.Context, in *UnprotectGithubRepoBranchReq, opts ...grpc.CallOption) (*UnprotectGithubRepoBranchReply, error) {
	out := new(UnprotectGithubRepoBranchReply)
	err := c.cc.Invoke(ctx, Product_UnprotectGithubRepoBranch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ListGithubOrg(ctx context.Context, in *ListGithubOrgReq, opts ...grpc.CallOption) (*ListGithubOrgReply, error) {
	out := new(ListGithubOrgReply)
	err := c.cc.Invoke(ctx, Product_ListGithubOrg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ListGithubRepoByOrg(ctx context.Context, in *ListGithubRepoByOrgReq, opts ...grpc.CallOption) (*ListGithubRepoByOrgReply, error) {
	out := new(ListGithubRepoByOrgReply)
	err := c.cc.Invoke(ctx, Product_ListGithubRepoByOrg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ListGithubRepoBranch(ctx context.Context, in *ListGithubRepoBranchReq, opts ...grpc.CallOption) (*ListGithubRepoBranchReply, error) {
	out := new(ListGithubRepoBranchReply)
	err := c.cc.Invoke(ctx, Product_ListGithubRepoBranch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetGithubUser(ctx context.Context, in *GetGithubUserReq, opts ...grpc.CallOption) (*GetGithubUserReply, error) {
	out := new(GetGithubUserReply)
	err := c.cc.Invoke(ctx, Product_GetGithubUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ListGithubRepoBranchCommits(ctx context.Context, in *ListGithubRepoBranchCommitsReq, opts ...grpc.CallOption) (*ListGithubRepoBranchCommitsReply, error) {
	out := new(ListGithubRepoBranchCommitsReply)
	err := c.cc.Invoke(ctx, Product_ListGithubRepoBranchCommits_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) SelfGitlabRepoBuildContainerImage(ctx context.Context, in *SelfGitlabRepoBuildContainerImageReq, opts ...grpc.CallOption) (*SelfGitlabRepoBuildContainerImageReply, error) {
	out := new(SelfGitlabRepoBuildContainerImageReply)
	err := c.cc.Invoke(ctx, Product_SelfGitlabRepoBuildContainerImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GithubRepoBuildContainerImage(ctx context.Context, in *GithubRepoBuildContainerImageReq, opts ...grpc.CallOption) (*GithubRepoBuildContainerImageReply, error) {
	out := new(GithubRepoBuildContainerImageReply)
	err := c.cc.Invoke(ctx, Product_GithubRepoBuildContainerImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) SelfGitlabRepoExecCiTemplate(ctx context.Context, in *SelfGitlabRepoExecCiTemplateReq, opts ...grpc.CallOption) (*SelfGitlabRepoExecCiTemplateReply, error) {
	out := new(SelfGitlabRepoExecCiTemplateReply)
	err := c.cc.Invoke(ctx, Product_SelfGitlabRepoExecCiTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GithubRepoExecCiTemplate(ctx context.Context, in *GithubRepoExecCiTemplateReq, opts ...grpc.CallOption) (*GithubRepoExecCiTemplateReply, error) {
	out := new(GithubRepoExecCiTemplateReply)
	err := c.cc.Invoke(ctx, Product_GithubRepoExecCiTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CreateProgram(ctx context.Context, in *CreateProgramReq, opts ...grpc.CallOption) (*CreateProgramReply, error) {
	out := new(CreateProgramReply)
	err := c.cc.Invoke(ctx, Product_CreateProgram_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetProgramByUuid(ctx context.Context, in *GetProgramByUuidReq, opts ...grpc.CallOption) (*GetProgramByUuidReply, error) {
	out := new(GetProgramByUuidReply)
	err := c.cc.Invoke(ctx, Product_GetProgramByUuid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetSelfProgram(ctx context.Context, in *GetSelfProgramReq, opts ...grpc.CallOption) (*GetSelfProgramReply, error) {
	out := new(GetSelfProgramReply)
	err := c.cc.Invoke(ctx, Product_GetSelfProgram_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) SearchProgram(ctx context.Context, in *SearchProgramReq, opts ...grpc.CallOption) (*SearchProgramReply, error) {
	out := new(SearchProgramReply)
	err := c.cc.Invoke(ctx, Product_SearchProgram_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CreateProgramMarket(ctx context.Context, in *CreateProgramMarketReq, opts ...grpc.CallOption) (*CreateProgramMarketReply, error) {
	out := new(CreateProgramMarketReply)
	err := c.cc.Invoke(ctx, Product_CreateProgramMarket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetProgramMarketByUuid(ctx context.Context, in *GetProgramMarketByUuidReq, opts ...grpc.CallOption) (*GetProgramMarketByUuidReply, error) {
	out := new(GetProgramMarketByUuidReply)
	err := c.cc.Invoke(ctx, Product_GetProgramMarketByUuid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetSelfProgramMarket(ctx context.Context, in *GetSelfProgramMarketReq, opts ...grpc.CallOption) (*GetSelfProgramMarketReply, error) {
	out := new(GetSelfProgramMarketReply)
	err := c.cc.Invoke(ctx, Product_GetSelfProgramMarket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) SearchProgramMarket(ctx context.Context, in *SearchProgramMarketReq, opts ...grpc.CallOption) (*SearchProgramMarketReply, error) {
	out := new(SearchProgramMarketReply)
	err := c.cc.Invoke(ctx, Product_SearchProgramMarket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CreateReliability(ctx context.Context, in *CreateReliabilityReq, opts ...grpc.CallOption) (*CreateReliabilityReply, error) {
	out := new(CreateReliabilityReply)
	err := c.cc.Invoke(ctx, Product_CreateReliability_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetReliability(ctx context.Context, in *GetReliabilityReq, opts ...grpc.CallOption) (*GetReliabilityReply, error) {
	out := new(GetReliabilityReply)
	err := c.cc.Invoke(ctx, Product_GetReliability_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) CreateWebServiceResource(ctx context.Context, in *CreateWebServiceResourceReq, opts ...grpc.CallOption) (*CreateWebServiceResourceReply, error) {
	out := new(CreateWebServiceResourceReply)
	err := c.cc.Invoke(ctx, Product_CreateWebServiceResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) ListWebServiceResource(ctx context.Context, in *ListWebServiceResourceReq, opts ...grpc.CallOption) (*ListWebServiceResourceReply, error) {
	out := new(ListWebServiceResourceReply)
	err := c.cc.Invoke(ctx, Product_ListWebServiceResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) DelWebServiceResource(ctx context.Context, in *DelWebServiceResourceReq, opts ...grpc.CallOption) (*DelWebServiceResourceReply, error) {
	out := new(DelWebServiceResourceReply)
	err := c.cc.Invoke(ctx, Product_DelWebServiceResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) UpdateWebServiceResource(ctx context.Context, in *UpdateWebServiceResourceReq, opts ...grpc.CallOption) (*UpdateWebServiceResourceReply, error) {
	out := new(UpdateWebServiceResourceReply)
	err := c.cc.Invoke(ctx, Product_UpdateWebServiceResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetWebServiceResourcePromSD(ctx context.Context, in *GetWebServiceResourcePromSDReq, opts ...grpc.CallOption) (*GetWebServiceResourcePromSDReply, error) {
	out := new(GetWebServiceResourcePromSDReply)
	err := c.cc.Invoke(ctx, Product_GetWebServiceResourcePromSD_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServer is the server API for Product service.
// All implementations must embed UnimplementedProductServer
// for forward compatibility
type ProductServer interface {
	// 产品
	// 创建产品
	CreateOrgProduct(context.Context, *CreateOrgProductReq) (*CreateOrgProductReply, error)
	// 获取产品
	ListOrgProduct(context.Context, *ListOrgProductReq) (*ListOrgProductReply, error)
	// 删除产品 - 暂时不支持删除，需要做资源清理
	DelOrgProduct(context.Context, *DelOrgProductReq) (*DelOrgProductReply, error)
	// 验证产品是否在组织内
	VerifyProductInOrg(context.Context, *VerifyProductInOrgReq) (*VerifyProductInOrgReply, error)
	// 获取产品信息 - inside
	GetOrgProduct(context.Context, *GetOrgProductReq) (*GetOrgProductReply, error)
	// 产品组
	// 创建组织产品组
	CreateOrgProductGroup(context.Context, *CreateOrgProductGroupReq) (*CreateOrgProductGroupReply, error)
	// 列出组织产品组
	ListOrgProductGroup(context.Context, *ListOrgProductGroupReq) (*ListOrgProductGroupReply, error)
	// 删除组织产品组
	DelOrgProductGroup(context.Context, *DelOrgProductGroupReq) (*DelOrgProductGroupReply, error)
	// 产品组成员
	// 添加组织产品组成员
	AddOrgProductGroupMember(context.Context, *AddOrgProductGroupMemberReq) (*AddOrgProductGroupMemberReply, error)
	// 列出组织产品组成员
	ListOrgProductGroupMember(context.Context, *ListOrgProductGroupMemberReq) (*ListOrgProductGroupMemberReply, error)
	// 驱逐组织产品组成员
	EvictOrgProductGroupMember(context.Context, *EvictOrgProductGroupMemberReq) (*EvictOrgProductGroupMemberReply, error)
	// 组织产品组成员离开组织产品组
	LeaveOrgProductGroupMember(context.Context, *LeaveOrgProductGroupMemberReq) (*LeaveOrgProductGroupMemberReply, error)
	// 产品环境
	// 添加产品环境
	AddOrgProductEnv(context.Context, *AddOrgProductEnvReq) (*AddOrgProductEnvReply, error)
	// 获取产品环境
	ListOrgProductEnv(context.Context, *ListOrgProductEnvReq) (*ListOrgProductEnvReply, error)
	// 删除产品环境
	DelOrgProductEnv(context.Context, *DelOrgProductEnvReq) (*DelOrgProductEnvReply, error)
	// 获取产品环境信息 - inside
	GetOrgProductEnv(context.Context, *GetOrgProductEnvReq) (*GetOrgProductEnvReply, error)
	// K8S集群
	// 添加K8S集群
	AddK8SCluster(context.Context, *AddK8SClusterReq) (*AddK8SClusterReply, error)
	// 列出K8S集群
	ListK8SCluster(context.Context, *ListK8SClusterReq) (*ListK8SClusterReply, error)
	// 验证K8S集群是否存在
	ExistK8SCluster(context.Context, *ExistK8SClusterReq) (*ExistK8SClusterReply, error)
	// 获取K8S集群
	// rpc GetK8SCluster (GetK8SClusterReq) returns (GetK8SClusterReply) {};
	// 删除K8S集群
	DelK8SCluster(context.Context, *DelK8SClusterReq) (*DelK8SClusterReply, error)
	// 添加K8S集群KubeEdge
	AddK8SClusterEdge(context.Context, *AddK8SClusterEdgeReq) (*AddK8SClusterEdgeReply, error)
	// 获取K8S集群KubeEdge
	GetK8SClusterEdge(context.Context, *GetK8SClusterEdgeReq) (*GetK8SClusterEdgeReply, error)
	// 删除K8S集群KubeEdge
	DelK8SClusterEdge(context.Context, *DelK8SClusterEdgeReq) (*DelK8SClusterEdgeReply, error)
	// 列出K8S集群NameSpace
	ListK8SClusterNameSpace(context.Context, *ListK8SClusterNameSpaceReq) (*ListK8SClusterNameSpaceReply, error)
	// 删除K8S集群NameSpace
	DelK8SClusterNameSpace(context.Context, *DelK8SClusterNameSpaceReq) (*DelK8SClusterNameSpaceReply, error)
	// 创建K8S集群NameSpace
	CreateK8SClusterNameSpace(context.Context, *CreateK8SClusterNameSpaceReq) (*CreateK8SClusterNameSpaceReply, error)
	// 获取K8S集群节点
	GetK8SClusterNode(context.Context, *GetK8SClusterNodeReq) (*GetK8SClusterNodeReply, error)
	// 列出K8S集群节点
	ListK8SClusterNode(context.Context, *ListK8SClusterNodeReq) (*ListK8SClusterNodeReply, error)
	// 列出K8S集群Pod
	ListK8SPod(context.Context, *ListK8SPodReq) (*ListK8SPodReply, error)
	// 获取K8S集群Pod
	GetK8SPod(context.Context, *GetK8SPodReq) (*GetK8SPodReply, error)
	// 搜索K8S集群Pod
	SearchK8SPod(context.Context, *SearchK8SPodReq) (*SearchK8SPodReply, error)
	// 驱逐K8S集群Pod
	EvictK8SPod(context.Context, *EvictK8SPodReq) (*EvictK8SPodReply, error)
	// 删除K8S集群Pod
	DelK8SPod(context.Context, *DelK8SPodReq) (*DelK8SPodReply, error)
	// 清理被驱逐的Pod
	CleanEvictK8SPod(context.Context, *CleanEvictK8SPodReq) (*CleanEvictK8SPodReply, error)
	// 创建K8S集群ConfigMap
	CreateK8SClusterConfigMap(context.Context, *CreateK8SClusterConfigMapReq) (*CreateK8SClusterConfigMapReply, error)
	// 列出K8S集群ConfigMap
	ListK8SClusterConfigMap(context.Context, *ListK8SClusterConfigMapReq) (*ListK8SClusterConfigMapReply, error)
	// 获取K8S集群ConfigMap
	GetK8SClusterConfigMap(context.Context, *GetK8SClusterConfigMapReq) (*GetK8SClusterConfigMapReply, error)
	// 更新K8S集群ConfigMap
	UpdateK8SClusterConfigMap(context.Context, *UpdateK8SClusterConfigMapReq) (*UpdateK8SClusterConfigMapReply, error)
	// 删除K8S集群ConfigMap
	DelK8SClusterConfigMap(context.Context, *DelK8SClusterConfigMapReq) (*DelK8SClusterConfigMapReply, error)
	// 列出K8S集群Secret
	ListSecret(context.Context, *ListSecretReq) (*ListSecretReply, error)
	// 获取K8S集群Secret
	GetSecret(context.Context, *GetSecretReq) (*GetSecretReply, error)
	// 删除K8S集群Secret
	DelSecret(context.Context, *DelSecretReq) (*DelSecretReply, error)
	// 创建K8S集群Docker Secret
	CreateDockerSecret(context.Context, *CreateDockerSecretReq) (*CreateDockerSecretReply, error)
	// 更新K8S集群Docker Secret
	UpdateDockerSecret(context.Context, *UpdateDockerSecretReq) (*UpdateDockerSecretReply, error)
	// 创建K8S集群Tls Secret
	CreateTlsSecret(context.Context, *CreateTlsSecretReq) (*CreateTlsSecretReply, error)
	// 更新K8S集群Tls Secret
	UpdateTlsSecret(context.Context, *UpdateTlsSecretReq) (*UpdateTlsSecretReply, error)
	// 创建K8S集群Opaque Secret
	CreateOpaqueSecret(context.Context, *CreateOpaqueSecretReq) (*CreateOpaqueSecretReply, error)
	// 更新K8S集群Opaque Secret
	UpdateOpaqueSecret(context.Context, *UpdateOpaqueSecretReq) (*UpdateOpaqueSecretReply, error)
	// 创建K8S集群SSHAuth Secret
	CreateSSHAuthSecret(context.Context, *CreateSSHAuthSecretReq) (*CreateSSHAuthSecretReply, error)
	// 更新K8S集群SSHAuth Secret
	UpdateSSHAuthSecret(context.Context, *UpdateSSHAuthSecretReq) (*UpdateSSHAuthSecretReply, error)
	// 创建K8S集群 Basic Auth Secret
	CreateBasicAuthSecret(context.Context, *CreateBasicAuthSecretReq) (*CreateBasicAuthSecretReply, error)
	// 更新K8S集群 Basic Auth Secret
	UpdateBasicAuthSecret(context.Context, *UpdateBasicAuthSecretReq) (*UpdateBasicAuthSecretReply, error)
	// 列出K8S集群Deployment
	ListK8SClusterDeployment(context.Context, *ListK8SClusterDeploymentReq) (*ListK8SClusterDeploymentReply, error)
	// 获取K8S集群Deployment
	GetK8SClusterDeployment(context.Context, *GetK8SClusterDeploymentReq) (*GetK8SClusterDeploymentReply, error)
	// 删除K8S集群Deployment
	DelK8SClusterDeployment(context.Context, *DelK8SClusterDeploymentReq) (*DelK8SClusterDeploymentReply, error)
	// 更新K8S集群Deployment
	UpdateK8SClusterDeployment(context.Context, *UpdateK8SClusterDeploymentReq) (*UpdateK8SClusterDeploymentReply, error)
	// 更新K8S集群Deployment ReplicaSet
	UpdateK8SClusterDeploymentReplicaSet(context.Context, *UpdateK8SClusterDeploymentReplicaSetReq) (*UpdateK8SClusterDeploymentReplicaSetReply, error)
	// 创建K8S集群Service
	CreateK8SService(context.Context, *CreateK8SServiceReq) (*CreateK8SServiceReply, error)
	// 列出K8S集群Service
	ListK8SService(context.Context, *ListK8SServiceReq) (*ListK8SServiceReply, error)
	// 获取K8S集群Service
	GetK8SService(context.Context, *GetK8SServiceReq) (*GetK8SServiceReply, error)
	// 删除K8S集群Service
	DelK8SService(context.Context, *DelK8SServiceReq) (*DelK8SServiceReply, error)
	// 创建K8S集群Ingress
	CreateK8SIngress(context.Context, *CreateK8SIngressReq) (*CreateK8SIngressReply, error)
	ListK8SIngress(context.Context, *ListK8SIngressReq) (*ListK8SIngressReply, error)
	GetK8SIngress(context.Context, *GetK8SIngressReq) (*GetK8SIngressReply, error)
	DelK8SIngress(context.Context, *DelK8SIngressReq) (*DelK8SIngressReply, error)
	UpdateK8SIngress(context.Context, *UpdateK8SIngressReq) (*UpdateK8SIngressReply, error)
	// k8s 对象模版
	// 列出 k8s 对象公共模版
	ListK8SObjectPublicTemplate(context.Context, *ListK8SObjectPublicTemplateReq) (*ListK8SObjectPublicTemplateReply, error)
	// 获取 k8s 对象公共模版
	GetK8SObjectPublicTemplate(context.Context, *GetK8SObjectPublicTemplateReq) (*GetK8SObjectPublicTemplateReply, error)
	// 创建 k8s 对象私有模版
	CreateK8SObjectPrivateTemplate(context.Context, *CreateK8SObjectPrivateTemplateReq) (*CreateK8SObjectPrivateTemplateReply, error)
	// 列出 k8s 对象私有模版
	ListK8SObjectPrivateTemplate(context.Context, *ListK8SObjectPrivateTemplateReq) (*ListK8SObjectPrivateTemplateReply, error)
	// 获取 k8s 对象私有模版
	GetK8SObjectPrivateTemplate(context.Context, *GetK8SObjectPrivateTemplateReq) (*GetK8SObjectPrivateTemplateReply, error)
	// 删除 k8s 对象私有模版
	DelK8SObjectPrivateTemplate(context.Context, *DelK8SObjectPrivateTemplateReq) (*DelK8SObjectPrivateTemplateReply, error)
	// serviceUrl
	// serviceUrl - 添加服务Url
	CreateServiceUrl(context.Context, *CreateServiceUrlReq) (*CreateServiceUrlReply, error)
	// serviceUrl - 列出服务Url
	ListServiceUrl(context.Context, *ListServiceUrlReq) (*ListServiceUrlReply, error)
	// serviceUrl - 删除服务Url
	DelServiceUrl(context.Context, *DelServiceUrlReq) (*DelServiceUrlReply, error)
	GenerateServiceUrlAuthKey(context.Context, *GenerateServiceUrlAuthKeyReq) (*GenerateServiceUrlAuthKeyReply, error)
	ListServiceUrlAuthKey(context.Context, *ListServiceUrlAuthKeyReq) (*ListServiceUrlAuthKeyReply, error)
	DelServiceUrlAuthKey(context.Context, *DelServiceUrlAuthKeyReq) (*DelServiceUrlAuthKeyReply, error)
	GenerateServiceUrlAuthUrl(context.Context, *GenerateServiceUrlAuthUrlReq) (*GenerateServiceUrlAuthUrlReply, error)
	// container_registry - 容器仓库
	// 添加容器仓库账号
	AddContainerRegistry(context.Context, *AddContainerRegistryReq) (*AddContainerRegistryReply, error)
	// 列出容器仓库账号
	ListContainerRegistry(context.Context, *ListContainerRegistryReq) (*ListContainerRegistryReply, error)
	// 删除容器仓库账户
	DelContainerRegistry(context.Context, *DelContainerRegistryReq) (*DelContainerRegistryReply, error)
	// 提供内部使用
	GetContainerRegistry(context.Context, *GetContainerRegistryReq) (*GetContainerRegistryReply, error)
	// 容器镜像
	// 添加容器镜像
	AddPublicContainerImage(context.Context, *AddPublicContainerImageReq) (*AddPublicContainerImageReply, error)
	// 列出容器镜像
	ListPublicContainerImage(context.Context, *ListPublicContainerImageReq) (*ListPublicContainerImageReply, error)
	// 删除容器镜像
	DelPublicContainerImage(context.Context, *DelPublicContainerImageReq) (*DelPublicContainerImageReply, error)
	// gitlab
	// 添加gitlab平台
	CreateSelfGitlabPlatform(context.Context, *CreateSelfGitlabPlatformReq) (*CreateSelfGitlabPlatformReply, error)
	// 列出gitlab平台
	ListSelfGitlabPlatform(context.Context, *ListSelfGitlabPlatformReq) (*ListSelfGitlabPlatformReply, error)
	// 删除gitlab平台
	DelSelfGitlabPlatform(context.Context, *DelSelfGitlabPlatformReq) (*DelSelfGitlabPlatformReply, error)
	// 添加gitlab token
	CreateSelfGitlabToken(context.Context, *CreateSelfGitlabTokenReq) (*CreateSelfGitlabTokenReply, error)
	// 列出gitlab token
	ListSelfGitlabToken(context.Context, *ListSelfGitlabTokenReq) (*ListSelfGitlabTokenReply, error)
	// 删除gitlab token
	DelSelfGitlabToken(context.Context, *DelSelfGitlabTokenReq) (*DelSelfGitlabTokenReply, error)
	// 添加gitlab仓库
	CreateSelfGitlabRepo(context.Context, *CreateSelfGitlabRepoReq) (*CreateSelfGitlabRepoReply, error)
	// 倒入gitlab仓库
	ImportSelfGitlabRepo(context.Context, *ImportSelfGitlabRepoReq) (*ImportSelfGitlabRepoReply, error)
	// 列出gitlab仓库
	ListSelfGitlabRepo(context.Context, *ListSelfGitlabRepoReq) (*ListSelfGitlabRepoReply, error)
	// 删除gitlab仓库
	DelSelfGitlabRepo(context.Context, *DelSelfGitlabRepoReq) (*DelSelfGitlabRepoReply, error)
	// 归档gitlab仓库
	ArchiveSelfGitlabRepo(context.Context, *ArchiveSelfGitlabRepoReq) (*ArchiveSelfGitlabRepoReply, error)
	// 合并gitlab仓库
	MergeSelfGitlabRepo(context.Context, *MergeSelfGitlabRepoReq) (*MergeSelfGitlabRepoReply, error)
	SelfGitlabRepoMergeHis(context.Context, *SelfGitlabRepoMergeHisReq) (*SelfGitlabRepoMergeHisReply, error)
	// 列出gitlab仓库分支
	ListSelfGitlabRepoBranch(context.Context, *ListSelfGitlabRepoBranchReq) (*ListSelfGitlabRepoBranchReply, error)
	// 创建gitlab仓库分支
	CreateSelfGitlabRepoBranch(context.Context, *CreateSelfGitlabRepoBranchReq) (*CreateSelfGitlabRepoBranchReply, error)
	// 删除gitlab仓库分支
	DelSelfGitlabRepoBranch(context.Context, *DelSelfGitlabRepoBranchReq) (*DelSelfGitlabRepoBranchReply, error)
	// 保护gitlab仓库分支
	ProtectSelfGitlabRepoBranch(context.Context, *ProtectSelfGitlabRepoBranchReq) (*ProtectSelfGitlabRepoBranchReply, error)
	// 无保护gitlab仓库分支
	UnprotectSelfGitlabRepoBranch(context.Context, *UnprotectSelfGitlabRepoBranchReq) (*UnprotectSelfGitlabRepoBranchReply, error)
	// 列出gitlab仓库分支Commits
	ListSelfGitlabRepoBranchCommits(context.Context, *ListSelfGitlabRepoBranchCommitsReq) (*ListSelfGitlabRepoBranchCommitsReply, error)
	// 创建gitlab组
	CreateSelfGitlabGroup(context.Context, *CreateSelfGitlabGroupReq) (*CreateSelfGitlabGroupReply, error)
	// 列出gitlab组
	ListSelfGitlabGroup(context.Context, *ListSelfGitlabGroupReq) (*ListSelfGitlabGroupReply, error)
	// Github
	// 添加Github token
	CreateGitHubToken(context.Context, *CreateGitHubTokenReq) (*CreateGitHubTokenReply, error)
	// 列出Github token
	ListGitHubToken(context.Context, *ListGitHubTokenReq) (*ListGitHubTokenReply, error)
	// 删除Github token
	DelGitHubToken(context.Context, *DelGitHubTokenReq) (*DelGitHubTokenReply, error)
	// 导入Github仓库
	ImportGithubRepo(context.Context, *ImportGithubRepoReq) (*ImportGithubRepoReply, error)
	// 创建Github仓库
	CreateGithubRepo(context.Context, *CreateGithubRepoReq) (*CreateGithubRepoReply, error)
	// 列出Github仓库
	ListGithubRepo(context.Context, *ListGithubRepoReq) (*ListGithubRepoReply, error)
	// 删除github仓库
	DelGithubRepo(context.Context, *DelGithubRepoReq) (*DelGithubRepoReply, error)
	// 归档gitHub仓库
	ArchiveGithubRepo(context.Context, *ArchiveGithubRepoReq) (*ArchiveGithubRepoReply, error)
	// 合并github仓库
	MergeGithubRepo(context.Context, *MergeGithubRepoReq) (*MergeGithubRepoReply, error)
	// 保护github仓库分支
	ProtectGithubRepoBranch(context.Context, *ProtectGithubRepoBranchReq) (*ProtectGithubRepoBranchReply, error)
	// 无保护github仓库分支
	UnprotectGithubRepoBranch(context.Context, *UnprotectGithubRepoBranchReq) (*UnprotectGithubRepoBranchReply, error)
	// 列出Github组织
	ListGithubOrg(context.Context, *ListGithubOrgReq) (*ListGithubOrgReply, error)
	// 列出Github仓库 (By Org)
	ListGithubRepoByOrg(context.Context, *ListGithubRepoByOrgReq) (*ListGithubRepoByOrgReply, error)
	// 列出Github仓库分支
	ListGithubRepoBranch(context.Context, *ListGithubRepoBranchReq) (*ListGithubRepoBranchReply, error)
	// 获取Github用户信息
	GetGithubUser(context.Context, *GetGithubUserReq) (*GetGithubUserReply, error)
	ListGithubRepoBranchCommits(context.Context, *ListGithubRepoBranchCommitsReq) (*ListGithubRepoBranchCommitsReply, error)
	// CI - 构建容器镜像
	SelfGitlabRepoBuildContainerImage(context.Context, *SelfGitlabRepoBuildContainerImageReq) (*SelfGitlabRepoBuildContainerImageReply, error)
	GithubRepoBuildContainerImage(context.Context, *GithubRepoBuildContainerImageReq) (*GithubRepoBuildContainerImageReply, error)
	SelfGitlabRepoExecCiTemplate(context.Context, *SelfGitlabRepoExecCiTemplateReq) (*SelfGitlabRepoExecCiTemplateReply, error)
	GithubRepoExecCiTemplate(context.Context, *GithubRepoExecCiTemplateReq) (*GithubRepoExecCiTemplateReply, error)
	// 程序
	CreateProgram(context.Context, *CreateProgramReq) (*CreateProgramReply, error)
	GetProgramByUuid(context.Context, *GetProgramByUuidReq) (*GetProgramByUuidReply, error)
	GetSelfProgram(context.Context, *GetSelfProgramReq) (*GetSelfProgramReply, error)
	SearchProgram(context.Context, *SearchProgramReq) (*SearchProgramReply, error)
	// 市场程序
	CreateProgramMarket(context.Context, *CreateProgramMarketReq) (*CreateProgramMarketReply, error)
	GetProgramMarketByUuid(context.Context, *GetProgramMarketByUuidReq) (*GetProgramMarketByUuidReply, error)
	GetSelfProgramMarket(context.Context, *GetSelfProgramMarketReq) (*GetSelfProgramMarketReply, error)
	SearchProgramMarket(context.Context, *SearchProgramMarketReq) (*SearchProgramMarketReply, error)
	// 可用性
	CreateReliability(context.Context, *CreateReliabilityReq) (*CreateReliabilityReply, error)
	GetReliability(context.Context, *GetReliabilityReq) (*GetReliabilityReply, error)
	// WebServiceResource
	CreateWebServiceResource(context.Context, *CreateWebServiceResourceReq) (*CreateWebServiceResourceReply, error)
	ListWebServiceResource(context.Context, *ListWebServiceResourceReq) (*ListWebServiceResourceReply, error)
	DelWebServiceResource(context.Context, *DelWebServiceResourceReq) (*DelWebServiceResourceReply, error)
	UpdateWebServiceResource(context.Context, *UpdateWebServiceResourceReq) (*UpdateWebServiceResourceReply, error)
	GetWebServiceResourcePromSD(context.Context, *GetWebServiceResourcePromSDReq) (*GetWebServiceResourcePromSDReply, error)
	mustEmbedUnimplementedProductServer()
}

// UnimplementedProductServer must be embedded to have forward compatible implementations.
type UnimplementedProductServer struct {
}

func (UnimplementedProductServer) CreateOrgProduct(context.Context, *CreateOrgProductReq) (*CreateOrgProductReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrgProduct not implemented")
}
func (UnimplementedProductServer) ListOrgProduct(context.Context, *ListOrgProductReq) (*ListOrgProductReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrgProduct not implemented")
}
func (UnimplementedProductServer) DelOrgProduct(context.Context, *DelOrgProductReq) (*DelOrgProductReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelOrgProduct not implemented")
}
func (UnimplementedProductServer) VerifyProductInOrg(context.Context, *VerifyProductInOrgReq) (*VerifyProductInOrgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyProductInOrg not implemented")
}
func (UnimplementedProductServer) GetOrgProduct(context.Context, *GetOrgProductReq) (*GetOrgProductReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgProduct not implemented")
}
func (UnimplementedProductServer) CreateOrgProductGroup(context.Context, *CreateOrgProductGroupReq) (*CreateOrgProductGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrgProductGroup not implemented")
}
func (UnimplementedProductServer) ListOrgProductGroup(context.Context, *ListOrgProductGroupReq) (*ListOrgProductGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrgProductGroup not implemented")
}
func (UnimplementedProductServer) DelOrgProductGroup(context.Context, *DelOrgProductGroupReq) (*DelOrgProductGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelOrgProductGroup not implemented")
}
func (UnimplementedProductServer) AddOrgProductGroupMember(context.Context, *AddOrgProductGroupMemberReq) (*AddOrgProductGroupMemberReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrgProductGroupMember not implemented")
}
func (UnimplementedProductServer) ListOrgProductGroupMember(context.Context, *ListOrgProductGroupMemberReq) (*ListOrgProductGroupMemberReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrgProductGroupMember not implemented")
}
func (UnimplementedProductServer) EvictOrgProductGroupMember(context.Context, *EvictOrgProductGroupMemberReq) (*EvictOrgProductGroupMemberReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvictOrgProductGroupMember not implemented")
}
func (UnimplementedProductServer) LeaveOrgProductGroupMember(context.Context, *LeaveOrgProductGroupMemberReq) (*LeaveOrgProductGroupMemberReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveOrgProductGroupMember not implemented")
}
func (UnimplementedProductServer) AddOrgProductEnv(context.Context, *AddOrgProductEnvReq) (*AddOrgProductEnvReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrgProductEnv not implemented")
}
func (UnimplementedProductServer) ListOrgProductEnv(context.Context, *ListOrgProductEnvReq) (*ListOrgProductEnvReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrgProductEnv not implemented")
}
func (UnimplementedProductServer) DelOrgProductEnv(context.Context, *DelOrgProductEnvReq) (*DelOrgProductEnvReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelOrgProductEnv not implemented")
}
func (UnimplementedProductServer) GetOrgProductEnv(context.Context, *GetOrgProductEnvReq) (*GetOrgProductEnvReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgProductEnv not implemented")
}
func (UnimplementedProductServer) AddK8SCluster(context.Context, *AddK8SClusterReq) (*AddK8SClusterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddK8SCluster not implemented")
}
func (UnimplementedProductServer) ListK8SCluster(context.Context, *ListK8SClusterReq) (*ListK8SClusterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListK8SCluster not implemented")
}
func (UnimplementedProductServer) ExistK8SCluster(context.Context, *ExistK8SClusterReq) (*ExistK8SClusterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistK8SCluster not implemented")
}
func (UnimplementedProductServer) DelK8SCluster(context.Context, *DelK8SClusterReq) (*DelK8SClusterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelK8SCluster not implemented")
}
func (UnimplementedProductServer) AddK8SClusterEdge(context.Context, *AddK8SClusterEdgeReq) (*AddK8SClusterEdgeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddK8SClusterEdge not implemented")
}
func (UnimplementedProductServer) GetK8SClusterEdge(context.Context, *GetK8SClusterEdgeReq) (*GetK8SClusterEdgeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetK8SClusterEdge not implemented")
}
func (UnimplementedProductServer) DelK8SClusterEdge(context.Context, *DelK8SClusterEdgeReq) (*DelK8SClusterEdgeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelK8SClusterEdge not implemented")
}
func (UnimplementedProductServer) ListK8SClusterNameSpace(context.Context, *ListK8SClusterNameSpaceReq) (*ListK8SClusterNameSpaceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListK8SClusterNameSpace not implemented")
}
func (UnimplementedProductServer) DelK8SClusterNameSpace(context.Context, *DelK8SClusterNameSpaceReq) (*DelK8SClusterNameSpaceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelK8SClusterNameSpace not implemented")
}
func (UnimplementedProductServer) CreateK8SClusterNameSpace(context.Context, *CreateK8SClusterNameSpaceReq) (*CreateK8SClusterNameSpaceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateK8SClusterNameSpace not implemented")
}
func (UnimplementedProductServer) GetK8SClusterNode(context.Context, *GetK8SClusterNodeReq) (*GetK8SClusterNodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetK8SClusterNode not implemented")
}
func (UnimplementedProductServer) ListK8SClusterNode(context.Context, *ListK8SClusterNodeReq) (*ListK8SClusterNodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListK8SClusterNode not implemented")
}
func (UnimplementedProductServer) ListK8SPod(context.Context, *ListK8SPodReq) (*ListK8SPodReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListK8SPod not implemented")
}
func (UnimplementedProductServer) GetK8SPod(context.Context, *GetK8SPodReq) (*GetK8SPodReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetK8SPod not implemented")
}
func (UnimplementedProductServer) SearchK8SPod(context.Context, *SearchK8SPodReq) (*SearchK8SPodReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchK8SPod not implemented")
}
func (UnimplementedProductServer) EvictK8SPod(context.Context, *EvictK8SPodReq) (*EvictK8SPodReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvictK8SPod not implemented")
}
func (UnimplementedProductServer) DelK8SPod(context.Context, *DelK8SPodReq) (*DelK8SPodReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelK8SPod not implemented")
}
func (UnimplementedProductServer) CleanEvictK8SPod(context.Context, *CleanEvictK8SPodReq) (*CleanEvictK8SPodReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanEvictK8SPod not implemented")
}
func (UnimplementedProductServer) CreateK8SClusterConfigMap(context.Context, *CreateK8SClusterConfigMapReq) (*CreateK8SClusterConfigMapReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateK8SClusterConfigMap not implemented")
}
func (UnimplementedProductServer) ListK8SClusterConfigMap(context.Context, *ListK8SClusterConfigMapReq) (*ListK8SClusterConfigMapReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListK8SClusterConfigMap not implemented")
}
func (UnimplementedProductServer) GetK8SClusterConfigMap(context.Context, *GetK8SClusterConfigMapReq) (*GetK8SClusterConfigMapReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetK8SClusterConfigMap not implemented")
}
func (UnimplementedProductServer) UpdateK8SClusterConfigMap(context.Context, *UpdateK8SClusterConfigMapReq) (*UpdateK8SClusterConfigMapReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateK8SClusterConfigMap not implemented")
}
func (UnimplementedProductServer) DelK8SClusterConfigMap(context.Context, *DelK8SClusterConfigMapReq) (*DelK8SClusterConfigMapReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelK8SClusterConfigMap not implemented")
}
func (UnimplementedProductServer) ListSecret(context.Context, *ListSecretReq) (*ListSecretReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecret not implemented")
}
func (UnimplementedProductServer) GetSecret(context.Context, *GetSecretReq) (*GetSecretReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecret not implemented")
}
func (UnimplementedProductServer) DelSecret(context.Context, *DelSecretReq) (*DelSecretReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelSecret not implemented")
}
func (UnimplementedProductServer) CreateDockerSecret(context.Context, *CreateDockerSecretReq) (*CreateDockerSecretReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDockerSecret not implemented")
}
func (UnimplementedProductServer) UpdateDockerSecret(context.Context, *UpdateDockerSecretReq) (*UpdateDockerSecretReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDockerSecret not implemented")
}
func (UnimplementedProductServer) CreateTlsSecret(context.Context, *CreateTlsSecretReq) (*CreateTlsSecretReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTlsSecret not implemented")
}
func (UnimplementedProductServer) UpdateTlsSecret(context.Context, *UpdateTlsSecretReq) (*UpdateTlsSecretReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTlsSecret not implemented")
}
func (UnimplementedProductServer) CreateOpaqueSecret(context.Context, *CreateOpaqueSecretReq) (*CreateOpaqueSecretReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOpaqueSecret not implemented")
}
func (UnimplementedProductServer) UpdateOpaqueSecret(context.Context, *UpdateOpaqueSecretReq) (*UpdateOpaqueSecretReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOpaqueSecret not implemented")
}
func (UnimplementedProductServer) CreateSSHAuthSecret(context.Context, *CreateSSHAuthSecretReq) (*CreateSSHAuthSecretReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSSHAuthSecret not implemented")
}
func (UnimplementedProductServer) UpdateSSHAuthSecret(context.Context, *UpdateSSHAuthSecretReq) (*UpdateSSHAuthSecretReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSSHAuthSecret not implemented")
}
func (UnimplementedProductServer) CreateBasicAuthSecret(context.Context, *CreateBasicAuthSecretReq) (*CreateBasicAuthSecretReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBasicAuthSecret not implemented")
}
func (UnimplementedProductServer) UpdateBasicAuthSecret(context.Context, *UpdateBasicAuthSecretReq) (*UpdateBasicAuthSecretReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBasicAuthSecret not implemented")
}
func (UnimplementedProductServer) ListK8SClusterDeployment(context.Context, *ListK8SClusterDeploymentReq) (*ListK8SClusterDeploymentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListK8SClusterDeployment not implemented")
}
func (UnimplementedProductServer) GetK8SClusterDeployment(context.Context, *GetK8SClusterDeploymentReq) (*GetK8SClusterDeploymentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetK8SClusterDeployment not implemented")
}
func (UnimplementedProductServer) DelK8SClusterDeployment(context.Context, *DelK8SClusterDeploymentReq) (*DelK8SClusterDeploymentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelK8SClusterDeployment not implemented")
}
func (UnimplementedProductServer) UpdateK8SClusterDeployment(context.Context, *UpdateK8SClusterDeploymentReq) (*UpdateK8SClusterDeploymentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateK8SClusterDeployment not implemented")
}
func (UnimplementedProductServer) UpdateK8SClusterDeploymentReplicaSet(context.Context, *UpdateK8SClusterDeploymentReplicaSetReq) (*UpdateK8SClusterDeploymentReplicaSetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateK8SClusterDeploymentReplicaSet not implemented")
}
func (UnimplementedProductServer) CreateK8SService(context.Context, *CreateK8SServiceReq) (*CreateK8SServiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateK8SService not implemented")
}
func (UnimplementedProductServer) ListK8SService(context.Context, *ListK8SServiceReq) (*ListK8SServiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListK8SService not implemented")
}
func (UnimplementedProductServer) GetK8SService(context.Context, *GetK8SServiceReq) (*GetK8SServiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetK8SService not implemented")
}
func (UnimplementedProductServer) DelK8SService(context.Context, *DelK8SServiceReq) (*DelK8SServiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelK8SService not implemented")
}
func (UnimplementedProductServer) CreateK8SIngress(context.Context, *CreateK8SIngressReq) (*CreateK8SIngressReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateK8SIngress not implemented")
}
func (UnimplementedProductServer) ListK8SIngress(context.Context, *ListK8SIngressReq) (*ListK8SIngressReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListK8SIngress not implemented")
}
func (UnimplementedProductServer) GetK8SIngress(context.Context, *GetK8SIngressReq) (*GetK8SIngressReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetK8SIngress not implemented")
}
func (UnimplementedProductServer) DelK8SIngress(context.Context, *DelK8SIngressReq) (*DelK8SIngressReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelK8SIngress not implemented")
}
func (UnimplementedProductServer) UpdateK8SIngress(context.Context, *UpdateK8SIngressReq) (*UpdateK8SIngressReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateK8SIngress not implemented")
}
func (UnimplementedProductServer) ListK8SObjectPublicTemplate(context.Context, *ListK8SObjectPublicTemplateReq) (*ListK8SObjectPublicTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListK8SObjectPublicTemplate not implemented")
}
func (UnimplementedProductServer) GetK8SObjectPublicTemplate(context.Context, *GetK8SObjectPublicTemplateReq) (*GetK8SObjectPublicTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetK8SObjectPublicTemplate not implemented")
}
func (UnimplementedProductServer) CreateK8SObjectPrivateTemplate(context.Context, *CreateK8SObjectPrivateTemplateReq) (*CreateK8SObjectPrivateTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateK8SObjectPrivateTemplate not implemented")
}
func (UnimplementedProductServer) ListK8SObjectPrivateTemplate(context.Context, *ListK8SObjectPrivateTemplateReq) (*ListK8SObjectPrivateTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListK8SObjectPrivateTemplate not implemented")
}
func (UnimplementedProductServer) GetK8SObjectPrivateTemplate(context.Context, *GetK8SObjectPrivateTemplateReq) (*GetK8SObjectPrivateTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetK8SObjectPrivateTemplate not implemented")
}
func (UnimplementedProductServer) DelK8SObjectPrivateTemplate(context.Context, *DelK8SObjectPrivateTemplateReq) (*DelK8SObjectPrivateTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelK8SObjectPrivateTemplate not implemented")
}
func (UnimplementedProductServer) CreateServiceUrl(context.Context, *CreateServiceUrlReq) (*CreateServiceUrlReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServiceUrl not implemented")
}
func (UnimplementedProductServer) ListServiceUrl(context.Context, *ListServiceUrlReq) (*ListServiceUrlReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServiceUrl not implemented")
}
func (UnimplementedProductServer) DelServiceUrl(context.Context, *DelServiceUrlReq) (*DelServiceUrlReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelServiceUrl not implemented")
}
func (UnimplementedProductServer) GenerateServiceUrlAuthKey(context.Context, *GenerateServiceUrlAuthKeyReq) (*GenerateServiceUrlAuthKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateServiceUrlAuthKey not implemented")
}
func (UnimplementedProductServer) ListServiceUrlAuthKey(context.Context, *ListServiceUrlAuthKeyReq) (*ListServiceUrlAuthKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServiceUrlAuthKey not implemented")
}
func (UnimplementedProductServer) DelServiceUrlAuthKey(context.Context, *DelServiceUrlAuthKeyReq) (*DelServiceUrlAuthKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelServiceUrlAuthKey not implemented")
}
func (UnimplementedProductServer) GenerateServiceUrlAuthUrl(context.Context, *GenerateServiceUrlAuthUrlReq) (*GenerateServiceUrlAuthUrlReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateServiceUrlAuthUrl not implemented")
}
func (UnimplementedProductServer) AddContainerRegistry(context.Context, *AddContainerRegistryReq) (*AddContainerRegistryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddContainerRegistry not implemented")
}
func (UnimplementedProductServer) ListContainerRegistry(context.Context, *ListContainerRegistryReq) (*ListContainerRegistryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContainerRegistry not implemented")
}
func (UnimplementedProductServer) DelContainerRegistry(context.Context, *DelContainerRegistryReq) (*DelContainerRegistryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelContainerRegistry not implemented")
}
func (UnimplementedProductServer) GetContainerRegistry(context.Context, *GetContainerRegistryReq) (*GetContainerRegistryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContainerRegistry not implemented")
}
func (UnimplementedProductServer) AddPublicContainerImage(context.Context, *AddPublicContainerImageReq) (*AddPublicContainerImageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPublicContainerImage not implemented")
}
func (UnimplementedProductServer) ListPublicContainerImage(context.Context, *ListPublicContainerImageReq) (*ListPublicContainerImageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPublicContainerImage not implemented")
}
func (UnimplementedProductServer) DelPublicContainerImage(context.Context, *DelPublicContainerImageReq) (*DelPublicContainerImageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelPublicContainerImage not implemented")
}
func (UnimplementedProductServer) CreateSelfGitlabPlatform(context.Context, *CreateSelfGitlabPlatformReq) (*CreateSelfGitlabPlatformReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSelfGitlabPlatform not implemented")
}
func (UnimplementedProductServer) ListSelfGitlabPlatform(context.Context, *ListSelfGitlabPlatformReq) (*ListSelfGitlabPlatformReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSelfGitlabPlatform not implemented")
}
func (UnimplementedProductServer) DelSelfGitlabPlatform(context.Context, *DelSelfGitlabPlatformReq) (*DelSelfGitlabPlatformReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelSelfGitlabPlatform not implemented")
}
func (UnimplementedProductServer) CreateSelfGitlabToken(context.Context, *CreateSelfGitlabTokenReq) (*CreateSelfGitlabTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSelfGitlabToken not implemented")
}
func (UnimplementedProductServer) ListSelfGitlabToken(context.Context, *ListSelfGitlabTokenReq) (*ListSelfGitlabTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSelfGitlabToken not implemented")
}
func (UnimplementedProductServer) DelSelfGitlabToken(context.Context, *DelSelfGitlabTokenReq) (*DelSelfGitlabTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelSelfGitlabToken not implemented")
}
func (UnimplementedProductServer) CreateSelfGitlabRepo(context.Context, *CreateSelfGitlabRepoReq) (*CreateSelfGitlabRepoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSelfGitlabRepo not implemented")
}
func (UnimplementedProductServer) ImportSelfGitlabRepo(context.Context, *ImportSelfGitlabRepoReq) (*ImportSelfGitlabRepoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportSelfGitlabRepo not implemented")
}
func (UnimplementedProductServer) ListSelfGitlabRepo(context.Context, *ListSelfGitlabRepoReq) (*ListSelfGitlabRepoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSelfGitlabRepo not implemented")
}
func (UnimplementedProductServer) DelSelfGitlabRepo(context.Context, *DelSelfGitlabRepoReq) (*DelSelfGitlabRepoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelSelfGitlabRepo not implemented")
}
func (UnimplementedProductServer) ArchiveSelfGitlabRepo(context.Context, *ArchiveSelfGitlabRepoReq) (*ArchiveSelfGitlabRepoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveSelfGitlabRepo not implemented")
}
func (UnimplementedProductServer) MergeSelfGitlabRepo(context.Context, *MergeSelfGitlabRepoReq) (*MergeSelfGitlabRepoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeSelfGitlabRepo not implemented")
}
func (UnimplementedProductServer) SelfGitlabRepoMergeHis(context.Context, *SelfGitlabRepoMergeHisReq) (*SelfGitlabRepoMergeHisReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelfGitlabRepoMergeHis not implemented")
}
func (UnimplementedProductServer) ListSelfGitlabRepoBranch(context.Context, *ListSelfGitlabRepoBranchReq) (*ListSelfGitlabRepoBranchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSelfGitlabRepoBranch not implemented")
}
func (UnimplementedProductServer) CreateSelfGitlabRepoBranch(context.Context, *CreateSelfGitlabRepoBranchReq) (*CreateSelfGitlabRepoBranchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSelfGitlabRepoBranch not implemented")
}
func (UnimplementedProductServer) DelSelfGitlabRepoBranch(context.Context, *DelSelfGitlabRepoBranchReq) (*DelSelfGitlabRepoBranchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelSelfGitlabRepoBranch not implemented")
}
func (UnimplementedProductServer) ProtectSelfGitlabRepoBranch(context.Context, *ProtectSelfGitlabRepoBranchReq) (*ProtectSelfGitlabRepoBranchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProtectSelfGitlabRepoBranch not implemented")
}
func (UnimplementedProductServer) UnprotectSelfGitlabRepoBranch(context.Context, *UnprotectSelfGitlabRepoBranchReq) (*UnprotectSelfGitlabRepoBranchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnprotectSelfGitlabRepoBranch not implemented")
}
func (UnimplementedProductServer) ListSelfGitlabRepoBranchCommits(context.Context, *ListSelfGitlabRepoBranchCommitsReq) (*ListSelfGitlabRepoBranchCommitsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSelfGitlabRepoBranchCommits not implemented")
}
func (UnimplementedProductServer) CreateSelfGitlabGroup(context.Context, *CreateSelfGitlabGroupReq) (*CreateSelfGitlabGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSelfGitlabGroup not implemented")
}
func (UnimplementedProductServer) ListSelfGitlabGroup(context.Context, *ListSelfGitlabGroupReq) (*ListSelfGitlabGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSelfGitlabGroup not implemented")
}
func (UnimplementedProductServer) CreateGitHubToken(context.Context, *CreateGitHubTokenReq) (*CreateGitHubTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGitHubToken not implemented")
}
func (UnimplementedProductServer) ListGitHubToken(context.Context, *ListGitHubTokenReq) (*ListGitHubTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGitHubToken not implemented")
}
func (UnimplementedProductServer) DelGitHubToken(context.Context, *DelGitHubTokenReq) (*DelGitHubTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelGitHubToken not implemented")
}
func (UnimplementedProductServer) ImportGithubRepo(context.Context, *ImportGithubRepoReq) (*ImportGithubRepoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportGithubRepo not implemented")
}
func (UnimplementedProductServer) CreateGithubRepo(context.Context, *CreateGithubRepoReq) (*CreateGithubRepoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGithubRepo not implemented")
}
func (UnimplementedProductServer) ListGithubRepo(context.Context, *ListGithubRepoReq) (*ListGithubRepoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGithubRepo not implemented")
}
func (UnimplementedProductServer) DelGithubRepo(context.Context, *DelGithubRepoReq) (*DelGithubRepoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelGithubRepo not implemented")
}
func (UnimplementedProductServer) ArchiveGithubRepo(context.Context, *ArchiveGithubRepoReq) (*ArchiveGithubRepoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveGithubRepo not implemented")
}
func (UnimplementedProductServer) MergeGithubRepo(context.Context, *MergeGithubRepoReq) (*MergeGithubRepoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeGithubRepo not implemented")
}
func (UnimplementedProductServer) ProtectGithubRepoBranch(context.Context, *ProtectGithubRepoBranchReq) (*ProtectGithubRepoBranchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProtectGithubRepoBranch not implemented")
}
func (UnimplementedProductServer) UnprotectGithubRepoBranch(context.Context, *UnprotectGithubRepoBranchReq) (*UnprotectGithubRepoBranchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnprotectGithubRepoBranch not implemented")
}
func (UnimplementedProductServer) ListGithubOrg(context.Context, *ListGithubOrgReq) (*ListGithubOrgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGithubOrg not implemented")
}
func (UnimplementedProductServer) ListGithubRepoByOrg(context.Context, *ListGithubRepoByOrgReq) (*ListGithubRepoByOrgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGithubRepoByOrg not implemented")
}
func (UnimplementedProductServer) ListGithubRepoBranch(context.Context, *ListGithubRepoBranchReq) (*ListGithubRepoBranchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGithubRepoBranch not implemented")
}
func (UnimplementedProductServer) GetGithubUser(context.Context, *GetGithubUserReq) (*GetGithubUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGithubUser not implemented")
}
func (UnimplementedProductServer) ListGithubRepoBranchCommits(context.Context, *ListGithubRepoBranchCommitsReq) (*ListGithubRepoBranchCommitsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGithubRepoBranchCommits not implemented")
}
func (UnimplementedProductServer) SelfGitlabRepoBuildContainerImage(context.Context, *SelfGitlabRepoBuildContainerImageReq) (*SelfGitlabRepoBuildContainerImageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelfGitlabRepoBuildContainerImage not implemented")
}
func (UnimplementedProductServer) GithubRepoBuildContainerImage(context.Context, *GithubRepoBuildContainerImageReq) (*GithubRepoBuildContainerImageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GithubRepoBuildContainerImage not implemented")
}
func (UnimplementedProductServer) SelfGitlabRepoExecCiTemplate(context.Context, *SelfGitlabRepoExecCiTemplateReq) (*SelfGitlabRepoExecCiTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelfGitlabRepoExecCiTemplate not implemented")
}
func (UnimplementedProductServer) GithubRepoExecCiTemplate(context.Context, *GithubRepoExecCiTemplateReq) (*GithubRepoExecCiTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GithubRepoExecCiTemplate not implemented")
}
func (UnimplementedProductServer) CreateProgram(context.Context, *CreateProgramReq) (*CreateProgramReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProgram not implemented")
}
func (UnimplementedProductServer) GetProgramByUuid(context.Context, *GetProgramByUuidReq) (*GetProgramByUuidReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProgramByUuid not implemented")
}
func (UnimplementedProductServer) GetSelfProgram(context.Context, *GetSelfProgramReq) (*GetSelfProgramReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSelfProgram not implemented")
}
func (UnimplementedProductServer) SearchProgram(context.Context, *SearchProgramReq) (*SearchProgramReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchProgram not implemented")
}
func (UnimplementedProductServer) CreateProgramMarket(context.Context, *CreateProgramMarketReq) (*CreateProgramMarketReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProgramMarket not implemented")
}
func (UnimplementedProductServer) GetProgramMarketByUuid(context.Context, *GetProgramMarketByUuidReq) (*GetProgramMarketByUuidReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProgramMarketByUuid not implemented")
}
func (UnimplementedProductServer) GetSelfProgramMarket(context.Context, *GetSelfProgramMarketReq) (*GetSelfProgramMarketReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSelfProgramMarket not implemented")
}
func (UnimplementedProductServer) SearchProgramMarket(context.Context, *SearchProgramMarketReq) (*SearchProgramMarketReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchProgramMarket not implemented")
}
func (UnimplementedProductServer) CreateReliability(context.Context, *CreateReliabilityReq) (*CreateReliabilityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReliability not implemented")
}
func (UnimplementedProductServer) GetReliability(context.Context, *GetReliabilityReq) (*GetReliabilityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReliability not implemented")
}
func (UnimplementedProductServer) CreateWebServiceResource(context.Context, *CreateWebServiceResourceReq) (*CreateWebServiceResourceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWebServiceResource not implemented")
}
func (UnimplementedProductServer) ListWebServiceResource(context.Context, *ListWebServiceResourceReq) (*ListWebServiceResourceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWebServiceResource not implemented")
}
func (UnimplementedProductServer) DelWebServiceResource(context.Context, *DelWebServiceResourceReq) (*DelWebServiceResourceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelWebServiceResource not implemented")
}
func (UnimplementedProductServer) UpdateWebServiceResource(context.Context, *UpdateWebServiceResourceReq) (*UpdateWebServiceResourceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWebServiceResource not implemented")
}
func (UnimplementedProductServer) GetWebServiceResourcePromSD(context.Context, *GetWebServiceResourcePromSDReq) (*GetWebServiceResourcePromSDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWebServiceResourcePromSD not implemented")
}
func (UnimplementedProductServer) mustEmbedUnimplementedProductServer() {}

// UnsafeProductServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServer will
// result in compilation errors.
type UnsafeProductServer interface {
	mustEmbedUnimplementedProductServer()
}

func RegisterProductServer(s grpc.ServiceRegistrar, srv ProductServer) {
	s.RegisterService(&Product_ServiceDesc, srv)
}

func _Product_CreateOrgProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrgProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CreateOrgProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_CreateOrgProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CreateOrgProduct(ctx, req.(*CreateOrgProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ListOrgProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrgProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ListOrgProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ListOrgProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ListOrgProduct(ctx, req.(*ListOrgProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_DelOrgProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelOrgProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).DelOrgProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_DelOrgProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).DelOrgProduct(ctx, req.(*DelOrgProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_VerifyProductInOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyProductInOrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).VerifyProductInOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_VerifyProductInOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).VerifyProductInOrg(ctx, req.(*VerifyProductInOrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetOrgProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetOrgProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetOrgProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetOrgProduct(ctx, req.(*GetOrgProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CreateOrgProductGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrgProductGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CreateOrgProductGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_CreateOrgProductGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CreateOrgProductGroup(ctx, req.(*CreateOrgProductGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ListOrgProductGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrgProductGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ListOrgProductGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ListOrgProductGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ListOrgProductGroup(ctx, req.(*ListOrgProductGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_DelOrgProductGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelOrgProductGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).DelOrgProductGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_DelOrgProductGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).DelOrgProductGroup(ctx, req.(*DelOrgProductGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_AddOrgProductGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrgProductGroupMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).AddOrgProductGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_AddOrgProductGroupMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).AddOrgProductGroupMember(ctx, req.(*AddOrgProductGroupMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ListOrgProductGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrgProductGroupMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ListOrgProductGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ListOrgProductGroupMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ListOrgProductGroupMember(ctx, req.(*ListOrgProductGroupMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_EvictOrgProductGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvictOrgProductGroupMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).EvictOrgProductGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_EvictOrgProductGroupMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).EvictOrgProductGroupMember(ctx, req.(*EvictOrgProductGroupMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_LeaveOrgProductGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveOrgProductGroupMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).LeaveOrgProductGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_LeaveOrgProductGroupMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).LeaveOrgProductGroupMember(ctx, req.(*LeaveOrgProductGroupMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_AddOrgProductEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrgProductEnvReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).AddOrgProductEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_AddOrgProductEnv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).AddOrgProductEnv(ctx, req.(*AddOrgProductEnvReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ListOrgProductEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrgProductEnvReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ListOrgProductEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ListOrgProductEnv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ListOrgProductEnv(ctx, req.(*ListOrgProductEnvReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_DelOrgProductEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelOrgProductEnvReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).DelOrgProductEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_DelOrgProductEnv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).DelOrgProductEnv(ctx, req.(*DelOrgProductEnvReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetOrgProductEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgProductEnvReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetOrgProductEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetOrgProductEnv_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetOrgProductEnv(ctx, req.(*GetOrgProductEnvReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_AddK8SCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddK8SClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).AddK8SCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_AddK8SCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).AddK8SCluster(ctx, req.(*AddK8SClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ListK8SCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListK8SClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ListK8SCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ListK8SCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ListK8SCluster(ctx, req.(*ListK8SClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ExistK8SCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistK8SClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ExistK8SCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ExistK8SCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ExistK8SCluster(ctx, req.(*ExistK8SClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_DelK8SCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelK8SClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).DelK8SCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_DelK8SCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).DelK8SCluster(ctx, req.(*DelK8SClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_AddK8SClusterEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddK8SClusterEdgeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).AddK8SClusterEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_AddK8SClusterEdge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).AddK8SClusterEdge(ctx, req.(*AddK8SClusterEdgeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetK8SClusterEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetK8SClusterEdgeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetK8SClusterEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetK8SClusterEdge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetK8SClusterEdge(ctx, req.(*GetK8SClusterEdgeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_DelK8SClusterEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelK8SClusterEdgeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).DelK8SClusterEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_DelK8SClusterEdge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).DelK8SClusterEdge(ctx, req.(*DelK8SClusterEdgeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ListK8SClusterNameSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListK8SClusterNameSpaceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ListK8SClusterNameSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ListK8SClusterNameSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ListK8SClusterNameSpace(ctx, req.(*ListK8SClusterNameSpaceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_DelK8SClusterNameSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelK8SClusterNameSpaceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).DelK8SClusterNameSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_DelK8SClusterNameSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).DelK8SClusterNameSpace(ctx, req.(*DelK8SClusterNameSpaceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CreateK8SClusterNameSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateK8SClusterNameSpaceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CreateK8SClusterNameSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_CreateK8SClusterNameSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CreateK8SClusterNameSpace(ctx, req.(*CreateK8SClusterNameSpaceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetK8SClusterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetK8SClusterNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetK8SClusterNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetK8SClusterNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetK8SClusterNode(ctx, req.(*GetK8SClusterNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ListK8SClusterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListK8SClusterNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ListK8SClusterNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ListK8SClusterNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ListK8SClusterNode(ctx, req.(*ListK8SClusterNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ListK8SPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListK8SPodReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ListK8SPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ListK8SPod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ListK8SPod(ctx, req.(*ListK8SPodReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetK8SPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetK8SPodReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetK8SPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetK8SPod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetK8SPod(ctx, req.(*GetK8SPodReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_SearchK8SPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchK8SPodReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).SearchK8SPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_SearchK8SPod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).SearchK8SPod(ctx, req.(*SearchK8SPodReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_EvictK8SPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvictK8SPodReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).EvictK8SPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_EvictK8SPod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).EvictK8SPod(ctx, req.(*EvictK8SPodReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_DelK8SPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelK8SPodReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).DelK8SPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_DelK8SPod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).DelK8SPod(ctx, req.(*DelK8SPodReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CleanEvictK8SPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanEvictK8SPodReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CleanEvictK8SPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_CleanEvictK8SPod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CleanEvictK8SPod(ctx, req.(*CleanEvictK8SPodReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CreateK8SClusterConfigMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateK8SClusterConfigMapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CreateK8SClusterConfigMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_CreateK8SClusterConfigMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CreateK8SClusterConfigMap(ctx, req.(*CreateK8SClusterConfigMapReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ListK8SClusterConfigMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListK8SClusterConfigMapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ListK8SClusterConfigMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ListK8SClusterConfigMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ListK8SClusterConfigMap(ctx, req.(*ListK8SClusterConfigMapReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetK8SClusterConfigMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetK8SClusterConfigMapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetK8SClusterConfigMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetK8SClusterConfigMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetK8SClusterConfigMap(ctx, req.(*GetK8SClusterConfigMapReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_UpdateK8SClusterConfigMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateK8SClusterConfigMapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).UpdateK8SClusterConfigMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_UpdateK8SClusterConfigMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).UpdateK8SClusterConfigMap(ctx, req.(*UpdateK8SClusterConfigMapReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_DelK8SClusterConfigMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelK8SClusterConfigMapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).DelK8SClusterConfigMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_DelK8SClusterConfigMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).DelK8SClusterConfigMap(ctx, req.(*DelK8SClusterConfigMapReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ListSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSecretReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ListSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ListSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ListSecret(ctx, req.(*ListSecretReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecretReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetSecret(ctx, req.(*GetSecretReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_DelSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelSecretReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).DelSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_DelSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).DelSecret(ctx, req.(*DelSecretReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CreateDockerSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDockerSecretReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CreateDockerSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_CreateDockerSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CreateDockerSecret(ctx, req.(*CreateDockerSecretReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_UpdateDockerSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDockerSecretReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).UpdateDockerSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_UpdateDockerSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).UpdateDockerSecret(ctx, req.(*UpdateDockerSecretReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CreateTlsSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTlsSecretReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CreateTlsSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_CreateTlsSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CreateTlsSecret(ctx, req.(*CreateTlsSecretReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_UpdateTlsSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTlsSecretReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).UpdateTlsSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_UpdateTlsSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).UpdateTlsSecret(ctx, req.(*UpdateTlsSecretReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CreateOpaqueSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOpaqueSecretReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CreateOpaqueSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_CreateOpaqueSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CreateOpaqueSecret(ctx, req.(*CreateOpaqueSecretReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_UpdateOpaqueSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOpaqueSecretReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).UpdateOpaqueSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_UpdateOpaqueSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).UpdateOpaqueSecret(ctx, req.(*UpdateOpaqueSecretReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CreateSSHAuthSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSSHAuthSecretReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CreateSSHAuthSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_CreateSSHAuthSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CreateSSHAuthSecret(ctx, req.(*CreateSSHAuthSecretReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_UpdateSSHAuthSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSSHAuthSecretReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).UpdateSSHAuthSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_UpdateSSHAuthSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).UpdateSSHAuthSecret(ctx, req.(*UpdateSSHAuthSecretReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CreateBasicAuthSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBasicAuthSecretReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CreateBasicAuthSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_CreateBasicAuthSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CreateBasicAuthSecret(ctx, req.(*CreateBasicAuthSecretReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_UpdateBasicAuthSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBasicAuthSecretReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).UpdateBasicAuthSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_UpdateBasicAuthSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).UpdateBasicAuthSecret(ctx, req.(*UpdateBasicAuthSecretReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ListK8SClusterDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListK8SClusterDeploymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ListK8SClusterDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ListK8SClusterDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ListK8SClusterDeployment(ctx, req.(*ListK8SClusterDeploymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetK8SClusterDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetK8SClusterDeploymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetK8SClusterDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetK8SClusterDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetK8SClusterDeployment(ctx, req.(*GetK8SClusterDeploymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_DelK8SClusterDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelK8SClusterDeploymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).DelK8SClusterDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_DelK8SClusterDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).DelK8SClusterDeployment(ctx, req.(*DelK8SClusterDeploymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_UpdateK8SClusterDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateK8SClusterDeploymentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).UpdateK8SClusterDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_UpdateK8SClusterDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).UpdateK8SClusterDeployment(ctx, req.(*UpdateK8SClusterDeploymentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_UpdateK8SClusterDeploymentReplicaSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateK8SClusterDeploymentReplicaSetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).UpdateK8SClusterDeploymentReplicaSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_UpdateK8SClusterDeploymentReplicaSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).UpdateK8SClusterDeploymentReplicaSet(ctx, req.(*UpdateK8SClusterDeploymentReplicaSetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CreateK8SService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateK8SServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CreateK8SService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_CreateK8SService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CreateK8SService(ctx, req.(*CreateK8SServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ListK8SService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListK8SServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ListK8SService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ListK8SService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ListK8SService(ctx, req.(*ListK8SServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetK8SService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetK8SServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetK8SService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetK8SService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetK8SService(ctx, req.(*GetK8SServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_DelK8SService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelK8SServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).DelK8SService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_DelK8SService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).DelK8SService(ctx, req.(*DelK8SServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CreateK8SIngress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateK8SIngressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CreateK8SIngress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_CreateK8SIngress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CreateK8SIngress(ctx, req.(*CreateK8SIngressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ListK8SIngress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListK8SIngressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ListK8SIngress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ListK8SIngress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ListK8SIngress(ctx, req.(*ListK8SIngressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetK8SIngress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetK8SIngressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetK8SIngress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetK8SIngress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetK8SIngress(ctx, req.(*GetK8SIngressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_DelK8SIngress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelK8SIngressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).DelK8SIngress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_DelK8SIngress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).DelK8SIngress(ctx, req.(*DelK8SIngressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_UpdateK8SIngress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateK8SIngressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).UpdateK8SIngress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_UpdateK8SIngress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).UpdateK8SIngress(ctx, req.(*UpdateK8SIngressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ListK8SObjectPublicTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListK8SObjectPublicTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ListK8SObjectPublicTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ListK8SObjectPublicTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ListK8SObjectPublicTemplate(ctx, req.(*ListK8SObjectPublicTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetK8SObjectPublicTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetK8SObjectPublicTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetK8SObjectPublicTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetK8SObjectPublicTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetK8SObjectPublicTemplate(ctx, req.(*GetK8SObjectPublicTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CreateK8SObjectPrivateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateK8SObjectPrivateTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CreateK8SObjectPrivateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_CreateK8SObjectPrivateTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CreateK8SObjectPrivateTemplate(ctx, req.(*CreateK8SObjectPrivateTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ListK8SObjectPrivateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListK8SObjectPrivateTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ListK8SObjectPrivateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ListK8SObjectPrivateTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ListK8SObjectPrivateTemplate(ctx, req.(*ListK8SObjectPrivateTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetK8SObjectPrivateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetK8SObjectPrivateTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetK8SObjectPrivateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetK8SObjectPrivateTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetK8SObjectPrivateTemplate(ctx, req.(*GetK8SObjectPrivateTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_DelK8SObjectPrivateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelK8SObjectPrivateTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).DelK8SObjectPrivateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_DelK8SObjectPrivateTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).DelK8SObjectPrivateTemplate(ctx, req.(*DelK8SObjectPrivateTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CreateServiceUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CreateServiceUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_CreateServiceUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CreateServiceUrl(ctx, req.(*CreateServiceUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ListServiceUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ListServiceUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ListServiceUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ListServiceUrl(ctx, req.(*ListServiceUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_DelServiceUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelServiceUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).DelServiceUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_DelServiceUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).DelServiceUrl(ctx, req.(*DelServiceUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GenerateServiceUrlAuthKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateServiceUrlAuthKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GenerateServiceUrlAuthKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GenerateServiceUrlAuthKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GenerateServiceUrlAuthKey(ctx, req.(*GenerateServiceUrlAuthKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ListServiceUrlAuthKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceUrlAuthKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ListServiceUrlAuthKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ListServiceUrlAuthKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ListServiceUrlAuthKey(ctx, req.(*ListServiceUrlAuthKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_DelServiceUrlAuthKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelServiceUrlAuthKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).DelServiceUrlAuthKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_DelServiceUrlAuthKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).DelServiceUrlAuthKey(ctx, req.(*DelServiceUrlAuthKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GenerateServiceUrlAuthUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateServiceUrlAuthUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GenerateServiceUrlAuthUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GenerateServiceUrlAuthUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GenerateServiceUrlAuthUrl(ctx, req.(*GenerateServiceUrlAuthUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_AddContainerRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddContainerRegistryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).AddContainerRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_AddContainerRegistry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).AddContainerRegistry(ctx, req.(*AddContainerRegistryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ListContainerRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContainerRegistryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ListContainerRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ListContainerRegistry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ListContainerRegistry(ctx, req.(*ListContainerRegistryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_DelContainerRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelContainerRegistryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).DelContainerRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_DelContainerRegistry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).DelContainerRegistry(ctx, req.(*DelContainerRegistryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetContainerRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContainerRegistryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetContainerRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetContainerRegistry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetContainerRegistry(ctx, req.(*GetContainerRegistryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_AddPublicContainerImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPublicContainerImageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).AddPublicContainerImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_AddPublicContainerImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).AddPublicContainerImage(ctx, req.(*AddPublicContainerImageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ListPublicContainerImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPublicContainerImageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ListPublicContainerImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ListPublicContainerImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ListPublicContainerImage(ctx, req.(*ListPublicContainerImageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_DelPublicContainerImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelPublicContainerImageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).DelPublicContainerImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_DelPublicContainerImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).DelPublicContainerImage(ctx, req.(*DelPublicContainerImageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CreateSelfGitlabPlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSelfGitlabPlatformReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CreateSelfGitlabPlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_CreateSelfGitlabPlatform_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CreateSelfGitlabPlatform(ctx, req.(*CreateSelfGitlabPlatformReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ListSelfGitlabPlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSelfGitlabPlatformReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ListSelfGitlabPlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ListSelfGitlabPlatform_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ListSelfGitlabPlatform(ctx, req.(*ListSelfGitlabPlatformReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_DelSelfGitlabPlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelSelfGitlabPlatformReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).DelSelfGitlabPlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_DelSelfGitlabPlatform_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).DelSelfGitlabPlatform(ctx, req.(*DelSelfGitlabPlatformReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CreateSelfGitlabToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSelfGitlabTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CreateSelfGitlabToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_CreateSelfGitlabToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CreateSelfGitlabToken(ctx, req.(*CreateSelfGitlabTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ListSelfGitlabToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSelfGitlabTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ListSelfGitlabToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ListSelfGitlabToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ListSelfGitlabToken(ctx, req.(*ListSelfGitlabTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_DelSelfGitlabToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelSelfGitlabTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).DelSelfGitlabToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_DelSelfGitlabToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).DelSelfGitlabToken(ctx, req.(*DelSelfGitlabTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CreateSelfGitlabRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSelfGitlabRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CreateSelfGitlabRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_CreateSelfGitlabRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CreateSelfGitlabRepo(ctx, req.(*CreateSelfGitlabRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ImportSelfGitlabRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportSelfGitlabRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ImportSelfGitlabRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ImportSelfGitlabRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ImportSelfGitlabRepo(ctx, req.(*ImportSelfGitlabRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ListSelfGitlabRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSelfGitlabRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ListSelfGitlabRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ListSelfGitlabRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ListSelfGitlabRepo(ctx, req.(*ListSelfGitlabRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_DelSelfGitlabRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelSelfGitlabRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).DelSelfGitlabRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_DelSelfGitlabRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).DelSelfGitlabRepo(ctx, req.(*DelSelfGitlabRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ArchiveSelfGitlabRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveSelfGitlabRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ArchiveSelfGitlabRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ArchiveSelfGitlabRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ArchiveSelfGitlabRepo(ctx, req.(*ArchiveSelfGitlabRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_MergeSelfGitlabRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeSelfGitlabRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).MergeSelfGitlabRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_MergeSelfGitlabRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).MergeSelfGitlabRepo(ctx, req.(*MergeSelfGitlabRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_SelfGitlabRepoMergeHis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelfGitlabRepoMergeHisReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).SelfGitlabRepoMergeHis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_SelfGitlabRepoMergeHis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).SelfGitlabRepoMergeHis(ctx, req.(*SelfGitlabRepoMergeHisReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ListSelfGitlabRepoBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSelfGitlabRepoBranchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ListSelfGitlabRepoBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ListSelfGitlabRepoBranch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ListSelfGitlabRepoBranch(ctx, req.(*ListSelfGitlabRepoBranchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CreateSelfGitlabRepoBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSelfGitlabRepoBranchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CreateSelfGitlabRepoBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_CreateSelfGitlabRepoBranch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CreateSelfGitlabRepoBranch(ctx, req.(*CreateSelfGitlabRepoBranchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_DelSelfGitlabRepoBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelSelfGitlabRepoBranchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).DelSelfGitlabRepoBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_DelSelfGitlabRepoBranch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).DelSelfGitlabRepoBranch(ctx, req.(*DelSelfGitlabRepoBranchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ProtectSelfGitlabRepoBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtectSelfGitlabRepoBranchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ProtectSelfGitlabRepoBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ProtectSelfGitlabRepoBranch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ProtectSelfGitlabRepoBranch(ctx, req.(*ProtectSelfGitlabRepoBranchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_UnprotectSelfGitlabRepoBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnprotectSelfGitlabRepoBranchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).UnprotectSelfGitlabRepoBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_UnprotectSelfGitlabRepoBranch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).UnprotectSelfGitlabRepoBranch(ctx, req.(*UnprotectSelfGitlabRepoBranchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ListSelfGitlabRepoBranchCommits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSelfGitlabRepoBranchCommitsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ListSelfGitlabRepoBranchCommits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ListSelfGitlabRepoBranchCommits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ListSelfGitlabRepoBranchCommits(ctx, req.(*ListSelfGitlabRepoBranchCommitsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CreateSelfGitlabGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSelfGitlabGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CreateSelfGitlabGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_CreateSelfGitlabGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CreateSelfGitlabGroup(ctx, req.(*CreateSelfGitlabGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ListSelfGitlabGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSelfGitlabGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ListSelfGitlabGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ListSelfGitlabGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ListSelfGitlabGroup(ctx, req.(*ListSelfGitlabGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CreateGitHubToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGitHubTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CreateGitHubToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_CreateGitHubToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CreateGitHubToken(ctx, req.(*CreateGitHubTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ListGitHubToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGitHubTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ListGitHubToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ListGitHubToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ListGitHubToken(ctx, req.(*ListGitHubTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_DelGitHubToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelGitHubTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).DelGitHubToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_DelGitHubToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).DelGitHubToken(ctx, req.(*DelGitHubTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ImportGithubRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportGithubRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ImportGithubRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ImportGithubRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ImportGithubRepo(ctx, req.(*ImportGithubRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CreateGithubRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGithubRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CreateGithubRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_CreateGithubRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CreateGithubRepo(ctx, req.(*CreateGithubRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ListGithubRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGithubRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ListGithubRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ListGithubRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ListGithubRepo(ctx, req.(*ListGithubRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_DelGithubRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelGithubRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).DelGithubRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_DelGithubRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).DelGithubRepo(ctx, req.(*DelGithubRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ArchiveGithubRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveGithubRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ArchiveGithubRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ArchiveGithubRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ArchiveGithubRepo(ctx, req.(*ArchiveGithubRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_MergeGithubRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeGithubRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).MergeGithubRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_MergeGithubRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).MergeGithubRepo(ctx, req.(*MergeGithubRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ProtectGithubRepoBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtectGithubRepoBranchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ProtectGithubRepoBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ProtectGithubRepoBranch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ProtectGithubRepoBranch(ctx, req.(*ProtectGithubRepoBranchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_UnprotectGithubRepoBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnprotectGithubRepoBranchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).UnprotectGithubRepoBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_UnprotectGithubRepoBranch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).UnprotectGithubRepoBranch(ctx, req.(*UnprotectGithubRepoBranchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ListGithubOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGithubOrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ListGithubOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ListGithubOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ListGithubOrg(ctx, req.(*ListGithubOrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ListGithubRepoByOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGithubRepoByOrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ListGithubRepoByOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ListGithubRepoByOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ListGithubRepoByOrg(ctx, req.(*ListGithubRepoByOrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ListGithubRepoBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGithubRepoBranchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ListGithubRepoBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ListGithubRepoBranch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ListGithubRepoBranch(ctx, req.(*ListGithubRepoBranchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetGithubUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGithubUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetGithubUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetGithubUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetGithubUser(ctx, req.(*GetGithubUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ListGithubRepoBranchCommits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGithubRepoBranchCommitsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ListGithubRepoBranchCommits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ListGithubRepoBranchCommits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ListGithubRepoBranchCommits(ctx, req.(*ListGithubRepoBranchCommitsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_SelfGitlabRepoBuildContainerImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelfGitlabRepoBuildContainerImageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).SelfGitlabRepoBuildContainerImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_SelfGitlabRepoBuildContainerImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).SelfGitlabRepoBuildContainerImage(ctx, req.(*SelfGitlabRepoBuildContainerImageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GithubRepoBuildContainerImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GithubRepoBuildContainerImageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GithubRepoBuildContainerImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GithubRepoBuildContainerImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GithubRepoBuildContainerImage(ctx, req.(*GithubRepoBuildContainerImageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_SelfGitlabRepoExecCiTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelfGitlabRepoExecCiTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).SelfGitlabRepoExecCiTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_SelfGitlabRepoExecCiTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).SelfGitlabRepoExecCiTemplate(ctx, req.(*SelfGitlabRepoExecCiTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GithubRepoExecCiTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GithubRepoExecCiTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GithubRepoExecCiTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GithubRepoExecCiTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GithubRepoExecCiTemplate(ctx, req.(*GithubRepoExecCiTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CreateProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProgramReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CreateProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_CreateProgram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CreateProgram(ctx, req.(*CreateProgramReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetProgramByUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProgramByUuidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetProgramByUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetProgramByUuid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetProgramByUuid(ctx, req.(*GetProgramByUuidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetSelfProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSelfProgramReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetSelfProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetSelfProgram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetSelfProgram(ctx, req.(*GetSelfProgramReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_SearchProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchProgramReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).SearchProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_SearchProgram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).SearchProgram(ctx, req.(*SearchProgramReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CreateProgramMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProgramMarketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CreateProgramMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_CreateProgramMarket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CreateProgramMarket(ctx, req.(*CreateProgramMarketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetProgramMarketByUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProgramMarketByUuidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetProgramMarketByUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetProgramMarketByUuid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetProgramMarketByUuid(ctx, req.(*GetProgramMarketByUuidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetSelfProgramMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSelfProgramMarketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetSelfProgramMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetSelfProgramMarket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetSelfProgramMarket(ctx, req.(*GetSelfProgramMarketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_SearchProgramMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchProgramMarketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).SearchProgramMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_SearchProgramMarket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).SearchProgramMarket(ctx, req.(*SearchProgramMarketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CreateReliability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReliabilityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CreateReliability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_CreateReliability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CreateReliability(ctx, req.(*CreateReliabilityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetReliability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReliabilityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetReliability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetReliability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetReliability(ctx, req.(*GetReliabilityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_CreateWebServiceResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWebServiceResourceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CreateWebServiceResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_CreateWebServiceResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CreateWebServiceResource(ctx, req.(*CreateWebServiceResourceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_ListWebServiceResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWebServiceResourceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).ListWebServiceResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_ListWebServiceResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).ListWebServiceResource(ctx, req.(*ListWebServiceResourceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_DelWebServiceResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelWebServiceResourceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).DelWebServiceResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_DelWebServiceResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).DelWebServiceResource(ctx, req.(*DelWebServiceResourceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_UpdateWebServiceResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWebServiceResourceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).UpdateWebServiceResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_UpdateWebServiceResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).UpdateWebServiceResource(ctx, req.(*UpdateWebServiceResourceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetWebServiceResourcePromSD_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWebServiceResourcePromSDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetWebServiceResourcePromSD(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Product_GetWebServiceResourcePromSD_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetWebServiceResourcePromSD(ctx, req.(*GetWebServiceResourcePromSDReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Product_ServiceDesc is the grpc.ServiceDesc for Product service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Product_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product.v1.Product",
	HandlerType: (*ProductServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrgProduct",
			Handler:    _Product_CreateOrgProduct_Handler,
		},
		{
			MethodName: "ListOrgProduct",
			Handler:    _Product_ListOrgProduct_Handler,
		},
		{
			MethodName: "DelOrgProduct",
			Handler:    _Product_DelOrgProduct_Handler,
		},
		{
			MethodName: "VerifyProductInOrg",
			Handler:    _Product_VerifyProductInOrg_Handler,
		},
		{
			MethodName: "GetOrgProduct",
			Handler:    _Product_GetOrgProduct_Handler,
		},
		{
			MethodName: "CreateOrgProductGroup",
			Handler:    _Product_CreateOrgProductGroup_Handler,
		},
		{
			MethodName: "ListOrgProductGroup",
			Handler:    _Product_ListOrgProductGroup_Handler,
		},
		{
			MethodName: "DelOrgProductGroup",
			Handler:    _Product_DelOrgProductGroup_Handler,
		},
		{
			MethodName: "AddOrgProductGroupMember",
			Handler:    _Product_AddOrgProductGroupMember_Handler,
		},
		{
			MethodName: "ListOrgProductGroupMember",
			Handler:    _Product_ListOrgProductGroupMember_Handler,
		},
		{
			MethodName: "EvictOrgProductGroupMember",
			Handler:    _Product_EvictOrgProductGroupMember_Handler,
		},
		{
			MethodName: "LeaveOrgProductGroupMember",
			Handler:    _Product_LeaveOrgProductGroupMember_Handler,
		},
		{
			MethodName: "AddOrgProductEnv",
			Handler:    _Product_AddOrgProductEnv_Handler,
		},
		{
			MethodName: "ListOrgProductEnv",
			Handler:    _Product_ListOrgProductEnv_Handler,
		},
		{
			MethodName: "DelOrgProductEnv",
			Handler:    _Product_DelOrgProductEnv_Handler,
		},
		{
			MethodName: "GetOrgProductEnv",
			Handler:    _Product_GetOrgProductEnv_Handler,
		},
		{
			MethodName: "AddK8SCluster",
			Handler:    _Product_AddK8SCluster_Handler,
		},
		{
			MethodName: "ListK8SCluster",
			Handler:    _Product_ListK8SCluster_Handler,
		},
		{
			MethodName: "ExistK8SCluster",
			Handler:    _Product_ExistK8SCluster_Handler,
		},
		{
			MethodName: "DelK8SCluster",
			Handler:    _Product_DelK8SCluster_Handler,
		},
		{
			MethodName: "AddK8SClusterEdge",
			Handler:    _Product_AddK8SClusterEdge_Handler,
		},
		{
			MethodName: "GetK8SClusterEdge",
			Handler:    _Product_GetK8SClusterEdge_Handler,
		},
		{
			MethodName: "DelK8SClusterEdge",
			Handler:    _Product_DelK8SClusterEdge_Handler,
		},
		{
			MethodName: "ListK8SClusterNameSpace",
			Handler:    _Product_ListK8SClusterNameSpace_Handler,
		},
		{
			MethodName: "DelK8SClusterNameSpace",
			Handler:    _Product_DelK8SClusterNameSpace_Handler,
		},
		{
			MethodName: "CreateK8SClusterNameSpace",
			Handler:    _Product_CreateK8SClusterNameSpace_Handler,
		},
		{
			MethodName: "GetK8SClusterNode",
			Handler:    _Product_GetK8SClusterNode_Handler,
		},
		{
			MethodName: "ListK8SClusterNode",
			Handler:    _Product_ListK8SClusterNode_Handler,
		},
		{
			MethodName: "ListK8SPod",
			Handler:    _Product_ListK8SPod_Handler,
		},
		{
			MethodName: "GetK8SPod",
			Handler:    _Product_GetK8SPod_Handler,
		},
		{
			MethodName: "SearchK8SPod",
			Handler:    _Product_SearchK8SPod_Handler,
		},
		{
			MethodName: "EvictK8SPod",
			Handler:    _Product_EvictK8SPod_Handler,
		},
		{
			MethodName: "DelK8SPod",
			Handler:    _Product_DelK8SPod_Handler,
		},
		{
			MethodName: "CleanEvictK8SPod",
			Handler:    _Product_CleanEvictK8SPod_Handler,
		},
		{
			MethodName: "CreateK8SClusterConfigMap",
			Handler:    _Product_CreateK8SClusterConfigMap_Handler,
		},
		{
			MethodName: "ListK8SClusterConfigMap",
			Handler:    _Product_ListK8SClusterConfigMap_Handler,
		},
		{
			MethodName: "GetK8SClusterConfigMap",
			Handler:    _Product_GetK8SClusterConfigMap_Handler,
		},
		{
			MethodName: "UpdateK8SClusterConfigMap",
			Handler:    _Product_UpdateK8SClusterConfigMap_Handler,
		},
		{
			MethodName: "DelK8SClusterConfigMap",
			Handler:    _Product_DelK8SClusterConfigMap_Handler,
		},
		{
			MethodName: "ListSecret",
			Handler:    _Product_ListSecret_Handler,
		},
		{
			MethodName: "GetSecret",
			Handler:    _Product_GetSecret_Handler,
		},
		{
			MethodName: "DelSecret",
			Handler:    _Product_DelSecret_Handler,
		},
		{
			MethodName: "CreateDockerSecret",
			Handler:    _Product_CreateDockerSecret_Handler,
		},
		{
			MethodName: "UpdateDockerSecret",
			Handler:    _Product_UpdateDockerSecret_Handler,
		},
		{
			MethodName: "CreateTlsSecret",
			Handler:    _Product_CreateTlsSecret_Handler,
		},
		{
			MethodName: "UpdateTlsSecret",
			Handler:    _Product_UpdateTlsSecret_Handler,
		},
		{
			MethodName: "CreateOpaqueSecret",
			Handler:    _Product_CreateOpaqueSecret_Handler,
		},
		{
			MethodName: "UpdateOpaqueSecret",
			Handler:    _Product_UpdateOpaqueSecret_Handler,
		},
		{
			MethodName: "CreateSSHAuthSecret",
			Handler:    _Product_CreateSSHAuthSecret_Handler,
		},
		{
			MethodName: "UpdateSSHAuthSecret",
			Handler:    _Product_UpdateSSHAuthSecret_Handler,
		},
		{
			MethodName: "CreateBasicAuthSecret",
			Handler:    _Product_CreateBasicAuthSecret_Handler,
		},
		{
			MethodName: "UpdateBasicAuthSecret",
			Handler:    _Product_UpdateBasicAuthSecret_Handler,
		},
		{
			MethodName: "ListK8SClusterDeployment",
			Handler:    _Product_ListK8SClusterDeployment_Handler,
		},
		{
			MethodName: "GetK8SClusterDeployment",
			Handler:    _Product_GetK8SClusterDeployment_Handler,
		},
		{
			MethodName: "DelK8SClusterDeployment",
			Handler:    _Product_DelK8SClusterDeployment_Handler,
		},
		{
			MethodName: "UpdateK8SClusterDeployment",
			Handler:    _Product_UpdateK8SClusterDeployment_Handler,
		},
		{
			MethodName: "UpdateK8SClusterDeploymentReplicaSet",
			Handler:    _Product_UpdateK8SClusterDeploymentReplicaSet_Handler,
		},
		{
			MethodName: "CreateK8SService",
			Handler:    _Product_CreateK8SService_Handler,
		},
		{
			MethodName: "ListK8SService",
			Handler:    _Product_ListK8SService_Handler,
		},
		{
			MethodName: "GetK8SService",
			Handler:    _Product_GetK8SService_Handler,
		},
		{
			MethodName: "DelK8SService",
			Handler:    _Product_DelK8SService_Handler,
		},
		{
			MethodName: "CreateK8SIngress",
			Handler:    _Product_CreateK8SIngress_Handler,
		},
		{
			MethodName: "ListK8SIngress",
			Handler:    _Product_ListK8SIngress_Handler,
		},
		{
			MethodName: "GetK8SIngress",
			Handler:    _Product_GetK8SIngress_Handler,
		},
		{
			MethodName: "DelK8SIngress",
			Handler:    _Product_DelK8SIngress_Handler,
		},
		{
			MethodName: "UpdateK8SIngress",
			Handler:    _Product_UpdateK8SIngress_Handler,
		},
		{
			MethodName: "ListK8SObjectPublicTemplate",
			Handler:    _Product_ListK8SObjectPublicTemplate_Handler,
		},
		{
			MethodName: "GetK8SObjectPublicTemplate",
			Handler:    _Product_GetK8SObjectPublicTemplate_Handler,
		},
		{
			MethodName: "CreateK8SObjectPrivateTemplate",
			Handler:    _Product_CreateK8SObjectPrivateTemplate_Handler,
		},
		{
			MethodName: "ListK8SObjectPrivateTemplate",
			Handler:    _Product_ListK8SObjectPrivateTemplate_Handler,
		},
		{
			MethodName: "GetK8SObjectPrivateTemplate",
			Handler:    _Product_GetK8SObjectPrivateTemplate_Handler,
		},
		{
			MethodName: "DelK8SObjectPrivateTemplate",
			Handler:    _Product_DelK8SObjectPrivateTemplate_Handler,
		},
		{
			MethodName: "CreateServiceUrl",
			Handler:    _Product_CreateServiceUrl_Handler,
		},
		{
			MethodName: "ListServiceUrl",
			Handler:    _Product_ListServiceUrl_Handler,
		},
		{
			MethodName: "DelServiceUrl",
			Handler:    _Product_DelServiceUrl_Handler,
		},
		{
			MethodName: "GenerateServiceUrlAuthKey",
			Handler:    _Product_GenerateServiceUrlAuthKey_Handler,
		},
		{
			MethodName: "ListServiceUrlAuthKey",
			Handler:    _Product_ListServiceUrlAuthKey_Handler,
		},
		{
			MethodName: "DelServiceUrlAuthKey",
			Handler:    _Product_DelServiceUrlAuthKey_Handler,
		},
		{
			MethodName: "GenerateServiceUrlAuthUrl",
			Handler:    _Product_GenerateServiceUrlAuthUrl_Handler,
		},
		{
			MethodName: "AddContainerRegistry",
			Handler:    _Product_AddContainerRegistry_Handler,
		},
		{
			MethodName: "ListContainerRegistry",
			Handler:    _Product_ListContainerRegistry_Handler,
		},
		{
			MethodName: "DelContainerRegistry",
			Handler:    _Product_DelContainerRegistry_Handler,
		},
		{
			MethodName: "GetContainerRegistry",
			Handler:    _Product_GetContainerRegistry_Handler,
		},
		{
			MethodName: "AddPublicContainerImage",
			Handler:    _Product_AddPublicContainerImage_Handler,
		},
		{
			MethodName: "ListPublicContainerImage",
			Handler:    _Product_ListPublicContainerImage_Handler,
		},
		{
			MethodName: "DelPublicContainerImage",
			Handler:    _Product_DelPublicContainerImage_Handler,
		},
		{
			MethodName: "CreateSelfGitlabPlatform",
			Handler:    _Product_CreateSelfGitlabPlatform_Handler,
		},
		{
			MethodName: "ListSelfGitlabPlatform",
			Handler:    _Product_ListSelfGitlabPlatform_Handler,
		},
		{
			MethodName: "DelSelfGitlabPlatform",
			Handler:    _Product_DelSelfGitlabPlatform_Handler,
		},
		{
			MethodName: "CreateSelfGitlabToken",
			Handler:    _Product_CreateSelfGitlabToken_Handler,
		},
		{
			MethodName: "ListSelfGitlabToken",
			Handler:    _Product_ListSelfGitlabToken_Handler,
		},
		{
			MethodName: "DelSelfGitlabToken",
			Handler:    _Product_DelSelfGitlabToken_Handler,
		},
		{
			MethodName: "CreateSelfGitlabRepo",
			Handler:    _Product_CreateSelfGitlabRepo_Handler,
		},
		{
			MethodName: "ImportSelfGitlabRepo",
			Handler:    _Product_ImportSelfGitlabRepo_Handler,
		},
		{
			MethodName: "ListSelfGitlabRepo",
			Handler:    _Product_ListSelfGitlabRepo_Handler,
		},
		{
			MethodName: "DelSelfGitlabRepo",
			Handler:    _Product_DelSelfGitlabRepo_Handler,
		},
		{
			MethodName: "ArchiveSelfGitlabRepo",
			Handler:    _Product_ArchiveSelfGitlabRepo_Handler,
		},
		{
			MethodName: "MergeSelfGitlabRepo",
			Handler:    _Product_MergeSelfGitlabRepo_Handler,
		},
		{
			MethodName: "SelfGitlabRepoMergeHis",
			Handler:    _Product_SelfGitlabRepoMergeHis_Handler,
		},
		{
			MethodName: "ListSelfGitlabRepoBranch",
			Handler:    _Product_ListSelfGitlabRepoBranch_Handler,
		},
		{
			MethodName: "CreateSelfGitlabRepoBranch",
			Handler:    _Product_CreateSelfGitlabRepoBranch_Handler,
		},
		{
			MethodName: "DelSelfGitlabRepoBranch",
			Handler:    _Product_DelSelfGitlabRepoBranch_Handler,
		},
		{
			MethodName: "ProtectSelfGitlabRepoBranch",
			Handler:    _Product_ProtectSelfGitlabRepoBranch_Handler,
		},
		{
			MethodName: "UnprotectSelfGitlabRepoBranch",
			Handler:    _Product_UnprotectSelfGitlabRepoBranch_Handler,
		},
		{
			MethodName: "ListSelfGitlabRepoBranchCommits",
			Handler:    _Product_ListSelfGitlabRepoBranchCommits_Handler,
		},
		{
			MethodName: "CreateSelfGitlabGroup",
			Handler:    _Product_CreateSelfGitlabGroup_Handler,
		},
		{
			MethodName: "ListSelfGitlabGroup",
			Handler:    _Product_ListSelfGitlabGroup_Handler,
		},
		{
			MethodName: "CreateGitHubToken",
			Handler:    _Product_CreateGitHubToken_Handler,
		},
		{
			MethodName: "ListGitHubToken",
			Handler:    _Product_ListGitHubToken_Handler,
		},
		{
			MethodName: "DelGitHubToken",
			Handler:    _Product_DelGitHubToken_Handler,
		},
		{
			MethodName: "ImportGithubRepo",
			Handler:    _Product_ImportGithubRepo_Handler,
		},
		{
			MethodName: "CreateGithubRepo",
			Handler:    _Product_CreateGithubRepo_Handler,
		},
		{
			MethodName: "ListGithubRepo",
			Handler:    _Product_ListGithubRepo_Handler,
		},
		{
			MethodName: "DelGithubRepo",
			Handler:    _Product_DelGithubRepo_Handler,
		},
		{
			MethodName: "ArchiveGithubRepo",
			Handler:    _Product_ArchiveGithubRepo_Handler,
		},
		{
			MethodName: "MergeGithubRepo",
			Handler:    _Product_MergeGithubRepo_Handler,
		},
		{
			MethodName: "ProtectGithubRepoBranch",
			Handler:    _Product_ProtectGithubRepoBranch_Handler,
		},
		{
			MethodName: "UnprotectGithubRepoBranch",
			Handler:    _Product_UnprotectGithubRepoBranch_Handler,
		},
		{
			MethodName: "ListGithubOrg",
			Handler:    _Product_ListGithubOrg_Handler,
		},
		{
			MethodName: "ListGithubRepoByOrg",
			Handler:    _Product_ListGithubRepoByOrg_Handler,
		},
		{
			MethodName: "ListGithubRepoBranch",
			Handler:    _Product_ListGithubRepoBranch_Handler,
		},
		{
			MethodName: "GetGithubUser",
			Handler:    _Product_GetGithubUser_Handler,
		},
		{
			MethodName: "ListGithubRepoBranchCommits",
			Handler:    _Product_ListGithubRepoBranchCommits_Handler,
		},
		{
			MethodName: "SelfGitlabRepoBuildContainerImage",
			Handler:    _Product_SelfGitlabRepoBuildContainerImage_Handler,
		},
		{
			MethodName: "GithubRepoBuildContainerImage",
			Handler:    _Product_GithubRepoBuildContainerImage_Handler,
		},
		{
			MethodName: "SelfGitlabRepoExecCiTemplate",
			Handler:    _Product_SelfGitlabRepoExecCiTemplate_Handler,
		},
		{
			MethodName: "GithubRepoExecCiTemplate",
			Handler:    _Product_GithubRepoExecCiTemplate_Handler,
		},
		{
			MethodName: "CreateProgram",
			Handler:    _Product_CreateProgram_Handler,
		},
		{
			MethodName: "GetProgramByUuid",
			Handler:    _Product_GetProgramByUuid_Handler,
		},
		{
			MethodName: "GetSelfProgram",
			Handler:    _Product_GetSelfProgram_Handler,
		},
		{
			MethodName: "SearchProgram",
			Handler:    _Product_SearchProgram_Handler,
		},
		{
			MethodName: "CreateProgramMarket",
			Handler:    _Product_CreateProgramMarket_Handler,
		},
		{
			MethodName: "GetProgramMarketByUuid",
			Handler:    _Product_GetProgramMarketByUuid_Handler,
		},
		{
			MethodName: "GetSelfProgramMarket",
			Handler:    _Product_GetSelfProgramMarket_Handler,
		},
		{
			MethodName: "SearchProgramMarket",
			Handler:    _Product_SearchProgramMarket_Handler,
		},
		{
			MethodName: "CreateReliability",
			Handler:    _Product_CreateReliability_Handler,
		},
		{
			MethodName: "GetReliability",
			Handler:    _Product_GetReliability_Handler,
		},
		{
			MethodName: "CreateWebServiceResource",
			Handler:    _Product_CreateWebServiceResource_Handler,
		},
		{
			MethodName: "ListWebServiceResource",
			Handler:    _Product_ListWebServiceResource_Handler,
		},
		{
			MethodName: "DelWebServiceResource",
			Handler:    _Product_DelWebServiceResource_Handler,
		},
		{
			MethodName: "UpdateWebServiceResource",
			Handler:    _Product_UpdateWebServiceResource_Handler,
		},
		{
			MethodName: "GetWebServiceResourcePromSD",
			Handler:    _Product_GetWebServiceResourcePromSD_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oneProduct/v1/product.proto",
}
