// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.14.0
// source: oneCloud/v1/oneCloud.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OneCloud_ListSupportPlatform_FullMethodName                         = "/oneCloud.v1.oneCloud/ListSupportPlatform"
	OneCloud_ListPlatform_FullMethodName                                = "/oneCloud.v1.oneCloud/ListPlatform"
	OneCloud_AddPlatformAccount_FullMethodName                          = "/oneCloud.v1.oneCloud/AddPlatformAccount"
	OneCloud_ListPlatformAccount_FullMethodName                         = "/oneCloud.v1.oneCloud/ListPlatformAccount"
	OneCloud_DelPlatformAccount_FullMethodName                          = "/oneCloud.v1.oneCloud/DelPlatformAccount"
	OneCloud_AddPlatformSubAccount_FullMethodName                       = "/oneCloud.v1.oneCloud/AddPlatformSubAccount"
	OneCloud_ListPlatformSubAccount_FullMethodName                      = "/oneCloud.v1.oneCloud/ListPlatformSubAccount"
	OneCloud_DelPlatformSubAccount_FullMethodName                       = "/oneCloud.v1.oneCloud/DelPlatformSubAccount"
	OneCloud_CreateAccessKey_FullMethodName                             = "/oneCloud.v1.oneCloud/CreateAccessKey"
	OneCloud_GetAccessKey_FullMethodName                                = "/oneCloud.v1.oneCloud/GetAccessKey"
	OneCloud_DelAccessKey_FullMethodName                                = "/oneCloud.v1.oneCloud/DelAccessKey"
	OneCloud_GetSecurityToken_FullMethodName                            = "/oneCloud.v1.oneCloud/GetSecurityToken"
	OneCloud_GenerateObjectStorageSecurityTokenPutPolicy_FullMethodName = "/oneCloud.v1.oneCloud/GenerateObjectStorageSecurityTokenPutPolicy"
	OneCloud_AccountBalance_FullMethodName                              = "/oneCloud.v1.oneCloud/AccountBalance"
	OneCloud_BuyCertificate_FullMethodName                              = "/oneCloud.v1.oneCloud/BuyCertificate"
	OneCloud_ParseCertificate_FullMethodName                            = "/oneCloud.v1.oneCloud/ParseCertificate"
	OneCloud_RecordCertificate_FullMethodName                           = "/oneCloud.v1.oneCloud/RecordCertificate"
	OneCloud_ListCertificate_FullMethodName                             = "/oneCloud.v1.oneCloud/ListCertificate"
	OneCloud_DelCertificate_FullMethodName                              = "/oneCloud.v1.oneCloud/DelCertificate"
	OneCloud_GetCertificateByUuid_FullMethodName                        = "/oneCloud.v1.oneCloud/GetCertificateByUuid"
	OneCloud_ListDomainDns_FullMethodName                               = "/oneCloud.v1.oneCloud/ListDomainDns"
	OneCloud_ListCloudDomainDns_FullMethodName                          = "/oneCloud.v1.oneCloud/ListCloudDomainDns"
	OneCloud_ImportDomainDns_FullMethodName                             = "/oneCloud.v1.oneCloud/ImportDomainDns"
	OneCloud_ListCloudDomainDnsRecord_FullMethodName                    = "/oneCloud.v1.oneCloud/ListCloudDomainDnsRecord"
	OneCloud_SyncCloudDomainDnsRecord_FullMethodName                    = "/oneCloud.v1.oneCloud/SyncCloudDomainDnsRecord"
	OneCloud_GetSyncCloudDomainDnsRecord_FullMethodName                 = "/oneCloud.v1.oneCloud/GetSyncCloudDomainDnsRecord"
	OneCloud_GetUnSupportSyncCloudDomainDnsRecord_FullMethodName        = "/oneCloud.v1.oneCloud/GetUnSupportSyncCloudDomainDnsRecord"
	OneCloud_GetECSFamily_FullMethodName                                = "/oneCloud.v1.oneCloud/GetECSFamily"
	OneCloud_CreateECS_FullMethodName                                   = "/oneCloud.v1.oneCloud/CreateECS"
	OneCloud_DeleteECS_FullMethodName                                   = "/oneCloud.v1.oneCloud/DeleteECS"
	OneCloud_UpdateECS_FullMethodName                                   = "/oneCloud.v1.oneCloud/UpdateECS"
	OneCloud_ShutdownECS_FullMethodName                                 = "/oneCloud.v1.oneCloud/ShutdownECS"
	OneCloud_GetECS_FullMethodName                                      = "/oneCloud.v1.oneCloud/GetECS"
	OneCloud_CreateEIP_FullMethodName                                   = "/oneCloud.v1.oneCloud/CreateEIP"
	OneCloud_GetEIP_FullMethodName                                      = "/oneCloud.v1.oneCloud/GetEIP"
	OneCloud_UpdateEIP_FullMethodName                                   = "/oneCloud.v1.oneCloud/UpdateEIP"
	OneCloud_ReleaseEIP_FullMethodName                                  = "/oneCloud.v1.oneCloud/ReleaseEIP"
	OneCloud_CreateRDS_FullMethodName                                   = "/oneCloud.v1.oneCloud/CreateRDS"
	OneCloud_GetRDS_FullMethodName                                      = "/oneCloud.v1.oneCloud/GetRDS"
	OneCloud_ListRDS_FullMethodName                                     = "/oneCloud.v1.oneCloud/ListRDS"
	OneCloud_ListRDSSlowLogs_FullMethodName                             = "/oneCloud.v1.oneCloud/ListRDSSlowLogs"
	OneCloud_ListRDSErrLogs_FullMethodName                              = "/oneCloud.v1.oneCloud/ListRDSErrLogs"
	OneCloud_CreateLB_FullMethodName                                    = "/oneCloud.v1.oneCloud/CreateLB"
	OneCloud_GetLB_FullMethodName                                       = "/oneCloud.v1.oneCloud/GetLB"
	OneCloud_ReleaseLB_FullMethodName                                   = "/oneCloud.v1.oneCloud/ReleaseLB"
	OneCloud_ListCDN_FullMethodName                                     = "/oneCloud.v1.oneCloud/ListCDN"
	OneCloud_AddCDN_FullMethodName                                      = "/oneCloud.v1.oneCloud/AddCDN"
	OneCloud_ImportCDN_FullMethodName                                   = "/oneCloud.v1.oneCloud/ImportCDN"
	OneCloud_GetCDN_FullMethodName                                      = "/oneCloud.v1.oneCloud/GetCDN"
	OneCloud_ReleaseCDN_FullMethodName                                  = "/oneCloud.v1.oneCloud/ReleaseCDN"
	OneCloud_UpdateCDN_FullMethodName                                   = "/oneCloud.v1.oneCloud/UpdateCDN"
	OneCloud_RefreshCDNCache_FullMethodName                             = "/oneCloud.v1.oneCloud/RefreshCDNCache"
	OneCloud_GetCDNQuota_FullMethodName                                 = "/oneCloud.v1.oneCloud/GetCDNQuota"
	OneCloud_IsCdnIp_FullMethodName                                     = "/oneCloud.v1.oneCloud/IsCdnIp"
	OneCloud_GetCdnIpStatus_FullMethodName                              = "/oneCloud.v1.oneCloud/GetCdnIpStatus"
	OneCloud_ListOSSBucket_FullMethodName                               = "/oneCloud.v1.oneCloud/ListOSSBucket"
	OneCloud_CreateOSSBucket_FullMethodName                             = "/oneCloud.v1.oneCloud/CreateOSSBucket"
	OneCloud_GetOSSBucket_FullMethodName                                = "/oneCloud.v1.oneCloud/GetOSSBucket"
	OneCloud_DelOSSObject_FullMethodName                                = "/oneCloud.v1.oneCloud/DelOSSObject"
	OneCloud_GetOSSObjectMeta_FullMethodName                            = "/oneCloud.v1.oneCloud/GetOSSObjectMeta"
	OneCloud_RestoreOSSObject_FullMethodName                            = "/oneCloud.v1.oneCloud/RestoreOSSObject"
	OneCloud_CreateObjectStorageSecurityTokenGenerator_FullMethodName   = "/oneCloud.v1.oneCloud/CreateObjectStorageSecurityTokenGenerator"
	OneCloud_ExistObjectStorageSecurityTokenGenerator_FullMethodName    = "/oneCloud.v1.oneCloud/ExistObjectStorageSecurityTokenGenerator"
	OneCloud_GetObjectStorageSecurityTokenGenerator_FullMethodName      = "/oneCloud.v1.oneCloud/GetObjectStorageSecurityTokenGenerator"
	OneCloud_DelObjectStorageSecurityTokenGenerator_FullMethodName      = "/oneCloud.v1.oneCloud/DelObjectStorageSecurityTokenGenerator"
	OneCloud_ListObjectStorageSecurityTokenGenerator_FullMethodName     = "/oneCloud.v1.oneCloud/ListObjectStorageSecurityTokenGenerator"
	OneCloud_GetObjectStorageSecurityTokenByToken_FullMethodName        = "/oneCloud.v1.oneCloud/GetObjectStorageSecurityTokenByToken"
	OneCloud_GetObjectStorageSecurityTokenByGenerator_FullMethodName    = "/oneCloud.v1.oneCloud/GetObjectStorageSecurityTokenByGenerator"
	OneCloud_AddOrgCloudPlatformRegion_FullMethodName                   = "/oneCloud.v1.oneCloud/AddOrgCloudPlatformRegion"
	OneCloud_DelOrgCloudPlatformRegion_FullMethodName                   = "/oneCloud.v1.oneCloud/DelOrgCloudPlatformRegion"
	OneCloud_ListOrgCloudPlatformRegion_FullMethodName                  = "/oneCloud.v1.oneCloud/ListOrgCloudPlatformRegion"
)

// OneCloudClient is the client API for OneCloud service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OneCloudClient interface {
	ListSupportPlatform(ctx context.Context, in *ListSupportPlatformReq, opts ...grpc.CallOption) (*ListSupportPlatformReply, error)
	ListPlatform(ctx context.Context, in *ListPlatformReq, opts ...grpc.CallOption) (*ListPlatformReply, error)
	// Account
	// 添加云平台账号
	AddPlatformAccount(ctx context.Context, in *AddPlatformAccountReq, opts ...grpc.CallOption) (*AddPlatformAccountReply, error)
	// 列出云平台账号
	ListPlatformAccount(ctx context.Context, in *ListPlatformAccountReq, opts ...grpc.CallOption) (*ListPlatformAccountReply, error)
	// 删除云平台账号
	DelPlatformAccount(ctx context.Context, in *DelPlatformAccountReq, opts ...grpc.CallOption) (*DelPlatformAccountReply, error)
	// 添加云平台子账号
	AddPlatformSubAccount(ctx context.Context, in *AddPlatformSubAccountReq, opts ...grpc.CallOption) (*AddPlatformSubAccountReply, error)
	// 获取云平台子账户
	ListPlatformSubAccount(ctx context.Context, in *ListPlatformSubAccountReq, opts ...grpc.CallOption) (*ListPlatformSubAccountReply, error)
	// 删除云平台子账户
	DelPlatformSubAccount(ctx context.Context, in *DelPlatformSubAccountReq, opts ...grpc.CallOption) (*DelPlatformSubAccountReply, error)
	// 添加子账户 AccessKey
	CreateAccessKey(ctx context.Context, in *CreateAccessKeyReq, opts ...grpc.CallOption) (*CreateAccessKeyReply, error)
	// 获取子账户 AccessKey
	GetAccessKey(ctx context.Context, in *GetAccessKeyReq, opts ...grpc.CallOption) (*GetAccessKeyReply, error)
	// 删除子账户 AccessKey
	DelAccessKey(ctx context.Context, in *DelAccessKeyReq, opts ...grpc.CallOption) (*DelAccessKeyReply, error)
	// 获取临时安全Token
	GetSecurityToken(ctx context.Context, in *GetSecurityTokenReq, opts ...grpc.CallOption) (*GetSecurityTokenReply, error)
	// 生成临时安全Token对应的"单一"Policy
	GenerateObjectStorageSecurityTokenPutPolicy(ctx context.Context, in *GenerateObjectStorageSecurityTokenPutPolicyReq, opts ...grpc.CallOption) (*GenerateObjectStorageSecurityTokenPutPolicyReply, error)
	// Bill
	//
	AccountBalance(ctx context.Context, in *AccountBalanceReq, opts ...grpc.CallOption) (*AccountBalanceReply, error)
	// Certificate
	// 购买证书
	BuyCertificate(ctx context.Context, in *BuyCertificateReq, opts ...grpc.CallOption) (*BuyCertificateReply, error)
	// 解析证书
	ParseCertificate(ctx context.Context, in *ParseCertificateReq, opts ...grpc.CallOption) (*ParseCertificateReply, error)
	// 录入证书
	RecordCertificate(ctx context.Context, in *RecordCertificateReq, opts ...grpc.CallOption) (*RecordCertificateReply, error)
	// 列出证书
	ListCertificate(ctx context.Context, in *ListCertificateReq, opts ...grpc.CallOption) (*ListCertificateReply, error)
	// 删除证书
	DelCertificate(ctx context.Context, in *DelCertificateReq, opts ...grpc.CallOption) (*DelCertificateReply, error)
	// 通过 uuid 获取证书
	GetCertificateByUuid(ctx context.Context, in *GetCertificateByUuidReq, opts ...grpc.CallOption) (*GetCertificateByUuidReply, error)
	// DNS
	// 列出域名dns
	ListDomainDns(ctx context.Context, in *ListDomainDnsReq, opts ...grpc.CallOption) (*ListDomainDnsReply, error)
	// 列出云平台域名dns
	ListCloudDomainDns(ctx context.Context, in *ListCloudDomainDnsReq, opts ...grpc.CallOption) (*ListCloudDomainDnsReply, error)
	// 导入域名dns
	ImportDomainDns(ctx context.Context, in *ImportDomainDnsReq, opts ...grpc.CallOption) (*ImportDomainDnsReply, error)
	// 列出云平台域名DNS记录
	ListCloudDomainDnsRecord(ctx context.Context, in *ListCloudDomainDnsRecordReq, opts ...grpc.CallOption) (*ListCloudDomainDnsRecordReply, error)
	// 同步云平台域名DNS记录
	SyncCloudDomainDnsRecord(ctx context.Context, in *SyncCloudDomainDnsRecordReq, opts ...grpc.CallOption) (*SyncCloudDomainDnsRecordReply, error)
	// 获取同步云平台域名DNS记录
	GetSyncCloudDomainDnsRecord(ctx context.Context, in *GetSyncCloudDomainDnsRecordReq, opts ...grpc.CallOption) (*GetSyncCloudDomainDnsRecordReply, error)
	// 获取同步云平台域名DNS - 不支持同步的记录
	GetUnSupportSyncCloudDomainDnsRecord(ctx context.Context, in *GetUnSupportSyncCloudDomainDnsRecordReq, opts ...grpc.CallOption) (*GetUnSupportSyncCloudDomainDnsRecordReply, error)
	// ECS
	GetECSFamily(ctx context.Context, in *GetECSFamilyReq, opts ...grpc.CallOption) (*GetECSFamilyReply, error)
	CreateECS(ctx context.Context, in *CreateECSReq, opts ...grpc.CallOption) (*CreateECSReply, error)
	DeleteECS(ctx context.Context, in *ReleaseECSReq, opts ...grpc.CallOption) (*ReleaseECSReply, error)
	UpdateECS(ctx context.Context, in *UpdateECSReq, opts ...grpc.CallOption) (*UpdateECSReply, error)
	ShutdownECS(ctx context.Context, in *ShutdownECSReq, opts ...grpc.CallOption) (*ShutdownECSReply, error)
	GetECS(ctx context.Context, in *GetECSReq, opts ...grpc.CallOption) (*GetECSReply, error)
	// EIP
	CreateEIP(ctx context.Context, in *CreateEIPReq, opts ...grpc.CallOption) (*CreateEIPReply, error)
	GetEIP(ctx context.Context, in *GetEIPReq, opts ...grpc.CallOption) (*GetEIPReply, error)
	UpdateEIP(ctx context.Context, in *UpdateEIPReq, opts ...grpc.CallOption) (*UpdateEIPReply, error)
	ReleaseEIP(ctx context.Context, in *ReleaseEIPReq, opts ...grpc.CallOption) (*ReleaseEIPReply, error)
	// RDS
	CreateRDS(ctx context.Context, in *CreateRDSReq, opts ...grpc.CallOption) (*CreateRDSReply, error)
	GetRDS(ctx context.Context, in *GetRDSReq, opts ...grpc.CallOption) (*GetRDSReply, error)
	ListRDS(ctx context.Context, in *ListRDSReq, opts ...grpc.CallOption) (*ListRDSReply, error)
	ListRDSSlowLogs(ctx context.Context, in *ListRDSSlowLogsReq, opts ...grpc.CallOption) (*ListRDSSlowLogsReply, error)
	ListRDSErrLogs(ctx context.Context, in *ListRDSErrLogsReq, opts ...grpc.CallOption) (*ListRDSErrLogsReply, error)
	CreateLB(ctx context.Context, in *CreateLBReq, opts ...grpc.CallOption) (*CreateLBReply, error)
	GetLB(ctx context.Context, in *GetLBReq, opts ...grpc.CallOption) (*GetLBReply, error)
	ReleaseLB(ctx context.Context, in *ReleaseLBReq, opts ...grpc.CallOption) (*ReleaseLBReply, error)
	// CDN
	// 列出CDN记录
	ListCDN(ctx context.Context, in *ListCDNReq, opts ...grpc.CallOption) (*ListCDNReply, error)
	// 添加CDN记录
	AddCDN(ctx context.Context, in *AddCDNReq, opts ...grpc.CallOption) (*AddCDNReply, error)
	// 导入CDN记录
	ImportCDN(ctx context.Context, in *ImportCDNReq, opts ...grpc.CallOption) (*ImportCDNReply, error)
	// 获取CDN详情
	GetCDN(ctx context.Context, in *GetCDNReq, opts ...grpc.CallOption) (*GetCDNReply, error)
	// 释放CDN
	ReleaseCDN(ctx context.Context, in *ReleaseCDNReq, opts ...grpc.CallOption) (*ReleaseCDNReply, error)
	// 更新CDN
	UpdateCDN(ctx context.Context, in *UpdateCDNReq, opts ...grpc.CallOption) (*UpdateCDNReply, error)
	// 刷新CDN缓存
	RefreshCDNCache(ctx context.Context, in *RefreshCDNCacheReq, opts ...grpc.CallOption) (*RefreshCDNCacheReply, error)
	// CDN配额
	GetCDNQuota(ctx context.Context, in *GetCDNQuotaReq, opts ...grpc.CallOption) (*GetCDNQuotaReply, error)
	// 是否是CDN IP
	IsCdnIp(ctx context.Context, in *IsCdnIpReq, opts ...grpc.CallOption) (*IsCdnIpReply, error)
	// 查询CDN节点IP可用状态
	GetCdnIpStatus(ctx context.Context, in *GetCdnIpStatusReq, opts ...grpc.CallOption) (*GetCdnIpStatusReply, error)
	// 对象存储
	// 列出对象存储桶
	ListOSSBucket(ctx context.Context, in *ListOSSBucketReq, opts ...grpc.CallOption) (*ListOSSBucketReply, error)
	// 创建对象存储桶
	CreateOSSBucket(ctx context.Context, in *CreateOSSBucketReq, opts ...grpc.CallOption) (*CreateOSSBucketReply, error)
	// 获取对象存储桶
	GetOSSBucket(ctx context.Context, in *GetOSSBucketReq, opts ...grpc.CallOption) (*GetOSSBucketReply, error)
	// 删除对象存储对象
	DelOSSObject(ctx context.Context, in *DelOSSObjectReq, opts ...grpc.CallOption) (*DelOSSObjectReply, error)
	// 获取对象存储对象元数据
	GetOSSObjectMeta(ctx context.Context, in *GetOSSObjectMetaReq, opts ...grpc.CallOption) (*GetOSSObjectMetaReply, error)
	// 解冻对象存储对象
	RestoreOSSObject(ctx context.Context, in *RestoreOSSObjectReq, opts ...grpc.CallOption) (*RestoreOSSObjectReply, error)
	CreateObjectStorageSecurityTokenGenerator(ctx context.Context, in *CreateObjectStorageSecurityTokenGeneratorReq, opts ...grpc.CallOption) (*CreateObjectStorageSecurityTokenGeneratorReply, error)
	ExistObjectStorageSecurityTokenGenerator(ctx context.Context, in *ExistObjectStorageSecurityTokenGeneratorReq, opts ...grpc.CallOption) (*ExistObjectStorageSecurityTokenGeneratorReply, error)
	GetObjectStorageSecurityTokenGenerator(ctx context.Context, in *GetObjectStorageSecurityTokenGeneratorReq, opts ...grpc.CallOption) (*GetObjectStorageSecurityTokenGeneratorReply, error)
	DelObjectStorageSecurityTokenGenerator(ctx context.Context, in *DelObjectStorageSecurityTokenGeneratorReq, opts ...grpc.CallOption) (*DelObjectStorageSecurityTokenGeneratorReply, error)
	ListObjectStorageSecurityTokenGenerator(ctx context.Context, in *ListObjectStorageSecurityTokenGeneratorReq, opts ...grpc.CallOption) (*ListObjectStorageSecurityTokenGeneratorReply, error)
	GetObjectStorageSecurityTokenByToken(ctx context.Context, in *GetObjectStorageSecurityTokenByTokenReq, opts ...grpc.CallOption) (*GetObjectStorageSecurityTokenByTokenReply, error)
	GetObjectStorageSecurityTokenByGenerator(ctx context.Context, in *GetObjectStorageSecurityTokenByGeneratorReq, opts ...grpc.CallOption) (*GetObjectStorageSecurityTokenByGeneratorReply, error)
	// 云平台Region
	AddOrgCloudPlatformRegion(ctx context.Context, in *AddCloudPlatformRegionReq, opts ...grpc.CallOption) (*AddCloudPlatformRegionReply, error)
	DelOrgCloudPlatformRegion(ctx context.Context, in *DelCloudPlatformRegionReq, opts ...grpc.CallOption) (*DelCloudPlatformRegionReply, error)
	ListOrgCloudPlatformRegion(ctx context.Context, in *ListCloudPlatformRegionReq, opts ...grpc.CallOption) (*ListCloudPlatformRegionReply, error)
}

type oneCloudClient struct {
	cc grpc.ClientConnInterface
}

func NewOneCloudClient(cc grpc.ClientConnInterface) OneCloudClient {
	return &oneCloudClient{cc}
}

func (c *oneCloudClient) ListSupportPlatform(ctx context.Context, in *ListSupportPlatformReq, opts ...grpc.CallOption) (*ListSupportPlatformReply, error) {
	out := new(ListSupportPlatformReply)
	err := c.cc.Invoke(ctx, OneCloud_ListSupportPlatform_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) ListPlatform(ctx context.Context, in *ListPlatformReq, opts ...grpc.CallOption) (*ListPlatformReply, error) {
	out := new(ListPlatformReply)
	err := c.cc.Invoke(ctx, OneCloud_ListPlatform_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) AddPlatformAccount(ctx context.Context, in *AddPlatformAccountReq, opts ...grpc.CallOption) (*AddPlatformAccountReply, error) {
	out := new(AddPlatformAccountReply)
	err := c.cc.Invoke(ctx, OneCloud_AddPlatformAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) ListPlatformAccount(ctx context.Context, in *ListPlatformAccountReq, opts ...grpc.CallOption) (*ListPlatformAccountReply, error) {
	out := new(ListPlatformAccountReply)
	err := c.cc.Invoke(ctx, OneCloud_ListPlatformAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) DelPlatformAccount(ctx context.Context, in *DelPlatformAccountReq, opts ...grpc.CallOption) (*DelPlatformAccountReply, error) {
	out := new(DelPlatformAccountReply)
	err := c.cc.Invoke(ctx, OneCloud_DelPlatformAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) AddPlatformSubAccount(ctx context.Context, in *AddPlatformSubAccountReq, opts ...grpc.CallOption) (*AddPlatformSubAccountReply, error) {
	out := new(AddPlatformSubAccountReply)
	err := c.cc.Invoke(ctx, OneCloud_AddPlatformSubAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) ListPlatformSubAccount(ctx context.Context, in *ListPlatformSubAccountReq, opts ...grpc.CallOption) (*ListPlatformSubAccountReply, error) {
	out := new(ListPlatformSubAccountReply)
	err := c.cc.Invoke(ctx, OneCloud_ListPlatformSubAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) DelPlatformSubAccount(ctx context.Context, in *DelPlatformSubAccountReq, opts ...grpc.CallOption) (*DelPlatformSubAccountReply, error) {
	out := new(DelPlatformSubAccountReply)
	err := c.cc.Invoke(ctx, OneCloud_DelPlatformSubAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) CreateAccessKey(ctx context.Context, in *CreateAccessKeyReq, opts ...grpc.CallOption) (*CreateAccessKeyReply, error) {
	out := new(CreateAccessKeyReply)
	err := c.cc.Invoke(ctx, OneCloud_CreateAccessKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) GetAccessKey(ctx context.Context, in *GetAccessKeyReq, opts ...grpc.CallOption) (*GetAccessKeyReply, error) {
	out := new(GetAccessKeyReply)
	err := c.cc.Invoke(ctx, OneCloud_GetAccessKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) DelAccessKey(ctx context.Context, in *DelAccessKeyReq, opts ...grpc.CallOption) (*DelAccessKeyReply, error) {
	out := new(DelAccessKeyReply)
	err := c.cc.Invoke(ctx, OneCloud_DelAccessKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) GetSecurityToken(ctx context.Context, in *GetSecurityTokenReq, opts ...grpc.CallOption) (*GetSecurityTokenReply, error) {
	out := new(GetSecurityTokenReply)
	err := c.cc.Invoke(ctx, OneCloud_GetSecurityToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) GenerateObjectStorageSecurityTokenPutPolicy(ctx context.Context, in *GenerateObjectStorageSecurityTokenPutPolicyReq, opts ...grpc.CallOption) (*GenerateObjectStorageSecurityTokenPutPolicyReply, error) {
	out := new(GenerateObjectStorageSecurityTokenPutPolicyReply)
	err := c.cc.Invoke(ctx, OneCloud_GenerateObjectStorageSecurityTokenPutPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) AccountBalance(ctx context.Context, in *AccountBalanceReq, opts ...grpc.CallOption) (*AccountBalanceReply, error) {
	out := new(AccountBalanceReply)
	err := c.cc.Invoke(ctx, OneCloud_AccountBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) BuyCertificate(ctx context.Context, in *BuyCertificateReq, opts ...grpc.CallOption) (*BuyCertificateReply, error) {
	out := new(BuyCertificateReply)
	err := c.cc.Invoke(ctx, OneCloud_BuyCertificate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) ParseCertificate(ctx context.Context, in *ParseCertificateReq, opts ...grpc.CallOption) (*ParseCertificateReply, error) {
	out := new(ParseCertificateReply)
	err := c.cc.Invoke(ctx, OneCloud_ParseCertificate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) RecordCertificate(ctx context.Context, in *RecordCertificateReq, opts ...grpc.CallOption) (*RecordCertificateReply, error) {
	out := new(RecordCertificateReply)
	err := c.cc.Invoke(ctx, OneCloud_RecordCertificate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) ListCertificate(ctx context.Context, in *ListCertificateReq, opts ...grpc.CallOption) (*ListCertificateReply, error) {
	out := new(ListCertificateReply)
	err := c.cc.Invoke(ctx, OneCloud_ListCertificate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) DelCertificate(ctx context.Context, in *DelCertificateReq, opts ...grpc.CallOption) (*DelCertificateReply, error) {
	out := new(DelCertificateReply)
	err := c.cc.Invoke(ctx, OneCloud_DelCertificate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) GetCertificateByUuid(ctx context.Context, in *GetCertificateByUuidReq, opts ...grpc.CallOption) (*GetCertificateByUuidReply, error) {
	out := new(GetCertificateByUuidReply)
	err := c.cc.Invoke(ctx, OneCloud_GetCertificateByUuid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) ListDomainDns(ctx context.Context, in *ListDomainDnsReq, opts ...grpc.CallOption) (*ListDomainDnsReply, error) {
	out := new(ListDomainDnsReply)
	err := c.cc.Invoke(ctx, OneCloud_ListDomainDns_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) ListCloudDomainDns(ctx context.Context, in *ListCloudDomainDnsReq, opts ...grpc.CallOption) (*ListCloudDomainDnsReply, error) {
	out := new(ListCloudDomainDnsReply)
	err := c.cc.Invoke(ctx, OneCloud_ListCloudDomainDns_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) ImportDomainDns(ctx context.Context, in *ImportDomainDnsReq, opts ...grpc.CallOption) (*ImportDomainDnsReply, error) {
	out := new(ImportDomainDnsReply)
	err := c.cc.Invoke(ctx, OneCloud_ImportDomainDns_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) ListCloudDomainDnsRecord(ctx context.Context, in *ListCloudDomainDnsRecordReq, opts ...grpc.CallOption) (*ListCloudDomainDnsRecordReply, error) {
	out := new(ListCloudDomainDnsRecordReply)
	err := c.cc.Invoke(ctx, OneCloud_ListCloudDomainDnsRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) SyncCloudDomainDnsRecord(ctx context.Context, in *SyncCloudDomainDnsRecordReq, opts ...grpc.CallOption) (*SyncCloudDomainDnsRecordReply, error) {
	out := new(SyncCloudDomainDnsRecordReply)
	err := c.cc.Invoke(ctx, OneCloud_SyncCloudDomainDnsRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) GetSyncCloudDomainDnsRecord(ctx context.Context, in *GetSyncCloudDomainDnsRecordReq, opts ...grpc.CallOption) (*GetSyncCloudDomainDnsRecordReply, error) {
	out := new(GetSyncCloudDomainDnsRecordReply)
	err := c.cc.Invoke(ctx, OneCloud_GetSyncCloudDomainDnsRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) GetUnSupportSyncCloudDomainDnsRecord(ctx context.Context, in *GetUnSupportSyncCloudDomainDnsRecordReq, opts ...grpc.CallOption) (*GetUnSupportSyncCloudDomainDnsRecordReply, error) {
	out := new(GetUnSupportSyncCloudDomainDnsRecordReply)
	err := c.cc.Invoke(ctx, OneCloud_GetUnSupportSyncCloudDomainDnsRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) GetECSFamily(ctx context.Context, in *GetECSFamilyReq, opts ...grpc.CallOption) (*GetECSFamilyReply, error) {
	out := new(GetECSFamilyReply)
	err := c.cc.Invoke(ctx, OneCloud_GetECSFamily_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) CreateECS(ctx context.Context, in *CreateECSReq, opts ...grpc.CallOption) (*CreateECSReply, error) {
	out := new(CreateECSReply)
	err := c.cc.Invoke(ctx, OneCloud_CreateECS_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) DeleteECS(ctx context.Context, in *ReleaseECSReq, opts ...grpc.CallOption) (*ReleaseECSReply, error) {
	out := new(ReleaseECSReply)
	err := c.cc.Invoke(ctx, OneCloud_DeleteECS_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) UpdateECS(ctx context.Context, in *UpdateECSReq, opts ...grpc.CallOption) (*UpdateECSReply, error) {
	out := new(UpdateECSReply)
	err := c.cc.Invoke(ctx, OneCloud_UpdateECS_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) ShutdownECS(ctx context.Context, in *ShutdownECSReq, opts ...grpc.CallOption) (*ShutdownECSReply, error) {
	out := new(ShutdownECSReply)
	err := c.cc.Invoke(ctx, OneCloud_ShutdownECS_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) GetECS(ctx context.Context, in *GetECSReq, opts ...grpc.CallOption) (*GetECSReply, error) {
	out := new(GetECSReply)
	err := c.cc.Invoke(ctx, OneCloud_GetECS_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) CreateEIP(ctx context.Context, in *CreateEIPReq, opts ...grpc.CallOption) (*CreateEIPReply, error) {
	out := new(CreateEIPReply)
	err := c.cc.Invoke(ctx, OneCloud_CreateEIP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) GetEIP(ctx context.Context, in *GetEIPReq, opts ...grpc.CallOption) (*GetEIPReply, error) {
	out := new(GetEIPReply)
	err := c.cc.Invoke(ctx, OneCloud_GetEIP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) UpdateEIP(ctx context.Context, in *UpdateEIPReq, opts ...grpc.CallOption) (*UpdateEIPReply, error) {
	out := new(UpdateEIPReply)
	err := c.cc.Invoke(ctx, OneCloud_UpdateEIP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) ReleaseEIP(ctx context.Context, in *ReleaseEIPReq, opts ...grpc.CallOption) (*ReleaseEIPReply, error) {
	out := new(ReleaseEIPReply)
	err := c.cc.Invoke(ctx, OneCloud_ReleaseEIP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) CreateRDS(ctx context.Context, in *CreateRDSReq, opts ...grpc.CallOption) (*CreateRDSReply, error) {
	out := new(CreateRDSReply)
	err := c.cc.Invoke(ctx, OneCloud_CreateRDS_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) GetRDS(ctx context.Context, in *GetRDSReq, opts ...grpc.CallOption) (*GetRDSReply, error) {
	out := new(GetRDSReply)
	err := c.cc.Invoke(ctx, OneCloud_GetRDS_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) ListRDS(ctx context.Context, in *ListRDSReq, opts ...grpc.CallOption) (*ListRDSReply, error) {
	out := new(ListRDSReply)
	err := c.cc.Invoke(ctx, OneCloud_ListRDS_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) ListRDSSlowLogs(ctx context.Context, in *ListRDSSlowLogsReq, opts ...grpc.CallOption) (*ListRDSSlowLogsReply, error) {
	out := new(ListRDSSlowLogsReply)
	err := c.cc.Invoke(ctx, OneCloud_ListRDSSlowLogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) ListRDSErrLogs(ctx context.Context, in *ListRDSErrLogsReq, opts ...grpc.CallOption) (*ListRDSErrLogsReply, error) {
	out := new(ListRDSErrLogsReply)
	err := c.cc.Invoke(ctx, OneCloud_ListRDSErrLogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) CreateLB(ctx context.Context, in *CreateLBReq, opts ...grpc.CallOption) (*CreateLBReply, error) {
	out := new(CreateLBReply)
	err := c.cc.Invoke(ctx, OneCloud_CreateLB_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) GetLB(ctx context.Context, in *GetLBReq, opts ...grpc.CallOption) (*GetLBReply, error) {
	out := new(GetLBReply)
	err := c.cc.Invoke(ctx, OneCloud_GetLB_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) ReleaseLB(ctx context.Context, in *ReleaseLBReq, opts ...grpc.CallOption) (*ReleaseLBReply, error) {
	out := new(ReleaseLBReply)
	err := c.cc.Invoke(ctx, OneCloud_ReleaseLB_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) ListCDN(ctx context.Context, in *ListCDNReq, opts ...grpc.CallOption) (*ListCDNReply, error) {
	out := new(ListCDNReply)
	err := c.cc.Invoke(ctx, OneCloud_ListCDN_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) AddCDN(ctx context.Context, in *AddCDNReq, opts ...grpc.CallOption) (*AddCDNReply, error) {
	out := new(AddCDNReply)
	err := c.cc.Invoke(ctx, OneCloud_AddCDN_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) ImportCDN(ctx context.Context, in *ImportCDNReq, opts ...grpc.CallOption) (*ImportCDNReply, error) {
	out := new(ImportCDNReply)
	err := c.cc.Invoke(ctx, OneCloud_ImportCDN_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) GetCDN(ctx context.Context, in *GetCDNReq, opts ...grpc.CallOption) (*GetCDNReply, error) {
	out := new(GetCDNReply)
	err := c.cc.Invoke(ctx, OneCloud_GetCDN_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) ReleaseCDN(ctx context.Context, in *ReleaseCDNReq, opts ...grpc.CallOption) (*ReleaseCDNReply, error) {
	out := new(ReleaseCDNReply)
	err := c.cc.Invoke(ctx, OneCloud_ReleaseCDN_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) UpdateCDN(ctx context.Context, in *UpdateCDNReq, opts ...grpc.CallOption) (*UpdateCDNReply, error) {
	out := new(UpdateCDNReply)
	err := c.cc.Invoke(ctx, OneCloud_UpdateCDN_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) RefreshCDNCache(ctx context.Context, in *RefreshCDNCacheReq, opts ...grpc.CallOption) (*RefreshCDNCacheReply, error) {
	out := new(RefreshCDNCacheReply)
	err := c.cc.Invoke(ctx, OneCloud_RefreshCDNCache_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) GetCDNQuota(ctx context.Context, in *GetCDNQuotaReq, opts ...grpc.CallOption) (*GetCDNQuotaReply, error) {
	out := new(GetCDNQuotaReply)
	err := c.cc.Invoke(ctx, OneCloud_GetCDNQuota_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) IsCdnIp(ctx context.Context, in *IsCdnIpReq, opts ...grpc.CallOption) (*IsCdnIpReply, error) {
	out := new(IsCdnIpReply)
	err := c.cc.Invoke(ctx, OneCloud_IsCdnIp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) GetCdnIpStatus(ctx context.Context, in *GetCdnIpStatusReq, opts ...grpc.CallOption) (*GetCdnIpStatusReply, error) {
	out := new(GetCdnIpStatusReply)
	err := c.cc.Invoke(ctx, OneCloud_GetCdnIpStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) ListOSSBucket(ctx context.Context, in *ListOSSBucketReq, opts ...grpc.CallOption) (*ListOSSBucketReply, error) {
	out := new(ListOSSBucketReply)
	err := c.cc.Invoke(ctx, OneCloud_ListOSSBucket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) CreateOSSBucket(ctx context.Context, in *CreateOSSBucketReq, opts ...grpc.CallOption) (*CreateOSSBucketReply, error) {
	out := new(CreateOSSBucketReply)
	err := c.cc.Invoke(ctx, OneCloud_CreateOSSBucket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) GetOSSBucket(ctx context.Context, in *GetOSSBucketReq, opts ...grpc.CallOption) (*GetOSSBucketReply, error) {
	out := new(GetOSSBucketReply)
	err := c.cc.Invoke(ctx, OneCloud_GetOSSBucket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) DelOSSObject(ctx context.Context, in *DelOSSObjectReq, opts ...grpc.CallOption) (*DelOSSObjectReply, error) {
	out := new(DelOSSObjectReply)
	err := c.cc.Invoke(ctx, OneCloud_DelOSSObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) GetOSSObjectMeta(ctx context.Context, in *GetOSSObjectMetaReq, opts ...grpc.CallOption) (*GetOSSObjectMetaReply, error) {
	out := new(GetOSSObjectMetaReply)
	err := c.cc.Invoke(ctx, OneCloud_GetOSSObjectMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) RestoreOSSObject(ctx context.Context, in *RestoreOSSObjectReq, opts ...grpc.CallOption) (*RestoreOSSObjectReply, error) {
	out := new(RestoreOSSObjectReply)
	err := c.cc.Invoke(ctx, OneCloud_RestoreOSSObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) CreateObjectStorageSecurityTokenGenerator(ctx context.Context, in *CreateObjectStorageSecurityTokenGeneratorReq, opts ...grpc.CallOption) (*CreateObjectStorageSecurityTokenGeneratorReply, error) {
	out := new(CreateObjectStorageSecurityTokenGeneratorReply)
	err := c.cc.Invoke(ctx, OneCloud_CreateObjectStorageSecurityTokenGenerator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) ExistObjectStorageSecurityTokenGenerator(ctx context.Context, in *ExistObjectStorageSecurityTokenGeneratorReq, opts ...grpc.CallOption) (*ExistObjectStorageSecurityTokenGeneratorReply, error) {
	out := new(ExistObjectStorageSecurityTokenGeneratorReply)
	err := c.cc.Invoke(ctx, OneCloud_ExistObjectStorageSecurityTokenGenerator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) GetObjectStorageSecurityTokenGenerator(ctx context.Context, in *GetObjectStorageSecurityTokenGeneratorReq, opts ...grpc.CallOption) (*GetObjectStorageSecurityTokenGeneratorReply, error) {
	out := new(GetObjectStorageSecurityTokenGeneratorReply)
	err := c.cc.Invoke(ctx, OneCloud_GetObjectStorageSecurityTokenGenerator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) DelObjectStorageSecurityTokenGenerator(ctx context.Context, in *DelObjectStorageSecurityTokenGeneratorReq, opts ...grpc.CallOption) (*DelObjectStorageSecurityTokenGeneratorReply, error) {
	out := new(DelObjectStorageSecurityTokenGeneratorReply)
	err := c.cc.Invoke(ctx, OneCloud_DelObjectStorageSecurityTokenGenerator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) ListObjectStorageSecurityTokenGenerator(ctx context.Context, in *ListObjectStorageSecurityTokenGeneratorReq, opts ...grpc.CallOption) (*ListObjectStorageSecurityTokenGeneratorReply, error) {
	out := new(ListObjectStorageSecurityTokenGeneratorReply)
	err := c.cc.Invoke(ctx, OneCloud_ListObjectStorageSecurityTokenGenerator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) GetObjectStorageSecurityTokenByToken(ctx context.Context, in *GetObjectStorageSecurityTokenByTokenReq, opts ...grpc.CallOption) (*GetObjectStorageSecurityTokenByTokenReply, error) {
	out := new(GetObjectStorageSecurityTokenByTokenReply)
	err := c.cc.Invoke(ctx, OneCloud_GetObjectStorageSecurityTokenByToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) GetObjectStorageSecurityTokenByGenerator(ctx context.Context, in *GetObjectStorageSecurityTokenByGeneratorReq, opts ...grpc.CallOption) (*GetObjectStorageSecurityTokenByGeneratorReply, error) {
	out := new(GetObjectStorageSecurityTokenByGeneratorReply)
	err := c.cc.Invoke(ctx, OneCloud_GetObjectStorageSecurityTokenByGenerator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) AddOrgCloudPlatformRegion(ctx context.Context, in *AddCloudPlatformRegionReq, opts ...grpc.CallOption) (*AddCloudPlatformRegionReply, error) {
	out := new(AddCloudPlatformRegionReply)
	err := c.cc.Invoke(ctx, OneCloud_AddOrgCloudPlatformRegion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) DelOrgCloudPlatformRegion(ctx context.Context, in *DelCloudPlatformRegionReq, opts ...grpc.CallOption) (*DelCloudPlatformRegionReply, error) {
	out := new(DelCloudPlatformRegionReply)
	err := c.cc.Invoke(ctx, OneCloud_DelOrgCloudPlatformRegion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneCloudClient) ListOrgCloudPlatformRegion(ctx context.Context, in *ListCloudPlatformRegionReq, opts ...grpc.CallOption) (*ListCloudPlatformRegionReply, error) {
	out := new(ListCloudPlatformRegionReply)
	err := c.cc.Invoke(ctx, OneCloud_ListOrgCloudPlatformRegion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OneCloudServer is the server API for OneCloud service.
// All implementations must embed UnimplementedOneCloudServer
// for forward compatibility
type OneCloudServer interface {
	ListSupportPlatform(context.Context, *ListSupportPlatformReq) (*ListSupportPlatformReply, error)
	ListPlatform(context.Context, *ListPlatformReq) (*ListPlatformReply, error)
	// Account
	// 添加云平台账号
	AddPlatformAccount(context.Context, *AddPlatformAccountReq) (*AddPlatformAccountReply, error)
	// 列出云平台账号
	ListPlatformAccount(context.Context, *ListPlatformAccountReq) (*ListPlatformAccountReply, error)
	// 删除云平台账号
	DelPlatformAccount(context.Context, *DelPlatformAccountReq) (*DelPlatformAccountReply, error)
	// 添加云平台子账号
	AddPlatformSubAccount(context.Context, *AddPlatformSubAccountReq) (*AddPlatformSubAccountReply, error)
	// 获取云平台子账户
	ListPlatformSubAccount(context.Context, *ListPlatformSubAccountReq) (*ListPlatformSubAccountReply, error)
	// 删除云平台子账户
	DelPlatformSubAccount(context.Context, *DelPlatformSubAccountReq) (*DelPlatformSubAccountReply, error)
	// 添加子账户 AccessKey
	CreateAccessKey(context.Context, *CreateAccessKeyReq) (*CreateAccessKeyReply, error)
	// 获取子账户 AccessKey
	GetAccessKey(context.Context, *GetAccessKeyReq) (*GetAccessKeyReply, error)
	// 删除子账户 AccessKey
	DelAccessKey(context.Context, *DelAccessKeyReq) (*DelAccessKeyReply, error)
	// 获取临时安全Token
	GetSecurityToken(context.Context, *GetSecurityTokenReq) (*GetSecurityTokenReply, error)
	// 生成临时安全Token对应的"单一"Policy
	GenerateObjectStorageSecurityTokenPutPolicy(context.Context, *GenerateObjectStorageSecurityTokenPutPolicyReq) (*GenerateObjectStorageSecurityTokenPutPolicyReply, error)
	// Bill
	//
	AccountBalance(context.Context, *AccountBalanceReq) (*AccountBalanceReply, error)
	// Certificate
	// 购买证书
	BuyCertificate(context.Context, *BuyCertificateReq) (*BuyCertificateReply, error)
	// 解析证书
	ParseCertificate(context.Context, *ParseCertificateReq) (*ParseCertificateReply, error)
	// 录入证书
	RecordCertificate(context.Context, *RecordCertificateReq) (*RecordCertificateReply, error)
	// 列出证书
	ListCertificate(context.Context, *ListCertificateReq) (*ListCertificateReply, error)
	// 删除证书
	DelCertificate(context.Context, *DelCertificateReq) (*DelCertificateReply, error)
	// 通过 uuid 获取证书
	GetCertificateByUuid(context.Context, *GetCertificateByUuidReq) (*GetCertificateByUuidReply, error)
	// DNS
	// 列出域名dns
	ListDomainDns(context.Context, *ListDomainDnsReq) (*ListDomainDnsReply, error)
	// 列出云平台域名dns
	ListCloudDomainDns(context.Context, *ListCloudDomainDnsReq) (*ListCloudDomainDnsReply, error)
	// 导入域名dns
	ImportDomainDns(context.Context, *ImportDomainDnsReq) (*ImportDomainDnsReply, error)
	// 列出云平台域名DNS记录
	ListCloudDomainDnsRecord(context.Context, *ListCloudDomainDnsRecordReq) (*ListCloudDomainDnsRecordReply, error)
	// 同步云平台域名DNS记录
	SyncCloudDomainDnsRecord(context.Context, *SyncCloudDomainDnsRecordReq) (*SyncCloudDomainDnsRecordReply, error)
	// 获取同步云平台域名DNS记录
	GetSyncCloudDomainDnsRecord(context.Context, *GetSyncCloudDomainDnsRecordReq) (*GetSyncCloudDomainDnsRecordReply, error)
	// 获取同步云平台域名DNS - 不支持同步的记录
	GetUnSupportSyncCloudDomainDnsRecord(context.Context, *GetUnSupportSyncCloudDomainDnsRecordReq) (*GetUnSupportSyncCloudDomainDnsRecordReply, error)
	// ECS
	GetECSFamily(context.Context, *GetECSFamilyReq) (*GetECSFamilyReply, error)
	CreateECS(context.Context, *CreateECSReq) (*CreateECSReply, error)
	DeleteECS(context.Context, *ReleaseECSReq) (*ReleaseECSReply, error)
	UpdateECS(context.Context, *UpdateECSReq) (*UpdateECSReply, error)
	ShutdownECS(context.Context, *ShutdownECSReq) (*ShutdownECSReply, error)
	GetECS(context.Context, *GetECSReq) (*GetECSReply, error)
	// EIP
	CreateEIP(context.Context, *CreateEIPReq) (*CreateEIPReply, error)
	GetEIP(context.Context, *GetEIPReq) (*GetEIPReply, error)
	UpdateEIP(context.Context, *UpdateEIPReq) (*UpdateEIPReply, error)
	ReleaseEIP(context.Context, *ReleaseEIPReq) (*ReleaseEIPReply, error)
	// RDS
	CreateRDS(context.Context, *CreateRDSReq) (*CreateRDSReply, error)
	GetRDS(context.Context, *GetRDSReq) (*GetRDSReply, error)
	ListRDS(context.Context, *ListRDSReq) (*ListRDSReply, error)
	ListRDSSlowLogs(context.Context, *ListRDSSlowLogsReq) (*ListRDSSlowLogsReply, error)
	ListRDSErrLogs(context.Context, *ListRDSErrLogsReq) (*ListRDSErrLogsReply, error)
	CreateLB(context.Context, *CreateLBReq) (*CreateLBReply, error)
	GetLB(context.Context, *GetLBReq) (*GetLBReply, error)
	ReleaseLB(context.Context, *ReleaseLBReq) (*ReleaseLBReply, error)
	// CDN
	// 列出CDN记录
	ListCDN(context.Context, *ListCDNReq) (*ListCDNReply, error)
	// 添加CDN记录
	AddCDN(context.Context, *AddCDNReq) (*AddCDNReply, error)
	// 导入CDN记录
	ImportCDN(context.Context, *ImportCDNReq) (*ImportCDNReply, error)
	// 获取CDN详情
	GetCDN(context.Context, *GetCDNReq) (*GetCDNReply, error)
	// 释放CDN
	ReleaseCDN(context.Context, *ReleaseCDNReq) (*ReleaseCDNReply, error)
	// 更新CDN
	UpdateCDN(context.Context, *UpdateCDNReq) (*UpdateCDNReply, error)
	// 刷新CDN缓存
	RefreshCDNCache(context.Context, *RefreshCDNCacheReq) (*RefreshCDNCacheReply, error)
	// CDN配额
	GetCDNQuota(context.Context, *GetCDNQuotaReq) (*GetCDNQuotaReply, error)
	// 是否是CDN IP
	IsCdnIp(context.Context, *IsCdnIpReq) (*IsCdnIpReply, error)
	// 查询CDN节点IP可用状态
	GetCdnIpStatus(context.Context, *GetCdnIpStatusReq) (*GetCdnIpStatusReply, error)
	// 对象存储
	// 列出对象存储桶
	ListOSSBucket(context.Context, *ListOSSBucketReq) (*ListOSSBucketReply, error)
	// 创建对象存储桶
	CreateOSSBucket(context.Context, *CreateOSSBucketReq) (*CreateOSSBucketReply, error)
	// 获取对象存储桶
	GetOSSBucket(context.Context, *GetOSSBucketReq) (*GetOSSBucketReply, error)
	// 删除对象存储对象
	DelOSSObject(context.Context, *DelOSSObjectReq) (*DelOSSObjectReply, error)
	// 获取对象存储对象元数据
	GetOSSObjectMeta(context.Context, *GetOSSObjectMetaReq) (*GetOSSObjectMetaReply, error)
	// 解冻对象存储对象
	RestoreOSSObject(context.Context, *RestoreOSSObjectReq) (*RestoreOSSObjectReply, error)
	CreateObjectStorageSecurityTokenGenerator(context.Context, *CreateObjectStorageSecurityTokenGeneratorReq) (*CreateObjectStorageSecurityTokenGeneratorReply, error)
	ExistObjectStorageSecurityTokenGenerator(context.Context, *ExistObjectStorageSecurityTokenGeneratorReq) (*ExistObjectStorageSecurityTokenGeneratorReply, error)
	GetObjectStorageSecurityTokenGenerator(context.Context, *GetObjectStorageSecurityTokenGeneratorReq) (*GetObjectStorageSecurityTokenGeneratorReply, error)
	DelObjectStorageSecurityTokenGenerator(context.Context, *DelObjectStorageSecurityTokenGeneratorReq) (*DelObjectStorageSecurityTokenGeneratorReply, error)
	ListObjectStorageSecurityTokenGenerator(context.Context, *ListObjectStorageSecurityTokenGeneratorReq) (*ListObjectStorageSecurityTokenGeneratorReply, error)
	GetObjectStorageSecurityTokenByToken(context.Context, *GetObjectStorageSecurityTokenByTokenReq) (*GetObjectStorageSecurityTokenByTokenReply, error)
	GetObjectStorageSecurityTokenByGenerator(context.Context, *GetObjectStorageSecurityTokenByGeneratorReq) (*GetObjectStorageSecurityTokenByGeneratorReply, error)
	// 云平台Region
	AddOrgCloudPlatformRegion(context.Context, *AddCloudPlatformRegionReq) (*AddCloudPlatformRegionReply, error)
	DelOrgCloudPlatformRegion(context.Context, *DelCloudPlatformRegionReq) (*DelCloudPlatformRegionReply, error)
	ListOrgCloudPlatformRegion(context.Context, *ListCloudPlatformRegionReq) (*ListCloudPlatformRegionReply, error)
	mustEmbedUnimplementedOneCloudServer()
}

// UnimplementedOneCloudServer must be embedded to have forward compatible implementations.
type UnimplementedOneCloudServer struct {
}

func (UnimplementedOneCloudServer) ListSupportPlatform(context.Context, *ListSupportPlatformReq) (*ListSupportPlatformReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSupportPlatform not implemented")
}
func (UnimplementedOneCloudServer) ListPlatform(context.Context, *ListPlatformReq) (*ListPlatformReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlatform not implemented")
}
func (UnimplementedOneCloudServer) AddPlatformAccount(context.Context, *AddPlatformAccountReq) (*AddPlatformAccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPlatformAccount not implemented")
}
func (UnimplementedOneCloudServer) ListPlatformAccount(context.Context, *ListPlatformAccountReq) (*ListPlatformAccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlatformAccount not implemented")
}
func (UnimplementedOneCloudServer) DelPlatformAccount(context.Context, *DelPlatformAccountReq) (*DelPlatformAccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelPlatformAccount not implemented")
}
func (UnimplementedOneCloudServer) AddPlatformSubAccount(context.Context, *AddPlatformSubAccountReq) (*AddPlatformSubAccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPlatformSubAccount not implemented")
}
func (UnimplementedOneCloudServer) ListPlatformSubAccount(context.Context, *ListPlatformSubAccountReq) (*ListPlatformSubAccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlatformSubAccount not implemented")
}
func (UnimplementedOneCloudServer) DelPlatformSubAccount(context.Context, *DelPlatformSubAccountReq) (*DelPlatformSubAccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelPlatformSubAccount not implemented")
}
func (UnimplementedOneCloudServer) CreateAccessKey(context.Context, *CreateAccessKeyReq) (*CreateAccessKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccessKey not implemented")
}
func (UnimplementedOneCloudServer) GetAccessKey(context.Context, *GetAccessKeyReq) (*GetAccessKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccessKey not implemented")
}
func (UnimplementedOneCloudServer) DelAccessKey(context.Context, *DelAccessKeyReq) (*DelAccessKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelAccessKey not implemented")
}
func (UnimplementedOneCloudServer) GetSecurityToken(context.Context, *GetSecurityTokenReq) (*GetSecurityTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecurityToken not implemented")
}
func (UnimplementedOneCloudServer) GenerateObjectStorageSecurityTokenPutPolicy(context.Context, *GenerateObjectStorageSecurityTokenPutPolicyReq) (*GenerateObjectStorageSecurityTokenPutPolicyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateObjectStorageSecurityTokenPutPolicy not implemented")
}
func (UnimplementedOneCloudServer) AccountBalance(context.Context, *AccountBalanceReq) (*AccountBalanceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountBalance not implemented")
}
func (UnimplementedOneCloudServer) BuyCertificate(context.Context, *BuyCertificateReq) (*BuyCertificateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyCertificate not implemented")
}
func (UnimplementedOneCloudServer) ParseCertificate(context.Context, *ParseCertificateReq) (*ParseCertificateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseCertificate not implemented")
}
func (UnimplementedOneCloudServer) RecordCertificate(context.Context, *RecordCertificateReq) (*RecordCertificateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordCertificate not implemented")
}
func (UnimplementedOneCloudServer) ListCertificate(context.Context, *ListCertificateReq) (*ListCertificateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCertificate not implemented")
}
func (UnimplementedOneCloudServer) DelCertificate(context.Context, *DelCertificateReq) (*DelCertificateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelCertificate not implemented")
}
func (UnimplementedOneCloudServer) GetCertificateByUuid(context.Context, *GetCertificateByUuidReq) (*GetCertificateByUuidReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCertificateByUuid not implemented")
}
func (UnimplementedOneCloudServer) ListDomainDns(context.Context, *ListDomainDnsReq) (*ListDomainDnsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDomainDns not implemented")
}
func (UnimplementedOneCloudServer) ListCloudDomainDns(context.Context, *ListCloudDomainDnsReq) (*ListCloudDomainDnsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloudDomainDns not implemented")
}
func (UnimplementedOneCloudServer) ImportDomainDns(context.Context, *ImportDomainDnsReq) (*ImportDomainDnsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportDomainDns not implemented")
}
func (UnimplementedOneCloudServer) ListCloudDomainDnsRecord(context.Context, *ListCloudDomainDnsRecordReq) (*ListCloudDomainDnsRecordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloudDomainDnsRecord not implemented")
}
func (UnimplementedOneCloudServer) SyncCloudDomainDnsRecord(context.Context, *SyncCloudDomainDnsRecordReq) (*SyncCloudDomainDnsRecordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncCloudDomainDnsRecord not implemented")
}
func (UnimplementedOneCloudServer) GetSyncCloudDomainDnsRecord(context.Context, *GetSyncCloudDomainDnsRecordReq) (*GetSyncCloudDomainDnsRecordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSyncCloudDomainDnsRecord not implemented")
}
func (UnimplementedOneCloudServer) GetUnSupportSyncCloudDomainDnsRecord(context.Context, *GetUnSupportSyncCloudDomainDnsRecordReq) (*GetUnSupportSyncCloudDomainDnsRecordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnSupportSyncCloudDomainDnsRecord not implemented")
}
func (UnimplementedOneCloudServer) GetECSFamily(context.Context, *GetECSFamilyReq) (*GetECSFamilyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetECSFamily not implemented")
}
func (UnimplementedOneCloudServer) CreateECS(context.Context, *CreateECSReq) (*CreateECSReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateECS not implemented")
}
func (UnimplementedOneCloudServer) DeleteECS(context.Context, *ReleaseECSReq) (*ReleaseECSReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteECS not implemented")
}
func (UnimplementedOneCloudServer) UpdateECS(context.Context, *UpdateECSReq) (*UpdateECSReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateECS not implemented")
}
func (UnimplementedOneCloudServer) ShutdownECS(context.Context, *ShutdownECSReq) (*ShutdownECSReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShutdownECS not implemented")
}
func (UnimplementedOneCloudServer) GetECS(context.Context, *GetECSReq) (*GetECSReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetECS not implemented")
}
func (UnimplementedOneCloudServer) CreateEIP(context.Context, *CreateEIPReq) (*CreateEIPReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEIP not implemented")
}
func (UnimplementedOneCloudServer) GetEIP(context.Context, *GetEIPReq) (*GetEIPReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEIP not implemented")
}
func (UnimplementedOneCloudServer) UpdateEIP(context.Context, *UpdateEIPReq) (*UpdateEIPReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEIP not implemented")
}
func (UnimplementedOneCloudServer) ReleaseEIP(context.Context, *ReleaseEIPReq) (*ReleaseEIPReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseEIP not implemented")
}
func (UnimplementedOneCloudServer) CreateRDS(context.Context, *CreateRDSReq) (*CreateRDSReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRDS not implemented")
}
func (UnimplementedOneCloudServer) GetRDS(context.Context, *GetRDSReq) (*GetRDSReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRDS not implemented")
}
func (UnimplementedOneCloudServer) ListRDS(context.Context, *ListRDSReq) (*ListRDSReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRDS not implemented")
}
func (UnimplementedOneCloudServer) ListRDSSlowLogs(context.Context, *ListRDSSlowLogsReq) (*ListRDSSlowLogsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRDSSlowLogs not implemented")
}
func (UnimplementedOneCloudServer) ListRDSErrLogs(context.Context, *ListRDSErrLogsReq) (*ListRDSErrLogsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRDSErrLogs not implemented")
}
func (UnimplementedOneCloudServer) CreateLB(context.Context, *CreateLBReq) (*CreateLBReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLB not implemented")
}
func (UnimplementedOneCloudServer) GetLB(context.Context, *GetLBReq) (*GetLBReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLB not implemented")
}
func (UnimplementedOneCloudServer) ReleaseLB(context.Context, *ReleaseLBReq) (*ReleaseLBReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseLB not implemented")
}
func (UnimplementedOneCloudServer) ListCDN(context.Context, *ListCDNReq) (*ListCDNReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCDN not implemented")
}
func (UnimplementedOneCloudServer) AddCDN(context.Context, *AddCDNReq) (*AddCDNReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCDN not implemented")
}
func (UnimplementedOneCloudServer) ImportCDN(context.Context, *ImportCDNReq) (*ImportCDNReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportCDN not implemented")
}
func (UnimplementedOneCloudServer) GetCDN(context.Context, *GetCDNReq) (*GetCDNReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCDN not implemented")
}
func (UnimplementedOneCloudServer) ReleaseCDN(context.Context, *ReleaseCDNReq) (*ReleaseCDNReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseCDN not implemented")
}
func (UnimplementedOneCloudServer) UpdateCDN(context.Context, *UpdateCDNReq) (*UpdateCDNReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCDN not implemented")
}
func (UnimplementedOneCloudServer) RefreshCDNCache(context.Context, *RefreshCDNCacheReq) (*RefreshCDNCacheReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshCDNCache not implemented")
}
func (UnimplementedOneCloudServer) GetCDNQuota(context.Context, *GetCDNQuotaReq) (*GetCDNQuotaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCDNQuota not implemented")
}
func (UnimplementedOneCloudServer) IsCdnIp(context.Context, *IsCdnIpReq) (*IsCdnIpReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsCdnIp not implemented")
}
func (UnimplementedOneCloudServer) GetCdnIpStatus(context.Context, *GetCdnIpStatusReq) (*GetCdnIpStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCdnIpStatus not implemented")
}
func (UnimplementedOneCloudServer) ListOSSBucket(context.Context, *ListOSSBucketReq) (*ListOSSBucketReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOSSBucket not implemented")
}
func (UnimplementedOneCloudServer) CreateOSSBucket(context.Context, *CreateOSSBucketReq) (*CreateOSSBucketReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOSSBucket not implemented")
}
func (UnimplementedOneCloudServer) GetOSSBucket(context.Context, *GetOSSBucketReq) (*GetOSSBucketReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOSSBucket not implemented")
}
func (UnimplementedOneCloudServer) DelOSSObject(context.Context, *DelOSSObjectReq) (*DelOSSObjectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelOSSObject not implemented")
}
func (UnimplementedOneCloudServer) GetOSSObjectMeta(context.Context, *GetOSSObjectMetaReq) (*GetOSSObjectMetaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOSSObjectMeta not implemented")
}
func (UnimplementedOneCloudServer) RestoreOSSObject(context.Context, *RestoreOSSObjectReq) (*RestoreOSSObjectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreOSSObject not implemented")
}
func (UnimplementedOneCloudServer) CreateObjectStorageSecurityTokenGenerator(context.Context, *CreateObjectStorageSecurityTokenGeneratorReq) (*CreateObjectStorageSecurityTokenGeneratorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateObjectStorageSecurityTokenGenerator not implemented")
}
func (UnimplementedOneCloudServer) ExistObjectStorageSecurityTokenGenerator(context.Context, *ExistObjectStorageSecurityTokenGeneratorReq) (*ExistObjectStorageSecurityTokenGeneratorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistObjectStorageSecurityTokenGenerator not implemented")
}
func (UnimplementedOneCloudServer) GetObjectStorageSecurityTokenGenerator(context.Context, *GetObjectStorageSecurityTokenGeneratorReq) (*GetObjectStorageSecurityTokenGeneratorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectStorageSecurityTokenGenerator not implemented")
}
func (UnimplementedOneCloudServer) DelObjectStorageSecurityTokenGenerator(context.Context, *DelObjectStorageSecurityTokenGeneratorReq) (*DelObjectStorageSecurityTokenGeneratorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelObjectStorageSecurityTokenGenerator not implemented")
}
func (UnimplementedOneCloudServer) ListObjectStorageSecurityTokenGenerator(context.Context, *ListObjectStorageSecurityTokenGeneratorReq) (*ListObjectStorageSecurityTokenGeneratorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListObjectStorageSecurityTokenGenerator not implemented")
}
func (UnimplementedOneCloudServer) GetObjectStorageSecurityTokenByToken(context.Context, *GetObjectStorageSecurityTokenByTokenReq) (*GetObjectStorageSecurityTokenByTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectStorageSecurityTokenByToken not implemented")
}
func (UnimplementedOneCloudServer) GetObjectStorageSecurityTokenByGenerator(context.Context, *GetObjectStorageSecurityTokenByGeneratorReq) (*GetObjectStorageSecurityTokenByGeneratorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectStorageSecurityTokenByGenerator not implemented")
}
func (UnimplementedOneCloudServer) AddOrgCloudPlatformRegion(context.Context, *AddCloudPlatformRegionReq) (*AddCloudPlatformRegionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrgCloudPlatformRegion not implemented")
}
func (UnimplementedOneCloudServer) DelOrgCloudPlatformRegion(context.Context, *DelCloudPlatformRegionReq) (*DelCloudPlatformRegionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelOrgCloudPlatformRegion not implemented")
}
func (UnimplementedOneCloudServer) ListOrgCloudPlatformRegion(context.Context, *ListCloudPlatformRegionReq) (*ListCloudPlatformRegionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrgCloudPlatformRegion not implemented")
}
func (UnimplementedOneCloudServer) mustEmbedUnimplementedOneCloudServer() {}

// UnsafeOneCloudServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OneCloudServer will
// result in compilation errors.
type UnsafeOneCloudServer interface {
	mustEmbedUnimplementedOneCloudServer()
}

func RegisterOneCloudServer(s grpc.ServiceRegistrar, srv OneCloudServer) {
	s.RegisterService(&OneCloud_ServiceDesc, srv)
}

func _OneCloud_ListSupportPlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSupportPlatformReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).ListSupportPlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_ListSupportPlatform_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).ListSupportPlatform(ctx, req.(*ListSupportPlatformReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_ListPlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPlatformReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).ListPlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_ListPlatform_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).ListPlatform(ctx, req.(*ListPlatformReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_AddPlatformAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPlatformAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).AddPlatformAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_AddPlatformAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).AddPlatformAccount(ctx, req.(*AddPlatformAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_ListPlatformAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPlatformAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).ListPlatformAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_ListPlatformAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).ListPlatformAccount(ctx, req.(*ListPlatformAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_DelPlatformAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelPlatformAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).DelPlatformAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_DelPlatformAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).DelPlatformAccount(ctx, req.(*DelPlatformAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_AddPlatformSubAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPlatformSubAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).AddPlatformSubAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_AddPlatformSubAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).AddPlatformSubAccount(ctx, req.(*AddPlatformSubAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_ListPlatformSubAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPlatformSubAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).ListPlatformSubAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_ListPlatformSubAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).ListPlatformSubAccount(ctx, req.(*ListPlatformSubAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_DelPlatformSubAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelPlatformSubAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).DelPlatformSubAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_DelPlatformSubAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).DelPlatformSubAccount(ctx, req.(*DelPlatformSubAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_CreateAccessKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccessKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).CreateAccessKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_CreateAccessKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).CreateAccessKey(ctx, req.(*CreateAccessKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_GetAccessKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccessKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).GetAccessKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_GetAccessKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).GetAccessKey(ctx, req.(*GetAccessKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_DelAccessKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelAccessKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).DelAccessKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_DelAccessKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).DelAccessKey(ctx, req.(*DelAccessKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_GetSecurityToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecurityTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).GetSecurityToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_GetSecurityToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).GetSecurityToken(ctx, req.(*GetSecurityTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_GenerateObjectStorageSecurityTokenPutPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateObjectStorageSecurityTokenPutPolicyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).GenerateObjectStorageSecurityTokenPutPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_GenerateObjectStorageSecurityTokenPutPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).GenerateObjectStorageSecurityTokenPutPolicy(ctx, req.(*GenerateObjectStorageSecurityTokenPutPolicyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_AccountBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountBalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).AccountBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_AccountBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).AccountBalance(ctx, req.(*AccountBalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_BuyCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyCertificateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).BuyCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_BuyCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).BuyCertificate(ctx, req.(*BuyCertificateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_ParseCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseCertificateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).ParseCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_ParseCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).ParseCertificate(ctx, req.(*ParseCertificateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_RecordCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordCertificateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).RecordCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_RecordCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).RecordCertificate(ctx, req.(*RecordCertificateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_ListCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCertificateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).ListCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_ListCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).ListCertificate(ctx, req.(*ListCertificateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_DelCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelCertificateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).DelCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_DelCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).DelCertificate(ctx, req.(*DelCertificateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_GetCertificateByUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCertificateByUuidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).GetCertificateByUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_GetCertificateByUuid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).GetCertificateByUuid(ctx, req.(*GetCertificateByUuidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_ListDomainDns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDomainDnsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).ListDomainDns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_ListDomainDns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).ListDomainDns(ctx, req.(*ListDomainDnsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_ListCloudDomainDns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloudDomainDnsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).ListCloudDomainDns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_ListCloudDomainDns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).ListCloudDomainDns(ctx, req.(*ListCloudDomainDnsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_ImportDomainDns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportDomainDnsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).ImportDomainDns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_ImportDomainDns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).ImportDomainDns(ctx, req.(*ImportDomainDnsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_ListCloudDomainDnsRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloudDomainDnsRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).ListCloudDomainDnsRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_ListCloudDomainDnsRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).ListCloudDomainDnsRecord(ctx, req.(*ListCloudDomainDnsRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_SyncCloudDomainDnsRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncCloudDomainDnsRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).SyncCloudDomainDnsRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_SyncCloudDomainDnsRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).SyncCloudDomainDnsRecord(ctx, req.(*SyncCloudDomainDnsRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_GetSyncCloudDomainDnsRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSyncCloudDomainDnsRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).GetSyncCloudDomainDnsRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_GetSyncCloudDomainDnsRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).GetSyncCloudDomainDnsRecord(ctx, req.(*GetSyncCloudDomainDnsRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_GetUnSupportSyncCloudDomainDnsRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnSupportSyncCloudDomainDnsRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).GetUnSupportSyncCloudDomainDnsRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_GetUnSupportSyncCloudDomainDnsRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).GetUnSupportSyncCloudDomainDnsRecord(ctx, req.(*GetUnSupportSyncCloudDomainDnsRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_GetECSFamily_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetECSFamilyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).GetECSFamily(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_GetECSFamily_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).GetECSFamily(ctx, req.(*GetECSFamilyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_CreateECS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateECSReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).CreateECS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_CreateECS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).CreateECS(ctx, req.(*CreateECSReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_DeleteECS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseECSReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).DeleteECS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_DeleteECS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).DeleteECS(ctx, req.(*ReleaseECSReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_UpdateECS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateECSReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).UpdateECS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_UpdateECS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).UpdateECS(ctx, req.(*UpdateECSReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_ShutdownECS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownECSReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).ShutdownECS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_ShutdownECS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).ShutdownECS(ctx, req.(*ShutdownECSReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_GetECS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetECSReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).GetECS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_GetECS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).GetECS(ctx, req.(*GetECSReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_CreateEIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEIPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).CreateEIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_CreateEIP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).CreateEIP(ctx, req.(*CreateEIPReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_GetEIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEIPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).GetEIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_GetEIP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).GetEIP(ctx, req.(*GetEIPReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_UpdateEIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEIPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).UpdateEIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_UpdateEIP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).UpdateEIP(ctx, req.(*UpdateEIPReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_ReleaseEIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseEIPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).ReleaseEIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_ReleaseEIP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).ReleaseEIP(ctx, req.(*ReleaseEIPReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_CreateRDS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRDSReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).CreateRDS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_CreateRDS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).CreateRDS(ctx, req.(*CreateRDSReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_GetRDS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRDSReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).GetRDS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_GetRDS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).GetRDS(ctx, req.(*GetRDSReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_ListRDS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRDSReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).ListRDS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_ListRDS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).ListRDS(ctx, req.(*ListRDSReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_ListRDSSlowLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRDSSlowLogsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).ListRDSSlowLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_ListRDSSlowLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).ListRDSSlowLogs(ctx, req.(*ListRDSSlowLogsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_ListRDSErrLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRDSErrLogsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).ListRDSErrLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_ListRDSErrLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).ListRDSErrLogs(ctx, req.(*ListRDSErrLogsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_CreateLB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLBReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).CreateLB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_CreateLB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).CreateLB(ctx, req.(*CreateLBReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_GetLB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLBReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).GetLB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_GetLB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).GetLB(ctx, req.(*GetLBReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_ReleaseLB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseLBReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).ReleaseLB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_ReleaseLB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).ReleaseLB(ctx, req.(*ReleaseLBReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_ListCDN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCDNReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).ListCDN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_ListCDN_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).ListCDN(ctx, req.(*ListCDNReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_AddCDN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCDNReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).AddCDN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_AddCDN_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).AddCDN(ctx, req.(*AddCDNReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_ImportCDN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportCDNReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).ImportCDN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_ImportCDN_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).ImportCDN(ctx, req.(*ImportCDNReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_GetCDN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCDNReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).GetCDN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_GetCDN_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).GetCDN(ctx, req.(*GetCDNReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_ReleaseCDN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseCDNReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).ReleaseCDN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_ReleaseCDN_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).ReleaseCDN(ctx, req.(*ReleaseCDNReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_UpdateCDN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCDNReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).UpdateCDN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_UpdateCDN_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).UpdateCDN(ctx, req.(*UpdateCDNReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_RefreshCDNCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshCDNCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).RefreshCDNCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_RefreshCDNCache_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).RefreshCDNCache(ctx, req.(*RefreshCDNCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_GetCDNQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCDNQuotaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).GetCDNQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_GetCDNQuota_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).GetCDNQuota(ctx, req.(*GetCDNQuotaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_IsCdnIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsCdnIpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).IsCdnIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_IsCdnIp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).IsCdnIp(ctx, req.(*IsCdnIpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_GetCdnIpStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCdnIpStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).GetCdnIpStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_GetCdnIpStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).GetCdnIpStatus(ctx, req.(*GetCdnIpStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_ListOSSBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOSSBucketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).ListOSSBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_ListOSSBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).ListOSSBucket(ctx, req.(*ListOSSBucketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_CreateOSSBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOSSBucketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).CreateOSSBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_CreateOSSBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).CreateOSSBucket(ctx, req.(*CreateOSSBucketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_GetOSSBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOSSBucketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).GetOSSBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_GetOSSBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).GetOSSBucket(ctx, req.(*GetOSSBucketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_DelOSSObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelOSSObjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).DelOSSObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_DelOSSObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).DelOSSObject(ctx, req.(*DelOSSObjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_GetOSSObjectMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOSSObjectMetaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).GetOSSObjectMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_GetOSSObjectMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).GetOSSObjectMeta(ctx, req.(*GetOSSObjectMetaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_RestoreOSSObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreOSSObjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).RestoreOSSObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_RestoreOSSObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).RestoreOSSObject(ctx, req.(*RestoreOSSObjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_CreateObjectStorageSecurityTokenGenerator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateObjectStorageSecurityTokenGeneratorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).CreateObjectStorageSecurityTokenGenerator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_CreateObjectStorageSecurityTokenGenerator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).CreateObjectStorageSecurityTokenGenerator(ctx, req.(*CreateObjectStorageSecurityTokenGeneratorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_ExistObjectStorageSecurityTokenGenerator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistObjectStorageSecurityTokenGeneratorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).ExistObjectStorageSecurityTokenGenerator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_ExistObjectStorageSecurityTokenGenerator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).ExistObjectStorageSecurityTokenGenerator(ctx, req.(*ExistObjectStorageSecurityTokenGeneratorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_GetObjectStorageSecurityTokenGenerator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectStorageSecurityTokenGeneratorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).GetObjectStorageSecurityTokenGenerator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_GetObjectStorageSecurityTokenGenerator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).GetObjectStorageSecurityTokenGenerator(ctx, req.(*GetObjectStorageSecurityTokenGeneratorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_DelObjectStorageSecurityTokenGenerator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelObjectStorageSecurityTokenGeneratorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).DelObjectStorageSecurityTokenGenerator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_DelObjectStorageSecurityTokenGenerator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).DelObjectStorageSecurityTokenGenerator(ctx, req.(*DelObjectStorageSecurityTokenGeneratorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_ListObjectStorageSecurityTokenGenerator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListObjectStorageSecurityTokenGeneratorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).ListObjectStorageSecurityTokenGenerator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_ListObjectStorageSecurityTokenGenerator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).ListObjectStorageSecurityTokenGenerator(ctx, req.(*ListObjectStorageSecurityTokenGeneratorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_GetObjectStorageSecurityTokenByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectStorageSecurityTokenByTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).GetObjectStorageSecurityTokenByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_GetObjectStorageSecurityTokenByToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).GetObjectStorageSecurityTokenByToken(ctx, req.(*GetObjectStorageSecurityTokenByTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_GetObjectStorageSecurityTokenByGenerator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectStorageSecurityTokenByGeneratorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).GetObjectStorageSecurityTokenByGenerator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_GetObjectStorageSecurityTokenByGenerator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).GetObjectStorageSecurityTokenByGenerator(ctx, req.(*GetObjectStorageSecurityTokenByGeneratorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_AddOrgCloudPlatformRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCloudPlatformRegionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).AddOrgCloudPlatformRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_AddOrgCloudPlatformRegion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).AddOrgCloudPlatformRegion(ctx, req.(*AddCloudPlatformRegionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_DelOrgCloudPlatformRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelCloudPlatformRegionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).DelOrgCloudPlatformRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_DelOrgCloudPlatformRegion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).DelOrgCloudPlatformRegion(ctx, req.(*DelCloudPlatformRegionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneCloud_ListOrgCloudPlatformRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloudPlatformRegionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneCloudServer).ListOrgCloudPlatformRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneCloud_ListOrgCloudPlatformRegion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneCloudServer).ListOrgCloudPlatformRegion(ctx, req.(*ListCloudPlatformRegionReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OneCloud_ServiceDesc is the grpc.ServiceDesc for OneCloud service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OneCloud_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "oneCloud.v1.oneCloud",
	HandlerType: (*OneCloudServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSupportPlatform",
			Handler:    _OneCloud_ListSupportPlatform_Handler,
		},
		{
			MethodName: "ListPlatform",
			Handler:    _OneCloud_ListPlatform_Handler,
		},
		{
			MethodName: "AddPlatformAccount",
			Handler:    _OneCloud_AddPlatformAccount_Handler,
		},
		{
			MethodName: "ListPlatformAccount",
			Handler:    _OneCloud_ListPlatformAccount_Handler,
		},
		{
			MethodName: "DelPlatformAccount",
			Handler:    _OneCloud_DelPlatformAccount_Handler,
		},
		{
			MethodName: "AddPlatformSubAccount",
			Handler:    _OneCloud_AddPlatformSubAccount_Handler,
		},
		{
			MethodName: "ListPlatformSubAccount",
			Handler:    _OneCloud_ListPlatformSubAccount_Handler,
		},
		{
			MethodName: "DelPlatformSubAccount",
			Handler:    _OneCloud_DelPlatformSubAccount_Handler,
		},
		{
			MethodName: "CreateAccessKey",
			Handler:    _OneCloud_CreateAccessKey_Handler,
		},
		{
			MethodName: "GetAccessKey",
			Handler:    _OneCloud_GetAccessKey_Handler,
		},
		{
			MethodName: "DelAccessKey",
			Handler:    _OneCloud_DelAccessKey_Handler,
		},
		{
			MethodName: "GetSecurityToken",
			Handler:    _OneCloud_GetSecurityToken_Handler,
		},
		{
			MethodName: "GenerateObjectStorageSecurityTokenPutPolicy",
			Handler:    _OneCloud_GenerateObjectStorageSecurityTokenPutPolicy_Handler,
		},
		{
			MethodName: "AccountBalance",
			Handler:    _OneCloud_AccountBalance_Handler,
		},
		{
			MethodName: "BuyCertificate",
			Handler:    _OneCloud_BuyCertificate_Handler,
		},
		{
			MethodName: "ParseCertificate",
			Handler:    _OneCloud_ParseCertificate_Handler,
		},
		{
			MethodName: "RecordCertificate",
			Handler:    _OneCloud_RecordCertificate_Handler,
		},
		{
			MethodName: "ListCertificate",
			Handler:    _OneCloud_ListCertificate_Handler,
		},
		{
			MethodName: "DelCertificate",
			Handler:    _OneCloud_DelCertificate_Handler,
		},
		{
			MethodName: "GetCertificateByUuid",
			Handler:    _OneCloud_GetCertificateByUuid_Handler,
		},
		{
			MethodName: "ListDomainDns",
			Handler:    _OneCloud_ListDomainDns_Handler,
		},
		{
			MethodName: "ListCloudDomainDns",
			Handler:    _OneCloud_ListCloudDomainDns_Handler,
		},
		{
			MethodName: "ImportDomainDns",
			Handler:    _OneCloud_ImportDomainDns_Handler,
		},
		{
			MethodName: "ListCloudDomainDnsRecord",
			Handler:    _OneCloud_ListCloudDomainDnsRecord_Handler,
		},
		{
			MethodName: "SyncCloudDomainDnsRecord",
			Handler:    _OneCloud_SyncCloudDomainDnsRecord_Handler,
		},
		{
			MethodName: "GetSyncCloudDomainDnsRecord",
			Handler:    _OneCloud_GetSyncCloudDomainDnsRecord_Handler,
		},
		{
			MethodName: "GetUnSupportSyncCloudDomainDnsRecord",
			Handler:    _OneCloud_GetUnSupportSyncCloudDomainDnsRecord_Handler,
		},
		{
			MethodName: "GetECSFamily",
			Handler:    _OneCloud_GetECSFamily_Handler,
		},
		{
			MethodName: "CreateECS",
			Handler:    _OneCloud_CreateECS_Handler,
		},
		{
			MethodName: "DeleteECS",
			Handler:    _OneCloud_DeleteECS_Handler,
		},
		{
			MethodName: "UpdateECS",
			Handler:    _OneCloud_UpdateECS_Handler,
		},
		{
			MethodName: "ShutdownECS",
			Handler:    _OneCloud_ShutdownECS_Handler,
		},
		{
			MethodName: "GetECS",
			Handler:    _OneCloud_GetECS_Handler,
		},
		{
			MethodName: "CreateEIP",
			Handler:    _OneCloud_CreateEIP_Handler,
		},
		{
			MethodName: "GetEIP",
			Handler:    _OneCloud_GetEIP_Handler,
		},
		{
			MethodName: "UpdateEIP",
			Handler:    _OneCloud_UpdateEIP_Handler,
		},
		{
			MethodName: "ReleaseEIP",
			Handler:    _OneCloud_ReleaseEIP_Handler,
		},
		{
			MethodName: "CreateRDS",
			Handler:    _OneCloud_CreateRDS_Handler,
		},
		{
			MethodName: "GetRDS",
			Handler:    _OneCloud_GetRDS_Handler,
		},
		{
			MethodName: "ListRDS",
			Handler:    _OneCloud_ListRDS_Handler,
		},
		{
			MethodName: "ListRDSSlowLogs",
			Handler:    _OneCloud_ListRDSSlowLogs_Handler,
		},
		{
			MethodName: "ListRDSErrLogs",
			Handler:    _OneCloud_ListRDSErrLogs_Handler,
		},
		{
			MethodName: "CreateLB",
			Handler:    _OneCloud_CreateLB_Handler,
		},
		{
			MethodName: "GetLB",
			Handler:    _OneCloud_GetLB_Handler,
		},
		{
			MethodName: "ReleaseLB",
			Handler:    _OneCloud_ReleaseLB_Handler,
		},
		{
			MethodName: "ListCDN",
			Handler:    _OneCloud_ListCDN_Handler,
		},
		{
			MethodName: "AddCDN",
			Handler:    _OneCloud_AddCDN_Handler,
		},
		{
			MethodName: "ImportCDN",
			Handler:    _OneCloud_ImportCDN_Handler,
		},
		{
			MethodName: "GetCDN",
			Handler:    _OneCloud_GetCDN_Handler,
		},
		{
			MethodName: "ReleaseCDN",
			Handler:    _OneCloud_ReleaseCDN_Handler,
		},
		{
			MethodName: "UpdateCDN",
			Handler:    _OneCloud_UpdateCDN_Handler,
		},
		{
			MethodName: "RefreshCDNCache",
			Handler:    _OneCloud_RefreshCDNCache_Handler,
		},
		{
			MethodName: "GetCDNQuota",
			Handler:    _OneCloud_GetCDNQuota_Handler,
		},
		{
			MethodName: "IsCdnIp",
			Handler:    _OneCloud_IsCdnIp_Handler,
		},
		{
			MethodName: "GetCdnIpStatus",
			Handler:    _OneCloud_GetCdnIpStatus_Handler,
		},
		{
			MethodName: "ListOSSBucket",
			Handler:    _OneCloud_ListOSSBucket_Handler,
		},
		{
			MethodName: "CreateOSSBucket",
			Handler:    _OneCloud_CreateOSSBucket_Handler,
		},
		{
			MethodName: "GetOSSBucket",
			Handler:    _OneCloud_GetOSSBucket_Handler,
		},
		{
			MethodName: "DelOSSObject",
			Handler:    _OneCloud_DelOSSObject_Handler,
		},
		{
			MethodName: "GetOSSObjectMeta",
			Handler:    _OneCloud_GetOSSObjectMeta_Handler,
		},
		{
			MethodName: "RestoreOSSObject",
			Handler:    _OneCloud_RestoreOSSObject_Handler,
		},
		{
			MethodName: "CreateObjectStorageSecurityTokenGenerator",
			Handler:    _OneCloud_CreateObjectStorageSecurityTokenGenerator_Handler,
		},
		{
			MethodName: "ExistObjectStorageSecurityTokenGenerator",
			Handler:    _OneCloud_ExistObjectStorageSecurityTokenGenerator_Handler,
		},
		{
			MethodName: "GetObjectStorageSecurityTokenGenerator",
			Handler:    _OneCloud_GetObjectStorageSecurityTokenGenerator_Handler,
		},
		{
			MethodName: "DelObjectStorageSecurityTokenGenerator",
			Handler:    _OneCloud_DelObjectStorageSecurityTokenGenerator_Handler,
		},
		{
			MethodName: "ListObjectStorageSecurityTokenGenerator",
			Handler:    _OneCloud_ListObjectStorageSecurityTokenGenerator_Handler,
		},
		{
			MethodName: "GetObjectStorageSecurityTokenByToken",
			Handler:    _OneCloud_GetObjectStorageSecurityTokenByToken_Handler,
		},
		{
			MethodName: "GetObjectStorageSecurityTokenByGenerator",
			Handler:    _OneCloud_GetObjectStorageSecurityTokenByGenerator_Handler,
		},
		{
			MethodName: "AddOrgCloudPlatformRegion",
			Handler:    _OneCloud_AddOrgCloudPlatformRegion_Handler,
		},
		{
			MethodName: "DelOrgCloudPlatformRegion",
			Handler:    _OneCloud_DelOrgCloudPlatformRegion_Handler,
		},
		{
			MethodName: "ListOrgCloudPlatformRegion",
			Handler:    _OneCloud_ListOrgCloudPlatformRegion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oneCloud/v1/oneCloud.proto",
}
