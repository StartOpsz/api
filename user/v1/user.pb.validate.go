// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/user/v1/user.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetRegisterUserVerifyCodeReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRegisterUserVerifyCodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRegisterUserVerifyCodeReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRegisterUserVerifyCodeReqMultiError, or nil if none found.
func (m *GetRegisterUserVerifyCodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRegisterUserVerifyCodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PhoneNumber

	if len(errors) > 0 {
		return GetRegisterUserVerifyCodeReqMultiError(errors)
	}

	return nil
}

// GetRegisterUserVerifyCodeReqMultiError is an error wrapping multiple
// validation errors returned by GetRegisterUserVerifyCodeReq.ValidateAll() if
// the designated constraints aren't met.
type GetRegisterUserVerifyCodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRegisterUserVerifyCodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRegisterUserVerifyCodeReqMultiError) AllErrors() []error { return m }

// GetRegisterUserVerifyCodeReqValidationError is the validation error returned
// by GetRegisterUserVerifyCodeReq.Validate if the designated constraints
// aren't met.
type GetRegisterUserVerifyCodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRegisterUserVerifyCodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRegisterUserVerifyCodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRegisterUserVerifyCodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRegisterUserVerifyCodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRegisterUserVerifyCodeReqValidationError) ErrorName() string {
	return "GetRegisterUserVerifyCodeReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetRegisterUserVerifyCodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRegisterUserVerifyCodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRegisterUserVerifyCodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRegisterUserVerifyCodeReqValidationError{}

// Validate checks the field values on GetRegisterUserVerifyCodeReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRegisterUserVerifyCodeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRegisterUserVerifyCodeReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetRegisterUserVerifyCodeReplyMultiError, or nil if none found.
func (m *GetRegisterUserVerifyCodeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRegisterUserVerifyCodeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return GetRegisterUserVerifyCodeReplyMultiError(errors)
	}

	return nil
}

// GetRegisterUserVerifyCodeReplyMultiError is an error wrapping multiple
// validation errors returned by GetRegisterUserVerifyCodeReply.ValidateAll()
// if the designated constraints aren't met.
type GetRegisterUserVerifyCodeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRegisterUserVerifyCodeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRegisterUserVerifyCodeReplyMultiError) AllErrors() []error { return m }

// GetRegisterUserVerifyCodeReplyValidationError is the validation error
// returned by GetRegisterUserVerifyCodeReply.Validate if the designated
// constraints aren't met.
type GetRegisterUserVerifyCodeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRegisterUserVerifyCodeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRegisterUserVerifyCodeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRegisterUserVerifyCodeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRegisterUserVerifyCodeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRegisterUserVerifyCodeReplyValidationError) ErrorName() string {
	return "GetRegisterUserVerifyCodeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetRegisterUserVerifyCodeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRegisterUserVerifyCodeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRegisterUserVerifyCodeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRegisterUserVerifyCodeReplyValidationError{}

// Validate checks the field values on RegisterUserReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterUserReqMultiError, or nil if none found.
func (m *RegisterUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserName

	// no validation rules for NickName

	if utf8.RuneCountInString(m.GetPassword()) < 7 {
		err := RegisterUserReqValidationError{
			field:  "Password",
			reason: "value length must be at least 7 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PhoneRegion

	// no validation rules for Phone

	// no validation rules for VerifyCode

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = RegisterUserReqValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RegisterUserReqMultiError(errors)
	}

	return nil
}

func (m *RegisterUserReq) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *RegisterUserReq) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// RegisterUserReqMultiError is an error wrapping multiple validation errors
// returned by RegisterUserReq.ValidateAll() if the designated constraints
// aren't met.
type RegisterUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterUserReqMultiError) AllErrors() []error { return m }

// RegisterUserReqValidationError is the validation error returned by
// RegisterUserReq.Validate if the designated constraints aren't met.
type RegisterUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterUserReqValidationError) ErrorName() string { return "RegisterUserReqValidationError" }

// Error satisfies the builtin error interface
func (e RegisterUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterUserReqValidationError{}

// Validate checks the field values on RegisterUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterUserReplyMultiError, or nil if none found.
func (m *RegisterUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return RegisterUserReplyMultiError(errors)
	}

	return nil
}

// RegisterUserReplyMultiError is an error wrapping multiple validation errors
// returned by RegisterUserReply.ValidateAll() if the designated constraints
// aren't met.
type RegisterUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterUserReplyMultiError) AllErrors() []error { return m }

// RegisterUserReplyValidationError is the validation error returned by
// RegisterUserReply.Validate if the designated constraints aren't met.
type RegisterUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterUserReplyValidationError) ErrorName() string {
	return "RegisterUserReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterUserReplyValidationError{}

// Validate checks the field values on ExistUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExistUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExistUserReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExistUserReqMultiError, or
// nil if none found.
func (m *ExistUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ExistUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserName

	// no validation rules for Phone

	// no validation rules for Email

	if len(errors) > 0 {
		return ExistUserReqMultiError(errors)
	}

	return nil
}

// ExistUserReqMultiError is an error wrapping multiple validation errors
// returned by ExistUserReq.ValidateAll() if the designated constraints aren't met.
type ExistUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExistUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExistUserReqMultiError) AllErrors() []error { return m }

// ExistUserReqValidationError is the validation error returned by
// ExistUserReq.Validate if the designated constraints aren't met.
type ExistUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExistUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExistUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExistUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExistUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExistUserReqValidationError) ErrorName() string { return "ExistUserReqValidationError" }

// Error satisfies the builtin error interface
func (e ExistUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExistUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExistUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExistUserReqValidationError{}

// Validate checks the field values on ExistUserReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExistUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExistUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExistUserReplyMultiError,
// or nil if none found.
func (m *ExistUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ExistUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exists

	// no validation rules for Uuid

	if len(errors) > 0 {
		return ExistUserReplyMultiError(errors)
	}

	return nil
}

// ExistUserReplyMultiError is an error wrapping multiple validation errors
// returned by ExistUserReply.ValidateAll() if the designated constraints
// aren't met.
type ExistUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExistUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExistUserReplyMultiError) AllErrors() []error { return m }

// ExistUserReplyValidationError is the validation error returned by
// ExistUserReply.Validate if the designated constraints aren't met.
type ExistUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExistUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExistUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExistUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExistUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExistUserReplyValidationError) ErrorName() string { return "ExistUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e ExistUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExistUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExistUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExistUserReplyValidationError{}

// Validate checks the field values on GetLoginVerifyCodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLoginVerifyCodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLoginVerifyCodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLoginVerifyCodeReqMultiError, or nil if none found.
func (m *GetLoginVerifyCodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLoginVerifyCodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PhoneNumber

	if len(errors) > 0 {
		return GetLoginVerifyCodeReqMultiError(errors)
	}

	return nil
}

// GetLoginVerifyCodeReqMultiError is an error wrapping multiple validation
// errors returned by GetLoginVerifyCodeReq.ValidateAll() if the designated
// constraints aren't met.
type GetLoginVerifyCodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLoginVerifyCodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLoginVerifyCodeReqMultiError) AllErrors() []error { return m }

// GetLoginVerifyCodeReqValidationError is the validation error returned by
// GetLoginVerifyCodeReq.Validate if the designated constraints aren't met.
type GetLoginVerifyCodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLoginVerifyCodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLoginVerifyCodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLoginVerifyCodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLoginVerifyCodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLoginVerifyCodeReqValidationError) ErrorName() string {
	return "GetLoginVerifyCodeReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetLoginVerifyCodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLoginVerifyCodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLoginVerifyCodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLoginVerifyCodeReqValidationError{}

// Validate checks the field values on GetLoginVerifyCodeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLoginVerifyCodeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLoginVerifyCodeReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLoginVerifyCodeReplyMultiError, or nil if none found.
func (m *GetLoginVerifyCodeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLoginVerifyCodeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return GetLoginVerifyCodeReplyMultiError(errors)
	}

	return nil
}

// GetLoginVerifyCodeReplyMultiError is an error wrapping multiple validation
// errors returned by GetLoginVerifyCodeReply.ValidateAll() if the designated
// constraints aren't met.
type GetLoginVerifyCodeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLoginVerifyCodeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLoginVerifyCodeReplyMultiError) AllErrors() []error { return m }

// GetLoginVerifyCodeReplyValidationError is the validation error returned by
// GetLoginVerifyCodeReply.Validate if the designated constraints aren't met.
type GetLoginVerifyCodeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLoginVerifyCodeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLoginVerifyCodeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLoginVerifyCodeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLoginVerifyCodeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLoginVerifyCodeReplyValidationError) ErrorName() string {
	return "GetLoginVerifyCodeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetLoginVerifyCodeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLoginVerifyCodeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLoginVerifyCodeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLoginVerifyCodeReplyValidationError{}

// Validate checks the field values on LoginByVerifyCodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoginByVerifyCodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginByVerifyCodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginByVerifyCodeReqMultiError, or nil if none found.
func (m *LoginByVerifyCodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginByVerifyCodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PhoneNumber

	// no validation rules for VerifyCode

	if len(errors) > 0 {
		return LoginByVerifyCodeReqMultiError(errors)
	}

	return nil
}

// LoginByVerifyCodeReqMultiError is an error wrapping multiple validation
// errors returned by LoginByVerifyCodeReq.ValidateAll() if the designated
// constraints aren't met.
type LoginByVerifyCodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginByVerifyCodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginByVerifyCodeReqMultiError) AllErrors() []error { return m }

// LoginByVerifyCodeReqValidationError is the validation error returned by
// LoginByVerifyCodeReq.Validate if the designated constraints aren't met.
type LoginByVerifyCodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginByVerifyCodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginByVerifyCodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginByVerifyCodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginByVerifyCodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginByVerifyCodeReqValidationError) ErrorName() string {
	return "LoginByVerifyCodeReqValidationError"
}

// Error satisfies the builtin error interface
func (e LoginByVerifyCodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginByVerifyCodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginByVerifyCodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginByVerifyCodeReqValidationError{}

// Validate checks the field values on LoginByVerifyCodeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoginByVerifyCodeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginByVerifyCodeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginByVerifyCodeReplyMultiError, or nil if none found.
func (m *LoginByVerifyCodeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginByVerifyCodeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserUuid

	// no validation rules for Token

	// no validation rules for Expired

	if len(errors) > 0 {
		return LoginByVerifyCodeReplyMultiError(errors)
	}

	return nil
}

// LoginByVerifyCodeReplyMultiError is an error wrapping multiple validation
// errors returned by LoginByVerifyCodeReply.ValidateAll() if the designated
// constraints aren't met.
type LoginByVerifyCodeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginByVerifyCodeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginByVerifyCodeReplyMultiError) AllErrors() []error { return m }

// LoginByVerifyCodeReplyValidationError is the validation error returned by
// LoginByVerifyCodeReply.Validate if the designated constraints aren't met.
type LoginByVerifyCodeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginByVerifyCodeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginByVerifyCodeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginByVerifyCodeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginByVerifyCodeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginByVerifyCodeReplyValidationError) ErrorName() string {
	return "LoginByVerifyCodeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e LoginByVerifyCodeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginByVerifyCodeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginByVerifyCodeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginByVerifyCodeReplyValidationError{}

// Validate checks the field values on LoginReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginReqMultiError, or nil
// if none found.
func (m *LoginReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Phone

	// no validation rules for Email

	if utf8.RuneCountInString(m.GetPassword()) < 7 {
		err := LoginReqValidationError{
			field:  "Password",
			reason: "value length must be at least 7 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LoginReqMultiError(errors)
	}

	return nil
}

// LoginReqMultiError is an error wrapping multiple validation errors returned
// by LoginReq.ValidateAll() if the designated constraints aren't met.
type LoginReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginReqMultiError) AllErrors() []error { return m }

// LoginReqValidationError is the validation error returned by
// LoginReq.Validate if the designated constraints aren't met.
type LoginReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginReqValidationError) ErrorName() string { return "LoginReqValidationError" }

// Error satisfies the builtin error interface
func (e LoginReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginReqValidationError{}

// Validate checks the field values on LoginReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginReplyMultiError, or
// nil if none found.
func (m *LoginReply) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserUuid

	// no validation rules for Token

	// no validation rules for Expired

	if len(errors) > 0 {
		return LoginReplyMultiError(errors)
	}

	return nil
}

// LoginReplyMultiError is an error wrapping multiple validation errors
// returned by LoginReply.ValidateAll() if the designated constraints aren't met.
type LoginReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginReplyMultiError) AllErrors() []error { return m }

// LoginReplyValidationError is the validation error returned by
// LoginReply.Validate if the designated constraints aren't met.
type LoginReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginReplyValidationError) ErrorName() string { return "LoginReplyValidationError" }

// Error satisfies the builtin error interface
func (e LoginReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginReplyValidationError{}

// Validate checks the field values on LogoutReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutReqMultiError, or nil
// if none found.
func (m *LogoutReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetToken()) < 1 {
		err := LogoutReqValidationError{
			field:  "Token",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LogoutReqMultiError(errors)
	}

	return nil
}

// LogoutReqMultiError is an error wrapping multiple validation errors returned
// by LogoutReq.ValidateAll() if the designated constraints aren't met.
type LogoutReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutReqMultiError) AllErrors() []error { return m }

// LogoutReqValidationError is the validation error returned by
// LogoutReq.Validate if the designated constraints aren't met.
type LogoutReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutReqValidationError) ErrorName() string { return "LogoutReqValidationError" }

// Error satisfies the builtin error interface
func (e LogoutReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutReqValidationError{}

// Validate checks the field values on LogoutReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutReplyMultiError, or
// nil if none found.
func (m *LogoutReply) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LogoutReplyMultiError(errors)
	}

	return nil
}

// LogoutReplyMultiError is an error wrapping multiple validation errors
// returned by LogoutReply.ValidateAll() if the designated constraints aren't met.
type LogoutReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutReplyMultiError) AllErrors() []error { return m }

// LogoutReplyValidationError is the validation error returned by
// LogoutReply.Validate if the designated constraints aren't met.
type LogoutReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutReplyValidationError) ErrorName() string { return "LogoutReplyValidationError" }

// Error satisfies the builtin error interface
func (e LogoutReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutReplyValidationError{}

// Validate checks the field values on GetUserByTokenReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserByTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserByTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserByTokenReqMultiError, or nil if none found.
func (m *GetUserByTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserByTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetToken()) < 1 {
		err := GetUserByTokenReqValidationError{
			field:  "Token",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserByTokenReqMultiError(errors)
	}

	return nil
}

// GetUserByTokenReqMultiError is an error wrapping multiple validation errors
// returned by GetUserByTokenReq.ValidateAll() if the designated constraints
// aren't met.
type GetUserByTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserByTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserByTokenReqMultiError) AllErrors() []error { return m }

// GetUserByTokenReqValidationError is the validation error returned by
// GetUserByTokenReq.Validate if the designated constraints aren't met.
type GetUserByTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByTokenReqValidationError) ErrorName() string {
	return "GetUserByTokenReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByTokenReqValidationError{}

// Validate checks the field values on GetUserByTokenReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserByTokenReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserByTokenReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserByTokenReplyMultiError, or nil if none found.
func (m *GetUserByTokenReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserByTokenReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for UserName

	// no validation rules for NickName

	// no validation rules for Phone

	// no validation rules for PhoneRegion

	// no validation rules for Email

	// no validation rules for IsActive

	// no validation rules for DateJoined

	// no validation rules for LastLogin

	if len(errors) > 0 {
		return GetUserByTokenReplyMultiError(errors)
	}

	return nil
}

// GetUserByTokenReplyMultiError is an error wrapping multiple validation
// errors returned by GetUserByTokenReply.ValidateAll() if the designated
// constraints aren't met.
type GetUserByTokenReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserByTokenReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserByTokenReplyMultiError) AllErrors() []error { return m }

// GetUserByTokenReplyValidationError is the validation error returned by
// GetUserByTokenReply.Validate if the designated constraints aren't met.
type GetUserByTokenReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByTokenReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByTokenReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByTokenReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByTokenReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByTokenReplyValidationError) ErrorName() string {
	return "GetUserByTokenReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByTokenReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByTokenReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByTokenReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByTokenReplyValidationError{}

// Validate checks the field values on GetUserByUuidReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserByUuidReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserByUuidReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserByUuidReqMultiError, or nil if none found.
func (m *GetUserByUuidReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserByUuidReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := GetUserByUuidReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserByUuidReqMultiError(errors)
	}

	return nil
}

// GetUserByUuidReqMultiError is an error wrapping multiple validation errors
// returned by GetUserByUuidReq.ValidateAll() if the designated constraints
// aren't met.
type GetUserByUuidReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserByUuidReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserByUuidReqMultiError) AllErrors() []error { return m }

// GetUserByUuidReqValidationError is the validation error returned by
// GetUserByUuidReq.Validate if the designated constraints aren't met.
type GetUserByUuidReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByUuidReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByUuidReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByUuidReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByUuidReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByUuidReqValidationError) ErrorName() string { return "GetUserByUuidReqValidationError" }

// Error satisfies the builtin error interface
func (e GetUserByUuidReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByUuidReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByUuidReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByUuidReqValidationError{}

// Validate checks the field values on GetUserByUuidReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserByUuidReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserByUuidReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserByUuidReplyMultiError, or nil if none found.
func (m *GetUserByUuidReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserByUuidReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for UserName

	// no validation rules for NickName

	// no validation rules for Phone

	// no validation rules for PhoneRegion

	// no validation rules for Email

	// no validation rules for IsActive

	// no validation rules for DateJoined

	// no validation rules for LastLogin

	if len(errors) > 0 {
		return GetUserByUuidReplyMultiError(errors)
	}

	return nil
}

// GetUserByUuidReplyMultiError is an error wrapping multiple validation errors
// returned by GetUserByUuidReply.ValidateAll() if the designated constraints
// aren't met.
type GetUserByUuidReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserByUuidReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserByUuidReplyMultiError) AllErrors() []error { return m }

// GetUserByUuidReplyValidationError is the validation error returned by
// GetUserByUuidReply.Validate if the designated constraints aren't met.
type GetUserByUuidReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByUuidReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByUuidReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByUuidReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByUuidReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByUuidReplyValidationError) ErrorName() string {
	return "GetUserByUuidReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByUuidReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByUuidReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByUuidReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByUuidReplyValidationError{}

// Validate checks the field values on GetForgotPasswdVerifyCodeReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetForgotPasswdVerifyCodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetForgotPasswdVerifyCodeReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetForgotPasswdVerifyCodeReqMultiError, or nil if none found.
func (m *GetForgotPasswdVerifyCodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetForgotPasswdVerifyCodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPhoneNumber()) < 1 {
		err := GetForgotPasswdVerifyCodeReqValidationError{
			field:  "PhoneNumber",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetForgotPasswdVerifyCodeReqMultiError(errors)
	}

	return nil
}

// GetForgotPasswdVerifyCodeReqMultiError is an error wrapping multiple
// validation errors returned by GetForgotPasswdVerifyCodeReq.ValidateAll() if
// the designated constraints aren't met.
type GetForgotPasswdVerifyCodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetForgotPasswdVerifyCodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetForgotPasswdVerifyCodeReqMultiError) AllErrors() []error { return m }

// GetForgotPasswdVerifyCodeReqValidationError is the validation error returned
// by GetForgotPasswdVerifyCodeReq.Validate if the designated constraints
// aren't met.
type GetForgotPasswdVerifyCodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetForgotPasswdVerifyCodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetForgotPasswdVerifyCodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetForgotPasswdVerifyCodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetForgotPasswdVerifyCodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetForgotPasswdVerifyCodeReqValidationError) ErrorName() string {
	return "GetForgotPasswdVerifyCodeReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetForgotPasswdVerifyCodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetForgotPasswdVerifyCodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetForgotPasswdVerifyCodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetForgotPasswdVerifyCodeReqValidationError{}

// Validate checks the field values on GetForgotPasswdVerifyCodeReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetForgotPasswdVerifyCodeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetForgotPasswdVerifyCodeReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetForgotPasswdVerifyCodeReplyMultiError, or nil if none found.
func (m *GetForgotPasswdVerifyCodeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetForgotPasswdVerifyCodeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return GetForgotPasswdVerifyCodeReplyMultiError(errors)
	}

	return nil
}

// GetForgotPasswdVerifyCodeReplyMultiError is an error wrapping multiple
// validation errors returned by GetForgotPasswdVerifyCodeReply.ValidateAll()
// if the designated constraints aren't met.
type GetForgotPasswdVerifyCodeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetForgotPasswdVerifyCodeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetForgotPasswdVerifyCodeReplyMultiError) AllErrors() []error { return m }

// GetForgotPasswdVerifyCodeReplyValidationError is the validation error
// returned by GetForgotPasswdVerifyCodeReply.Validate if the designated
// constraints aren't met.
type GetForgotPasswdVerifyCodeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetForgotPasswdVerifyCodeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetForgotPasswdVerifyCodeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetForgotPasswdVerifyCodeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetForgotPasswdVerifyCodeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetForgotPasswdVerifyCodeReplyValidationError) ErrorName() string {
	return "GetForgotPasswdVerifyCodeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetForgotPasswdVerifyCodeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetForgotPasswdVerifyCodeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetForgotPasswdVerifyCodeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetForgotPasswdVerifyCodeReplyValidationError{}

// Validate checks the field values on GetUpdateUserPasswdVerifyCodeReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetUpdateUserPasswdVerifyCodeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUpdateUserPasswdVerifyCodeReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUpdateUserPasswdVerifyCodeReqMultiError, or nil if none found.
func (m *GetUpdateUserPasswdVerifyCodeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUpdateUserPasswdVerifyCodeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := GetUpdateUserPasswdVerifyCodeReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUpdateUserPasswdVerifyCodeReqMultiError(errors)
	}

	return nil
}

// GetUpdateUserPasswdVerifyCodeReqMultiError is an error wrapping multiple
// validation errors returned by
// GetUpdateUserPasswdVerifyCodeReq.ValidateAll() if the designated
// constraints aren't met.
type GetUpdateUserPasswdVerifyCodeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUpdateUserPasswdVerifyCodeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUpdateUserPasswdVerifyCodeReqMultiError) AllErrors() []error { return m }

// GetUpdateUserPasswdVerifyCodeReqValidationError is the validation error
// returned by GetUpdateUserPasswdVerifyCodeReq.Validate if the designated
// constraints aren't met.
type GetUpdateUserPasswdVerifyCodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUpdateUserPasswdVerifyCodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUpdateUserPasswdVerifyCodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUpdateUserPasswdVerifyCodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUpdateUserPasswdVerifyCodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUpdateUserPasswdVerifyCodeReqValidationError) ErrorName() string {
	return "GetUpdateUserPasswdVerifyCodeReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetUpdateUserPasswdVerifyCodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUpdateUserPasswdVerifyCodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUpdateUserPasswdVerifyCodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUpdateUserPasswdVerifyCodeReqValidationError{}

// Validate checks the field values on GetUpdateUserPasswdVerifyCodeReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetUpdateUserPasswdVerifyCodeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUpdateUserPasswdVerifyCodeReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetUpdateUserPasswdVerifyCodeReplyMultiError, or nil if none found.
func (m *GetUpdateUserPasswdVerifyCodeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUpdateUserPasswdVerifyCodeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return GetUpdateUserPasswdVerifyCodeReplyMultiError(errors)
	}

	return nil
}

// GetUpdateUserPasswdVerifyCodeReplyMultiError is an error wrapping multiple
// validation errors returned by
// GetUpdateUserPasswdVerifyCodeReply.ValidateAll() if the designated
// constraints aren't met.
type GetUpdateUserPasswdVerifyCodeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUpdateUserPasswdVerifyCodeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUpdateUserPasswdVerifyCodeReplyMultiError) AllErrors() []error { return m }

// GetUpdateUserPasswdVerifyCodeReplyValidationError is the validation error
// returned by GetUpdateUserPasswdVerifyCodeReply.Validate if the designated
// constraints aren't met.
type GetUpdateUserPasswdVerifyCodeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUpdateUserPasswdVerifyCodeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUpdateUserPasswdVerifyCodeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUpdateUserPasswdVerifyCodeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUpdateUserPasswdVerifyCodeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUpdateUserPasswdVerifyCodeReplyValidationError) ErrorName() string {
	return "GetUpdateUserPasswdVerifyCodeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetUpdateUserPasswdVerifyCodeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUpdateUserPasswdVerifyCodeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUpdateUserPasswdVerifyCodeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUpdateUserPasswdVerifyCodeReplyValidationError{}

// Validate checks the field values on UpdateUserPasswdReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserPasswdReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserPasswdReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserPasswdReqMultiError, or nil if none found.
func (m *UpdateUserPasswdReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserPasswdReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := UpdateUserPasswdReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 7 {
		err := UpdateUserPasswdReqValidationError{
			field:  "Password",
			reason: "value length must be at least 7 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetVerifyCode()) < 4 {
		err := UpdateUserPasswdReqValidationError{
			field:  "VerifyCode",
			reason: "value length must be at least 4 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateUserPasswdReqMultiError(errors)
	}

	return nil
}

// UpdateUserPasswdReqMultiError is an error wrapping multiple validation
// errors returned by UpdateUserPasswdReq.ValidateAll() if the designated
// constraints aren't met.
type UpdateUserPasswdReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserPasswdReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserPasswdReqMultiError) AllErrors() []error { return m }

// UpdateUserPasswdReqValidationError is the validation error returned by
// UpdateUserPasswdReq.Validate if the designated constraints aren't met.
type UpdateUserPasswdReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserPasswdReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserPasswdReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserPasswdReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserPasswdReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserPasswdReqValidationError) ErrorName() string {
	return "UpdateUserPasswdReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserPasswdReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserPasswdReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserPasswdReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserPasswdReqValidationError{}

// Validate checks the field values on UpdateUserPasswdReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserPasswdReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserPasswdReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserPasswdReplyMultiError, or nil if none found.
func (m *UpdateUserPasswdReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserPasswdReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return UpdateUserPasswdReplyMultiError(errors)
	}

	return nil
}

// UpdateUserPasswdReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateUserPasswdReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateUserPasswdReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserPasswdReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserPasswdReplyMultiError) AllErrors() []error { return m }

// UpdateUserPasswdReplyValidationError is the validation error returned by
// UpdateUserPasswdReply.Validate if the designated constraints aren't met.
type UpdateUserPasswdReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserPasswdReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserPasswdReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserPasswdReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserPasswdReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserPasswdReplyValidationError) ErrorName() string {
	return "UpdateUserPasswdReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserPasswdReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserPasswdReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserPasswdReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserPasswdReplyValidationError{}

// Validate checks the field values on UpdateForgotPasswdReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateForgotPasswdReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateForgotPasswdReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateForgotPasswdReqMultiError, or nil if none found.
func (m *UpdateForgotPasswdReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateForgotPasswdReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPhoneNumber()) < 4 {
		err := UpdateForgotPasswdReqValidationError{
			field:  "PhoneNumber",
			reason: "value length must be at least 4 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 7 {
		err := UpdateForgotPasswdReqValidationError{
			field:  "Password",
			reason: "value length must be at least 7 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetVerifyCode()) < 4 {
		err := UpdateForgotPasswdReqValidationError{
			field:  "VerifyCode",
			reason: "value length must be at least 4 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateForgotPasswdReqMultiError(errors)
	}

	return nil
}

// UpdateForgotPasswdReqMultiError is an error wrapping multiple validation
// errors returned by UpdateForgotPasswdReq.ValidateAll() if the designated
// constraints aren't met.
type UpdateForgotPasswdReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateForgotPasswdReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateForgotPasswdReqMultiError) AllErrors() []error { return m }

// UpdateForgotPasswdReqValidationError is the validation error returned by
// UpdateForgotPasswdReq.Validate if the designated constraints aren't met.
type UpdateForgotPasswdReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateForgotPasswdReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateForgotPasswdReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateForgotPasswdReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateForgotPasswdReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateForgotPasswdReqValidationError) ErrorName() string {
	return "UpdateForgotPasswdReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateForgotPasswdReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateForgotPasswdReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateForgotPasswdReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateForgotPasswdReqValidationError{}

// Validate checks the field values on UpdateForgotPasswdReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateForgotPasswdReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateForgotPasswdReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateForgotPasswdReplyMultiError, or nil if none found.
func (m *UpdateForgotPasswdReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateForgotPasswdReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return UpdateForgotPasswdReplyMultiError(errors)
	}

	return nil
}

// UpdateForgotPasswdReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateForgotPasswdReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateForgotPasswdReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateForgotPasswdReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateForgotPasswdReplyMultiError) AllErrors() []error { return m }

// UpdateForgotPasswdReplyValidationError is the validation error returned by
// UpdateForgotPasswdReply.Validate if the designated constraints aren't met.
type UpdateForgotPasswdReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateForgotPasswdReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateForgotPasswdReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateForgotPasswdReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateForgotPasswdReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateForgotPasswdReplyValidationError) ErrorName() string {
	return "UpdateForgotPasswdReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateForgotPasswdReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateForgotPasswdReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateForgotPasswdReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateForgotPasswdReplyValidationError{}

// Validate checks the field values on CreateOrganizationReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrganizationReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrganizationReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrganizationReqMultiError, or nil if none found.
func (m *CreateOrganizationReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrganizationReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOwnUserUuid()) < 1 {
		err := CreateOrganizationReqValidationError{
			field:  "OwnUserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateOrganizationReqValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Public

	if len(errors) > 0 {
		return CreateOrganizationReqMultiError(errors)
	}

	return nil
}

// CreateOrganizationReqMultiError is an error wrapping multiple validation
// errors returned by CreateOrganizationReq.ValidateAll() if the designated
// constraints aren't met.
type CreateOrganizationReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrganizationReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrganizationReqMultiError) AllErrors() []error { return m }

// CreateOrganizationReqValidationError is the validation error returned by
// CreateOrganizationReq.Validate if the designated constraints aren't met.
type CreateOrganizationReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrganizationReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrganizationReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrganizationReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrganizationReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrganizationReqValidationError) ErrorName() string {
	return "CreateOrganizationReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrganizationReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrganizationReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrganizationReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrganizationReqValidationError{}

// Validate checks the field values on CreateOrganizationReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrganizationReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrganizationReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrganizationReplyMultiError, or nil if none found.
func (m *CreateOrganizationReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrganizationReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return CreateOrganizationReplyMultiError(errors)
	}

	return nil
}

// CreateOrganizationReplyMultiError is an error wrapping multiple validation
// errors returned by CreateOrganizationReply.ValidateAll() if the designated
// constraints aren't met.
type CreateOrganizationReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrganizationReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrganizationReplyMultiError) AllErrors() []error { return m }

// CreateOrganizationReplyValidationError is the validation error returned by
// CreateOrganizationReply.Validate if the designated constraints aren't met.
type CreateOrganizationReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrganizationReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrganizationReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrganizationReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrganizationReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrganizationReplyValidationError) ErrorName() string {
	return "CreateOrganizationReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrganizationReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrganizationReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrganizationReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrganizationReplyValidationError{}

// Validate checks the field values on DelOrganizationReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelOrganizationReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelOrganizationReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelOrganizationReqMultiError, or nil if none found.
func (m *DelOrganizationReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelOrganizationReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := DelOrganizationReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := DelOrganizationReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelOrganizationReqMultiError(errors)
	}

	return nil
}

// DelOrganizationReqMultiError is an error wrapping multiple validation errors
// returned by DelOrganizationReq.ValidateAll() if the designated constraints
// aren't met.
type DelOrganizationReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelOrganizationReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelOrganizationReqMultiError) AllErrors() []error { return m }

// DelOrganizationReqValidationError is the validation error returned by
// DelOrganizationReq.Validate if the designated constraints aren't met.
type DelOrganizationReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelOrganizationReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelOrganizationReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelOrganizationReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelOrganizationReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelOrganizationReqValidationError) ErrorName() string {
	return "DelOrganizationReqValidationError"
}

// Error satisfies the builtin error interface
func (e DelOrganizationReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelOrganizationReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelOrganizationReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelOrganizationReqValidationError{}

// Validate checks the field values on DelOrganizationReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelOrganizationReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelOrganizationReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelOrganizationReplyMultiError, or nil if none found.
func (m *DelOrganizationReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DelOrganizationReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return DelOrganizationReplyMultiError(errors)
	}

	return nil
}

// DelOrganizationReplyMultiError is an error wrapping multiple validation
// errors returned by DelOrganizationReply.ValidateAll() if the designated
// constraints aren't met.
type DelOrganizationReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelOrganizationReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelOrganizationReplyMultiError) AllErrors() []error { return m }

// DelOrganizationReplyValidationError is the validation error returned by
// DelOrganizationReply.Validate if the designated constraints aren't met.
type DelOrganizationReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelOrganizationReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelOrganizationReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelOrganizationReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelOrganizationReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelOrganizationReplyValidationError) ErrorName() string {
	return "DelOrganizationReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DelOrganizationReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelOrganizationReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelOrganizationReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelOrganizationReplyValidationError{}

// Validate checks the field values on UserJoinOrganizationReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserJoinOrganizationReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserJoinOrganizationReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserJoinOrganizationReqMultiError, or nil if none found.
func (m *UserJoinOrganizationReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UserJoinOrganizationReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := UserJoinOrganizationReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := UserJoinOrganizationReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for JoinMessage

	if len(errors) > 0 {
		return UserJoinOrganizationReqMultiError(errors)
	}

	return nil
}

// UserJoinOrganizationReqMultiError is an error wrapping multiple validation
// errors returned by UserJoinOrganizationReq.ValidateAll() if the designated
// constraints aren't met.
type UserJoinOrganizationReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserJoinOrganizationReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserJoinOrganizationReqMultiError) AllErrors() []error { return m }

// UserJoinOrganizationReqValidationError is the validation error returned by
// UserJoinOrganizationReq.Validate if the designated constraints aren't met.
type UserJoinOrganizationReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserJoinOrganizationReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserJoinOrganizationReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserJoinOrganizationReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserJoinOrganizationReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserJoinOrganizationReqValidationError) ErrorName() string {
	return "UserJoinOrganizationReqValidationError"
}

// Error satisfies the builtin error interface
func (e UserJoinOrganizationReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserJoinOrganizationReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserJoinOrganizationReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserJoinOrganizationReqValidationError{}

// Validate checks the field values on UserJoinOrganizationReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserJoinOrganizationReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserJoinOrganizationReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserJoinOrganizationReplyMultiError, or nil if none found.
func (m *UserJoinOrganizationReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UserJoinOrganizationReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return UserJoinOrganizationReplyMultiError(errors)
	}

	return nil
}

// UserJoinOrganizationReplyMultiError is an error wrapping multiple validation
// errors returned by UserJoinOrganizationReply.ValidateAll() if the
// designated constraints aren't met.
type UserJoinOrganizationReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserJoinOrganizationReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserJoinOrganizationReplyMultiError) AllErrors() []error { return m }

// UserJoinOrganizationReplyValidationError is the validation error returned by
// UserJoinOrganizationReply.Validate if the designated constraints aren't met.
type UserJoinOrganizationReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserJoinOrganizationReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserJoinOrganizationReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserJoinOrganizationReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserJoinOrganizationReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserJoinOrganizationReplyValidationError) ErrorName() string {
	return "UserJoinOrganizationReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UserJoinOrganizationReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserJoinOrganizationReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserJoinOrganizationReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserJoinOrganizationReplyValidationError{}

// Validate checks the field values on JoinOrg with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JoinOrg) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinOrg with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in JoinOrgMultiError, or nil if none found.
func (m *JoinOrg) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinOrg) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgUuid

	// no validation rules for OrgName

	// no validation rules for JoinUserUuid

	// no validation rules for JoinUserName

	// no validation rules for JoinMessage

	// no validation rules for Result

	// no validation rules for ReplyMessage

	// no validation rules for RequestDate

	if len(errors) > 0 {
		return JoinOrgMultiError(errors)
	}

	return nil
}

// JoinOrgMultiError is an error wrapping multiple validation errors returned
// by JoinOrg.ValidateAll() if the designated constraints aren't met.
type JoinOrgMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinOrgMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinOrgMultiError) AllErrors() []error { return m }

// JoinOrgValidationError is the validation error returned by JoinOrg.Validate
// if the designated constraints aren't met.
type JoinOrgValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinOrgValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinOrgValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinOrgValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinOrgValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinOrgValidationError) ErrorName() string { return "JoinOrgValidationError" }

// Error satisfies the builtin error interface
func (e JoinOrgValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinOrg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinOrgValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinOrgValidationError{}

// Validate checks the field values on GetUserJoinOrganizationHisReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserJoinOrganizationHisReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserJoinOrganizationHisReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUserJoinOrganizationHisReqMultiError, or nil if none found.
func (m *GetUserJoinOrganizationHisReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserJoinOrganizationHisReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := GetUserJoinOrganizationHisReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for OrgUuid

	// no validation rules for Result

	if len(errors) > 0 {
		return GetUserJoinOrganizationHisReqMultiError(errors)
	}

	return nil
}

// GetUserJoinOrganizationHisReqMultiError is an error wrapping multiple
// validation errors returned by GetUserJoinOrganizationHisReq.ValidateAll()
// if the designated constraints aren't met.
type GetUserJoinOrganizationHisReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserJoinOrganizationHisReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserJoinOrganizationHisReqMultiError) AllErrors() []error { return m }

// GetUserJoinOrganizationHisReqValidationError is the validation error
// returned by GetUserJoinOrganizationHisReq.Validate if the designated
// constraints aren't met.
type GetUserJoinOrganizationHisReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserJoinOrganizationHisReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserJoinOrganizationHisReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserJoinOrganizationHisReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserJoinOrganizationHisReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserJoinOrganizationHisReqValidationError) ErrorName() string {
	return "GetUserJoinOrganizationHisReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserJoinOrganizationHisReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserJoinOrganizationHisReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserJoinOrganizationHisReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserJoinOrganizationHisReqValidationError{}

// Validate checks the field values on GetUserJoinOrganizationHisReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserJoinOrganizationHisReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserJoinOrganizationHisReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUserJoinOrganizationHisReplyMultiError, or nil if none found.
func (m *GetUserJoinOrganizationHisReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserJoinOrganizationHisReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetJoinOrg() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserJoinOrganizationHisReplyValidationError{
						field:  fmt.Sprintf("JoinOrg[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserJoinOrganizationHisReplyValidationError{
						field:  fmt.Sprintf("JoinOrg[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserJoinOrganizationHisReplyValidationError{
					field:  fmt.Sprintf("JoinOrg[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserJoinOrganizationHisReplyMultiError(errors)
	}

	return nil
}

// GetUserJoinOrganizationHisReplyMultiError is an error wrapping multiple
// validation errors returned by GetUserJoinOrganizationHisReply.ValidateAll()
// if the designated constraints aren't met.
type GetUserJoinOrganizationHisReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserJoinOrganizationHisReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserJoinOrganizationHisReplyMultiError) AllErrors() []error { return m }

// GetUserJoinOrganizationHisReplyValidationError is the validation error
// returned by GetUserJoinOrganizationHisReply.Validate if the designated
// constraints aren't met.
type GetUserJoinOrganizationHisReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserJoinOrganizationHisReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserJoinOrganizationHisReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserJoinOrganizationHisReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserJoinOrganizationHisReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserJoinOrganizationHisReplyValidationError) ErrorName() string {
	return "GetUserJoinOrganizationHisReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserJoinOrganizationHisReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserJoinOrganizationHisReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserJoinOrganizationHisReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserJoinOrganizationHisReplyValidationError{}

// Validate checks the field values on GetOrganizationJoinHisReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationJoinHisReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationJoinHisReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationJoinHisReqMultiError, or nil if none found.
func (m *GetOrganizationJoinHisReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationJoinHisReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := GetOrganizationJoinHisReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := GetOrganizationJoinHisReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Result

	if len(errors) > 0 {
		return GetOrganizationJoinHisReqMultiError(errors)
	}

	return nil
}

// GetOrganizationJoinHisReqMultiError is an error wrapping multiple validation
// errors returned by GetOrganizationJoinHisReq.ValidateAll() if the
// designated constraints aren't met.
type GetOrganizationJoinHisReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationJoinHisReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationJoinHisReqMultiError) AllErrors() []error { return m }

// GetOrganizationJoinHisReqValidationError is the validation error returned by
// GetOrganizationJoinHisReq.Validate if the designated constraints aren't met.
type GetOrganizationJoinHisReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationJoinHisReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationJoinHisReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationJoinHisReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationJoinHisReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationJoinHisReqValidationError) ErrorName() string {
	return "GetOrganizationJoinHisReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationJoinHisReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationJoinHisReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationJoinHisReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationJoinHisReqValidationError{}

// Validate checks the field values on GetOrganizationJoinHisReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationJoinHisReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationJoinHisReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationJoinHisReplyMultiError, or nil if none found.
func (m *GetOrganizationJoinHisReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationJoinHisReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetJoinOrg() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetOrganizationJoinHisReplyValidationError{
						field:  fmt.Sprintf("JoinOrg[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetOrganizationJoinHisReplyValidationError{
						field:  fmt.Sprintf("JoinOrg[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetOrganizationJoinHisReplyValidationError{
					field:  fmt.Sprintf("JoinOrg[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetOrganizationJoinHisReplyMultiError(errors)
	}

	return nil
}

// GetOrganizationJoinHisReplyMultiError is an error wrapping multiple
// validation errors returned by GetOrganizationJoinHisReply.ValidateAll() if
// the designated constraints aren't met.
type GetOrganizationJoinHisReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationJoinHisReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationJoinHisReplyMultiError) AllErrors() []error { return m }

// GetOrganizationJoinHisReplyValidationError is the validation error returned
// by GetOrganizationJoinHisReply.Validate if the designated constraints
// aren't met.
type GetOrganizationJoinHisReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationJoinHisReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationJoinHisReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationJoinHisReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationJoinHisReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationJoinHisReplyValidationError) ErrorName() string {
	return "GetOrganizationJoinHisReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationJoinHisReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationJoinHisReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationJoinHisReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationJoinHisReplyValidationError{}

// Validate checks the field values on ManageUserJoinOrganizationReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ManageUserJoinOrganizationReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ManageUserJoinOrganizationReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ManageUserJoinOrganizationReqMultiError, or nil if none found.
func (m *ManageUserJoinOrganizationReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ManageUserJoinOrganizationReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ManageUserJoinOrganizationReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ManageUserJoinOrganizationReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetJoinUserUuid()) < 1 {
		err := ManageUserJoinOrganizationReqValidationError{
			field:  "JoinUserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Op

	// no validation rules for ReplyMessage

	if len(errors) > 0 {
		return ManageUserJoinOrganizationReqMultiError(errors)
	}

	return nil
}

// ManageUserJoinOrganizationReqMultiError is an error wrapping multiple
// validation errors returned by ManageUserJoinOrganizationReq.ValidateAll()
// if the designated constraints aren't met.
type ManageUserJoinOrganizationReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ManageUserJoinOrganizationReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ManageUserJoinOrganizationReqMultiError) AllErrors() []error { return m }

// ManageUserJoinOrganizationReqValidationError is the validation error
// returned by ManageUserJoinOrganizationReq.Validate if the designated
// constraints aren't met.
type ManageUserJoinOrganizationReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ManageUserJoinOrganizationReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ManageUserJoinOrganizationReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ManageUserJoinOrganizationReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ManageUserJoinOrganizationReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ManageUserJoinOrganizationReqValidationError) ErrorName() string {
	return "ManageUserJoinOrganizationReqValidationError"
}

// Error satisfies the builtin error interface
func (e ManageUserJoinOrganizationReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sManageUserJoinOrganizationReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ManageUserJoinOrganizationReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ManageUserJoinOrganizationReqValidationError{}

// Validate checks the field values on ManageUserJoinOrganizationReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ManageUserJoinOrganizationReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ManageUserJoinOrganizationReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ManageUserJoinOrganizationReplyMultiError, or nil if none found.
func (m *ManageUserJoinOrganizationReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ManageUserJoinOrganizationReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return ManageUserJoinOrganizationReplyMultiError(errors)
	}

	return nil
}

// ManageUserJoinOrganizationReplyMultiError is an error wrapping multiple
// validation errors returned by ManageUserJoinOrganizationReply.ValidateAll()
// if the designated constraints aren't met.
type ManageUserJoinOrganizationReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ManageUserJoinOrganizationReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ManageUserJoinOrganizationReplyMultiError) AllErrors() []error { return m }

// ManageUserJoinOrganizationReplyValidationError is the validation error
// returned by ManageUserJoinOrganizationReply.Validate if the designated
// constraints aren't met.
type ManageUserJoinOrganizationReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ManageUserJoinOrganizationReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ManageUserJoinOrganizationReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ManageUserJoinOrganizationReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ManageUserJoinOrganizationReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ManageUserJoinOrganizationReplyValidationError) ErrorName() string {
	return "ManageUserJoinOrganizationReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ManageUserJoinOrganizationReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sManageUserJoinOrganizationReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ManageUserJoinOrganizationReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ManageUserJoinOrganizationReplyValidationError{}

// Validate checks the field values on GetOrganizationUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationUserReqMultiError, or nil if none found.
func (m *GetOrganizationUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := GetOrganizationUserReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := GetOrganizationUserReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetOrganizationUserReqMultiError(errors)
	}

	return nil
}

// GetOrganizationUserReqMultiError is an error wrapping multiple validation
// errors returned by GetOrganizationUserReq.ValidateAll() if the designated
// constraints aren't met.
type GetOrganizationUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationUserReqMultiError) AllErrors() []error { return m }

// GetOrganizationUserReqValidationError is the validation error returned by
// GetOrganizationUserReq.Validate if the designated constraints aren't met.
type GetOrganizationUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationUserReqValidationError) ErrorName() string {
	return "GetOrganizationUserReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationUserReqValidationError{}

// Validate checks the field values on GetOrganizationUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationUserReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationUserReplyMultiError, or nil if none found.
func (m *GetOrganizationUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrganizationUser() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetOrganizationUserReplyValidationError{
						field:  fmt.Sprintf("OrganizationUser[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetOrganizationUserReplyValidationError{
						field:  fmt.Sprintf("OrganizationUser[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetOrganizationUserReplyValidationError{
					field:  fmt.Sprintf("OrganizationUser[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetOrganizationUserReplyMultiError(errors)
	}

	return nil
}

// GetOrganizationUserReplyMultiError is an error wrapping multiple validation
// errors returned by GetOrganizationUserReply.ValidateAll() if the designated
// constraints aren't met.
type GetOrganizationUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationUserReplyMultiError) AllErrors() []error { return m }

// GetOrganizationUserReplyValidationError is the validation error returned by
// GetOrganizationUserReply.Validate if the designated constraints aren't met.
type GetOrganizationUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationUserReplyValidationError) ErrorName() string {
	return "GetOrganizationUserReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationUserReplyValidationError{}

// Validate checks the field values on GetUserOrganizationReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserOrganizationReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserOrganizationReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserOrganizationReqMultiError, or nil if none found.
func (m *GetUserOrganizationReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserOrganizationReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := GetUserOrganizationReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserOrganizationReqMultiError(errors)
	}

	return nil
}

// GetUserOrganizationReqMultiError is an error wrapping multiple validation
// errors returned by GetUserOrganizationReq.ValidateAll() if the designated
// constraints aren't met.
type GetUserOrganizationReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserOrganizationReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserOrganizationReqMultiError) AllErrors() []error { return m }

// GetUserOrganizationReqValidationError is the validation error returned by
// GetUserOrganizationReq.Validate if the designated constraints aren't met.
type GetUserOrganizationReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserOrganizationReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserOrganizationReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserOrganizationReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserOrganizationReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserOrganizationReqValidationError) ErrorName() string {
	return "GetUserOrganizationReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserOrganizationReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserOrganizationReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserOrganizationReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserOrganizationReqValidationError{}

// Validate checks the field values on GetUserOrganizationReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserOrganizationReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserOrganizationReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserOrganizationReplyMultiError, or nil if none found.
func (m *GetUserOrganizationReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserOrganizationReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSelfOrgList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserOrganizationReplyValidationError{
						field:  fmt.Sprintf("SelfOrgList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserOrganizationReplyValidationError{
						field:  fmt.Sprintf("SelfOrgList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserOrganizationReplyValidationError{
					field:  fmt.Sprintf("SelfOrgList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUserOrganizationReplyMultiError(errors)
	}

	return nil
}

// GetUserOrganizationReplyMultiError is an error wrapping multiple validation
// errors returned by GetUserOrganizationReply.ValidateAll() if the designated
// constraints aren't met.
type GetUserOrganizationReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserOrganizationReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserOrganizationReplyMultiError) AllErrors() []error { return m }

// GetUserOrganizationReplyValidationError is the validation error returned by
// GetUserOrganizationReply.Validate if the designated constraints aren't met.
type GetUserOrganizationReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserOrganizationReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserOrganizationReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserOrganizationReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserOrganizationReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserOrganizationReplyValidationError) ErrorName() string {
	return "GetUserOrganizationReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserOrganizationReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserOrganizationReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserOrganizationReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserOrganizationReplyValidationError{}

// Validate checks the field values on GetUserOrganizationInfoReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserOrganizationInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserOrganizationInfoReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserOrganizationInfoReqMultiError, or nil if none found.
func (m *GetUserOrganizationInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserOrganizationInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := GetUserOrganizationInfoReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserOrganizationInfoReqMultiError(errors)
	}

	return nil
}

// GetUserOrganizationInfoReqMultiError is an error wrapping multiple
// validation errors returned by GetUserOrganizationInfoReq.ValidateAll() if
// the designated constraints aren't met.
type GetUserOrganizationInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserOrganizationInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserOrganizationInfoReqMultiError) AllErrors() []error { return m }

// GetUserOrganizationInfoReqValidationError is the validation error returned
// by GetUserOrganizationInfoReq.Validate if the designated constraints aren't met.
type GetUserOrganizationInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserOrganizationInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserOrganizationInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserOrganizationInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserOrganizationInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserOrganizationInfoReqValidationError) ErrorName() string {
	return "GetUserOrganizationInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserOrganizationInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserOrganizationInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserOrganizationInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserOrganizationInfoReqValidationError{}

// Validate checks the field values on GetUserOrganizationInfoReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserOrganizationInfoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserOrganizationInfoReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserOrganizationInfoReplyMultiError, or nil if none found.
func (m *GetUserOrganizationInfoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserOrganizationInfoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for OwnUserUuid

	// no validation rules for Name

	// no validation rules for Public

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return GetUserOrganizationInfoReplyMultiError(errors)
	}

	return nil
}

// GetUserOrganizationInfoReplyMultiError is an error wrapping multiple
// validation errors returned by GetUserOrganizationInfoReply.ValidateAll() if
// the designated constraints aren't met.
type GetUserOrganizationInfoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserOrganizationInfoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserOrganizationInfoReplyMultiError) AllErrors() []error { return m }

// GetUserOrganizationInfoReplyValidationError is the validation error returned
// by GetUserOrganizationInfoReply.Validate if the designated constraints
// aren't met.
type GetUserOrganizationInfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserOrganizationInfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserOrganizationInfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserOrganizationInfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserOrganizationInfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserOrganizationInfoReplyValidationError) ErrorName() string {
	return "GetUserOrganizationInfoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserOrganizationInfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserOrganizationInfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserOrganizationInfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserOrganizationInfoReplyValidationError{}

// Validate checks the field values on VerifyUserInOrgReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifyUserInOrgReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyUserInOrgReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyUserInOrgReqMultiError, or nil if none found.
func (m *VerifyUserInOrgReq) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyUserInOrgReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := VerifyUserInOrgReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := VerifyUserInOrgReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return VerifyUserInOrgReqMultiError(errors)
	}

	return nil
}

// VerifyUserInOrgReqMultiError is an error wrapping multiple validation errors
// returned by VerifyUserInOrgReq.ValidateAll() if the designated constraints
// aren't met.
type VerifyUserInOrgReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyUserInOrgReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyUserInOrgReqMultiError) AllErrors() []error { return m }

// VerifyUserInOrgReqValidationError is the validation error returned by
// VerifyUserInOrgReq.Validate if the designated constraints aren't met.
type VerifyUserInOrgReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyUserInOrgReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyUserInOrgReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyUserInOrgReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyUserInOrgReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyUserInOrgReqValidationError) ErrorName() string {
	return "VerifyUserInOrgReqValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyUserInOrgReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyUserInOrgReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyUserInOrgReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyUserInOrgReqValidationError{}

// Validate checks the field values on VerifyUserInOrgReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifyUserInOrgReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyUserInOrgReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyUserInOrgReplyMultiError, or nil if none found.
func (m *VerifyUserInOrgReply) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyUserInOrgReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return VerifyUserInOrgReplyMultiError(errors)
	}

	return nil
}

// VerifyUserInOrgReplyMultiError is an error wrapping multiple validation
// errors returned by VerifyUserInOrgReply.ValidateAll() if the designated
// constraints aren't met.
type VerifyUserInOrgReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyUserInOrgReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyUserInOrgReplyMultiError) AllErrors() []error { return m }

// VerifyUserInOrgReplyValidationError is the validation error returned by
// VerifyUserInOrgReply.Validate if the designated constraints aren't met.
type VerifyUserInOrgReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyUserInOrgReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyUserInOrgReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyUserInOrgReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyUserInOrgReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyUserInOrgReplyValidationError) ErrorName() string {
	return "VerifyUserInOrgReplyValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyUserInOrgReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyUserInOrgReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyUserInOrgReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyUserInOrgReplyValidationError{}

// Validate checks the field values on UserLeaveOrganizationReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserLeaveOrganizationReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserLeaveOrganizationReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserLeaveOrganizationReqMultiError, or nil if none found.
func (m *UserLeaveOrganizationReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UserLeaveOrganizationReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := UserLeaveOrganizationReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := UserLeaveOrganizationReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UserLeaveOrganizationReqMultiError(errors)
	}

	return nil
}

// UserLeaveOrganizationReqMultiError is an error wrapping multiple validation
// errors returned by UserLeaveOrganizationReq.ValidateAll() if the designated
// constraints aren't met.
type UserLeaveOrganizationReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserLeaveOrganizationReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserLeaveOrganizationReqMultiError) AllErrors() []error { return m }

// UserLeaveOrganizationReqValidationError is the validation error returned by
// UserLeaveOrganizationReq.Validate if the designated constraints aren't met.
type UserLeaveOrganizationReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserLeaveOrganizationReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserLeaveOrganizationReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserLeaveOrganizationReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserLeaveOrganizationReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserLeaveOrganizationReqValidationError) ErrorName() string {
	return "UserLeaveOrganizationReqValidationError"
}

// Error satisfies the builtin error interface
func (e UserLeaveOrganizationReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserLeaveOrganizationReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserLeaveOrganizationReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserLeaveOrganizationReqValidationError{}

// Validate checks the field values on UserLeaveOrganizationReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserLeaveOrganizationReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserLeaveOrganizationReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserLeaveOrganizationReplyMultiError, or nil if none found.
func (m *UserLeaveOrganizationReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UserLeaveOrganizationReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return UserLeaveOrganizationReplyMultiError(errors)
	}

	return nil
}

// UserLeaveOrganizationReplyMultiError is an error wrapping multiple
// validation errors returned by UserLeaveOrganizationReply.ValidateAll() if
// the designated constraints aren't met.
type UserLeaveOrganizationReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserLeaveOrganizationReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserLeaveOrganizationReplyMultiError) AllErrors() []error { return m }

// UserLeaveOrganizationReplyValidationError is the validation error returned
// by UserLeaveOrganizationReply.Validate if the designated constraints aren't met.
type UserLeaveOrganizationReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserLeaveOrganizationReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserLeaveOrganizationReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserLeaveOrganizationReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserLeaveOrganizationReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserLeaveOrganizationReplyValidationError) ErrorName() string {
	return "UserLeaveOrganizationReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UserLeaveOrganizationReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserLeaveOrganizationReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserLeaveOrganizationReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserLeaveOrganizationReplyValidationError{}

// Validate checks the field values on EvictionUserOrganizationReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EvictionUserOrganizationReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EvictionUserOrganizationReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EvictionUserOrganizationReqMultiError, or nil if none found.
func (m *EvictionUserOrganizationReq) ValidateAll() error {
	return m.validate(true)
}

func (m *EvictionUserOrganizationReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := EvictionUserOrganizationReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := EvictionUserOrganizationReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetEvictionUserUuid()) < 1 {
		err := EvictionUserOrganizationReqValidationError{
			field:  "EvictionUserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EvictionUserOrganizationReqMultiError(errors)
	}

	return nil
}

// EvictionUserOrganizationReqMultiError is an error wrapping multiple
// validation errors returned by EvictionUserOrganizationReq.ValidateAll() if
// the designated constraints aren't met.
type EvictionUserOrganizationReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EvictionUserOrganizationReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EvictionUserOrganizationReqMultiError) AllErrors() []error { return m }

// EvictionUserOrganizationReqValidationError is the validation error returned
// by EvictionUserOrganizationReq.Validate if the designated constraints
// aren't met.
type EvictionUserOrganizationReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EvictionUserOrganizationReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EvictionUserOrganizationReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EvictionUserOrganizationReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EvictionUserOrganizationReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EvictionUserOrganizationReqValidationError) ErrorName() string {
	return "EvictionUserOrganizationReqValidationError"
}

// Error satisfies the builtin error interface
func (e EvictionUserOrganizationReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvictionUserOrganizationReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EvictionUserOrganizationReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EvictionUserOrganizationReqValidationError{}

// Validate checks the field values on EvictionUserOrganizationReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EvictionUserOrganizationReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EvictionUserOrganizationReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// EvictionUserOrganizationReplyMultiError, or nil if none found.
func (m *EvictionUserOrganizationReply) ValidateAll() error {
	return m.validate(true)
}

func (m *EvictionUserOrganizationReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return EvictionUserOrganizationReplyMultiError(errors)
	}

	return nil
}

// EvictionUserOrganizationReplyMultiError is an error wrapping multiple
// validation errors returned by EvictionUserOrganizationReply.ValidateAll()
// if the designated constraints aren't met.
type EvictionUserOrganizationReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EvictionUserOrganizationReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EvictionUserOrganizationReplyMultiError) AllErrors() []error { return m }

// EvictionUserOrganizationReplyValidationError is the validation error
// returned by EvictionUserOrganizationReply.Validate if the designated
// constraints aren't met.
type EvictionUserOrganizationReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EvictionUserOrganizationReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EvictionUserOrganizationReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EvictionUserOrganizationReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EvictionUserOrganizationReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EvictionUserOrganizationReplyValidationError) ErrorName() string {
	return "EvictionUserOrganizationReplyValidationError"
}

// Error satisfies the builtin error interface
func (e EvictionUserOrganizationReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvictionUserOrganizationReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EvictionUserOrganizationReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EvictionUserOrganizationReplyValidationError{}

// Validate checks the field values on AddOrganizationDingTalkReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddOrganizationDingTalkReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrganizationDingTalkReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddOrganizationDingTalkReqMultiError, or nil if none found.
func (m *AddOrganizationDingTalkReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrganizationDingTalkReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := AddOrganizationDingTalkReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := AddOrganizationDingTalkReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAgentId() <= 1 {
		err := AddOrganizationDingTalkReqValidationError{
			field:  "AgentId",
			reason: "value must be greater than 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAppKey()) < 1 {
		err := AddOrganizationDingTalkReqValidationError{
			field:  "AppKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAppSecret()) < 1 {
		err := AddOrganizationDingTalkReqValidationError{
			field:  "AppSecret",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddOrganizationDingTalkReqMultiError(errors)
	}

	return nil
}

// AddOrganizationDingTalkReqMultiError is an error wrapping multiple
// validation errors returned by AddOrganizationDingTalkReq.ValidateAll() if
// the designated constraints aren't met.
type AddOrganizationDingTalkReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrganizationDingTalkReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrganizationDingTalkReqMultiError) AllErrors() []error { return m }

// AddOrganizationDingTalkReqValidationError is the validation error returned
// by AddOrganizationDingTalkReq.Validate if the designated constraints aren't met.
type AddOrganizationDingTalkReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrganizationDingTalkReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrganizationDingTalkReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrganizationDingTalkReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrganizationDingTalkReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrganizationDingTalkReqValidationError) ErrorName() string {
	return "AddOrganizationDingTalkReqValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrganizationDingTalkReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrganizationDingTalkReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrganizationDingTalkReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrganizationDingTalkReqValidationError{}

// Validate checks the field values on AddOrganizationDingTalkReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddOrganizationDingTalkReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrganizationDingTalkReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddOrganizationDingTalkReplyMultiError, or nil if none found.
func (m *AddOrganizationDingTalkReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrganizationDingTalkReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return AddOrganizationDingTalkReplyMultiError(errors)
	}

	return nil
}

// AddOrganizationDingTalkReplyMultiError is an error wrapping multiple
// validation errors returned by AddOrganizationDingTalkReply.ValidateAll() if
// the designated constraints aren't met.
type AddOrganizationDingTalkReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrganizationDingTalkReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrganizationDingTalkReplyMultiError) AllErrors() []error { return m }

// AddOrganizationDingTalkReplyValidationError is the validation error returned
// by AddOrganizationDingTalkReply.Validate if the designated constraints
// aren't met.
type AddOrganizationDingTalkReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrganizationDingTalkReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrganizationDingTalkReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrganizationDingTalkReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrganizationDingTalkReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrganizationDingTalkReplyValidationError) ErrorName() string {
	return "AddOrganizationDingTalkReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrganizationDingTalkReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrganizationDingTalkReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrganizationDingTalkReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrganizationDingTalkReplyValidationError{}

// Validate checks the field values on GetOrganizationDingTalkReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationDingTalkReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationDingTalkReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationDingTalkReqMultiError, or nil if none found.
func (m *GetOrganizationDingTalkReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationDingTalkReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := GetOrganizationDingTalkReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := GetOrganizationDingTalkReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetOrganizationDingTalkReqMultiError(errors)
	}

	return nil
}

// GetOrganizationDingTalkReqMultiError is an error wrapping multiple
// validation errors returned by GetOrganizationDingTalkReq.ValidateAll() if
// the designated constraints aren't met.
type GetOrganizationDingTalkReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationDingTalkReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationDingTalkReqMultiError) AllErrors() []error { return m }

// GetOrganizationDingTalkReqValidationError is the validation error returned
// by GetOrganizationDingTalkReq.Validate if the designated constraints aren't met.
type GetOrganizationDingTalkReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationDingTalkReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationDingTalkReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationDingTalkReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationDingTalkReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationDingTalkReqValidationError) ErrorName() string {
	return "GetOrganizationDingTalkReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationDingTalkReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationDingTalkReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationDingTalkReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationDingTalkReqValidationError{}

// Validate checks the field values on GetOrganizationDingTalkReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationDingTalkReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationDingTalkReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationDingTalkReplyMultiError, or nil if none found.
func (m *GetOrganizationDingTalkReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationDingTalkReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgUuid

	// no validation rules for AgentId

	// no validation rules for AppKey

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return GetOrganizationDingTalkReplyMultiError(errors)
	}

	return nil
}

// GetOrganizationDingTalkReplyMultiError is an error wrapping multiple
// validation errors returned by GetOrganizationDingTalkReply.ValidateAll() if
// the designated constraints aren't met.
type GetOrganizationDingTalkReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationDingTalkReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationDingTalkReplyMultiError) AllErrors() []error { return m }

// GetOrganizationDingTalkReplyValidationError is the validation error returned
// by GetOrganizationDingTalkReply.Validate if the designated constraints
// aren't met.
type GetOrganizationDingTalkReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationDingTalkReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationDingTalkReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationDingTalkReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationDingTalkReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationDingTalkReplyValidationError) ErrorName() string {
	return "GetOrganizationDingTalkReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationDingTalkReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationDingTalkReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationDingTalkReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationDingTalkReplyValidationError{}

// Validate checks the field values on DelOrganizationDingTalkReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelOrganizationDingTalkReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelOrganizationDingTalkReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelOrganizationDingTalkReqMultiError, or nil if none found.
func (m *DelOrganizationDingTalkReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelOrganizationDingTalkReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := DelOrganizationDingTalkReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := DelOrganizationDingTalkReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelOrganizationDingTalkReqMultiError(errors)
	}

	return nil
}

// DelOrganizationDingTalkReqMultiError is an error wrapping multiple
// validation errors returned by DelOrganizationDingTalkReq.ValidateAll() if
// the designated constraints aren't met.
type DelOrganizationDingTalkReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelOrganizationDingTalkReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelOrganizationDingTalkReqMultiError) AllErrors() []error { return m }

// DelOrganizationDingTalkReqValidationError is the validation error returned
// by DelOrganizationDingTalkReq.Validate if the designated constraints aren't met.
type DelOrganizationDingTalkReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelOrganizationDingTalkReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelOrganizationDingTalkReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelOrganizationDingTalkReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelOrganizationDingTalkReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelOrganizationDingTalkReqValidationError) ErrorName() string {
	return "DelOrganizationDingTalkReqValidationError"
}

// Error satisfies the builtin error interface
func (e DelOrganizationDingTalkReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelOrganizationDingTalkReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelOrganizationDingTalkReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelOrganizationDingTalkReqValidationError{}

// Validate checks the field values on DelOrganizationDingTalkReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelOrganizationDingTalkReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelOrganizationDingTalkReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelOrganizationDingTalkReplyMultiError, or nil if none found.
func (m *DelOrganizationDingTalkReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DelOrganizationDingTalkReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return DelOrganizationDingTalkReplyMultiError(errors)
	}

	return nil
}

// DelOrganizationDingTalkReplyMultiError is an error wrapping multiple
// validation errors returned by DelOrganizationDingTalkReply.ValidateAll() if
// the designated constraints aren't met.
type DelOrganizationDingTalkReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelOrganizationDingTalkReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelOrganizationDingTalkReplyMultiError) AllErrors() []error { return m }

// DelOrganizationDingTalkReplyValidationError is the validation error returned
// by DelOrganizationDingTalkReply.Validate if the designated constraints
// aren't met.
type DelOrganizationDingTalkReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelOrganizationDingTalkReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelOrganizationDingTalkReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelOrganizationDingTalkReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelOrganizationDingTalkReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelOrganizationDingTalkReplyValidationError) ErrorName() string {
	return "DelOrganizationDingTalkReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DelOrganizationDingTalkReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelOrganizationDingTalkReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelOrganizationDingTalkReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelOrganizationDingTalkReplyValidationError{}

// Validate checks the field values on AddOrganizationDingTalkLoginReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddOrganizationDingTalkLoginReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrganizationDingTalkLoginReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AddOrganizationDingTalkLoginReqMultiError, or nil if none found.
func (m *AddOrganizationDingTalkLoginReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrganizationDingTalkLoginReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := AddOrganizationDingTalkLoginReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := AddOrganizationDingTalkLoginReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRedirectUrl()) < 1 {
		err := AddOrganizationDingTalkLoginReqValidationError{
			field:  "RedirectUrl",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddOrganizationDingTalkLoginReqMultiError(errors)
	}

	return nil
}

// AddOrganizationDingTalkLoginReqMultiError is an error wrapping multiple
// validation errors returned by AddOrganizationDingTalkLoginReq.ValidateAll()
// if the designated constraints aren't met.
type AddOrganizationDingTalkLoginReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrganizationDingTalkLoginReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrganizationDingTalkLoginReqMultiError) AllErrors() []error { return m }

// AddOrganizationDingTalkLoginReqValidationError is the validation error
// returned by AddOrganizationDingTalkLoginReq.Validate if the designated
// constraints aren't met.
type AddOrganizationDingTalkLoginReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrganizationDingTalkLoginReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrganizationDingTalkLoginReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrganizationDingTalkLoginReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrganizationDingTalkLoginReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrganizationDingTalkLoginReqValidationError) ErrorName() string {
	return "AddOrganizationDingTalkLoginReqValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrganizationDingTalkLoginReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrganizationDingTalkLoginReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrganizationDingTalkLoginReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrganizationDingTalkLoginReqValidationError{}

// Validate checks the field values on AddOrganizationDingTalkLoginReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AddOrganizationDingTalkLoginReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrganizationDingTalkLoginReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AddOrganizationDingTalkLoginReplyMultiError, or nil if none found.
func (m *AddOrganizationDingTalkLoginReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrganizationDingTalkLoginReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return AddOrganizationDingTalkLoginReplyMultiError(errors)
	}

	return nil
}

// AddOrganizationDingTalkLoginReplyMultiError is an error wrapping multiple
// validation errors returned by
// AddOrganizationDingTalkLoginReply.ValidateAll() if the designated
// constraints aren't met.
type AddOrganizationDingTalkLoginReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrganizationDingTalkLoginReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrganizationDingTalkLoginReplyMultiError) AllErrors() []error { return m }

// AddOrganizationDingTalkLoginReplyValidationError is the validation error
// returned by AddOrganizationDingTalkLoginReply.Validate if the designated
// constraints aren't met.
type AddOrganizationDingTalkLoginReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrganizationDingTalkLoginReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrganizationDingTalkLoginReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrganizationDingTalkLoginReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrganizationDingTalkLoginReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrganizationDingTalkLoginReplyValidationError) ErrorName() string {
	return "AddOrganizationDingTalkLoginReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrganizationDingTalkLoginReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrganizationDingTalkLoginReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrganizationDingTalkLoginReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrganizationDingTalkLoginReplyValidationError{}

// Validate checks the field values on GetOrganizationDingTalkLoginReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationDingTalkLoginReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationDingTalkLoginReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetOrganizationDingTalkLoginReqMultiError, or nil if none found.
func (m *GetOrganizationDingTalkLoginReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationDingTalkLoginReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := GetOrganizationDingTalkLoginReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := GetOrganizationDingTalkLoginReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetOrganizationDingTalkLoginReqMultiError(errors)
	}

	return nil
}

// GetOrganizationDingTalkLoginReqMultiError is an error wrapping multiple
// validation errors returned by GetOrganizationDingTalkLoginReq.ValidateAll()
// if the designated constraints aren't met.
type GetOrganizationDingTalkLoginReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationDingTalkLoginReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationDingTalkLoginReqMultiError) AllErrors() []error { return m }

// GetOrganizationDingTalkLoginReqValidationError is the validation error
// returned by GetOrganizationDingTalkLoginReq.Validate if the designated
// constraints aren't met.
type GetOrganizationDingTalkLoginReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationDingTalkLoginReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationDingTalkLoginReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationDingTalkLoginReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationDingTalkLoginReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationDingTalkLoginReqValidationError) ErrorName() string {
	return "GetOrganizationDingTalkLoginReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationDingTalkLoginReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationDingTalkLoginReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationDingTalkLoginReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationDingTalkLoginReqValidationError{}

// Validate checks the field values on GetOrganizationDingTalkLoginReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetOrganizationDingTalkLoginReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationDingTalkLoginReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetOrganizationDingTalkLoginReplyMultiError, or nil if none found.
func (m *GetOrganizationDingTalkLoginReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationDingTalkLoginReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRedirectUrl()) < 1 {
		err := GetOrganizationDingTalkLoginReplyValidationError{
			field:  "RedirectUrl",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return GetOrganizationDingTalkLoginReplyMultiError(errors)
	}

	return nil
}

// GetOrganizationDingTalkLoginReplyMultiError is an error wrapping multiple
// validation errors returned by
// GetOrganizationDingTalkLoginReply.ValidateAll() if the designated
// constraints aren't met.
type GetOrganizationDingTalkLoginReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationDingTalkLoginReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationDingTalkLoginReplyMultiError) AllErrors() []error { return m }

// GetOrganizationDingTalkLoginReplyValidationError is the validation error
// returned by GetOrganizationDingTalkLoginReply.Validate if the designated
// constraints aren't met.
type GetOrganizationDingTalkLoginReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationDingTalkLoginReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationDingTalkLoginReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationDingTalkLoginReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationDingTalkLoginReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationDingTalkLoginReplyValidationError) ErrorName() string {
	return "GetOrganizationDingTalkLoginReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationDingTalkLoginReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationDingTalkLoginReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationDingTalkLoginReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationDingTalkLoginReplyValidationError{}

// Validate checks the field values on DelOrganizationDingTalkLoginReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelOrganizationDingTalkLoginReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelOrganizationDingTalkLoginReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DelOrganizationDingTalkLoginReqMultiError, or nil if none found.
func (m *DelOrganizationDingTalkLoginReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelOrganizationDingTalkLoginReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := DelOrganizationDingTalkLoginReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := DelOrganizationDingTalkLoginReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelOrganizationDingTalkLoginReqMultiError(errors)
	}

	return nil
}

// DelOrganizationDingTalkLoginReqMultiError is an error wrapping multiple
// validation errors returned by DelOrganizationDingTalkLoginReq.ValidateAll()
// if the designated constraints aren't met.
type DelOrganizationDingTalkLoginReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelOrganizationDingTalkLoginReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelOrganizationDingTalkLoginReqMultiError) AllErrors() []error { return m }

// DelOrganizationDingTalkLoginReqValidationError is the validation error
// returned by DelOrganizationDingTalkLoginReq.Validate if the designated
// constraints aren't met.
type DelOrganizationDingTalkLoginReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelOrganizationDingTalkLoginReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelOrganizationDingTalkLoginReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelOrganizationDingTalkLoginReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelOrganizationDingTalkLoginReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelOrganizationDingTalkLoginReqValidationError) ErrorName() string {
	return "DelOrganizationDingTalkLoginReqValidationError"
}

// Error satisfies the builtin error interface
func (e DelOrganizationDingTalkLoginReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelOrganizationDingTalkLoginReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelOrganizationDingTalkLoginReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelOrganizationDingTalkLoginReqValidationError{}

// Validate checks the field values on DelOrganizationDingTalkLoginReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DelOrganizationDingTalkLoginReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelOrganizationDingTalkLoginReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DelOrganizationDingTalkLoginReplyMultiError, or nil if none found.
func (m *DelOrganizationDingTalkLoginReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DelOrganizationDingTalkLoginReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return DelOrganizationDingTalkLoginReplyMultiError(errors)
	}

	return nil
}

// DelOrganizationDingTalkLoginReplyMultiError is an error wrapping multiple
// validation errors returned by
// DelOrganizationDingTalkLoginReply.ValidateAll() if the designated
// constraints aren't met.
type DelOrganizationDingTalkLoginReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelOrganizationDingTalkLoginReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelOrganizationDingTalkLoginReplyMultiError) AllErrors() []error { return m }

// DelOrganizationDingTalkLoginReplyValidationError is the validation error
// returned by DelOrganizationDingTalkLoginReply.Validate if the designated
// constraints aren't met.
type DelOrganizationDingTalkLoginReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelOrganizationDingTalkLoginReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelOrganizationDingTalkLoginReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelOrganizationDingTalkLoginReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelOrganizationDingTalkLoginReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelOrganizationDingTalkLoginReplyValidationError) ErrorName() string {
	return "DelOrganizationDingTalkLoginReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DelOrganizationDingTalkLoginReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelOrganizationDingTalkLoginReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelOrganizationDingTalkLoginReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelOrganizationDingTalkLoginReplyValidationError{}

// Validate checks the field values on OrganizationDingTalkLoginReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrganizationDingTalkLoginReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrganizationDingTalkLoginReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrganizationDingTalkLoginReqMultiError, or nil if none found.
func (m *OrganizationDingTalkLoginReq) ValidateAll() error {
	return m.validate(true)
}

func (m *OrganizationDingTalkLoginReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserUuid

	if utf8.RuneCountInString(m.GetAuthCode()) < 1 {
		err := OrganizationDingTalkLoginReqValidationError{
			field:  "AuthCode",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetState()) < 1 {
		err := OrganizationDingTalkLoginReqValidationError{
			field:  "State",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OrganizationDingTalkLoginReqMultiError(errors)
	}

	return nil
}

// OrganizationDingTalkLoginReqMultiError is an error wrapping multiple
// validation errors returned by OrganizationDingTalkLoginReq.ValidateAll() if
// the designated constraints aren't met.
type OrganizationDingTalkLoginReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrganizationDingTalkLoginReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrganizationDingTalkLoginReqMultiError) AllErrors() []error { return m }

// OrganizationDingTalkLoginReqValidationError is the validation error returned
// by OrganizationDingTalkLoginReq.Validate if the designated constraints
// aren't met.
type OrganizationDingTalkLoginReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrganizationDingTalkLoginReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrganizationDingTalkLoginReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrganizationDingTalkLoginReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrganizationDingTalkLoginReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrganizationDingTalkLoginReqValidationError) ErrorName() string {
	return "OrganizationDingTalkLoginReqValidationError"
}

// Error satisfies the builtin error interface
func (e OrganizationDingTalkLoginReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrganizationDingTalkLoginReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrganizationDingTalkLoginReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrganizationDingTalkLoginReqValidationError{}

// Validate checks the field values on OrganizationDingTalkLoginReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrganizationDingTalkLoginReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrganizationDingTalkLoginReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// OrganizationDingTalkLoginReplyMultiError, or nil if none found.
func (m *OrganizationDingTalkLoginReply) ValidateAll() error {
	return m.validate(true)
}

func (m *OrganizationDingTalkLoginReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Redirect

	// no validation rules for RedirectUrl

	// no validation rules for Token

	// no validation rules for Content

	if len(errors) > 0 {
		return OrganizationDingTalkLoginReplyMultiError(errors)
	}

	return nil
}

// OrganizationDingTalkLoginReplyMultiError is an error wrapping multiple
// validation errors returned by OrganizationDingTalkLoginReply.ValidateAll()
// if the designated constraints aren't met.
type OrganizationDingTalkLoginReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrganizationDingTalkLoginReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrganizationDingTalkLoginReplyMultiError) AllErrors() []error { return m }

// OrganizationDingTalkLoginReplyValidationError is the validation error
// returned by OrganizationDingTalkLoginReply.Validate if the designated
// constraints aren't met.
type OrganizationDingTalkLoginReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrganizationDingTalkLoginReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrganizationDingTalkLoginReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrganizationDingTalkLoginReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrganizationDingTalkLoginReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrganizationDingTalkLoginReplyValidationError) ErrorName() string {
	return "OrganizationDingTalkLoginReplyValidationError"
}

// Error satisfies the builtin error interface
func (e OrganizationDingTalkLoginReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrganizationDingTalkLoginReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrganizationDingTalkLoginReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrganizationDingTalkLoginReplyValidationError{}

// Validate checks the field values on GetOrganizationDingTalkLoginUrlReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetOrganizationDingTalkLoginUrlReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationDingTalkLoginUrlReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetOrganizationDingTalkLoginUrlReqMultiError, or nil if none found.
func (m *GetOrganizationDingTalkLoginUrlReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationDingTalkLoginUrlReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := GetOrganizationDingTalkLoginUrlReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := GetOrganizationDingTalkLoginUrlReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetOrganizationDingTalkLoginUrlReqMultiError(errors)
	}

	return nil
}

// GetOrganizationDingTalkLoginUrlReqMultiError is an error wrapping multiple
// validation errors returned by
// GetOrganizationDingTalkLoginUrlReq.ValidateAll() if the designated
// constraints aren't met.
type GetOrganizationDingTalkLoginUrlReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationDingTalkLoginUrlReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationDingTalkLoginUrlReqMultiError) AllErrors() []error { return m }

// GetOrganizationDingTalkLoginUrlReqValidationError is the validation error
// returned by GetOrganizationDingTalkLoginUrlReq.Validate if the designated
// constraints aren't met.
type GetOrganizationDingTalkLoginUrlReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationDingTalkLoginUrlReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationDingTalkLoginUrlReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationDingTalkLoginUrlReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationDingTalkLoginUrlReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationDingTalkLoginUrlReqValidationError) ErrorName() string {
	return "GetOrganizationDingTalkLoginUrlReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationDingTalkLoginUrlReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationDingTalkLoginUrlReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationDingTalkLoginUrlReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationDingTalkLoginUrlReqValidationError{}

// Validate checks the field values on GetOrganizationDingTalkLoginUrlReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetOrganizationDingTalkLoginUrlReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationDingTalkLoginUrlReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetOrganizationDingTalkLoginUrlReplyMultiError, or nil if none found.
func (m *GetOrganizationDingTalkLoginUrlReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationDingTalkLoginUrlReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if len(errors) > 0 {
		return GetOrganizationDingTalkLoginUrlReplyMultiError(errors)
	}

	return nil
}

// GetOrganizationDingTalkLoginUrlReplyMultiError is an error wrapping multiple
// validation errors returned by
// GetOrganizationDingTalkLoginUrlReply.ValidateAll() if the designated
// constraints aren't met.
type GetOrganizationDingTalkLoginUrlReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationDingTalkLoginUrlReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationDingTalkLoginUrlReplyMultiError) AllErrors() []error { return m }

// GetOrganizationDingTalkLoginUrlReplyValidationError is the validation error
// returned by GetOrganizationDingTalkLoginUrlReply.Validate if the designated
// constraints aren't met.
type GetOrganizationDingTalkLoginUrlReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationDingTalkLoginUrlReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationDingTalkLoginUrlReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationDingTalkLoginUrlReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationDingTalkLoginUrlReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationDingTalkLoginUrlReplyValidationError) ErrorName() string {
	return "GetOrganizationDingTalkLoginUrlReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationDingTalkLoginUrlReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationDingTalkLoginUrlReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationDingTalkLoginUrlReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationDingTalkLoginUrlReplyValidationError{}

// Validate checks the field values on GetOrganizationDingTalkUserReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationDingTalkUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationDingTalkUserReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetOrganizationDingTalkUserReqMultiError, or nil if none found.
func (m *GetOrganizationDingTalkUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationDingTalkUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := GetOrganizationDingTalkUserReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := GetOrganizationDingTalkUserReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetOrganizationDingTalkUserReqMultiError(errors)
	}

	return nil
}

// GetOrganizationDingTalkUserReqMultiError is an error wrapping multiple
// validation errors returned by GetOrganizationDingTalkUserReq.ValidateAll()
// if the designated constraints aren't met.
type GetOrganizationDingTalkUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationDingTalkUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationDingTalkUserReqMultiError) AllErrors() []error { return m }

// GetOrganizationDingTalkUserReqValidationError is the validation error
// returned by GetOrganizationDingTalkUserReq.Validate if the designated
// constraints aren't met.
type GetOrganizationDingTalkUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationDingTalkUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationDingTalkUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationDingTalkUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationDingTalkUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationDingTalkUserReqValidationError) ErrorName() string {
	return "GetOrganizationDingTalkUserReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationDingTalkUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationDingTalkUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationDingTalkUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationDingTalkUserReqValidationError{}

// Validate checks the field values on GetOrganizationDingTalkUserReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetOrganizationDingTalkUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationDingTalkUserReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetOrganizationDingTalkUserReplyMultiError, or nil if none found.
func (m *GetOrganizationDingTalkUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationDingTalkUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgUuid

	// no validation rules for UserUuid

	// no validation rules for Nick

	// no validation rules for UnionId

	// no validation rules for UserId

	// no validation rules for ContactType

	// no validation rules for AvatarUrl

	// no validation rules for OpenId

	// no validation rules for Mobile

	// no validation rules for StateCode

	// no validation rules for Email

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return GetOrganizationDingTalkUserReplyMultiError(errors)
	}

	return nil
}

// GetOrganizationDingTalkUserReplyMultiError is an error wrapping multiple
// validation errors returned by
// GetOrganizationDingTalkUserReply.ValidateAll() if the designated
// constraints aren't met.
type GetOrganizationDingTalkUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationDingTalkUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationDingTalkUserReplyMultiError) AllErrors() []error { return m }

// GetOrganizationDingTalkUserReplyValidationError is the validation error
// returned by GetOrganizationDingTalkUserReply.Validate if the designated
// constraints aren't met.
type GetOrganizationDingTalkUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationDingTalkUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationDingTalkUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationDingTalkUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationDingTalkUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationDingTalkUserReplyValidationError) ErrorName() string {
	return "GetOrganizationDingTalkUserReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationDingTalkUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationDingTalkUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationDingTalkUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationDingTalkUserReplyValidationError{}

// Validate checks the field values on GetOrganizationDingTalkTokenReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationDingTalkTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationDingTalkTokenReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetOrganizationDingTalkTokenReqMultiError, or nil if none found.
func (m *GetOrganizationDingTalkTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationDingTalkTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := GetOrganizationDingTalkTokenReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := GetOrganizationDingTalkTokenReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetOrganizationDingTalkTokenReqMultiError(errors)
	}

	return nil
}

// GetOrganizationDingTalkTokenReqMultiError is an error wrapping multiple
// validation errors returned by GetOrganizationDingTalkTokenReq.ValidateAll()
// if the designated constraints aren't met.
type GetOrganizationDingTalkTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationDingTalkTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationDingTalkTokenReqMultiError) AllErrors() []error { return m }

// GetOrganizationDingTalkTokenReqValidationError is the validation error
// returned by GetOrganizationDingTalkTokenReq.Validate if the designated
// constraints aren't met.
type GetOrganizationDingTalkTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationDingTalkTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationDingTalkTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationDingTalkTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationDingTalkTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationDingTalkTokenReqValidationError) ErrorName() string {
	return "GetOrganizationDingTalkTokenReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationDingTalkTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationDingTalkTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationDingTalkTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationDingTalkTokenReqValidationError{}

// Validate checks the field values on GetOrganizationDingTalkTokenReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetOrganizationDingTalkTokenReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationDingTalkTokenReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetOrganizationDingTalkTokenReplyMultiError, or nil if none found.
func (m *GetOrganizationDingTalkTokenReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationDingTalkTokenReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return GetOrganizationDingTalkTokenReplyMultiError(errors)
	}

	return nil
}

// GetOrganizationDingTalkTokenReplyMultiError is an error wrapping multiple
// validation errors returned by
// GetOrganizationDingTalkTokenReply.ValidateAll() if the designated
// constraints aren't met.
type GetOrganizationDingTalkTokenReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationDingTalkTokenReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationDingTalkTokenReplyMultiError) AllErrors() []error { return m }

// GetOrganizationDingTalkTokenReplyValidationError is the validation error
// returned by GetOrganizationDingTalkTokenReply.Validate if the designated
// constraints aren't met.
type GetOrganizationDingTalkTokenReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationDingTalkTokenReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationDingTalkTokenReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationDingTalkTokenReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationDingTalkTokenReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationDingTalkTokenReplyValidationError) ErrorName() string {
	return "GetOrganizationDingTalkTokenReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationDingTalkTokenReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationDingTalkTokenReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationDingTalkTokenReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationDingTalkTokenReplyValidationError{}

// Validate checks the field values on Role with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Role) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Role with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RoleMultiError, or nil if none found.
func (m *Role) ValidateAll() error {
	return m.validate(true)
}

func (m *Role) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RoleMultiError(errors)
	}

	return nil
}

// RoleMultiError is an error wrapping multiple validation errors returned by
// Role.ValidateAll() if the designated constraints aren't met.
type RoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleMultiError) AllErrors() []error { return m }

// RoleValidationError is the validation error returned by Role.Validate if the
// designated constraints aren't met.
type RoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleValidationError) ErrorName() string { return "RoleValidationError" }

// Error satisfies the builtin error interface
func (e RoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleValidationError{}

// Validate checks the field values on AddOAuthAppReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddOAuthAppReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOAuthAppReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddOAuthAppReqMultiError,
// or nil if none found.
func (m *AddOAuthAppReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOAuthAppReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppName

	// no validation rules for ClientId

	// no validation rules for ClientSecret

	// no validation rules for RedirectUrl

	// no validation rules for AppLogo

	if len(errors) > 0 {
		return AddOAuthAppReqMultiError(errors)
	}

	return nil
}

// AddOAuthAppReqMultiError is an error wrapping multiple validation errors
// returned by AddOAuthAppReq.ValidateAll() if the designated constraints
// aren't met.
type AddOAuthAppReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOAuthAppReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOAuthAppReqMultiError) AllErrors() []error { return m }

// AddOAuthAppReqValidationError is the validation error returned by
// AddOAuthAppReq.Validate if the designated constraints aren't met.
type AddOAuthAppReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOAuthAppReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOAuthAppReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOAuthAppReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOAuthAppReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOAuthAppReqValidationError) ErrorName() string { return "AddOAuthAppReqValidationError" }

// Error satisfies the builtin error interface
func (e AddOAuthAppReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOAuthAppReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOAuthAppReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOAuthAppReqValidationError{}

// Validate checks the field values on AddOAuthAppReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddOAuthAppReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOAuthAppReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddOAuthAppReplyMultiError, or nil if none found.
func (m *AddOAuthAppReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOAuthAppReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestId

	if len(errors) > 0 {
		return AddOAuthAppReplyMultiError(errors)
	}

	return nil
}

// AddOAuthAppReplyMultiError is an error wrapping multiple validation errors
// returned by AddOAuthAppReply.ValidateAll() if the designated constraints
// aren't met.
type AddOAuthAppReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOAuthAppReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOAuthAppReplyMultiError) AllErrors() []error { return m }

// AddOAuthAppReplyValidationError is the validation error returned by
// AddOAuthAppReply.Validate if the designated constraints aren't met.
type AddOAuthAppReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOAuthAppReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOAuthAppReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOAuthAppReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOAuthAppReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOAuthAppReplyValidationError) ErrorName() string { return "AddOAuthAppReplyValidationError" }

// Error satisfies the builtin error interface
func (e AddOAuthAppReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOAuthAppReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOAuthAppReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOAuthAppReplyValidationError{}

// Validate checks the field values on GetOAuthAppReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetOAuthAppReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOAuthAppReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetOAuthAppReqMultiError,
// or nil if none found.
func (m *GetOAuthAppReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOAuthAppReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientId

	if len(errors) > 0 {
		return GetOAuthAppReqMultiError(errors)
	}

	return nil
}

// GetOAuthAppReqMultiError is an error wrapping multiple validation errors
// returned by GetOAuthAppReq.ValidateAll() if the designated constraints
// aren't met.
type GetOAuthAppReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOAuthAppReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOAuthAppReqMultiError) AllErrors() []error { return m }

// GetOAuthAppReqValidationError is the validation error returned by
// GetOAuthAppReq.Validate if the designated constraints aren't met.
type GetOAuthAppReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOAuthAppReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOAuthAppReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOAuthAppReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOAuthAppReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOAuthAppReqValidationError) ErrorName() string { return "GetOAuthAppReqValidationError" }

// Error satisfies the builtin error interface
func (e GetOAuthAppReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOAuthAppReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOAuthAppReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOAuthAppReqValidationError{}

// Validate checks the field values on GetOAuthAppReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetOAuthAppReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOAuthAppReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOAuthAppReplyMultiError, or nil if none found.
func (m *GetOAuthAppReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOAuthAppReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestId

	if all {
		switch v := interface{}(m.GetOauthApp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOAuthAppReplyValidationError{
					field:  "OauthApp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOAuthAppReplyValidationError{
					field:  "OauthApp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOauthApp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOAuthAppReplyValidationError{
				field:  "OauthApp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOAuthAppReplyMultiError(errors)
	}

	return nil
}

// GetOAuthAppReplyMultiError is an error wrapping multiple validation errors
// returned by GetOAuthAppReply.ValidateAll() if the designated constraints
// aren't met.
type GetOAuthAppReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOAuthAppReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOAuthAppReplyMultiError) AllErrors() []error { return m }

// GetOAuthAppReplyValidationError is the validation error returned by
// GetOAuthAppReply.Validate if the designated constraints aren't met.
type GetOAuthAppReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOAuthAppReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOAuthAppReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOAuthAppReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOAuthAppReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOAuthAppReplyValidationError) ErrorName() string { return "GetOAuthAppReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetOAuthAppReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOAuthAppReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOAuthAppReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOAuthAppReplyValidationError{}

// Validate checks the field values on OAuthAuthorizeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OAuthAuthorizeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OAuthAuthorizeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OAuthAuthorizeReqMultiError, or nil if none found.
func (m *OAuthAuthorizeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *OAuthAuthorizeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientId

	// no validation rules for State

	if len(errors) > 0 {
		return OAuthAuthorizeReqMultiError(errors)
	}

	return nil
}

// OAuthAuthorizeReqMultiError is an error wrapping multiple validation errors
// returned by OAuthAuthorizeReq.ValidateAll() if the designated constraints
// aren't met.
type OAuthAuthorizeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OAuthAuthorizeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OAuthAuthorizeReqMultiError) AllErrors() []error { return m }

// OAuthAuthorizeReqValidationError is the validation error returned by
// OAuthAuthorizeReq.Validate if the designated constraints aren't met.
type OAuthAuthorizeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OAuthAuthorizeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OAuthAuthorizeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OAuthAuthorizeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OAuthAuthorizeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OAuthAuthorizeReqValidationError) ErrorName() string {
	return "OAuthAuthorizeReqValidationError"
}

// Error satisfies the builtin error interface
func (e OAuthAuthorizeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOAuthAuthorizeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OAuthAuthorizeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OAuthAuthorizeReqValidationError{}

// Validate checks the field values on OAuthAuthorizeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OAuthAuthorizeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OAuthAuthorizeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OAuthAuthorizeReplyMultiError, or nil if none found.
func (m *OAuthAuthorizeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *OAuthAuthorizeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestId

	// no validation rules for RedirectUrl

	if len(errors) > 0 {
		return OAuthAuthorizeReplyMultiError(errors)
	}

	return nil
}

// OAuthAuthorizeReplyMultiError is an error wrapping multiple validation
// errors returned by OAuthAuthorizeReply.ValidateAll() if the designated
// constraints aren't met.
type OAuthAuthorizeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OAuthAuthorizeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OAuthAuthorizeReplyMultiError) AllErrors() []error { return m }

// OAuthAuthorizeReplyValidationError is the validation error returned by
// OAuthAuthorizeReply.Validate if the designated constraints aren't met.
type OAuthAuthorizeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OAuthAuthorizeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OAuthAuthorizeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OAuthAuthorizeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OAuthAuthorizeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OAuthAuthorizeReplyValidationError) ErrorName() string {
	return "OAuthAuthorizeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e OAuthAuthorizeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOAuthAuthorizeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OAuthAuthorizeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OAuthAuthorizeReplyValidationError{}

// Validate checks the field values on OAuthTokenReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OAuthTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OAuthTokenReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OAuthTokenReqMultiError, or
// nil if none found.
func (m *OAuthTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *OAuthTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientId

	// no validation rules for Code

	// no validation rules for Secret

	if len(errors) > 0 {
		return OAuthTokenReqMultiError(errors)
	}

	return nil
}

// OAuthTokenReqMultiError is an error wrapping multiple validation errors
// returned by OAuthTokenReq.ValidateAll() if the designated constraints
// aren't met.
type OAuthTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OAuthTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OAuthTokenReqMultiError) AllErrors() []error { return m }

// OAuthTokenReqValidationError is the validation error returned by
// OAuthTokenReq.Validate if the designated constraints aren't met.
type OAuthTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OAuthTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OAuthTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OAuthTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OAuthTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OAuthTokenReqValidationError) ErrorName() string { return "OAuthTokenReqValidationError" }

// Error satisfies the builtin error interface
func (e OAuthTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOAuthTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OAuthTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OAuthTokenReqValidationError{}

// Validate checks the field values on OAuthTokenReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OAuthTokenReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OAuthTokenReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OAuthTokenReplyMultiError, or nil if none found.
func (m *OAuthTokenReply) ValidateAll() error {
	return m.validate(true)
}

func (m *OAuthTokenReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for TokenType

	if len(errors) > 0 {
		return OAuthTokenReplyMultiError(errors)
	}

	return nil
}

// OAuthTokenReplyMultiError is an error wrapping multiple validation errors
// returned by OAuthTokenReply.ValidateAll() if the designated constraints
// aren't met.
type OAuthTokenReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OAuthTokenReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OAuthTokenReplyMultiError) AllErrors() []error { return m }

// OAuthTokenReplyValidationError is the validation error returned by
// OAuthTokenReply.Validate if the designated constraints aren't met.
type OAuthTokenReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OAuthTokenReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OAuthTokenReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OAuthTokenReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OAuthTokenReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OAuthTokenReplyValidationError) ErrorName() string { return "OAuthTokenReplyValidationError" }

// Error satisfies the builtin error interface
func (e OAuthTokenReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOAuthTokenReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OAuthTokenReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OAuthTokenReplyValidationError{}

// Validate checks the field values on OAuthUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OAuthUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OAuthUserReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OAuthUserReqMultiError, or
// nil if none found.
func (m *OAuthUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *OAuthUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return OAuthUserReqMultiError(errors)
	}

	return nil
}

// OAuthUserReqMultiError is an error wrapping multiple validation errors
// returned by OAuthUserReq.ValidateAll() if the designated constraints aren't met.
type OAuthUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OAuthUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OAuthUserReqMultiError) AllErrors() []error { return m }

// OAuthUserReqValidationError is the validation error returned by
// OAuthUserReq.Validate if the designated constraints aren't met.
type OAuthUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OAuthUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OAuthUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OAuthUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OAuthUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OAuthUserReqValidationError) ErrorName() string { return "OAuthUserReqValidationError" }

// Error satisfies the builtin error interface
func (e OAuthUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOAuthUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OAuthUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OAuthUserReqValidationError{}

// Validate checks the field values on OAuthUserReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OAuthUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OAuthUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OAuthUserReplyMultiError,
// or nil if none found.
func (m *OAuthUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *OAuthUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for UserId

	// no validation rules for Email

	// no validation rules for Country

	// no validation rules for City

	// no validation rules for Sex

	if len(errors) > 0 {
		return OAuthUserReplyMultiError(errors)
	}

	return nil
}

// OAuthUserReplyMultiError is an error wrapping multiple validation errors
// returned by OAuthUserReply.ValidateAll() if the designated constraints
// aren't met.
type OAuthUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OAuthUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OAuthUserReplyMultiError) AllErrors() []error { return m }

// OAuthUserReplyValidationError is the validation error returned by
// OAuthUserReply.Validate if the designated constraints aren't met.
type OAuthUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OAuthUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OAuthUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OAuthUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OAuthUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OAuthUserReplyValidationError) ErrorName() string { return "OAuthUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e OAuthUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOAuthUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OAuthUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OAuthUserReplyValidationError{}

// Validate checks the field values on EncryptionWithSaltReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EncryptionWithSaltReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EncryptionWithSaltReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EncryptionWithSaltReqMultiError, or nil if none found.
func (m *EncryptionWithSaltReq) ValidateAll() error {
	return m.validate(true)
}

func (m *EncryptionWithSaltReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := EncryptionWithSaltReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRealString()) < 1 {
		err := EncryptionWithSaltReqValidationError{
			field:  "RealString",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EncryptionWithSaltReqMultiError(errors)
	}

	return nil
}

// EncryptionWithSaltReqMultiError is an error wrapping multiple validation
// errors returned by EncryptionWithSaltReq.ValidateAll() if the designated
// constraints aren't met.
type EncryptionWithSaltReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EncryptionWithSaltReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EncryptionWithSaltReqMultiError) AllErrors() []error { return m }

// EncryptionWithSaltReqValidationError is the validation error returned by
// EncryptionWithSaltReq.Validate if the designated constraints aren't met.
type EncryptionWithSaltReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EncryptionWithSaltReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EncryptionWithSaltReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EncryptionWithSaltReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EncryptionWithSaltReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EncryptionWithSaltReqValidationError) ErrorName() string {
	return "EncryptionWithSaltReqValidationError"
}

// Error satisfies the builtin error interface
func (e EncryptionWithSaltReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEncryptionWithSaltReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EncryptionWithSaltReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EncryptionWithSaltReqValidationError{}

// Validate checks the field values on EncryptionWithSaltReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EncryptionWithSaltReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EncryptionWithSaltReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EncryptionWithSaltReplyMultiError, or nil if none found.
func (m *EncryptionWithSaltReply) ValidateAll() error {
	return m.validate(true)
}

func (m *EncryptionWithSaltReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EncryptString

	if len(errors) > 0 {
		return EncryptionWithSaltReplyMultiError(errors)
	}

	return nil
}

// EncryptionWithSaltReplyMultiError is an error wrapping multiple validation
// errors returned by EncryptionWithSaltReply.ValidateAll() if the designated
// constraints aren't met.
type EncryptionWithSaltReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EncryptionWithSaltReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EncryptionWithSaltReplyMultiError) AllErrors() []error { return m }

// EncryptionWithSaltReplyValidationError is the validation error returned by
// EncryptionWithSaltReply.Validate if the designated constraints aren't met.
type EncryptionWithSaltReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EncryptionWithSaltReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EncryptionWithSaltReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EncryptionWithSaltReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EncryptionWithSaltReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EncryptionWithSaltReplyValidationError) ErrorName() string {
	return "EncryptionWithSaltReplyValidationError"
}

// Error satisfies the builtin error interface
func (e EncryptionWithSaltReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEncryptionWithSaltReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EncryptionWithSaltReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EncryptionWithSaltReplyValidationError{}

// Validate checks the field values on DecryptionWithSaltReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DecryptionWithSaltReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DecryptionWithSaltReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DecryptionWithSaltReqMultiError, or nil if none found.
func (m *DecryptionWithSaltReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DecryptionWithSaltReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := DecryptionWithSaltReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetEncryptString()) < 1 {
		err := DecryptionWithSaltReqValidationError{
			field:  "EncryptString",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DecryptionWithSaltReqMultiError(errors)
	}

	return nil
}

// DecryptionWithSaltReqMultiError is an error wrapping multiple validation
// errors returned by DecryptionWithSaltReq.ValidateAll() if the designated
// constraints aren't met.
type DecryptionWithSaltReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DecryptionWithSaltReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DecryptionWithSaltReqMultiError) AllErrors() []error { return m }

// DecryptionWithSaltReqValidationError is the validation error returned by
// DecryptionWithSaltReq.Validate if the designated constraints aren't met.
type DecryptionWithSaltReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DecryptionWithSaltReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DecryptionWithSaltReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DecryptionWithSaltReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DecryptionWithSaltReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DecryptionWithSaltReqValidationError) ErrorName() string {
	return "DecryptionWithSaltReqValidationError"
}

// Error satisfies the builtin error interface
func (e DecryptionWithSaltReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDecryptionWithSaltReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DecryptionWithSaltReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DecryptionWithSaltReqValidationError{}

// Validate checks the field values on DecryptionWithSaltReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DecryptionWithSaltReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DecryptionWithSaltReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DecryptionWithSaltReplyMultiError, or nil if none found.
func (m *DecryptionWithSaltReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DecryptionWithSaltReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RealString

	if len(errors) > 0 {
		return DecryptionWithSaltReplyMultiError(errors)
	}

	return nil
}

// DecryptionWithSaltReplyMultiError is an error wrapping multiple validation
// errors returned by DecryptionWithSaltReply.ValidateAll() if the designated
// constraints aren't met.
type DecryptionWithSaltReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DecryptionWithSaltReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DecryptionWithSaltReplyMultiError) AllErrors() []error { return m }

// DecryptionWithSaltReplyValidationError is the validation error returned by
// DecryptionWithSaltReply.Validate if the designated constraints aren't met.
type DecryptionWithSaltReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DecryptionWithSaltReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DecryptionWithSaltReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DecryptionWithSaltReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DecryptionWithSaltReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DecryptionWithSaltReplyValidationError) ErrorName() string {
	return "DecryptionWithSaltReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DecryptionWithSaltReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDecryptionWithSaltReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DecryptionWithSaltReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DecryptionWithSaltReplyValidationError{}

// Validate checks the field values on GetOrganizationUserReply_OrgUser with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetOrganizationUserReply_OrgUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationUserReply_OrgUser with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetOrganizationUserReply_OrgUserMultiError, or nil if none found.
func (m *GetOrganizationUserReply_OrgUser) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationUserReply_OrgUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgUuid

	// no validation rules for UserUuid

	// no validation rules for UserName

	// no validation rules for DateJoined

	// no validation rules for Role

	if len(errors) > 0 {
		return GetOrganizationUserReply_OrgUserMultiError(errors)
	}

	return nil
}

// GetOrganizationUserReply_OrgUserMultiError is an error wrapping multiple
// validation errors returned by
// GetOrganizationUserReply_OrgUser.ValidateAll() if the designated
// constraints aren't met.
type GetOrganizationUserReply_OrgUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationUserReply_OrgUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationUserReply_OrgUserMultiError) AllErrors() []error { return m }

// GetOrganizationUserReply_OrgUserValidationError is the validation error
// returned by GetOrganizationUserReply_OrgUser.Validate if the designated
// constraints aren't met.
type GetOrganizationUserReply_OrgUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationUserReply_OrgUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationUserReply_OrgUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationUserReply_OrgUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationUserReply_OrgUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationUserReply_OrgUserValidationError) ErrorName() string {
	return "GetOrganizationUserReply_OrgUserValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationUserReply_OrgUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationUserReply_OrgUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationUserReply_OrgUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationUserReply_OrgUserValidationError{}

// Validate checks the field values on GetUserOrganizationReply_SelfOrgList
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetUserOrganizationReply_SelfOrgList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserOrganizationReply_SelfOrgList
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetUserOrganizationReply_SelfOrgListMultiError, or nil if none found.
func (m *GetUserOrganizationReply_SelfOrgList) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserOrganizationReply_SelfOrgList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgUuid

	// no validation rules for OrgName

	// no validation rules for Role

	// no validation rules for DateJoined

	// no validation rules for OwnerUuid

	// no validation rules for OwnerName

	if len(errors) > 0 {
		return GetUserOrganizationReply_SelfOrgListMultiError(errors)
	}

	return nil
}

// GetUserOrganizationReply_SelfOrgListMultiError is an error wrapping multiple
// validation errors returned by
// GetUserOrganizationReply_SelfOrgList.ValidateAll() if the designated
// constraints aren't met.
type GetUserOrganizationReply_SelfOrgListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserOrganizationReply_SelfOrgListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserOrganizationReply_SelfOrgListMultiError) AllErrors() []error { return m }

// GetUserOrganizationReply_SelfOrgListValidationError is the validation error
// returned by GetUserOrganizationReply_SelfOrgList.Validate if the designated
// constraints aren't met.
type GetUserOrganizationReply_SelfOrgListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserOrganizationReply_SelfOrgListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserOrganizationReply_SelfOrgListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserOrganizationReply_SelfOrgListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserOrganizationReply_SelfOrgListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserOrganizationReply_SelfOrgListValidationError) ErrorName() string {
	return "GetUserOrganizationReply_SelfOrgListValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserOrganizationReply_SelfOrgListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserOrganizationReply_SelfOrgList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserOrganizationReply_SelfOrgListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserOrganizationReply_SelfOrgListValidationError{}
