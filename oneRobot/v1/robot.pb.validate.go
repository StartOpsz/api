// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/robot/v1/robot.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateQuestionReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateQuestionReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateQuestionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateQuestionReqMultiError, or nil if none found.
func (m *CreateQuestionReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateQuestionReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := CreateQuestionReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := CreateQuestionReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetQuestion()) < 1 {
		err := CreateQuestionReqValidationError{
			field:  "Question",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateQuestionReqMultiError(errors)
	}

	return nil
}

// CreateQuestionReqMultiError is an error wrapping multiple validation errors
// returned by CreateQuestionReq.ValidateAll() if the designated constraints
// aren't met.
type CreateQuestionReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateQuestionReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateQuestionReqMultiError) AllErrors() []error { return m }

// CreateQuestionReqValidationError is the validation error returned by
// CreateQuestionReq.Validate if the designated constraints aren't met.
type CreateQuestionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateQuestionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateQuestionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateQuestionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateQuestionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateQuestionReqValidationError) ErrorName() string {
	return "CreateQuestionReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateQuestionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateQuestionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateQuestionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateQuestionReqValidationError{}

// Validate checks the field values on CreateQuestionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateQuestionReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateQuestionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateQuestionReplyMultiError, or nil if none found.
func (m *CreateQuestionReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateQuestionReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	if len(errors) > 0 {
		return CreateQuestionReplyMultiError(errors)
	}

	return nil
}

// CreateQuestionReplyMultiError is an error wrapping multiple validation
// errors returned by CreateQuestionReply.ValidateAll() if the designated
// constraints aren't met.
type CreateQuestionReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateQuestionReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateQuestionReplyMultiError) AllErrors() []error { return m }

// CreateQuestionReplyValidationError is the validation error returned by
// CreateQuestionReply.Validate if the designated constraints aren't met.
type CreateQuestionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateQuestionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateQuestionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateQuestionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateQuestionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateQuestionReplyValidationError) ErrorName() string {
	return "CreateQuestionReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateQuestionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateQuestionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateQuestionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateQuestionReplyValidationError{}

// Validate checks the field values on GetAnswerReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetAnswerReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAnswerReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetAnswerReqMultiError, or
// nil if none found.
func (m *GetAnswerReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAnswerReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserUuid

	// no validation rules for OrgUuid

	// no validation rules for TaskId

	if len(errors) > 0 {
		return GetAnswerReqMultiError(errors)
	}

	return nil
}

// GetAnswerReqMultiError is an error wrapping multiple validation errors
// returned by GetAnswerReq.ValidateAll() if the designated constraints aren't met.
type GetAnswerReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAnswerReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAnswerReqMultiError) AllErrors() []error { return m }

// GetAnswerReqValidationError is the validation error returned by
// GetAnswerReq.Validate if the designated constraints aren't met.
type GetAnswerReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAnswerReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAnswerReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAnswerReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAnswerReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAnswerReqValidationError) ErrorName() string { return "GetAnswerReqValidationError" }

// Error satisfies the builtin error interface
func (e GetAnswerReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAnswerReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAnswerReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAnswerReqValidationError{}

// Validate checks the field values on GetAnswerReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetAnswerReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAnswerReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetAnswerReplyMultiError,
// or nil if none found.
func (m *GetAnswerReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAnswerReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionUuid

	// no validation rules for Question

	// no validation rules for Answer

	// no validation rules for Result

	// no validation rules for Assistant

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return GetAnswerReplyMultiError(errors)
	}

	return nil
}

// GetAnswerReplyMultiError is an error wrapping multiple validation errors
// returned by GetAnswerReply.ValidateAll() if the designated constraints
// aren't met.
type GetAnswerReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAnswerReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAnswerReplyMultiError) AllErrors() []error { return m }

// GetAnswerReplyValidationError is the validation error returned by
// GetAnswerReply.Validate if the designated constraints aren't met.
type GetAnswerReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAnswerReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAnswerReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAnswerReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAnswerReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAnswerReplyValidationError) ErrorName() string { return "GetAnswerReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetAnswerReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAnswerReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAnswerReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAnswerReplyValidationError{}

// Validate checks the field values on CreateChatSessionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateChatSessionReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateChatSessionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateChatSessionReqMultiError, or nil if none found.
func (m *CreateChatSessionReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateChatSessionReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SystemRole

	if len(errors) > 0 {
		return CreateChatSessionReqMultiError(errors)
	}

	return nil
}

// CreateChatSessionReqMultiError is an error wrapping multiple validation
// errors returned by CreateChatSessionReq.ValidateAll() if the designated
// constraints aren't met.
type CreateChatSessionReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateChatSessionReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateChatSessionReqMultiError) AllErrors() []error { return m }

// CreateChatSessionReqValidationError is the validation error returned by
// CreateChatSessionReq.Validate if the designated constraints aren't met.
type CreateChatSessionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateChatSessionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateChatSessionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateChatSessionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateChatSessionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateChatSessionReqValidationError) ErrorName() string {
	return "CreateChatSessionReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateChatSessionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateChatSessionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateChatSessionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateChatSessionReqValidationError{}

// Validate checks the field values on CreateChatSessionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateChatSessionReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateChatSessionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateChatSessionReplyMultiError, or nil if none found.
func (m *CreateChatSessionReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateChatSessionReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return CreateChatSessionReplyMultiError(errors)
	}

	return nil
}

// CreateChatSessionReplyMultiError is an error wrapping multiple validation
// errors returned by CreateChatSessionReply.ValidateAll() if the designated
// constraints aren't met.
type CreateChatSessionReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateChatSessionReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateChatSessionReplyMultiError) AllErrors() []error { return m }

// CreateChatSessionReplyValidationError is the validation error returned by
// CreateChatSessionReply.Validate if the designated constraints aren't met.
type CreateChatSessionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateChatSessionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateChatSessionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateChatSessionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateChatSessionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateChatSessionReplyValidationError) ErrorName() string {
	return "CreateChatSessionReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateChatSessionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateChatSessionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateChatSessionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateChatSessionReplyValidationError{}

// Validate checks the field values on ListChatSessionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListChatSessionReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListChatSessionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListChatSessionReqMultiError, or nil if none found.
func (m *ListChatSessionReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListChatSessionReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListChatSessionReqMultiError(errors)
	}

	return nil
}

// ListChatSessionReqMultiError is an error wrapping multiple validation errors
// returned by ListChatSessionReq.ValidateAll() if the designated constraints
// aren't met.
type ListChatSessionReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListChatSessionReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListChatSessionReqMultiError) AllErrors() []error { return m }

// ListChatSessionReqValidationError is the validation error returned by
// ListChatSessionReq.Validate if the designated constraints aren't met.
type ListChatSessionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListChatSessionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListChatSessionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListChatSessionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListChatSessionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListChatSessionReqValidationError) ErrorName() string {
	return "ListChatSessionReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListChatSessionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListChatSessionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListChatSessionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListChatSessionReqValidationError{}

// Validate checks the field values on ListChatSessionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListChatSessionReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListChatSessionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListChatSessionReplyMultiError, or nil if none found.
func (m *ListChatSessionReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListChatSessionReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListChatSessionReplyMultiError(errors)
	}

	return nil
}

// ListChatSessionReplyMultiError is an error wrapping multiple validation
// errors returned by ListChatSessionReply.ValidateAll() if the designated
// constraints aren't met.
type ListChatSessionReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListChatSessionReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListChatSessionReplyMultiError) AllErrors() []error { return m }

// ListChatSessionReplyValidationError is the validation error returned by
// ListChatSessionReply.Validate if the designated constraints aren't met.
type ListChatSessionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListChatSessionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListChatSessionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListChatSessionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListChatSessionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListChatSessionReplyValidationError) ErrorName() string {
	return "ListChatSessionReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListChatSessionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListChatSessionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListChatSessionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListChatSessionReplyValidationError{}

// Validate checks the field values on SendChatSessionMsgReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendChatSessionMsgReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendChatSessionMsgReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendChatSessionMsgReqMultiError, or nil if none found.
func (m *SendChatSessionMsgReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendChatSessionMsgReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendChatSessionMsgReqMultiError(errors)
	}

	return nil
}

// SendChatSessionMsgReqMultiError is an error wrapping multiple validation
// errors returned by SendChatSessionMsgReq.ValidateAll() if the designated
// constraints aren't met.
type SendChatSessionMsgReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendChatSessionMsgReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendChatSessionMsgReqMultiError) AllErrors() []error { return m }

// SendChatSessionMsgReqValidationError is the validation error returned by
// SendChatSessionMsgReq.Validate if the designated constraints aren't met.
type SendChatSessionMsgReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendChatSessionMsgReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendChatSessionMsgReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendChatSessionMsgReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendChatSessionMsgReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendChatSessionMsgReqValidationError) ErrorName() string {
	return "SendChatSessionMsgReqValidationError"
}

// Error satisfies the builtin error interface
func (e SendChatSessionMsgReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendChatSessionMsgReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendChatSessionMsgReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendChatSessionMsgReqValidationError{}

// Validate checks the field values on SendChatSessionMsgReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendChatSessionMsgReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendChatSessionMsgReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendChatSessionMsgReplyMultiError, or nil if none found.
func (m *SendChatSessionMsgReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SendChatSessionMsgReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendChatSessionMsgReplyMultiError(errors)
	}

	return nil
}

// SendChatSessionMsgReplyMultiError is an error wrapping multiple validation
// errors returned by SendChatSessionMsgReply.ValidateAll() if the designated
// constraints aren't met.
type SendChatSessionMsgReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendChatSessionMsgReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendChatSessionMsgReplyMultiError) AllErrors() []error { return m }

// SendChatSessionMsgReplyValidationError is the validation error returned by
// SendChatSessionMsgReply.Validate if the designated constraints aren't met.
type SendChatSessionMsgReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendChatSessionMsgReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendChatSessionMsgReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendChatSessionMsgReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendChatSessionMsgReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendChatSessionMsgReplyValidationError) ErrorName() string {
	return "SendChatSessionMsgReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SendChatSessionMsgReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendChatSessionMsgReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendChatSessionMsgReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendChatSessionMsgReplyValidationError{}

// Validate checks the field values on DingTalkBotAssistantReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DingTalkBotAssistantReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DingTalkBotAssistantReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DingTalkBotAssistantReqMultiError, or nil if none found.
func (m *DingTalkBotAssistantReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DingTalkBotAssistantReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Timestamp

	// no validation rules for Sign

	// no validation rules for MsgId

	// no validation rules for Content

	// no validation rules for ConversationType

	// no validation rules for ConversationId

	// no validation rules for ConversationTitle

	// no validation rules for SenderCorpId

	// no validation rules for SenderId

	// no validation rules for SenderNick

	// no validation rules for SessionWebhook

	// no validation rules for SessionWebhookExpiredTime

	// no validation rules for IsAdmin

	// no validation rules for ChatbotCorpId

	// no validation rules for IsInAtList

	// no validation rules for SenderStaffId

	// no validation rules for ChatbotUserId

	// no validation rules for BizSessionId

	if len(errors) > 0 {
		return DingTalkBotAssistantReqMultiError(errors)
	}

	return nil
}

// DingTalkBotAssistantReqMultiError is an error wrapping multiple validation
// errors returned by DingTalkBotAssistantReq.ValidateAll() if the designated
// constraints aren't met.
type DingTalkBotAssistantReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DingTalkBotAssistantReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DingTalkBotAssistantReqMultiError) AllErrors() []error { return m }

// DingTalkBotAssistantReqValidationError is the validation error returned by
// DingTalkBotAssistantReq.Validate if the designated constraints aren't met.
type DingTalkBotAssistantReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DingTalkBotAssistantReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DingTalkBotAssistantReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DingTalkBotAssistantReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DingTalkBotAssistantReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DingTalkBotAssistantReqValidationError) ErrorName() string {
	return "DingTalkBotAssistantReqValidationError"
}

// Error satisfies the builtin error interface
func (e DingTalkBotAssistantReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDingTalkBotAssistantReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DingTalkBotAssistantReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DingTalkBotAssistantReqValidationError{}

// Validate checks the field values on DingTalkBotAssistantReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DingTalkBotAssistantReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DingTalkBotAssistantReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DingTalkBotAssistantReplyMultiError, or nil if none found.
func (m *DingTalkBotAssistantReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DingTalkBotAssistantReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return DingTalkBotAssistantReplyMultiError(errors)
	}

	return nil
}

// DingTalkBotAssistantReplyMultiError is an error wrapping multiple validation
// errors returned by DingTalkBotAssistantReply.ValidateAll() if the
// designated constraints aren't met.
type DingTalkBotAssistantReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DingTalkBotAssistantReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DingTalkBotAssistantReplyMultiError) AllErrors() []error { return m }

// DingTalkBotAssistantReplyValidationError is the validation error returned by
// DingTalkBotAssistantReply.Validate if the designated constraints aren't met.
type DingTalkBotAssistantReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DingTalkBotAssistantReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DingTalkBotAssistantReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DingTalkBotAssistantReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DingTalkBotAssistantReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DingTalkBotAssistantReplyValidationError) ErrorName() string {
	return "DingTalkBotAssistantReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DingTalkBotAssistantReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDingTalkBotAssistantReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DingTalkBotAssistantReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DingTalkBotAssistantReplyValidationError{}
