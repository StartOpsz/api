// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.14.0
// source: oneRobot/v1/robot.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Robot_CreateQuestion_FullMethodName       = "/robot.v1.Robot/CreateQuestion"
	Robot_GetAnswer_FullMethodName            = "/robot.v1.Robot/GetAnswer"
	Robot_GetQuestionHis_FullMethodName       = "/robot.v1.Robot/GetQuestionHis"
	Robot_CreateChatSession_FullMethodName    = "/robot.v1.Robot/CreateChatSession"
	Robot_ListChatSession_FullMethodName      = "/robot.v1.Robot/ListChatSession"
	Robot_SendChatSessionMsg_FullMethodName   = "/robot.v1.Robot/SendChatSessionMsg"
	Robot_DingTalkBotAssistant_FullMethodName = "/robot.v1.Robot/DingTalkBotAssistant"
	Robot_GetThirdChatWsInfo_FullMethodName   = "/robot.v1.Robot/GetThirdChatWsInfo"
)

// RobotClient is the client API for Robot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RobotClient interface {
	// 一问一答
	CreateQuestion(ctx context.Context, in *CreateQuestionReq, opts ...grpc.CallOption) (*CreateQuestionReply, error)
	GetAnswer(ctx context.Context, in *GetAnswerReq, opts ...grpc.CallOption) (*GetAnswerReply, error)
	GetQuestionHis(ctx context.Context, in *GetQuestionHisReq, opts ...grpc.CallOption) (*GetQuestionHisReply, error)
	// chat session
	CreateChatSession(ctx context.Context, in *CreateChatSessionReq, opts ...grpc.CallOption) (*CreateChatSessionReply, error)
	ListChatSession(ctx context.Context, in *ListChatSessionReq, opts ...grpc.CallOption) (*ListChatSessionReply, error)
	SendChatSessionMsg(ctx context.Context, in *SendChatSessionMsgReq, opts ...grpc.CallOption) (*SendChatSessionMsgReply, error)
	DingTalkBotAssistant(ctx context.Context, in *DingTalkBotAssistantReq, opts ...grpc.CallOption) (*DingTalkBotAssistantReply, error)
	// 第三方 chat websocket
	GetThirdChatWsInfo(ctx context.Context, in *GetThirdChatWsInfoReq, opts ...grpc.CallOption) (*GetThirdChatWsInfoReply, error)
}

type robotClient struct {
	cc grpc.ClientConnInterface
}

func NewRobotClient(cc grpc.ClientConnInterface) RobotClient {
	return &robotClient{cc}
}

func (c *robotClient) CreateQuestion(ctx context.Context, in *CreateQuestionReq, opts ...grpc.CallOption) (*CreateQuestionReply, error) {
	out := new(CreateQuestionReply)
	err := c.cc.Invoke(ctx, Robot_CreateQuestion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotClient) GetAnswer(ctx context.Context, in *GetAnswerReq, opts ...grpc.CallOption) (*GetAnswerReply, error) {
	out := new(GetAnswerReply)
	err := c.cc.Invoke(ctx, Robot_GetAnswer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotClient) GetQuestionHis(ctx context.Context, in *GetQuestionHisReq, opts ...grpc.CallOption) (*GetQuestionHisReply, error) {
	out := new(GetQuestionHisReply)
	err := c.cc.Invoke(ctx, Robot_GetQuestionHis_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotClient) CreateChatSession(ctx context.Context, in *CreateChatSessionReq, opts ...grpc.CallOption) (*CreateChatSessionReply, error) {
	out := new(CreateChatSessionReply)
	err := c.cc.Invoke(ctx, Robot_CreateChatSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotClient) ListChatSession(ctx context.Context, in *ListChatSessionReq, opts ...grpc.CallOption) (*ListChatSessionReply, error) {
	out := new(ListChatSessionReply)
	err := c.cc.Invoke(ctx, Robot_ListChatSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotClient) SendChatSessionMsg(ctx context.Context, in *SendChatSessionMsgReq, opts ...grpc.CallOption) (*SendChatSessionMsgReply, error) {
	out := new(SendChatSessionMsgReply)
	err := c.cc.Invoke(ctx, Robot_SendChatSessionMsg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotClient) DingTalkBotAssistant(ctx context.Context, in *DingTalkBotAssistantReq, opts ...grpc.CallOption) (*DingTalkBotAssistantReply, error) {
	out := new(DingTalkBotAssistantReply)
	err := c.cc.Invoke(ctx, Robot_DingTalkBotAssistant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotClient) GetThirdChatWsInfo(ctx context.Context, in *GetThirdChatWsInfoReq, opts ...grpc.CallOption) (*GetThirdChatWsInfoReply, error) {
	out := new(GetThirdChatWsInfoReply)
	err := c.cc.Invoke(ctx, Robot_GetThirdChatWsInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RobotServer is the server API for Robot service.
// All implementations must embed UnimplementedRobotServer
// for forward compatibility
type RobotServer interface {
	// 一问一答
	CreateQuestion(context.Context, *CreateQuestionReq) (*CreateQuestionReply, error)
	GetAnswer(context.Context, *GetAnswerReq) (*GetAnswerReply, error)
	GetQuestionHis(context.Context, *GetQuestionHisReq) (*GetQuestionHisReply, error)
	// chat session
	CreateChatSession(context.Context, *CreateChatSessionReq) (*CreateChatSessionReply, error)
	ListChatSession(context.Context, *ListChatSessionReq) (*ListChatSessionReply, error)
	SendChatSessionMsg(context.Context, *SendChatSessionMsgReq) (*SendChatSessionMsgReply, error)
	DingTalkBotAssistant(context.Context, *DingTalkBotAssistantReq) (*DingTalkBotAssistantReply, error)
	// 第三方 chat websocket
	GetThirdChatWsInfo(context.Context, *GetThirdChatWsInfoReq) (*GetThirdChatWsInfoReply, error)
	mustEmbedUnimplementedRobotServer()
}

// UnimplementedRobotServer must be embedded to have forward compatible implementations.
type UnimplementedRobotServer struct {
}

func (UnimplementedRobotServer) CreateQuestion(context.Context, *CreateQuestionReq) (*CreateQuestionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuestion not implemented")
}
func (UnimplementedRobotServer) GetAnswer(context.Context, *GetAnswerReq) (*GetAnswerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnswer not implemented")
}
func (UnimplementedRobotServer) GetQuestionHis(context.Context, *GetQuestionHisReq) (*GetQuestionHisReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestionHis not implemented")
}
func (UnimplementedRobotServer) CreateChatSession(context.Context, *CreateChatSessionReq) (*CreateChatSessionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChatSession not implemented")
}
func (UnimplementedRobotServer) ListChatSession(context.Context, *ListChatSessionReq) (*ListChatSessionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChatSession not implemented")
}
func (UnimplementedRobotServer) SendChatSessionMsg(context.Context, *SendChatSessionMsgReq) (*SendChatSessionMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendChatSessionMsg not implemented")
}
func (UnimplementedRobotServer) DingTalkBotAssistant(context.Context, *DingTalkBotAssistantReq) (*DingTalkBotAssistantReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DingTalkBotAssistant not implemented")
}
func (UnimplementedRobotServer) GetThirdChatWsInfo(context.Context, *GetThirdChatWsInfoReq) (*GetThirdChatWsInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThirdChatWsInfo not implemented")
}
func (UnimplementedRobotServer) mustEmbedUnimplementedRobotServer() {}

// UnsafeRobotServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RobotServer will
// result in compilation errors.
type UnsafeRobotServer interface {
	mustEmbedUnimplementedRobotServer()
}

func RegisterRobotServer(s grpc.ServiceRegistrar, srv RobotServer) {
	s.RegisterService(&Robot_ServiceDesc, srv)
}

func _Robot_CreateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuestionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotServer).CreateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Robot_CreateQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotServer).CreateQuestion(ctx, req.(*CreateQuestionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Robot_GetAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnswerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotServer).GetAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Robot_GetAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotServer).GetAnswer(ctx, req.(*GetAnswerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Robot_GetQuestionHis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestionHisReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotServer).GetQuestionHis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Robot_GetQuestionHis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotServer).GetQuestionHis(ctx, req.(*GetQuestionHisReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Robot_CreateChatSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotServer).CreateChatSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Robot_CreateChatSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotServer).CreateChatSession(ctx, req.(*CreateChatSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Robot_ListChatSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChatSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotServer).ListChatSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Robot_ListChatSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotServer).ListChatSession(ctx, req.(*ListChatSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Robot_SendChatSessionMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendChatSessionMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotServer).SendChatSessionMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Robot_SendChatSessionMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotServer).SendChatSessionMsg(ctx, req.(*SendChatSessionMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Robot_DingTalkBotAssistant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DingTalkBotAssistantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotServer).DingTalkBotAssistant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Robot_DingTalkBotAssistant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotServer).DingTalkBotAssistant(ctx, req.(*DingTalkBotAssistantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Robot_GetThirdChatWsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThirdChatWsInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotServer).GetThirdChatWsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Robot_GetThirdChatWsInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotServer).GetThirdChatWsInfo(ctx, req.(*GetThirdChatWsInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Robot_ServiceDesc is the grpc.ServiceDesc for Robot service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Robot_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "robot.v1.Robot",
	HandlerType: (*RobotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQuestion",
			Handler:    _Robot_CreateQuestion_Handler,
		},
		{
			MethodName: "GetAnswer",
			Handler:    _Robot_GetAnswer_Handler,
		},
		{
			MethodName: "GetQuestionHis",
			Handler:    _Robot_GetQuestionHis_Handler,
		},
		{
			MethodName: "CreateChatSession",
			Handler:    _Robot_CreateChatSession_Handler,
		},
		{
			MethodName: "ListChatSession",
			Handler:    _Robot_ListChatSession_Handler,
		},
		{
			MethodName: "SendChatSessionMsg",
			Handler:    _Robot_SendChatSessionMsg_Handler,
		},
		{
			MethodName: "DingTalkBotAssistant",
			Handler:    _Robot_DingTalkBotAssistant_Handler,
		},
		{
			MethodName: "GetThirdChatWsInfo",
			Handler:    _Robot_GetThirdChatWsInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oneRobot/v1/robot.proto",
}
