// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.14.0
// source: oneTools/v1/oneTools.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OneTools_ResolveDomain_FullMethodName    = "/oneTools.v1.oneTools/ResolveDomain"
	OneTools_GenerateShortUrl_FullMethodName = "/oneTools.v1.oneTools/GenerateShortUrl"
	OneTools_TimestampConvert_FullMethodName = "/oneTools.v1.oneTools/TimestampConvert"
	OneTools_HttpRequest_FullMethodName      = "/oneTools.v1.oneTools/HttpRequest"
)

// OneToolsClient is the client API for OneTools service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OneToolsClient interface {
	ResolveDomain(ctx context.Context, in *ResolveDomainReq, opts ...grpc.CallOption) (*ResolveDomainReply, error)
	GenerateShortUrl(ctx context.Context, in *GenerateShortUrlReq, opts ...grpc.CallOption) (*GenerateShortUrlReply, error)
	TimestampConvert(ctx context.Context, in *TimestampConvertReq, opts ...grpc.CallOption) (*TimestampConvertReply, error)
	HttpRequest(ctx context.Context, in *HttpRequestReq, opts ...grpc.CallOption) (*HttpRequestReply, error)
}

type oneToolsClient struct {
	cc grpc.ClientConnInterface
}

func NewOneToolsClient(cc grpc.ClientConnInterface) OneToolsClient {
	return &oneToolsClient{cc}
}

func (c *oneToolsClient) ResolveDomain(ctx context.Context, in *ResolveDomainReq, opts ...grpc.CallOption) (*ResolveDomainReply, error) {
	out := new(ResolveDomainReply)
	err := c.cc.Invoke(ctx, OneTools_ResolveDomain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneToolsClient) GenerateShortUrl(ctx context.Context, in *GenerateShortUrlReq, opts ...grpc.CallOption) (*GenerateShortUrlReply, error) {
	out := new(GenerateShortUrlReply)
	err := c.cc.Invoke(ctx, OneTools_GenerateShortUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneToolsClient) TimestampConvert(ctx context.Context, in *TimestampConvertReq, opts ...grpc.CallOption) (*TimestampConvertReply, error) {
	out := new(TimestampConvertReply)
	err := c.cc.Invoke(ctx, OneTools_TimestampConvert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneToolsClient) HttpRequest(ctx context.Context, in *HttpRequestReq, opts ...grpc.CallOption) (*HttpRequestReply, error) {
	out := new(HttpRequestReply)
	err := c.cc.Invoke(ctx, OneTools_HttpRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OneToolsServer is the server API for OneTools service.
// All implementations must embed UnimplementedOneToolsServer
// for forward compatibility
type OneToolsServer interface {
	ResolveDomain(context.Context, *ResolveDomainReq) (*ResolveDomainReply, error)
	GenerateShortUrl(context.Context, *GenerateShortUrlReq) (*GenerateShortUrlReply, error)
	TimestampConvert(context.Context, *TimestampConvertReq) (*TimestampConvertReply, error)
	HttpRequest(context.Context, *HttpRequestReq) (*HttpRequestReply, error)
	mustEmbedUnimplementedOneToolsServer()
}

// UnimplementedOneToolsServer must be embedded to have forward compatible implementations.
type UnimplementedOneToolsServer struct {
}

func (UnimplementedOneToolsServer) ResolveDomain(context.Context, *ResolveDomainReq) (*ResolveDomainReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveDomain not implemented")
}
func (UnimplementedOneToolsServer) GenerateShortUrl(context.Context, *GenerateShortUrlReq) (*GenerateShortUrlReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateShortUrl not implemented")
}
func (UnimplementedOneToolsServer) TimestampConvert(context.Context, *TimestampConvertReq) (*TimestampConvertReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimestampConvert not implemented")
}
func (UnimplementedOneToolsServer) HttpRequest(context.Context, *HttpRequestReq) (*HttpRequestReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HttpRequest not implemented")
}
func (UnimplementedOneToolsServer) mustEmbedUnimplementedOneToolsServer() {}

// UnsafeOneToolsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OneToolsServer will
// result in compilation errors.
type UnsafeOneToolsServer interface {
	mustEmbedUnimplementedOneToolsServer()
}

func RegisterOneToolsServer(s grpc.ServiceRegistrar, srv OneToolsServer) {
	s.RegisterService(&OneTools_ServiceDesc, srv)
}

func _OneTools_ResolveDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveDomainReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneToolsServer).ResolveDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneTools_ResolveDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneToolsServer).ResolveDomain(ctx, req.(*ResolveDomainReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneTools_GenerateShortUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateShortUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneToolsServer).GenerateShortUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneTools_GenerateShortUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneToolsServer).GenerateShortUrl(ctx, req.(*GenerateShortUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneTools_TimestampConvert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimestampConvertReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneToolsServer).TimestampConvert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneTools_TimestampConvert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneToolsServer).TimestampConvert(ctx, req.(*TimestampConvertReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneTools_HttpRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HttpRequestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneToolsServer).HttpRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneTools_HttpRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneToolsServer).HttpRequest(ctx, req.(*HttpRequestReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OneTools_ServiceDesc is the grpc.ServiceDesc for OneTools service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OneTools_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "oneTools.v1.oneTools",
	HandlerType: (*OneToolsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ResolveDomain",
			Handler:    _OneTools_ResolveDomain_Handler,
		},
		{
			MethodName: "GenerateShortUrl",
			Handler:    _OneTools_GenerateShortUrl_Handler,
		},
		{
			MethodName: "TimestampConvert",
			Handler:    _OneTools_TimestampConvert_Handler,
		},
		{
			MethodName: "HttpRequest",
			Handler:    _OneTools_HttpRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oneTools/v1/oneTools.proto",
}
