// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.14.0
// source: oneMonitor/v1/oneMonitor.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OneMonitor_CreateMonitorAccessToken_FullMethodName       = "/oneMonitor.v1.OneMonitor/CreateMonitorAccessToken"
	OneMonitor_ListMonitorAccessToken_FullMethodName         = "/oneMonitor.v1.OneMonitor/ListMonitorAccessToken"
	OneMonitor_DelMonitorAccessToken_FullMethodName          = "/oneMonitor.v1.OneMonitor/DelMonitorAccessToken"
	OneMonitor_ExistMonitorAccessToken_FullMethodName        = "/oneMonitor.v1.OneMonitor/ExistMonitorAccessToken"
	OneMonitor_PrometheusWebResourceDiscovery_FullMethodName = "/oneMonitor.v1.OneMonitor/PrometheusWebResourceDiscovery"
)

// OneMonitorClient is the client API for OneMonitor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OneMonitorClient interface {
	// 创建监控访问Token
	CreateMonitorAccessToken(ctx context.Context, in *CreateMonitorAccessTokenReq, opts ...grpc.CallOption) (*CreateMonitorAccessTokenReply, error)
	ListMonitorAccessToken(ctx context.Context, in *ListMonitorAccessTokenReq, opts ...grpc.CallOption) (*ListMonitorAccessTokenReply, error)
	DelMonitorAccessToken(ctx context.Context, in *DelMonitorAccessTokenReq, opts ...grpc.CallOption) (*DelMonitorAccessTokenReply, error)
	// 内部使用
	ExistMonitorAccessToken(ctx context.Context, in *ExistMonitorAccessTokenReq, opts ...grpc.CallOption) (*ExistMonitorAccessTokenReply, error)
	// Prometheus WebService Resource Discovery
	PrometheusWebResourceDiscovery(ctx context.Context, in *PrometheusWebResourceDiscoveryReq, opts ...grpc.CallOption) (*PrometheusWebResourceDiscoveryReply, error)
}

type oneMonitorClient struct {
	cc grpc.ClientConnInterface
}

func NewOneMonitorClient(cc grpc.ClientConnInterface) OneMonitorClient {
	return &oneMonitorClient{cc}
}

func (c *oneMonitorClient) CreateMonitorAccessToken(ctx context.Context, in *CreateMonitorAccessTokenReq, opts ...grpc.CallOption) (*CreateMonitorAccessTokenReply, error) {
	out := new(CreateMonitorAccessTokenReply)
	err := c.cc.Invoke(ctx, OneMonitor_CreateMonitorAccessToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneMonitorClient) ListMonitorAccessToken(ctx context.Context, in *ListMonitorAccessTokenReq, opts ...grpc.CallOption) (*ListMonitorAccessTokenReply, error) {
	out := new(ListMonitorAccessTokenReply)
	err := c.cc.Invoke(ctx, OneMonitor_ListMonitorAccessToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneMonitorClient) DelMonitorAccessToken(ctx context.Context, in *DelMonitorAccessTokenReq, opts ...grpc.CallOption) (*DelMonitorAccessTokenReply, error) {
	out := new(DelMonitorAccessTokenReply)
	err := c.cc.Invoke(ctx, OneMonitor_DelMonitorAccessToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneMonitorClient) ExistMonitorAccessToken(ctx context.Context, in *ExistMonitorAccessTokenReq, opts ...grpc.CallOption) (*ExistMonitorAccessTokenReply, error) {
	out := new(ExistMonitorAccessTokenReply)
	err := c.cc.Invoke(ctx, OneMonitor_ExistMonitorAccessToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oneMonitorClient) PrometheusWebResourceDiscovery(ctx context.Context, in *PrometheusWebResourceDiscoveryReq, opts ...grpc.CallOption) (*PrometheusWebResourceDiscoveryReply, error) {
	out := new(PrometheusWebResourceDiscoveryReply)
	err := c.cc.Invoke(ctx, OneMonitor_PrometheusWebResourceDiscovery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OneMonitorServer is the server API for OneMonitor service.
// All implementations must embed UnimplementedOneMonitorServer
// for forward compatibility
type OneMonitorServer interface {
	// 创建监控访问Token
	CreateMonitorAccessToken(context.Context, *CreateMonitorAccessTokenReq) (*CreateMonitorAccessTokenReply, error)
	ListMonitorAccessToken(context.Context, *ListMonitorAccessTokenReq) (*ListMonitorAccessTokenReply, error)
	DelMonitorAccessToken(context.Context, *DelMonitorAccessTokenReq) (*DelMonitorAccessTokenReply, error)
	// 内部使用
	ExistMonitorAccessToken(context.Context, *ExistMonitorAccessTokenReq) (*ExistMonitorAccessTokenReply, error)
	// Prometheus WebService Resource Discovery
	PrometheusWebResourceDiscovery(context.Context, *PrometheusWebResourceDiscoveryReq) (*PrometheusWebResourceDiscoveryReply, error)
	mustEmbedUnimplementedOneMonitorServer()
}

// UnimplementedOneMonitorServer must be embedded to have forward compatible implementations.
type UnimplementedOneMonitorServer struct {
}

func (UnimplementedOneMonitorServer) CreateMonitorAccessToken(context.Context, *CreateMonitorAccessTokenReq) (*CreateMonitorAccessTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMonitorAccessToken not implemented")
}
func (UnimplementedOneMonitorServer) ListMonitorAccessToken(context.Context, *ListMonitorAccessTokenReq) (*ListMonitorAccessTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMonitorAccessToken not implemented")
}
func (UnimplementedOneMonitorServer) DelMonitorAccessToken(context.Context, *DelMonitorAccessTokenReq) (*DelMonitorAccessTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelMonitorAccessToken not implemented")
}
func (UnimplementedOneMonitorServer) ExistMonitorAccessToken(context.Context, *ExistMonitorAccessTokenReq) (*ExistMonitorAccessTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistMonitorAccessToken not implemented")
}
func (UnimplementedOneMonitorServer) PrometheusWebResourceDiscovery(context.Context, *PrometheusWebResourceDiscoveryReq) (*PrometheusWebResourceDiscoveryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrometheusWebResourceDiscovery not implemented")
}
func (UnimplementedOneMonitorServer) mustEmbedUnimplementedOneMonitorServer() {}

// UnsafeOneMonitorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OneMonitorServer will
// result in compilation errors.
type UnsafeOneMonitorServer interface {
	mustEmbedUnimplementedOneMonitorServer()
}

func RegisterOneMonitorServer(s grpc.ServiceRegistrar, srv OneMonitorServer) {
	s.RegisterService(&OneMonitor_ServiceDesc, srv)
}

func _OneMonitor_CreateMonitorAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMonitorAccessTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneMonitorServer).CreateMonitorAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneMonitor_CreateMonitorAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneMonitorServer).CreateMonitorAccessToken(ctx, req.(*CreateMonitorAccessTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneMonitor_ListMonitorAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMonitorAccessTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneMonitorServer).ListMonitorAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneMonitor_ListMonitorAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneMonitorServer).ListMonitorAccessToken(ctx, req.(*ListMonitorAccessTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneMonitor_DelMonitorAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelMonitorAccessTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneMonitorServer).DelMonitorAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneMonitor_DelMonitorAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneMonitorServer).DelMonitorAccessToken(ctx, req.(*DelMonitorAccessTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneMonitor_ExistMonitorAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistMonitorAccessTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneMonitorServer).ExistMonitorAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneMonitor_ExistMonitorAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneMonitorServer).ExistMonitorAccessToken(ctx, req.(*ExistMonitorAccessTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OneMonitor_PrometheusWebResourceDiscovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrometheusWebResourceDiscoveryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OneMonitorServer).PrometheusWebResourceDiscovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OneMonitor_PrometheusWebResourceDiscovery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OneMonitorServer).PrometheusWebResourceDiscovery(ctx, req.(*PrometheusWebResourceDiscoveryReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OneMonitor_ServiceDesc is the grpc.ServiceDesc for OneMonitor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OneMonitor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "oneMonitor.v1.OneMonitor",
	HandlerType: (*OneMonitorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMonitorAccessToken",
			Handler:    _OneMonitor_CreateMonitorAccessToken_Handler,
		},
		{
			MethodName: "ListMonitorAccessToken",
			Handler:    _OneMonitor_ListMonitorAccessToken_Handler,
		},
		{
			MethodName: "DelMonitorAccessToken",
			Handler:    _OneMonitor_DelMonitorAccessToken_Handler,
		},
		{
			MethodName: "ExistMonitorAccessToken",
			Handler:    _OneMonitor_ExistMonitorAccessToken_Handler,
		},
		{
			MethodName: "PrometheusWebResourceDiscovery",
			Handler:    _OneMonitor_PrometheusWebResourceDiscovery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oneMonitor/v1/oneMonitor.proto",
}
