// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/oneMonitor/v1/oneMonitor.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PrometheusServiceDiscoveryInstance with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PrometheusServiceDiscoveryInstance) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PrometheusServiceDiscoveryInstance
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PrometheusServiceDiscoveryInstanceMultiError, or nil if none found.
func (m *PrometheusServiceDiscoveryInstance) ValidateAll() error {
	return m.validate(true)
}

func (m *PrometheusServiceDiscoveryInstance) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Labels

	if len(errors) > 0 {
		return PrometheusServiceDiscoveryInstanceMultiError(errors)
	}

	return nil
}

// PrometheusServiceDiscoveryInstanceMultiError is an error wrapping multiple
// validation errors returned by
// PrometheusServiceDiscoveryInstance.ValidateAll() if the designated
// constraints aren't met.
type PrometheusServiceDiscoveryInstanceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrometheusServiceDiscoveryInstanceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrometheusServiceDiscoveryInstanceMultiError) AllErrors() []error { return m }

// PrometheusServiceDiscoveryInstanceValidationError is the validation error
// returned by PrometheusServiceDiscoveryInstance.Validate if the designated
// constraints aren't met.
type PrometheusServiceDiscoveryInstanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrometheusServiceDiscoveryInstanceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrometheusServiceDiscoveryInstanceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrometheusServiceDiscoveryInstanceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrometheusServiceDiscoveryInstanceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrometheusServiceDiscoveryInstanceValidationError) ErrorName() string {
	return "PrometheusServiceDiscoveryInstanceValidationError"
}

// Error satisfies the builtin error interface
func (e PrometheusServiceDiscoveryInstanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrometheusServiceDiscoveryInstance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrometheusServiceDiscoveryInstanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrometheusServiceDiscoveryInstanceValidationError{}

// Validate checks the field values on CreateMonitorAccessTokenReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMonitorAccessTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMonitorAccessTokenReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMonitorAccessTokenReqMultiError, or nil if none found.
func (m *CreateMonitorAccessTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMonitorAccessTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := CreateMonitorAccessTokenReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := CreateMonitorAccessTokenReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := CreateMonitorAccessTokenReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := CreateMonitorAccessTokenReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Describe

	if len(errors) > 0 {
		return CreateMonitorAccessTokenReqMultiError(errors)
	}

	return nil
}

// CreateMonitorAccessTokenReqMultiError is an error wrapping multiple
// validation errors returned by CreateMonitorAccessTokenReq.ValidateAll() if
// the designated constraints aren't met.
type CreateMonitorAccessTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMonitorAccessTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMonitorAccessTokenReqMultiError) AllErrors() []error { return m }

// CreateMonitorAccessTokenReqValidationError is the validation error returned
// by CreateMonitorAccessTokenReq.Validate if the designated constraints
// aren't met.
type CreateMonitorAccessTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMonitorAccessTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMonitorAccessTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMonitorAccessTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMonitorAccessTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMonitorAccessTokenReqValidationError) ErrorName() string {
	return "CreateMonitorAccessTokenReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMonitorAccessTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMonitorAccessTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMonitorAccessTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMonitorAccessTokenReqValidationError{}

// Validate checks the field values on CreateMonitorAccessTokenReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMonitorAccessTokenReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMonitorAccessTokenReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateMonitorAccessTokenReplyMultiError, or nil if none found.
func (m *CreateMonitorAccessTokenReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMonitorAccessTokenReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return CreateMonitorAccessTokenReplyMultiError(errors)
	}

	return nil
}

// CreateMonitorAccessTokenReplyMultiError is an error wrapping multiple
// validation errors returned by CreateMonitorAccessTokenReply.ValidateAll()
// if the designated constraints aren't met.
type CreateMonitorAccessTokenReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMonitorAccessTokenReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMonitorAccessTokenReplyMultiError) AllErrors() []error { return m }

// CreateMonitorAccessTokenReplyValidationError is the validation error
// returned by CreateMonitorAccessTokenReply.Validate if the designated
// constraints aren't met.
type CreateMonitorAccessTokenReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMonitorAccessTokenReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMonitorAccessTokenReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMonitorAccessTokenReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMonitorAccessTokenReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMonitorAccessTokenReplyValidationError) ErrorName() string {
	return "CreateMonitorAccessTokenReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMonitorAccessTokenReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMonitorAccessTokenReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMonitorAccessTokenReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMonitorAccessTokenReplyValidationError{}

// Validate checks the field values on ListMonitorAccessTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMonitorAccessTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMonitorAccessTokenReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMonitorAccessTokenReqMultiError, or nil if none found.
func (m *ListMonitorAccessTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMonitorAccessTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := ListMonitorAccessTokenReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := ListMonitorAccessTokenReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := ListMonitorAccessTokenReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := ListMonitorAccessTokenReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListMonitorAccessTokenReqMultiError(errors)
	}

	return nil
}

// ListMonitorAccessTokenReqMultiError is an error wrapping multiple validation
// errors returned by ListMonitorAccessTokenReq.ValidateAll() if the
// designated constraints aren't met.
type ListMonitorAccessTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMonitorAccessTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMonitorAccessTokenReqMultiError) AllErrors() []error { return m }

// ListMonitorAccessTokenReqValidationError is the validation error returned by
// ListMonitorAccessTokenReq.Validate if the designated constraints aren't met.
type ListMonitorAccessTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMonitorAccessTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMonitorAccessTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMonitorAccessTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMonitorAccessTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMonitorAccessTokenReqValidationError) ErrorName() string {
	return "ListMonitorAccessTokenReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListMonitorAccessTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMonitorAccessTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMonitorAccessTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMonitorAccessTokenReqValidationError{}

// Validate checks the field values on ListMonitorAccessTokenReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMonitorAccessTokenReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMonitorAccessTokenReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMonitorAccessTokenReplyMultiError, or nil if none found.
func (m *ListMonitorAccessTokenReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMonitorAccessTokenReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMonitorAccessTokens() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMonitorAccessTokenReplyValidationError{
						field:  fmt.Sprintf("MonitorAccessTokens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMonitorAccessTokenReplyValidationError{
						field:  fmt.Sprintf("MonitorAccessTokens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMonitorAccessTokenReplyValidationError{
					field:  fmt.Sprintf("MonitorAccessTokens[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListMonitorAccessTokenReplyMultiError(errors)
	}

	return nil
}

// ListMonitorAccessTokenReplyMultiError is an error wrapping multiple
// validation errors returned by ListMonitorAccessTokenReply.ValidateAll() if
// the designated constraints aren't met.
type ListMonitorAccessTokenReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMonitorAccessTokenReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMonitorAccessTokenReplyMultiError) AllErrors() []error { return m }

// ListMonitorAccessTokenReplyValidationError is the validation error returned
// by ListMonitorAccessTokenReply.Validate if the designated constraints
// aren't met.
type ListMonitorAccessTokenReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMonitorAccessTokenReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMonitorAccessTokenReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMonitorAccessTokenReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMonitorAccessTokenReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMonitorAccessTokenReplyValidationError) ErrorName() string {
	return "ListMonitorAccessTokenReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListMonitorAccessTokenReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMonitorAccessTokenReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMonitorAccessTokenReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMonitorAccessTokenReplyValidationError{}

// Validate checks the field values on DelMonitorAccessTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelMonitorAccessTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelMonitorAccessTokenReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelMonitorAccessTokenReqMultiError, or nil if none found.
func (m *DelMonitorAccessTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelMonitorAccessTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserUuid()) < 1 {
		err := DelMonitorAccessTokenReqValidationError{
			field:  "UserUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := DelMonitorAccessTokenReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := DelMonitorAccessTokenReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := DelMonitorAccessTokenReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUuid()) < 1 {
		err := DelMonitorAccessTokenReqValidationError{
			field:  "Uuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DelMonitorAccessTokenReqMultiError(errors)
	}

	return nil
}

// DelMonitorAccessTokenReqMultiError is an error wrapping multiple validation
// errors returned by DelMonitorAccessTokenReq.ValidateAll() if the designated
// constraints aren't met.
type DelMonitorAccessTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelMonitorAccessTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelMonitorAccessTokenReqMultiError) AllErrors() []error { return m }

// DelMonitorAccessTokenReqValidationError is the validation error returned by
// DelMonitorAccessTokenReq.Validate if the designated constraints aren't met.
type DelMonitorAccessTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelMonitorAccessTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelMonitorAccessTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelMonitorAccessTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelMonitorAccessTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelMonitorAccessTokenReqValidationError) ErrorName() string {
	return "DelMonitorAccessTokenReqValidationError"
}

// Error satisfies the builtin error interface
func (e DelMonitorAccessTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelMonitorAccessTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelMonitorAccessTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelMonitorAccessTokenReqValidationError{}

// Validate checks the field values on DelMonitorAccessTokenReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DelMonitorAccessTokenReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelMonitorAccessTokenReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelMonitorAccessTokenReplyMultiError, or nil if none found.
func (m *DelMonitorAccessTokenReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DelMonitorAccessTokenReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return DelMonitorAccessTokenReplyMultiError(errors)
	}

	return nil
}

// DelMonitorAccessTokenReplyMultiError is an error wrapping multiple
// validation errors returned by DelMonitorAccessTokenReply.ValidateAll() if
// the designated constraints aren't met.
type DelMonitorAccessTokenReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelMonitorAccessTokenReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelMonitorAccessTokenReplyMultiError) AllErrors() []error { return m }

// DelMonitorAccessTokenReplyValidationError is the validation error returned
// by DelMonitorAccessTokenReply.Validate if the designated constraints aren't met.
type DelMonitorAccessTokenReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelMonitorAccessTokenReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelMonitorAccessTokenReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelMonitorAccessTokenReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelMonitorAccessTokenReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelMonitorAccessTokenReplyValidationError) ErrorName() string {
	return "DelMonitorAccessTokenReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DelMonitorAccessTokenReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelMonitorAccessTokenReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelMonitorAccessTokenReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelMonitorAccessTokenReplyValidationError{}

// Validate checks the field values on PrometheusWebResourceDiscoveryReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PrometheusWebResourceDiscoveryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PrometheusWebResourceDiscoveryReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PrometheusWebResourceDiscoveryReqMultiError, or nil if none found.
func (m *PrometheusWebResourceDiscoveryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PrometheusWebResourceDiscoveryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrgUuid()) < 1 {
		err := PrometheusWebResourceDiscoveryReqValidationError{
			field:  "OrgUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductUuid()) < 1 {
		err := PrometheusWebResourceDiscoveryReqValidationError{
			field:  "ProductUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProductEnvUuid()) < 1 {
		err := PrometheusWebResourceDiscoveryReqValidationError{
			field:  "ProductEnvUuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetToken()) < 1 {
		err := PrometheusWebResourceDiscoveryReqValidationError{
			field:  "Token",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PrometheusWebResourceDiscoveryReqMultiError(errors)
	}

	return nil
}

// PrometheusWebResourceDiscoveryReqMultiError is an error wrapping multiple
// validation errors returned by
// PrometheusWebResourceDiscoveryReq.ValidateAll() if the designated
// constraints aren't met.
type PrometheusWebResourceDiscoveryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrometheusWebResourceDiscoveryReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrometheusWebResourceDiscoveryReqMultiError) AllErrors() []error { return m }

// PrometheusWebResourceDiscoveryReqValidationError is the validation error
// returned by PrometheusWebResourceDiscoveryReq.Validate if the designated
// constraints aren't met.
type PrometheusWebResourceDiscoveryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrometheusWebResourceDiscoveryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrometheusWebResourceDiscoveryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrometheusWebResourceDiscoveryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrometheusWebResourceDiscoveryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrometheusWebResourceDiscoveryReqValidationError) ErrorName() string {
	return "PrometheusWebResourceDiscoveryReqValidationError"
}

// Error satisfies the builtin error interface
func (e PrometheusWebResourceDiscoveryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrometheusWebResourceDiscoveryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrometheusWebResourceDiscoveryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrometheusWebResourceDiscoveryReqValidationError{}

// Validate checks the field values on PrometheusWebResourceDiscoveryReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PrometheusWebResourceDiscoveryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PrometheusWebResourceDiscoveryReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PrometheusWebResourceDiscoveryReplyMultiError, or nil if none found.
func (m *PrometheusWebResourceDiscoveryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PrometheusWebResourceDiscoveryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetInstances() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PrometheusWebResourceDiscoveryReplyValidationError{
						field:  fmt.Sprintf("Instances[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PrometheusWebResourceDiscoveryReplyValidationError{
						field:  fmt.Sprintf("Instances[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PrometheusWebResourceDiscoveryReplyValidationError{
					field:  fmt.Sprintf("Instances[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PrometheusWebResourceDiscoveryReplyMultiError(errors)
	}

	return nil
}

// PrometheusWebResourceDiscoveryReplyMultiError is an error wrapping multiple
// validation errors returned by
// PrometheusWebResourceDiscoveryReply.ValidateAll() if the designated
// constraints aren't met.
type PrometheusWebResourceDiscoveryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrometheusWebResourceDiscoveryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrometheusWebResourceDiscoveryReplyMultiError) AllErrors() []error { return m }

// PrometheusWebResourceDiscoveryReplyValidationError is the validation error
// returned by PrometheusWebResourceDiscoveryReply.Validate if the designated
// constraints aren't met.
type PrometheusWebResourceDiscoveryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrometheusWebResourceDiscoveryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrometheusWebResourceDiscoveryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrometheusWebResourceDiscoveryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrometheusWebResourceDiscoveryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrometheusWebResourceDiscoveryReplyValidationError) ErrorName() string {
	return "PrometheusWebResourceDiscoveryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e PrometheusWebResourceDiscoveryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrometheusWebResourceDiscoveryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrometheusWebResourceDiscoveryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrometheusWebResourceDiscoveryReplyValidationError{}

// Validate checks the field values on
// ListMonitorAccessTokenReply_MonitorAccessToken with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListMonitorAccessTokenReply_MonitorAccessToken) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListMonitorAccessTokenReply_MonitorAccessToken with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// ListMonitorAccessTokenReply_MonitorAccessTokenMultiError, or nil if none found.
func (m *ListMonitorAccessTokenReply_MonitorAccessToken) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMonitorAccessTokenReply_MonitorAccessToken) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for Token

	// no validation rules for Describe

	// no validation rules for CreateTime

	if len(errors) > 0 {
		return ListMonitorAccessTokenReply_MonitorAccessTokenMultiError(errors)
	}

	return nil
}

// ListMonitorAccessTokenReply_MonitorAccessTokenMultiError is an error
// wrapping multiple validation errors returned by
// ListMonitorAccessTokenReply_MonitorAccessToken.ValidateAll() if the
// designated constraints aren't met.
type ListMonitorAccessTokenReply_MonitorAccessTokenMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMonitorAccessTokenReply_MonitorAccessTokenMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMonitorAccessTokenReply_MonitorAccessTokenMultiError) AllErrors() []error { return m }

// ListMonitorAccessTokenReply_MonitorAccessTokenValidationError is the
// validation error returned by
// ListMonitorAccessTokenReply_MonitorAccessToken.Validate if the designated
// constraints aren't met.
type ListMonitorAccessTokenReply_MonitorAccessTokenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMonitorAccessTokenReply_MonitorAccessTokenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMonitorAccessTokenReply_MonitorAccessTokenValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListMonitorAccessTokenReply_MonitorAccessTokenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMonitorAccessTokenReply_MonitorAccessTokenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMonitorAccessTokenReply_MonitorAccessTokenValidationError) ErrorName() string {
	return "ListMonitorAccessTokenReply_MonitorAccessTokenValidationError"
}

// Error satisfies the builtin error interface
func (e ListMonitorAccessTokenReply_MonitorAccessTokenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMonitorAccessTokenReply_MonitorAccessToken.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMonitorAccessTokenReply_MonitorAccessTokenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMonitorAccessTokenReply_MonitorAccessTokenValidationError{}
